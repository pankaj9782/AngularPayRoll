{"version":3,"sources":["node_modules/@syncfusion/ej2-base/dist/es6/ej2-base.es2015.js","node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js","node_modules/@syncfusion/ej2-buttons/dist/es6/ej2-buttons.es2015.js","node_modules/@syncfusion/ej2-lists/dist/es6/ej2-lists.es2015.js","node_modules/@syncfusion/ej2-popups/dist/es6/ej2-popups.es2015.js","node_modules/@syncfusion/ej2-inputs/dist/es6/ej2-inputs.es2015.js","node_modules/@syncfusion/ej2-dropdowns/dist/es6/ej2-dropdowns.es2015.js","node_modules/sweetalert2/dist/sweetalert2.all.js","src/app/themes/sidebar/sidebar.component.html","src/app/themes/sidebar/sidebar.component.ts","src/app/themes/header/header.component.html","src/app/themes/header/header.component.ts","src/app/themes/footer/footer.component.ts","src/app/themes/footer/footer.component.html","src/app/pages/pages.component.ts","src/app/pages/pages.component.html","src/app/pages/update-profile/update-profile.component.html","src/app/pages/update-profile/update-profile.component.ts","src/app/pages/pages-routing.module.ts","src/app/pages/pages.module.ts","src/app/pages/Payment Heads/payment-heads.component.ts","src/app/pages/Payment Heads/payment-heads.component.html","src/app/pages/Payment Heads/payment-heads-service/payment-heads-api.service.ts","src/app/pages/Payment Heads/list-payment-heads/list-payment-heads.component.html","src/app/pages/Payment Heads/list-payment-heads/list-payment-heads.component.ts","src/app/pages/Payment Heads/add-payment-heads/add-payment-heads.component.html","src/app/pages/Payment Heads/update-payment-heads/update-payment-heads.component.html","src/app/pages/Payment Heads/payment-heads-routing.module.ts","src/app/pages/Payment Heads/add-payment-heads/add-payment-heads.component.ts","src/app/pages/Payment Heads/update-payment-heads/update-payment-heads.component.ts","src/app/pages/Payment Heads/payment-heads.module.ts","src/app/pages/employee-wizard/services/employee.service.ts"],"names":["uid","createInstance","classFunction","params","arrayParam","unshift","undefined","Function","prototype","bind","apply","getValue","nameSpace","obj","value","splits","replace","split","i","length","isUndefined","setValue","key","keys","start","fromObj","isNullOrUndefined","deleteObject","isObject","constructor","merge","source","destination","temrObj","tempProp","Object","deepmerge","indexOf","Array","isArray","extend","copied","first","second","deep","result","arguments","obj1","forEach","clone","src","copy","hasOwnProperty","getUniqueID","definedName","debounce","eventFunction","delay","out","args","later","this","clearTimeout","setTimeout","compareElementParent","child","parent","document","parentNode","throwError","message","Error","e","stack","formatUnit","isBlazor","getElement","element","Node","getInstance","component","elem","querySelector","inst","defaultNumberingSystem","defaultNumberSymbols","latnNumberSystem","ParserBase","cName","numberingSystems","prop","propKeys","res","props","regexStr","map","str","join","RegExp","matchKeys","ret","val","len","regex","nSystem","curObj","numberSystem","needSymbols","blazorMode","cur","getDefaultNumberingSystem","digits","numericPair","reverseObject","numberParseRegex","constructRegex","numericRegex","symbolNumberSystem","symbolMatch","getSymbolMatch","isNumber","mapper","numberSymbols","timeSeparator","nPair","nRegex","blazorCurrencyData","HijriParser","dateCorrection","getHijriDate","gDate","day","getDate","month","getMonth","year","getFullYear","tMonth","tYear","yPrefix","Math","floor","julilanOffset","julianNumber","b","c","d","tempMonth","modifiedJulianDate","z","cyc","j","iy","im","tempDay","iln","ii","hYear","hmonth","hDate","date","toGregorian","a","gDay","gMonth","gYear","Date","abbreviateRegexGlobal","weekdayKey","timeSetter","m","h","H","s","f","datePartMatcher","DateFormat","culture","option","cldr","dependable","IntlBase","getDependables","calendar","dateObject","formatOptions","isIslamic","islamicRegex","test","resPattern","format","getResultantPattern","skeleton","type","dateSeperator","getDateSeparator","ConvertDateToWeekFormat","pattern","numMapper","getNumberMapper","parserObject","getNumberingSystem","patternMatch","match","char","weekday","days","monthIndex","designator","era","timeZone","isNaN","intDateFormatter","options","matches","dateParseRegex","dObject","getCurrentDateValue","curval","processNumber","curvalstr","curstr","getDay","toString","substring","curlength","substr","desig","getHours","dec","retu","timezone","getTimezoneOffset","hourFormat","gmtZeroFormat","getTimeZoneValue","gmtFormat","getWeekOfYear","checkTwodigitNumber","convertValueParts","latnParseRegex","tVal","curPattern","no","abs","ishour","errorText","mapper$1","NumberFormat","symbolPattern","fOptions","cOptions","dOptions","numberMapper","currencySymbol","getCurrencySymbol","numericObject","currency","defaultCurrencyCode","altSymbol","percentSymbol","minusSymbol","symbols","formatRegex","customFormat","getProperNumericSkeleton","isCurrency","isPercent","getSymbolPattern","isAccount","groupOne","checkValueRange","maximumSignificantDigits","minimumSignificantDigits","maximumFractionDigits","minimumFractionDigits","fractionDigits","useGrouping","defaultCurrency","nData","getFormatData","pData","groupSeparator","groupData","getGroupingDetails","minimumFraction","mval","maximumFraction","mfrac","lfrac","isFinite","intNumberFormatter","negativeDataRegex","p","lastIndexOf","temp","primary","secondary","val1","val2","checkbothExist","isFraction","decide","dint","str1","str2","checkRange","text","range","curData","zeroData","fValue","processSignificantDigits","processFraction","minimumIntegerDigits","processMinimumIntegers","toExponential","groupNumbers","nlead","nend","min","max","tn","toPrecision","level1","sep","decimalSymbol","level2","flag","prefix","slice","toFixed","lead","latnRegex$1","timeSetter$1","minute","hour","milliseconds","parseRegex","groupRegex","Observer","context","ranArray","boundedEvents","property","handler","id","cntxt","notExist","isHandlerPresent","push","curObject","splice","indexLocation","argument","successHandler","errorHandler","call","name","window","blazorCallback","objs","index","isTrigger","promise","then","data","isJson","JSON","parse","dateReviver","catch","onIntlChange","cldrData","Internationalization","cultureName","dateFormat","getCulture","numberFormatter","hourOnly","numOptions","getCurrentNumericOptions","parseOptions","regexString","evalposition","gmtCorrection","zCorrectTemp","isgmtTraversed","nRegx","canUpdate","charKey","optional","weekData","weekObject","monthData","hour12","periodValur","tzone","hpattern","parseTimeZoneRegx","pos","parserRegex","parsedDateParts","internalDateParse","dobj","tDate","ystrig","is2DigitYear","parseInt","getDateObject","setMilliseconds","tKeys","y","setFullYear","tValue","setDate","pDate","lDate","lastDay","setHours","tzValue","setMinutes","getMinutes","num","retOptions","matchString","internalNumberParser","toUpperCase","toLowerCase","tmatch","getZoneValue","tZone","splitStr","cRegex","ival","dateParser","symbolpattern","custom","symbolRegex","getSymbolRegex","infinity","getParsedNumber","isNegative","tempValue","end","Infinity","NaN","exponent","parseFloat","numberParser","getNumberFormat","getDateFormat","getDateParser","getNumberParser","isExcelFormat","getActualDateTimeFormat","isExcel","getActualNumberFormat","getWeekData","getNumericObject","locale","numObject","numSystem","symbPattern","blazorCultureFormats","customRegex","fractionRegex","patternRegex","'","dateConverterMapper","firstDayMapper","currencyFormatRegex","curWithoutNumberRegex","typeMapper","0","1","blazorCulture","iType","compareBlazorDateFormats","basicPatterns","dPattern","tPattern","mode","calendartype","getMainObject","defaultObject","curFormatMapper","patternMatcher","needFraction","cSymbol","fractionOnly","changeCurrencySymbol","groupPattern","fraction","fmatch","sym","currencyCode","customNumberFormat","integerPart","fractionPart","isCurrencyPercent","parts","actual","symbol","part","loc","blazorDefaultObject","3","4","5","C","P","N","A","E","formatSplit","dateObj","actualPattern","timeZonePattern","tLength","minFrac","curMatch","curCode","hasNegativePattern","defaultMinimum","minDigits","maxDigits","diff","integer","x","cPattern","firstDay","iCulture","replaceBlazorCurrency","aCurrency","rCurrency","iCurrency","weeknum","newYear","daynum","getTime","nday","headerRegex","Ajax","async","contentType","emitError","url","eventArgs","cancel","httpRequest","Promise","resolve","reject","XMLHttpRequest","onreadystatechange","stateChange","onLoad","onload","onProgress","onprogress","onAbort","onabort","onError","onerror","onUploadProgress","upload","open","setRequestHeader","beforeSend","send","onSuccess","reason","onFailure","responseText","dataType","error","readyState","status","failureHandler","statusText","responseHeaders","header","headers","exec","getAllResponseHeaders","REGX_MOBILE","REGX_IE","REGX_IE11","REGX_IOS","REGX_IOS7","REGX_ANDROID","REGX_WINDOWS","REGX_VERSION","REGX_BROWSER","OPERA","EDGE","CHROME","PANTHOMEJS","SAFARI","WEBKIT","MSIE","MOZILLA","browserDetails","Browser","browserInfo","clientInfo","userAgent","version","language","navigator","event","events","isPointer","isTouch","isDevice","move","getEvent","regX","uA","info","extractBrowserDetail","maxTouchPoints","isMSPointer","isWebView","cordova","PhoneGap","phonegap","forge","touchStartEvent","getTouchStartEvent","touchMoveEvent","getTouchMoveEvent","touchEndEvent","getTouchEndEvent","touchCancelEvent","getTouchCancelEvent","EventHandler","__eventList","eventName","listener","bindTo","intDebounce","debounceListener","eventData","addOrGetEventData","isIE","addEventListener","passive","some","removeEventListener","copyData","shift","eventProp","LINES","QUOTES","IF_STMT","ELSEIF_STMT","ELSE_STMT","FOR_STMT","IF_OR_FOR","CALL_FUNCTION","NOT_NUMBER","WORD","DBL_QUOTED_STR","WORDIF","exp","ARR_OBJ","SINGLE_SLASH","DOUBLE_SLASH","WORDFUNC","WINDOWFUNC","addNameSpace","addNS","ignoreList","NameSpaceForspecialChar","SlashReplace","tempStr","HandleSpecialCharArrObj","nameSpaceNew","trim","quotes","HAS_ROW","HAS_SVG","blazorTemplates","getRandomId","random","compile$$1","templateString","helper","compiler","engineObj","compile","propName","templateId","isStringTemplate","createElement","innerHTML","childNodes","updateBlazorTemplate","templateName","comp","isEmpty","callBack","resetBlazorTemplate","templateDiv","getElementById","innerTemplates","getElementsByClassName","tempId","getAttribute","tempElement","appendChild","template","evalExpResult","varCOunt","localKeys","isClass","singleSpace","cnt","offset","matchStr","rlStr","strs","mtc","fnStr","fNameSpace","ftArray","splRegexp","arrObj","simpleRegex","multipleSplitRegex","idClassSelector","selectMapper","assigner","className","tagName","emptyElements","blockElements","inlineElement","selfClosingElements","fillAttrs","cspElement","nameMapper","startRegex","endRegex","attributeRegex","VirtualDOM","assignParent","childrens","detach","children","processSelector","selector","curMapper","filter","canPush","accessElement","ele","selectAll","immediateParent","matched","expected","actualValue","concat","ConvertHTMLToJSon","htmlString","isText","results","tagArray","nodeArray","lastVal","getLastValue","contains","all","iterateText","iterateEndTag","iterateStartTag","tagIndex","rest","isSelfTag","attrs","names","valArr","vObj","styleSplit","tagObject","attributes","node","arr","properties","extended","styles","style","append","fromElements","toElement","prepend","vDomSelector","iSelector","curColl","isDescendant","curSelector","splitSelector","curMap","descendent","dSelector","dParent","sel","descendentChild","iCurSelector","curParent","cloneNode","setStyleAttribute","SVG_REG","createElementNS","setAttribute","addClass","elements","classes","classList","getClassList","curClass","add","removeClass","classArr","remove","isVisible","visibility","offsetWidth","isEval","docFrag","createDocumentFragment","insertBefore","firstElementChild","executeScript","querySelectorAll","script","head","removeChild","clearEvents","iKey","select","needsVDOM","closest","el","nodeType","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","isColEName","Base","isRendered","isComplexArraySetter","isServerRendered","allowServerDataBinding","isProtectedOnChange","changedProperties","oldProperties","bulkChanges","refreshing","ignoreCollectionWatch","finalUpdate","childChangedProperties","modelObserver","addInstance","setProperties","isDestroyed","muteOnChange","prevDetection","dataBind","callChildDataBind","getOwnPropertyNames","newChanges","oldChanges","clearChanges","onPropertyChanged","newValue","oldValue","unbind","Uint16Array","msCrypto","crypto","getRandomValues","secret","messageHandler","postMessage","on","off","notify","moduleClass","getModuleName","ej2_instances","destroy","getComponent","instance","getObject","curKey","defaultValue","getObjectArray","isSetter","isFactory","curType","propertyGetter","propertySetter","oldVal","saveChanges","complexGetter","complexSetter","complexArrayGetter","defCollection","ignore","controlParent","extendFunc","descriptor","complexArrayDefinedCallback","configurable","defineProperty","complexArraySetter","oldValueCollection","newValCollection","dFunc","keyString","getParentKey","model","getArrayModel","serverDataBind","ejsAction","isControlParent","arrayFunction","modelObject","Property","target","propertyDescriptor","set","get","enumerable","addPropertyCollection","Complex","Collection","Event$1","eventDescriptor","finalContext","getParentContext","curText","NotifyPropertyChanges","classConstructor","propertyType","propList","complexProps","colProps","propNames","complexPropNames","colPropNames","eventNames","propertyName","Animation_1","__decorate","decorators","desc","r","getOwnPropertyDescriptor","Reflect","decorate","Animation","super","easing","ease","linear","easeIn","easeOut","easeInOut","elasticInOut","elasticIn","elasticOut","getModel","delayAnimation","animation","removeAttribute","animationId","frameId","cancelAnimationFrame","applyAnimation","timeStamp","step","timerId","startTime","prevTimeStamp","duration","startAnimation","begin","avg","timingFunction","progress","requestAnimationFrame","performance","now","fail","newProp","oldProp","rippleEffect","rippleOptions","done","rippleModel","rippleFlag","isCenterRipple","isRippleEnabled","rippleHandler","rippleUpHandler","rippleLeaveHandler","getBoundingClientRect","offsetX","pageX","body","scrollLeft","offsetY","pageY","scrollTop","documentElement","left","right","top","bottom","radius","sqrt","diameter","rippleElement","getComputedStyle","getPropertyValue","transform","removeRipple","rippleElements","opacity","enableRipple","isRipple","ModuleLoader","loadedModules","requiredModules","moduleList","reqLength","clearUnusedModule","modl","module","modName","member","isModuleLoaded","moduleObject","memberName","getMemberName","isProperty","loadedModule","clean","modules","usedModules","arg","removableModule","mod","ChildProperty","parentObj","isParentArray","updateChange","updateTimeOut","changeTime","curIndex","restrictServerDataBind","isSaveChanges","action","valueLength","__decorate$1","lastPageID","componentCount","lastHistoryLen","Component","randomId","needsID","isReactHybrid","enableRtl","moduleLoader","localObserver","detectFunction","appendTo","enablePersistence","setPersistData","trigger","preRender","injectModules","render","mount","actualElement","mergePersistData","accessMount","wrapperElement","injectedModules","isVDOM","setState","currentContext","calls","inject","localStorage","getItem","setItem","getPersistData","isHistoryChanged","pageID","location","href","history","hash","charCodeAt","persistObj","objValue","getActualProperties","stringify","iterateJsonProperties","newObj","newList","Draggable_1","__decorate$2","defaultPosition","isDraggedObject","isDragged","Position","Draggable","dragLimit","getDefaultPosition","borderWidth","padding","diffX","prevLeft","prevTop","dragProcessStarted","tapHoldTimer","externalInitialize","diffY","parentScrollX","parentScrollY","droppables","toggleEvents","scope","isUnWire","handle","enableTapHold","mobileInitialize","initialize","evt","currentTarget","removeTapholdTimer","tapHoldThreshold","axis","getScrollableParent","curTarget","currentStateTarget","isDragStarted","abort","abortSelectors","preventDefault","changedTouches","intCoord","getCoordinates","initialPosition","getScrollableValues","clientX","clientY","relativeXPosition","relativeYPosition","intDragStart","intDestroy","isChangeTouch","intCordinate","styleProp","margin","marginLeft","marginTop","marginRight","marginBottom","dragTarget","intClosest","calculateParentPosition","position","getMousePosition","isDragScroll","distance","getHelperElement","dragTargetElement","helperElement","parentClientRect","offsetParent","dragStart","getProperTargetElement","bindEvents","dragElement","dragArea","setDragArea","enableTailMode","posValue","getProcessedPositionValue","dragElePosition","getDragPosition","bindDragEvents","intDrag","intDragStop","setGlobalDroppables","offsetTop","offsetLeft","width","height","offsetHeight","pageYOffset","pageXOffset","innerHeight","innerWidth","queryPositionInfo","rect","docHeight","getDocumentWidthHeight","docWidth","drag","eleObj","checkTargetElement","hoverObject","triggerOutFunction","dragData","intOver","tLeft","tTop","pagex","pagey","dLeft","dTop","skipDistanceCheck","helperWidth","helperHeight","draEleTop","draEleLeft","iTop","iLeft","dragValue","elementInViewport","enableAutoScroll","scrollIntoView","intOut","docBody","docEle","dragStop","dragStopCalled","intDrop","change","eleWidthBound","eleHeightBound","elementArea","scrollWidth","scrollHeight","tborder","tpadding","lowerKey","prevStyle","pointerEvents","elementFromPoint","isdragscroll","dragEle","srcElement","isOffsetParent","cursorAt","sender","reset","draggable","draggedElement","dropIns","getDropInstance","parentElement","drop","eleInst","__decorate$3","Droppable","mouseOver","wireEvents","area","accept","isDrag","isDropArea","canDrop","droppedElement","display","coord","KeyboardEvents_1","__decorate$4","keyCode","KeyboardEvents","keyPressHandler","isAltKey","altKey","isCtrlKey","ctrlKey","isShiftKey","shiftKey","curkeyCode","which","keyConfigs","configCollection","rconfig","rKeyObj","getKeyConfigData","keyAction","unwireEvents","config","configCache","keyData","Number","getKeyCode","keyVal","L10n","controlName","localeStrings","setLocale","intLocale","intGetControlConstant","currentLocale","localeObject","__decorate$5","SwipeSettings","swipeRegex","Touch","touchAction","tapCount","startEvent","point","updateChangeTouches","isTouchMoved","movedDirection","startPoint","lastMovedPoint","startEventData","hScrollLocked","vScrollLocked","tStampStart","timeOutTapHold","tapHoldEvent","moveEvent","endEvent","cancelEvent","movedPoint","eScrollArgs","calcScrollPoints","startEvents","originalEvent","startX","startY","distanceX","distanceY","scrollDirection","velocity","getVelocity","timeOutTap","swipeFn","tap","tapThreshold","modeclear","endPoint","calcPoints","swipeArgs","swipeDirection","eSwipeArgs","tDistance","swipeSettings","swipeThresholdDistance","defaultArgs","canTrigger","scrollBool","isScrollable","moved","checkSwipe","modeClear","lastTapTime","eleStyle","overflow","overflowX","overflowY","eTapArgs","pnt","newX","newY","newT","xDist","yDist","interval","removeTags","removeAttrs","attribute","jsEvents","SanitizeHtmlHelper","selectors","tags","item","beforeSanitize","serializeValue","wrapElement","removeXssTags","removeJsEvents","removeXssAttrs","tempEleValue","removeElement","nodes","localName","attr","hasAttribute","Query","from","subQuery","isChild","distincts","queries","fKey","fromTable","lookups","expands","sortedColumns","groupedColumns","field","dataManager","always","executeQuery","executeLocal","cloned","subQuerySelector","isCountRequired","tableName","fn","fields","tables","fieldName","operator","ignoreCase","ignoreAccent","predicate","Predicate","searchKey","fieldNames","comparer","fnOperators","isFromGroup","sorts","order","endsWith","fnSort","filterQueries","direction","sortBy","pageIndex","pageSize","nos","query","selectorFn","q","singles","filtered","isComplex","processOperator","condition","predicates","combinePredicates","combine","json","fromJSONData","record","isAnd","validate","toJson","pred","preds","DataUtil","input","fnAscending","fnDescending","localeCompare","jsonArray","newData","extractFields","aggregates","level","groupDs","jsonData","GroupGuid","items","group","count","indx","childLevels","grouped","groupedArray","records","getVal","tempObj","aggs","lookup","pKey","grp","fKeyData","getFieldList","copyObj","ds","middle","sort","diacritics","current","array","adaptor","fnName","param1","param2","adp","dm","req","callAdaptorFunction","reqParams","xhr","rand","Uint8Array","castRequired","requiresCompleteRecord","tmp","serverTimezoneOffset","timeZoneHandling","sum","average","getItemFromComparer","truecount","where","falsecount","operatorSymbols","odBiOperator","odUniOperator","odv4UniOperator","equal","ignoreDiacritics","notequal","lessthan","greaterthan","lessthanorequal","greaterthanorequal","notnull","isnull","startswith","startsWith","endswith","processSymbols","parseJson","jsonText","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","ms","offSet","dateParse","toTimeZone","isUTC","utcFormat","hrs","mins","addSelfOffset","isGuid","replacer","isPlainObject","jsonReplacer","arrayReplacer","toJSON","jsonDateReplacer","toUTC","utc","unix","toLocalTime","datefn","differenceString","localtimefn","norm","getSeconds","Adaptor","requestType","skip","take","search","expand","dataSource","pvt","countFlg","agg","changes","deletedRecordsLen","deletedRecords","addedRecords","insert","changedRecords","update","fnCompare","aggQuery","size","keyField","hierarchyFilters","getQueryRequest","filterQueryLists","request","groups","filters","searches","onPage","onRange","getFiltersFrom","isNull","getRequestQuery","pvtData","convertToQueryString","request1","selects","onSelect","onSkip","onTake","getResponseHeader","handleTimeZone","requests","getAggregateResult","original","batchUrl","crudUrl","removeUrl","changed","added","deleted","table","getAddParams","insertUrl","keyColumn","updateUrl","predicats","or","aggregateData","aggregate","groupQuery","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","updateType","requiresCast","guid","returnValue","getField","encodeURIComponent","addParams","onEachWhere","onComplexPredicate","onPredicate","reverse","settings","overrideMimeType","rootUrl","dataUrls","resourceTableName","dataCopy","metaData","emptyAndBatch","processBatchResponse","versionCheck","oDataCount","requiresFormat","convertObj","localTime","localTimeReplacer","compareAndRemove","initialGuid","getGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","generateBodyContent","org","o","stat","method","cIdx","jsonObj","exVal","processResponse","valueOf","updateKey","isCrudAction","isInsertAction","cacheAdaptor","guidId","setInterval","forDel","currentTime","requestTime","removeItem","currentFilter","newQuery","generateKey","cachedItems","processQuery","crossDomain","batchRequest","offline","timeTillExpiration","cachingPageSize","enableCaching","jsonp","isCors","defaultQuery","isDataAvailable","ready","buildHierarchy","using","deffered","Deferred","getDeferedArgs","makeRequest","nextTick","setImmediate","fnSuccess","fnFail","cache","processData","isSelector","process","virtualSelectRecords","fnQueryChild","subDeffer","childArgs","subUrl","childReq","subData","extendRequest","virtualRecords","ajax","pResult","cResult","deff","doAjaxRequest","defer","getTextNode","childnode","buttonObserver","Button","disabled","removeRippleEffect","renderComplete","cssClass","isPrimary","content","tempContent","sanitize","setIconCss","controlStatus","iconCss","span","textContent","iconPosition","isToggle","btnClickHandler","unWireEvents","addOnPersist","enableHtmlSanitizer","click","focus","li","ul","icon","check","checked","selected","expanded","hasChild","collapsible","image","iconWrapper","anchorWrap","navigable","getFieldValues","dataItem","fieldData","isHeader","dataField","popupRect","parentDocument","ListBase","defaultMappedFields","isChecked","enabled","hasChildren","tooltip","htmlAttributes","urlAttributes","imageAttributes","imageUrl","groupBy","defaultAriaAttributes","listRole","itemRole","groupItemRole","itemText","wrapperRole","defaultListBaseOptions","showCheckBox","showIcon","expandCollapse","ariaAttributes","listClass","itemClass","processSubChild","sortOrder","groupTemplate","headerTemplate","expandIconClass","moduleName","expandIconPosition","itemNavigable","createListFromArray","isSingleLevel","generateUL","createListItemFromArray","subChild","curOpt","getModuleClass","generateId","itemCreating","generateSingleLevelLI","generateLI","itemCreated","createListItemFromJson","checkboxElement","anchorElement","typeofData","curItem","innerEle","imageElemnt","insertAdjacentElement","iconElement","createListFromJson","elementArray","liCollections","addSorting","getDataSource","typeof","elementAttributes","class","getAllAttributes","attributes$$1","nodeName","nodeValue","subDS","subLi","innerElements","grpLI","elementID","role","innerText","anchorTag","createTextNode","isFullNavigation","anchorWrapper","uID","removeBlazorID","compiledString","groupTemplateID","templateID","innerDiv","liElement","ulElement","createList","getSiblingLI","isPrevious","siblingLI","liIndex","groupDataSource","curFields","cusQuery","itemObj","grpItem","hdr","newtext","_id","k","createJsonFromElement","curEle","jsonAr","childs","anchor","hasChildNodes","renderContentTemplate","liCollection","currentID","renderGroupTemplate","headerItems","category","headerData","generateIcon","parentDocument$1","targetContainer","fixedParent","calculatePosition","currentElement","positionX","positionY","targetValues","ownerDocument","posX","posY","setPosx","getElementHCenter","setPosy","getElementTop","getElementRight","getElementVCenter","getElementLeft","getElementBottom","getBodyScrollTop","getBodyScrollLeft","setPosition","eStatus","elementRect","TL","TR","BL","BR","leftCollideCheck","leftSide","rightSide","getBodyScrollLeft$1","ContainerLeft","ContainerRight","topCollideCheck","topSide","bottomSide","getBodyScrollTop$1","ContainerTop","ContainerBottom","getTargetContainerWidth","getTargetContainerHeight","getTargetContainerLeft","getTargetContainerTop","getViewPortWidth","getViewPortHeight","windowWidth","PositionData","Popup","zIndex","setEnableRtl","refreshPosition","setContent","actionOnScroll","wireScrollEvents","unwireScrollEvents","checkCollision","orientationOnChange","getRelateToElement","scrollRefresh","relateToElement","relateTo","hide","targetVisible","isElementOnViewport","targetInvisibleStatus","scrollElement","scrollParents","isElementVisible","checkGetBoundingClientRect","win","windowView","scrollY","scrollX","outerWidth","outerHeight","elementView","reposition","collision","checkFixedParent","X","Y","parentDisplay","getAnchorPosition","eleRect","anchorEle","anchorRect","anchorPos","fixedElement","tempAnchor","targetType","param","viewPortElement","tEdge","eEdge","edge","leftFlip","deepCheck","collideSide","topFlip","elemOffset","yAxis","xAxis","elemData","containerWidth","containerLeft","containerRight","overLeft","overRight","containerHeight","containerTop","containerBottom","overTop","overBottom","viewPortRect","horz","vert","callFlip","callFit","animationOptions","relativeElement","zIndexElement","getZindexPartial","showAnimation","animate","hideAnimation","overflowRegex","parentStyle","parentZindex","defaultView","childrenZindex","isEqualNode","siblingsZindex","finalValue","currentZindexValue","selectedHandler","minHeight","maxHeight","minWidth","maxWidth","containerElement","resizeWestWidth","elementClass","originalWidth","originalHeight","originalX","originalY","originalMouseX","originalMouseY","RESTRICT_LEFT","resizeStart","resize","resizeEnd","setLeft","previousWidth","getDOMElement","domElement","resizers","onMouseDown","onTouchStart","getEventType","calculateValues","onMouseMove","onMouseUp","coordinates","touches","resizeTowards","resizeSouth","resizeNorth","resizeWest","resizeEast","getClientRectValues","containerRectValues","documentHeight","clientHeight","calculateValue","currentpageY","targetRectValues","calculatedHeight","borderValue","topWithoutborder","targetTop","calculatedTop","boundaryRectValues","currentHeight","rectValues","documentWidth","clientWidth","calculatedWidth","removeResize","handlers","ButtonProps","AnimationSettings","ROOT","DLG_TARGET","SCROLL_DISABLED","FULLSCREEN","Dialog","initRender","enableResize","setResize","animationSettings","effect","getMinHeight","headerContent","allowMaxHeight","preventVisibility","clonedEle","closeIconClickEventHandler","dlgOverlayClickEventHandler","focusContent","l10n","close","checkPositionData","prevOnChange","isNumberValue","list","computedHeaderHeight","computedFooterHeight","footerEle","getEle","headerHeight","footerHeight","dialogObj","isBlazorServerRender","computedHeight","computedWidth","isModal","resizeBegin","resizing","resizeComplete","boundary","directions","resizeHandler","proxy","targetEle","onResizeStart","onResizeComplete","onResizing","buttonObj","btnObj","ftrTemplateContent","activeElement","focusableElements","isTagName","isContentEdit","closeOnEscape","primaryButtonEle","buttonIndex","buttons","buttonModel","setCSSClass","setMaxHeight","initialRender","setzIndex","calculatezIndex","contentEle","setTargetContent","setHeader","showCloseIcon","renderCloseIcon","footerTemplate","setButton","setFooterTemplate","allowDragging","setAllowDragging","setIsModal","dlgContainer","dlgOverlay","parentEle","refElement","popupObj","container","preventFocus","resetResizeIcon","openEventArgs","unBindEvent","closeArgs","activeEle","blur","storeActiveElement","positionChange","setEnableRTL","setOverlayZindex","visible","show","dialogConHeight","resizeIcon","zIndexValue","setPopupPosition","dragObj","dragEventArgs","buttonContent","buttonType","btn","outerHTML","footerBtn","innerContentElement","HTMLElement","setTemplate","sanitizeHelper","templateFn","templateProps","templateValue","isString","dialogItem","beforeEvent","isContent","headerEle","createHeaderContent","closeIcon","closeIconBtnObj","DLG_CLOSE_ICON","closeIconTitle","getConstant","oldCSSClass","u","tabIndex","disableElement","getValidFocusNode","validNode","t","elementMatch","Element","getAutoFocusNode","bindEvent","keyDown","insertAdjacentHTML","updateSanitizeContent","updateIsModal","buttonCount","setTarget","firstChild","setPopupZindex","classArray","isFullScreen","fullScreen","beforeOpenArgs","openAnimation","dialogOpen","isInteracted","beforeCloseArgs","closeAnimation","DialogUtility","createDialog","dialogObject","formOptions","title","isDraggable","formButtonModel","buttonPropModel","buttonProps","alert","alertDialogObj","dialogElement","alertButtonModel","okButton","confirm","confirmDialogObj","okButtonModel","cancelButtonModel","cancelButton","globalTimeOut","generateSeries","stop","series","increment","formSeries","random_generator","charAt","create_fabric_element","innerCon","uniqueID","themeClass","makeElement","svgFabric","fabricCirclePath","fabricCircleArc","create_material_element","innerContainer","cls","svgMaterial","matCirclePath","mat_calculate_attributes","svg","path","strokeSize","getStrokeSize","transformOrigin","PI","getDashOffset","easeAnimation","timestamp","timecount","fb_calculate_attributes","innerConainer","trgClass","centerX","centerY","circle","startArc","endArc","defineArcPoints","angle","radians","cos","sin","showHideSpinner","isHide","spinnerWrap","spinCheck","inner","svgEle","isAnimate","timeOut","globalObject","previousId","animateMaterial","spinnerInfo","globalInfo","rotate","mat_animation","timeOutVar","rotation","boot_animate","Search","inputVal","searchType","listItems","itemData","strLength","queryStr","toLocaleLowerCase","itemsData","Input","floatType","bindInitialEvent","checkInputValue","floatLabelType","getParentNode","inputElement","inputValue","_focusFn","label","_blurFn","getElementsByTagName","wireFloatingEvents","createFloatingInput","inputObject","internalCreateElement","floatLinelement","floatLabelElement","createInputContainer","customTag","placeholder","encodePlaceHolder","inputWrap","updateLabelState","checkFloatLabelType","updateIconState","button","wireClearBtnEvents","readOnly","validateLabel","tagClass","tag","spanEle","setCssClass","oldClass","setPlaceholder","setReadonly","isReadonly","readonly","isRtl","setEnabled","isEnable","inputContainer","disabledAttrs","considerWrapper","removeAttributes","addAttributes","setClearButton","isClear","initial","clearButton","_internalRipple","argsButton","_onMouseDownRipple","_onMouseUpRipple","createIconEle","iconClass","prependSpan","innerWrapper","appendSpan","createInput","showClearButton","setWidth","removeFloating","inputEle","addFloating","iconEle","inputObj","isPrependIcon","floatLine","floatText","wrapper","setRipple","addIcon","icons","internalCreate","FieldSettings","DropDownBase","newProperty","oldProperty","listData","checkValueCase","isTextByValue","typeOfData","checkingAccent","String","checkIgnoreCase","getItemValue","checkNonIgnoreCase","itemValue","textItem","typedText","getFormattedValue","baseTemplate","checkTemplate","exception","actionFailure","noRecordsTemplate","actionFailureTemplate","DropDownBaseresetBlazorTemplates","actionFailureTemplateId","noRecordsTemplateId","templateCompiler","DropDownBaseupdateBlazorTemplates","l10nLocale","componentLocale","getLocaleName","liElem","enableRtlElements","jsonElement","resetList","renderItemsBySelect","setListData","noRecord","footer","itemTemplate","itemTemplateId","groupTemplateId","valueTemplateId","headerTemplateId","footerTemplateId","invalidAttr","getJSONfromOption","optionGroup","scrollTimer","isRequested","isDataFetched","isActive","showSpinner","emptyDataRequest","getQuery","renderItems","onActionComplete","bindChildItems","onActionFailure","hideSpinner","localDataArgs","childNode","remainingItems","sortedData","updateListValues","raiseDataBound","findNode","listArr","spliceData","listElements","templateListItem","listOption","l10nUpdate","fixedHeaderElement","postRender","listElement","focusItem","selectedItem","listEle","groupValue","getSortedDataSource","fieldValues","setFixedHeader","scrollStop","liHeight","topIndex","round","isTempEmpty","createListItems","firstLi","getItems","createEvent","initEvent","dispatchEvent","selectData","isFiltering","updateData","setFields","updateDataSource","setUpdateInitial","setZIndex","isEmptyData","rippleFun","isGroupChecking","setFloatingHeader","itemIndex","renderList","itemsCount","selectedItemValue","updateActionCompleteData","updateAddItemList","listGroupItem","tempLi","updateDataList","updateSelection","hidden","itemCount","dropDownListClasses","root","hover","rtl","disable","base","inputFocus","iconAnimation","device","backIcon","filterBarClearIcon","filterInput","filterParent","mobileFilter","clearIcon","clearIconHide","popupFullScreen","disableIcon","hiddenElement","LABELTOP","LABELBOTTOM","createFloatLabel","overAllWrapper","searchWrapper","setPlaceHolder","HIDE_LIST","MultiSelect","isValidKey","selectAllEventData","selectAllEventEle","isDynamicDataChange","scrollFocusStatus","keyDownStatus","state","enableGroupCheckBox","enableSelectionOrder","allowCustomValue","hideSelectedItem","closePopupOnSelect","htmlAttr","updatedClassValue","popupWrapper","enable","refreshPlaceHolder","validateAttr","containerAttr","overAllClear","componentWrapper","updatedCssClassValues","allowFiltering","onpopstate","hidePopup","pushState","popup","focusAtFirstListItem","updateListItems","mainList","showDropDownIcon","refreshPopup","isFirstClick","loadTemplate","mainListItems","findGroupStart","deselectHeader","refreshListItems","removeFocus","valueEle","findListElement","scrollBottom","addListFocus","disableStatus","getAriaAttributes","ensureAriaDisabled","chipCollectionWrapper","tempValues","removeValue","removeChipSelection","updateDelimeter","delimiterChar","makeTextBoxEmpty","refreshSelection","checkPlaceholderSize","renderPopup","onPopupShown","targetInputElement","valuecheck","isUpdated","updateSelectElementData","getDataByValue","getForQuery","addItem","updateActionList","updateVal","addValidInputClass","showSelectAll","mainData","mainListCollection","remoteCustomValue","checkForCustomValue","tempQuery","updateListARIA","unwireListEvents","wireListEvents","setInitialValue","selectAllAction","setDynValue","initialTextUpdate","initialValueUpdate","initialUpdate","changeOnBlur","updateValueState","beforePopupOpen","previousSibling","previousElementSibling","nextElementSibling","hideGroupItem","ariaValue","checkSelectAll","checkMaxSelection","element1","temp1","groupItemLength","listItem","searchCount","searchActiveCount","maximumSelectionLength","openOnClick","isPopupOpen","showPopup","targetElement","isWordCharacter","fromCharCode","expandTextbox","showOverAllClear","isFiltered","remoteFilterAction","dataUpdater","filterQuery","filterAction","filterType","backCommand","dataChecks","getValueByText","tempData","eve","isDocClickFromCheck","relatedTarget","updateDelimView","focused","removeChipFocus","refreshInputHight","downIconWidth","dropIcon","setPlaceholderSize","newVal","initStatus","validateValues","updateTempValue","steps","previousItem","collection","getIndexByValue","showDelimWrapper","viewWrapper","delimiterWrapper","mobFilter","calcPopupWidth","resolveCollision","focusedItem","isHome","scrollEle","popupKeyActions","activeIndex","homeNavigation","pageUpSelection","getPagingCount","updateAriaAttribute","pageDownSelection","arrowUp","arrowDown","selectByKey","spaceKeySelection","escapeAction","checkTextLength","keyNavigation","checkBackCommand","moveByList","onKeyDown","focuseElem","moveBy","removelastSelection","removeSelectedChip","focusAtLastListItem","selectListByKey","hideOverAllClear","selectedLI","currentOffset","nextBottom","nextOffset","boxRange","limit","isValidLI","updateListSelection","lastElementChild","selectAllItem","selectedElem","addChipSelection","updateCheck","customVal","setFloatLabelType","isClearAll","removeIndex","removeVal","removedValues","hideElement","updateMainList","removeChip","updateChipStatus","isSelectAll","clearAllCallback","updatedataValueItems","element2","addListSelection","addChip","isNotTrigger","updateListSelectEventCallback","getChip","closeElements","chipElem","chipClose","multiselectTemplate","chip","chipContent","valueTemplate","multiCompiler","setClass","onMobileChipInteraction","chipClick","onChipRemove","popupWidth","fieldProperty","listCurrentOptions","checkboxFilter","overAllHeight","popupHeight","setHeaderTemplate","selectAllHeight","popupElement","searchBoxHeight","setScrollPosition","targetExitViewport","onListMouseDown","selectAllItems","formElement","textVal","getNgDirective","wrapperClick","windowResize","focusInHandler","KeyUp","onInput","onBlur","mouseIn","resetValueHandler","mouseOut","ClearAll","pasteHandler","openClick","preventDefaultAction","initializeData","updateDataAttribute","delim","getTextByValue","updateWrapperText","textArr","childElementCount","removeListSelection","indexItem","noDataEle","replaceChild","removeHover","dispatchSelect","addValue","selectedItems","selectItems","hoveredItem","mainlist","ariaCheck","delimChar","groupValues","liChecked","liUnchecked","findGroupAttrtibutes","updateCheckBox","unChecked","groupHeader","checkBoxElement","currentLi","addListHover","onDocumentClick","onMouseClick","onMouseOver","onMouseLeave","spinnerElement","CLOSEICON_CLASS$1","spinnerContainer","spinnerInnerContainer","wrap","inner_wrap","theme","defaultSize","svgBoot","bootCircle","CLS_SPINCIRCLE","defaultRadius","circleEle","labelEle","spinCSSClass","wrapperType","wrapperData","hideDelimWrapper","wrapperleng","remaining","overAllContainer","tempIndex","overflowCountTemplate","totalCountTemplate","remainContent","raminElement","totalCompiledString","remainSize","getOverflowVal","paddingRight","paddingLeft","pop","totalWidth","updateRemainTemplate","updateRemainWidth","updateRemainingText","newTemp","selectionLimit","focusedElement","textboxValueUpdate","updateValue","updateHTMLAttribute","updateClearButton","filterBarPlaceholder","updateOldPropCssClass","updateCssClass","enableRTL","updateReadonly","dropDownIcon","reInitializePoup","msProps","getPropObject","onLoadSelect","mainLiLength","liLength","SEARCHBOX_WRAPPER","DELIMITER_VIEW","spellcheck","autocomplete","tabindex","validationAttribute","wireEvent","checkInitialValue","isData","optionsElement","valueCol","textCol","optionsLen","opt","checkAutoFocus","placeholderText","placeholderElement","unWireEvent","activeLi","listSelection","setSelectAll","setSearchBox","setDeviceSearchBox","getFocus","setReorder","getActiveList","checboxCreate","setPopupFullScreen","checkboxEle","rippleSpan","frameSpan","labelSpan","checkAllParent","selectAllSpan","nextSibling","clickHandler","isBlazorListbox","checkboxWrapper","frameElm","checkWrapper","checkElement","selectAll$$1","validateCheckNode","checkWrap","isCheck","changeState","isPrevent","ariaState","filterInputObj","clearIconElement","clearText","setSearchBoxPosition","backIconElement","clickOnBackIcon","clearElement","unSelect","selectAllText","unSelectAllText","remLi","activeLiCount","ulEle","exports","_typeof","Symbol","iterator","_classCallCheck","Constructor","TypeError","_defineProperties","writable","_createClass","protoProps","staticProps","_extends","assign","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","isNativeReflectConstruct","construct","sham","Proxy","_construct","Parent","Class","_possibleConstructorReturn","self","ReferenceError","_get","receiver","object","objectValues","toArray","nodeList","warn","console","previousWarnOnceMessages","warnAboutDepreation","deprecatedParam","useInstead","callIfFunction","isPromise","DismissReason","freeze","backdrop","esc","timer","swalClasses","iconTypes","states","previousBodyPadding","hasClass","applyCustomClass","customClass","getInput","inputType","getChildByClass","checkbox","radio","oldInputVal","focusInput","toggleClass","Boolean","applyNumericalStyle","removeProperty","toggle","getClientRects","hasCssAnimation","animDuration","transDuration","getContainer","elementBySelector","selectorString","elementByClass","getPopup","getIcons","getIcon","visibleIcon","getTitle","getContent","getImage","getProgressSteps","getValidationMessage","getConfirmButton","actions","getCancelButton","getActions","getHeader","getFooter","getCloseButton","getFocusableElements","focusableElementsWithTabindex","otherFocusableElements","isToast","isNodeEnv","sweetHTML","question","warning","success","file","textarea","resetValidationMessage","Swal","parseHtmlToContainer","handleJqueryElem","animationEndEvent","testEl","transEndEventNames","WebkitAnimation","OAnimation","renderButton","privateProps","WeakMap","innerParams","domCache","inputTypes","setInputPlaceholder","inputPlaceholder","renderInputType","email","password","number","tel","rangeInput","rangeOutput","checkboxInput","initialPopupWidth","popupPadding","MutationObserver","contentWidth","observe","attributeFilter","renderContent","html","rerender","inputClass","inputAttributes","attrName","renderProgressSteps","progressStepsContainer","progressSteps","currentProgressStep","getQueueStep","stepEl","lineEl","progressStepsDistance","renderHeader","popupBackgroundColor","successIconParts","backgroundColor","imageAlt","imageWidth","imageHeight","imageClass","titleText","closeButton","closeButtonHtml","showCloseButton","closeButtonAriaLabel","background","toast","modal","noanimation","allowOutsideClick","center","grow","growClass","customContainerClass","confirmButton","showConfirmButton","showCancelButton","buttonsStyling","styled","confirmButtonColor","cancelButtonColor","confirmButtonBackgroundColor","borderLeftColor","borderRightColor","reverseButtons","onRender","clickConfirm","currentSteps","showLoading","fire","loading","globalState","defaultParams","heightAuto","allowEscapeKey","allowEnterKey","stopKeydownPropagation","keydownListenerCapture","preConfirm","confirmButtonText","confirmButtonAriaLabel","confirmButtonClass","cancelButtonText","cancelButtonAriaLabel","cancelButtonClass","focusConfirm","focusCancel","showLoaderOnConfirm","inputOptions","inputAutoTrim","inputValidator","validationMessage","onBeforeOpen","onOpen","onClose","onAfterClose","scrollbarPadding","updatableParams","deprecatedParams","toastIncompatibleParams","isValidParameter","paramName","isDeprecatedParameter","checkIfParamIsValid","checkIfToastParamIsValid","checkIfParamIsDeprecated","staticMethods","isUpdatableParameter","argsToParams","clickCancel","isLoading","_len","_key","mixin","mixinParams","_this","MixinSwal","subClass","superClass","create","queue","resetAndResolve","queueResult","callback","dismiss","insertQueueStep","deleteQueueStep","enableLoading","getTimerLeft","timeout","stopTimer","resumeTimer","toggleTimer","running","increaseTimer","n","increase","isTimerRunning","isRunning","hideLoading","isIE11","MSInputMethodContext","documentMode","fixVerticalPositionIE","alignItems","privateMethods","swalPromiseResolve","removePopupAndResetState","triggerOnAfterCloseAndDispose","restoreFocusTimeout","previousActiveElement","scrollTo","keydownTarget","keydownHandler","capture","keydownHandlerAdded","iosfix","shown","resolveValue","handlePopupAnimation","animationIsSupported","animatePopup","swalCloseEventFinishedCallback","unsetWeakMaps","setButtonsDisabled","setInputDisabled","radios","Timer","started","defaultInputValidators","string","setParameters","oldContainer","oninput","onchange","swalOpenAnimationFinished","currentInstance","fixScrollContainer","MSStream","preventTouchMove","ontouchstart","ontouchmove","stopPropagation","haystack","needle","msMaxTouchPoints","scrollDiv","scrollbarWidth","populateInputOptions","inputOption","optionValue","optionLabel","radioValue","radioLabel","radioInput","radioLabelElement","formatInputOptions","Map","succeedWith","closePopup","preConfirmValue","getInputValue","getCheckboxValue","getRadioValue","getFileValue","files","setFocus","arrowKeys","escKeys","handleEnter","isComposing","handleTab","btnIndex","handleArrows","handleEsc","dismissWith","ignoreOutsideClick","swalPromise","setupTimer","onclick","disableButtons","disableInput","enableButtons","enableInput","showValidationMessage","checkValidity","onmousedown","onmouseup","processInputOptions","err","fade","initFocus","globalState$$1","blurActiveElement","instanceMethods","disableLoading","closeModal","closeToast","enableConfirmButton","disableConfirmButton","popupComputedStyle","inputerror","setProgressSteps","updatedParams","showProgressSteps","hideProgressSteps","_main","userParams","deferDisposalTimer","validUpdatableParams","defineProperties","SweetAlert","outerParams","onFulfilled","onFinally","_currentInstance","Sweetalert2","swal","sweetAlert","styleSheet","cssText","SidebarComponent","api","companyEmployeeListAPI","$","siblings","getListData","subscribe","companyLength","company","sessionId","sessionStorage","sideBarCompanyName","sideBarCompanyLogo","environment","apiBaseUrl","logoUrl","getEmployeeList","employeeLength","isAdmin","adminStatus","HeaderComponent","apiService","route","ngZone","navbarOpen","userProfile","getList","getIndividualList","userId","run","navigateByUrl","companyListData","log","companyName","getIndividualData","filterCompanyId","companyId","reload","filterListData","submitLogout","getUserDetails","avatar","toggleNavbar","logout","FooterComponent","PagesComponent","UpdateProfileComponent","fb","APIService","util","router","discardChanges","genderList","cardProfileName","existingUrl","existUpadteProfileForm","loadUpadteProfileForm","userProfileForm","getTimeZone","Inject","multiObj","updateProfileForm","gender","phone","compose","minLength","maxLength","birthday","reader","FileReader","readAsDataURL","userAvatar","cleanUpdateProfileForm","cleanFormLevelOne","updateUSerProfile","uploadProfileImage","updateProfile","onSelectFile","updateProfileData","changeName","routes","canActivate","loadChildren","DashboardModule","SubUserModule","CompanyModule","BranchesModule","LeavetypesModule","EmployeeWizardModule","JobProfileModule","JobCategoryModule","DocumenttypesModule","SkillCategoryModule","HolidayModule","ReportModule","PayrollModule","CalendarModule","DepartmentModule","GraderuleModule","LeaveManagementModule","RolesModule","redirectTo","pathMatch","PagesRoutingModule","forChild","PagesModule","PaymentHeadsComponent","paymentHeadApiService","http","endpoint","errorMessage","ErrorEvent","pipe","catchError","errorMgmt","paymentHeadId","post","delete","ListPaymentHeadsComponent","listPaymentHeads","permissionInfo","permissionRoleInfo","getPaymentHeadData","paymentData","swalWithBootstrapButtons","removePaymentHead","paymentHeadStatus","addPaymentHeads","AddPaymentHeadsComponent","successMessage","errorMsg","paymentHeadTypes","isListAvaliable","paymentHeadValidate","paymentHeadForm","cleanPaymentHeadForm","successMsg","handleErrors","errMsg","required","paymentHeadData","UpdatePaymentHeadsComponent","snapshot","paramMap","moduleExists","existingDataList","updatePaymentHeadValidation","paymentHeadUpdateForm","paymentHeadDetails","existingData","cleanPaymentHeadUpdateForm","updatePaymentHeads","updatePaymenthead","PaymentHeadsRoutingModule","PaymentHeadsModule","EmployeeService","parentUserId","companyParentId","branchId","employeeId","addressId","familyId","educationId","workExperienceId","languageId","leaveSettingId","proofId","documentTypeId","formData","FormData"],"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IAAO,OACP,IAAO,uBACP,IAAO,uBACP,IAAO,uBACP,IAAO,IACP,IAAO,SACP,IAAO,MACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,KACP,IAAO,IACP,IAAO,gBACP,IAAO,SACP,IAAO,MACP,IAAO,SACP,IAAO,OACP,IAAO,eACP,IAAO,MACP,IAAO,IACP,IAAO,UACP,IAAO,OACP,IAAO,MACP,IAAO,MACP,IAAO,MACP,IAAO,UACP,IAAO,MACP,IAAO,MACP,IAAO,IACP,IAAO,IACP,IAAO,MACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,OACP,IAAO,OACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,KACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,KACP,IAAO,OACP,IAAO,KACP,IAAO,KACP,IAAO,KACP,IAAO,IACP,IAAO,SACP,IAAO,KACP,IAAO,KACP,IAAO,IACP,IAAO,KACP,IAAO,KACP,IAAO,IACP,IAAO,OACP,IAAO,KACP,IAAO,OACP,IAAO,IACP,IAAO,KACP,IAAO,IACP,IAAO,KACP,IAAO,MACP,IAAO,IACP,IAAO,KACP,IAAO,KACP,IAAO,IACP,IAAO,SACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,IACP,IAAO,KACP,IAAO,MACP,IAAO,KACP,IAAO,SACP,IAAO,IACP,IAAO,OACP,IAAO,2BACP,IAAO,KACP,IAAO,KACP,IAAO,IACP,IAAO,OACP,IAAO,KACP,IAAO,KACP,IAAO,SACP,IAAO,KACP,IAAO,OACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,qBACP,IAAO,KACP,IAAO,SACP,IAAO,MACP,IAAO,qBACP,IAAO,SACP,IAAO,IACP,IAAO,IACP,IAAO,KACP,IAAO,eACP,IAAO,OACP,IAAO,IACP,IAAO,UACP,IAAO,SACP,IAAO,KACP,IAAO,IACP,IAAO,MACP,IAAO,SACP,IAAO,gBACP,IAAO,UACP,IAAO,sBACP,IAAO,qBACP,IAAO,SACP,IAAO,KACP,IAAO,SACP,IAAO,qBACP,IAAO,SACP,IAAO,OASX,IAAIC,GACJ,SAAWA,GAEP,MAAMC,EAAiB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACzJ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACrI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","sourceRoot":"webpack:///","sourcesContent":["let instances = 'ej2_instances';\nlet uid = 0;\nlet isBlazorPlatform = false;\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction disableBlazorMode() {\n    isBlazorPlatform = false;\n}\n/**\n * Create Instance from constructor function with desired parameters.\n * @param {Function} classFunction - Class function to which need to create instance\n * @param {any[]} params - Parameters need to passed while creating instance\n * @return {any}\n * @private\n */\nfunction createInstance(classFunction, params) {\n    let arrayParam = params;\n    arrayParam.unshift(undefined);\n    return new (Function.prototype.bind.apply(classFunction, arrayParam));\n}\n/**\n * To run a callback function immediately after the browser has completed other operations.\n * @param {Function} handler - callback function to be triggered.\n * @return {Function}\n * @private\n */\nfunction setImmediate(handler) {\n    let unbind;\n    let num = new Uint16Array(5);\n    let intCrypto = window.msCrypto || window.crypto;\n    intCrypto.getRandomValues(num);\n    let secret = 'ej2' + combineArray(num);\n    let messageHandler = (event) => {\n        if (event.source === window && typeof event.data === 'string' && event.data.length <= 32 && event.data === secret) {\n            handler();\n            unbind();\n        }\n    };\n    window.addEventListener('message', messageHandler, false);\n    window.postMessage(secret, '*');\n    return unbind = () => {\n        window.removeEventListener('message', messageHandler);\n        handler = messageHandler = secret = undefined;\n    };\n}\n/**\n * To get nameSpace value from the desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} obj - Object to get the inner object value.\n * @return {any}\n * @private\n */\nfunction getValue(nameSpace, obj) {\n    /* tslint:disable no-any */\n    let value = obj;\n    let splits = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    for (let i = 0; i < splits.length && !isUndefined(value); i++) {\n        value = value[splits[i]];\n    }\n    return value;\n}\n/**\n * To set value for the nameSpace in desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} value - Value that you need to set.\n * @param {any} obj - Object to get the inner object value.\n * @return {void}\n * @private\n */\nfunction setValue(nameSpace, value, obj) {\n    let keys = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    let start = obj || {};\n    let fromObj = start;\n    let i;\n    let length = keys.length;\n    let key;\n    for (i = 0; i < length; i++) {\n        key = keys[i];\n        if (i + 1 === length) {\n            fromObj[key] = value === undefined ? {} : value;\n        }\n        else if (isNullOrUndefined(fromObj[key])) {\n            fromObj[key] = {};\n        }\n        fromObj = fromObj[key];\n    }\n    return start;\n}\n/**\n * Delete an item from Object\n * @param {any} obj - Object in which we need to delete an item.\n * @param {string} params - String value to the get the inner object\n * @return {void}\n * @private\n */\nfunction deleteObject(obj, key) {\n    delete obj[key];\n}\n/**\n * Check weather the given argument is only object.\n * @param {any} obj - Object which is need to check.\n * @return {boolean}\n * @private\n */\nfunction isObject(obj) {\n    let objCon = {};\n    return (!isNullOrUndefined(obj) && obj.constructor === objCon.constructor);\n}\n/**\n * To get enum value by giving the string.\n * @param {any} enumObject - Enum object.\n * @param {string} enumValue - Enum value to be searched\n * @return {any}\n * @private\n */\nfunction getEnumValue(enumObject, enumValue) {\n    return enumObject[enumValue];\n}\n/**\n * Merge the source object into destination object.\n * @param {any} source - source object which is going to merge with destination object\n * @param {any} destination - object need to be merged\n * @return {void}\n * @private\n */\nfunction merge(source, destination) {\n    if (!isNullOrUndefined(destination)) {\n        let temrObj = source;\n        let tempProp = destination;\n        let keys = Object.keys(destination);\n        let deepmerge = 'deepMerge';\n        for (let key of keys) {\n            if (!isNullOrUndefined(temrObj[deepmerge]) && (temrObj[deepmerge].indexOf(key) !== -1) &&\n                (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {\n                extend(temrObj[key], temrObj[key], tempProp[key], true);\n            }\n            else {\n                temrObj[key] = tempProp[key];\n            }\n        }\n    }\n}\n/**\n * Extend the two object with newer one.\n * @param {any} copied - Resultant object after merged\n * @param {Object} first - First object need to merge\n * @param {Object} second - Second object need to merge\n * @return {Object}\n * @private\n */\nfunction extend(copied, first, second, deep) {\n    let result = copied && typeof copied === 'object' ? copied : {};\n    let length = arguments.length;\n    if (deep) {\n        length = length - 1;\n    }\n    for (let i = 1; i < length; i++) {\n        if (!arguments[i]) {\n            continue;\n        }\n        let obj1 = arguments[i];\n        Object.keys(obj1).forEach((key) => {\n            let src = result[key];\n            let copy = obj1[key];\n            let clone;\n            let isArrayChanged = Array.isArray(copy) && Array.isArray(src) && (copy.length !== src.length);\n            let blazorEventExtend = isBlazor() ? (!(src instanceof Event) && !isArrayChanged) : true;\n            if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {\n                if (isObject(copy)) {\n                    clone = src ? src : {};\n                    if (Array.isArray(clone) && clone.hasOwnProperty('isComplexArray')) {\n                        extend(clone, {}, copy, deep);\n                    }\n                    else {\n                        result[key] = extend(clone, {}, copy, deep);\n                    }\n                }\n                else {\n                    /* istanbul ignore next */\n                    clone = isBlazor() ? src && Object.keys(copy).length : src ? src : [];\n                    result[key] = extend([], clone, copy, deep);\n                }\n            }\n            else {\n                result[key] = copy;\n            }\n        });\n    }\n    return result;\n}\n/**\n * To check whether the object is null or undefined.\n * @param {Object} value - To check the object is null or undefined\n * @return {boolean}\n * @private\n */\nfunction isNullOrUndefined(value) {\n    return value === undefined || value === null;\n}\n/**\n * To check whether the object is undefined.\n * @param {Object} value - To check the object is undefined\n * @return {boolean}\n * @private\n */\nfunction isUndefined(value) {\n    return ('undefined' === typeof value);\n}\n/**\n * To return the generated unique name\n * @param {string} definedName - To concatenate the unique id to provided name\n * @return {string}\n * @private\n */\nfunction getUniqueID(definedName) {\n    return definedName + '_' + uid++;\n}\n/**\n * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.\n * @param {Function} eventFunction - Specifies the function to run when the event occurs\n * @param {number} delay - A number that specifies the milliseconds for function delay call option\n * @return {Function}\n * @private\n */\nfunction debounce(eventFunction, delay) {\n    let out;\n    // tslint:disable-next-line\n    return function () {\n        let args = arguments;\n        let later = () => {\n            out = null;\n            return eventFunction.apply(this, args);\n        };\n        clearTimeout(out);\n        out = setTimeout(later, delay);\n    };\n}\n// Added since lint ignored after added '//tslint:disable-next-line' \n/* tslint:disable:no-any */\n/**\n * To convert the object to string for query url\n * @param  {Object} data\n * @returns string\n * @private\n */\nfunction queryParams(data) {\n    let array = [];\n    let keys = Object.keys(data);\n    for (let key of keys) {\n        array.push(encodeURIComponent(key) + '=' + encodeURIComponent('' + data[key]));\n    }\n    return array.join('&');\n}\n/**\n * To check whether the given array contains object.\n * @param {T[]} value- Specifies the T type array to be checked.\n * @private\n */\nfunction isObjectArray(value) {\n    let parser = Object.prototype.toString;\n    if (parser.call(value) === '[object Array]') {\n        if (parser.call(value[0]) === '[object Object]') {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * To check whether the  child element is descendant to parent element or parent and child are same element.\n * @param{Element} - Specifies the child element to compare with parent.\n * @param{Element} - Specifies the parent element.\n * @return boolean\n * @private\n */\nfunction compareElementParent(child, parent) {\n    let node = child;\n    if (node === parent) {\n        return true;\n    }\n    else if (node === document || !node) {\n        return false;\n    }\n    else {\n        return compareElementParent(node.parentNode, parent);\n    }\n}\n/**\n * To throw custom error message.\n * @param{string} - Specifies the error message to be thrown.\n * @private\n */\nfunction throwError(message) {\n    try {\n        throw new Error(message);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n}\n/**\n * This function is used to print given element\n * @param{Element} element - Specifies the print content element.\n * @param{Window} printWindow - Specifies the print window.\n * @private\n */\nfunction print(element, printWindow) {\n    let div = document.createElement('div');\n    let links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));\n    let reference = '';\n    if (isNullOrUndefined(printWindow)) {\n        printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no');\n    }\n    div.appendChild(element.cloneNode(true));\n    for (let i = 0, len = links.length; i < len; i++) {\n        reference += links[i].outerHTML;\n    }\n    printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML +\n        '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');\n    printWindow.document.close();\n    printWindow.focus();\n    // tslint:disable-next-line\n    let interval = setInterval(() => {\n        if (printWindow.ready) {\n            printWindow.print();\n            printWindow.close();\n            clearInterval(interval);\n        }\n    }, 500);\n    return printWindow;\n}\n/**\n * Function to normalize the units applied to the element.\n * @param  {number|string} value\n * @return {string} result\n * @private\n */\nfunction formatUnit(value) {\n    let result = value + '';\n    if (result === 'auto' || result.indexOf('%') !== -1 || result.indexOf('px') !== -1) {\n        return result;\n    }\n    return result + 'px';\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction enableBlazorMode() {\n    isBlazorPlatform = true;\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction isBlazor() {\n    return isBlazorPlatform;\n}\n/**\n * Function to convert xPath to DOM element in blazor platform\n * @return {HTMLElement} result\n * @param {HTMLElement | object} element\n * @private\n */\nfunction getElement(element) {\n    let xPath = 'xPath';\n    if (!(element instanceof Node) && isBlazor() && !isNullOrUndefined(element[xPath])) {\n        return document.evaluate(element[xPath], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    }\n    return element;\n}\n/**\n * Function to fetch the Instances of a HTML element for the given component.\n * @param {string | HTMLElement} element\n * @param {any} component\n * @return {Object} inst\n * @private\n */\n// tslint:disable-next-line\nfunction getInstance(element, component) {\n    // tslint:disable-next-line:no-any\n    let elem = (typeof (element) === 'string') ? document.querySelector(element) : element;\n    if (elem[instances]) {\n        for (let inst of elem[instances]) {\n            if (inst instanceof component) {\n                return inst;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Function to add instances for the given element.\n * @param {string | HTMLElement} element\n * @param {Object} instance\n * @return {void}\n * @private\n */\nfunction addInstance(element, instance) {\n    // tslint:disable-next-line:no-any\n    let elem = (typeof (element) === 'string') ? document.querySelector(element) : element;\n    if (elem[instances]) {\n        elem[instances].push(instance);\n    }\n    else {\n        elem[instances] = [instance];\n    }\n}\n/**\n * Function to generate the unique id.\n * @return {any}\n * @private\n */\n// tslint:disable-next-line:no-any\nfunction uniqueID() {\n    // tslint:disable-next-line:no-any\n    if ((typeof window) === 'undefined') {\n        return;\n    }\n    // tslint:disable-next-line:no-any\n    let num = new Uint16Array(5);\n    let intCrypto = window.msCrypto || window.crypto;\n    return intCrypto.getRandomValues(num);\n}\nfunction combineArray(num) {\n    let ret = '';\n    for (let i = 0; i < 5; i++) {\n        ret += (i ? ',' : '') + num[i];\n    }\n    return ret;\n}\n\n/**\n * Parser\n */\nconst defaultNumberingSystem = {\n    'latn': {\n        '_digits': '0123456789',\n        '_type': 'numeric'\n    }\n};\nconst defaultNumberSymbols = {\n    'decimal': '.',\n    'group': ',',\n    'percentSign': '%',\n    'plusSign': '+',\n    'minusSign': '-',\n    'infinity': '∞',\n    'nan': 'NaN',\n    'exponential': 'E'\n};\nconst latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\nclass ParserBase {\n    /**\n     * Returns the cldr object for the culture specifies\n     * @param {Object} obj - Specifies the object from which culture object to be acquired.\n     * @param {string} cName - Specifies the culture name.\n     * @returns {Object}\n     */\n    static getMainObject(obj, cName) {\n        let value = isBlazor() ? cName : 'main.' + cName;\n        return getValue(value, obj);\n    }\n    /**\n     * Returns the numbering system object from given cldr data.\n     * @param {Object} obj - Specifies the object from which number system is acquired.\n     * @returns {Object}\n     */\n    static getNumberingSystem(obj) {\n        return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n    }\n    /**\n     * Returns the reverse of given object keys or keys specified.\n     * @param {Object} prop - Specifies the object to be reversed.\n     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n     * @returns {Object}\n     */\n    static reverseObject(prop, keys) {\n        let propKeys = keys || Object.keys(prop);\n        let res = {};\n        for (let key of propKeys) {\n            /* tslint:disable no-any */\n            if (!res.hasOwnProperty(prop[key])) {\n                res[prop[key]] = key;\n            }\n        }\n        return res;\n    }\n    /**\n     * Returns the symbol regex by skipping the escape sequence.\n     * @param {string[]} props - Specifies the array values to be skipped.\n     * @returns {RegExp}\n     */\n    static getSymbolRegex(props) {\n        let regexStr = props.map((str) => {\n            return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }).join('|');\n        return new RegExp(regexStr, 'g');\n    }\n    static getSymbolMatch(prop) {\n        let matchKeys = Object.keys(defaultNumberSymbols);\n        let ret = {};\n        for (let key of matchKeys) {\n            ret[prop[key]] = defaultNumberSymbols[key];\n        }\n        return ret;\n    }\n    /**\n     * Returns regex string for provided value\n     * @param {string} val\n     * @returns {string}\n     */\n    static constructRegex(val) {\n        let len = val.length;\n        let ret = '';\n        for (let i = 0; i < len; i++) {\n            if (i !== len - 1) {\n                ret += val[i] + '|';\n            }\n            else {\n                ret += val[i];\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     * @param {string} value - Specifies the  values to be replaced.\n     * @param {RegExp} regex - Specifies the  regex to search.\n     * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n     * @returns {string}\n     */\n    static convertValueParts(value, regex, obj) {\n        return value.replace(regex, (str) => {\n            return obj[str];\n        });\n    }\n    /**\n     * Returns default numbering system object for formatting from cldr data\n     * @param {Object} obj\n     * @returns {NumericObject}\n     */\n    static getDefaultNumberingSystem(obj) {\n        let ret = {};\n        ret.obj = getValue('numbers', obj);\n        ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n        return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     */\n    static getCurrentNumericOptions(curObj, numberSystem, needSymbols, blazorMode) {\n        let ret = {};\n        let cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem) || blazorMode) {\n            let digits = blazorMode ? getValue('obj.mapperDigits', cur) : getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n                ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n                ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n                if (needSymbols) {\n                    ret.numericRegex = digits[0] + '-' + digits[9];\n                    ret.symbolNumberSystem = getValue(blazorMode ? 'numberSymbols' : 'symbols-numberSystem-' + cur.nSystem, cur.obj);\n                    ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n                    ret.numberSystem = cur.nSystem;\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns number mapper object for the provided cldr data\n     * @param {Object} curObj\n     * @param {Object} numberSystem\n     * @param {boolean} isNumber\n     * @returns {NumberMapper}\n     */\n    static getNumberMapper(curObj, numberSystem, isNumber) {\n        let ret = { mapper: {} };\n        let cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem)) {\n            ret.numberSystem = cur.nSystem;\n            ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n            ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n            let digits = getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                for (let i of latnNumberSystem) {\n                    ret.mapper[i] = digits[i];\n                }\n            }\n        }\n        return ret;\n    }\n}\nParserBase.nPair = 'numericPair';\nParserBase.nRegex = 'numericRegex';\nParserBase.numberingSystems = defaultNumberingSystem;\n/**\n * @private\n */\nconst blazorCurrencyData = {\n    'DJF': 'Fdj',\n    'ERN': 'Nfk',\n    'ETB': 'Br',\n    'NAD': '$',\n    'ZAR': 'R',\n    'XAF': 'FCFA',\n    'GHS': 'GH₵',\n    'XDR': 'XDR',\n    'AED': 'د.إ.‏',\n    'BHD': 'د.ب.‏',\n    'DZD': 'د.ج.‏',\n    'EGP': 'ج.م.‏',\n    'ILS': '₪',\n    'IQD': 'د.ع.‏',\n    'JOD': 'د.ا.‏',\n    'KMF': 'CF',\n    'KWD': 'د.ك.‏',\n    'LBP': 'ل.ل.‏',\n    'LYD': 'د.ل.‏',\n    'MAD': 'د.م.‏',\n    'MRU': 'أ.م.',\n    'OMR': 'ر.ع.‏',\n    'QAR': 'ر.ق.‏',\n    'SAR': 'ر.س.‏',\n    'SDG': 'ج.س.',\n    'SOS': 'S',\n    'SSP': '£',\n    'SYP': 'ل.س.‏',\n    'TND': 'د.ت.‏',\n    'YER': 'ر.ي.‏',\n    'CLP': '$',\n    'INR': '₹',\n    'TZS': 'TSh',\n    'EUR': '€',\n    'AZN': '₼',\n    'RUB': '₽',\n    'BYN': 'Br',\n    'ZMW': 'K',\n    'BGN': 'лв.',\n    'NGN': '₦',\n    'XOF': 'CFA',\n    'BDT': '৳',\n    'CNY': '¥',\n    'BAM': 'КМ',\n    'UGX': 'USh',\n    'USD': '$',\n    'CZK': 'Kč',\n    'GBP': '£',\n    'DKK': 'kr.',\n    'KES': 'Ksh',\n    'CHF': 'CHF',\n    'MVR': 'ރ.',\n    'BTN': 'Nu.',\n    'XCD': 'EC$',\n    'AUD': '$',\n    'BBD': '$',\n    'BIF': 'FBu',\n    'BMD': '$',\n    'BSD': '$',\n    'BWP': 'P',\n    'BZD': '$',\n    'CAD': '$',\n    'NZD': '$',\n    'FJD': '$',\n    'FKP': '£',\n    'GIP': '£',\n    'GMD': 'D',\n    'GYD': '$',\n    'HKD': '$',\n    'IDR': 'Rp',\n    'JMD': '$',\n    'KYD': '$',\n    'LRD': '$',\n    'MGA': 'Ar',\n    'MOP': 'MOP$',\n    'MUR': 'Rs',\n    'MWK': 'MK',\n    'MYR': 'RM',\n    'PGK': 'K',\n    'PHP': '₱',\n    'PKR': 'Rs',\n    'RWF': 'RF',\n    'SBD': '$',\n    'SCR': 'SR',\n    'SEK': 'kr',\n    'SGD': '$',\n    'SHP': '£',\n    'SLL': 'Le',\n    'ANG': 'NAf.',\n    'SZL': 'E',\n    'TOP': 'T$',\n    'TTD': '$',\n    'VUV': 'VT',\n    'WST': 'WS$',\n    'ARS': '$',\n    'BOB': 'Bs',\n    'BRL': 'R$',\n    'COP': '$',\n    'CRC': '₡',\n    'CUP': '$',\n    'DOP': '$',\n    'GTQ': 'Q',\n    'HNL': 'L',\n    'MXN': '$',\n    'NIO': 'C$',\n    'PAB': 'B/.',\n    'PEN': 'S/',\n    'PYG': '₲',\n    'UYU': '$',\n    'VES': 'Bs.S',\n    'IRR': 'ريال',\n    'GNF': 'FG',\n    'CDF': 'FC',\n    'HTG': 'G',\n    'XPF': 'FCFP',\n    'HRK': 'kn',\n    'HUF': 'Ft',\n    'AMD': '֏',\n    'ISK': 'kr',\n    'JPY': '¥',\n    'GEL': '₾',\n    'CVE': '​',\n    'KZT': '₸',\n    'KHR': '៛',\n    'KPW': '₩',\n    'KRW': '₩',\n    'KGS': 'сом',\n    'AOA': 'Kz',\n    'LAK': '₭',\n    'MZN': 'MTn',\n    'MKD': 'ден',\n    'MNT': '₮',\n    'BND': '$',\n    'MMK': 'K',\n    'NOK': 'kr',\n    'NPR': 'रु',\n    'AWG': 'Afl.',\n    'SRD': '$',\n    'PLN': 'zł',\n    'AFN': '؋',\n    'STN': 'Db',\n    'MDL': 'L',\n    'RON': 'lei',\n    'UAH': '₴',\n    'LKR': 'රු.',\n    'ALL': 'Lekë',\n    'RSD': 'дин.',\n    'TJS': 'смн',\n    'THB': '฿',\n    'TMT': 'm.',\n    'TRY': '₺',\n    'UZS': 'сўм',\n    'VND': '₫',\n    'TWD': 'NT$'\n};\nfunction getBlazorCurrencySymbol(currencyCode) {\n    return getValue(currencyCode || '', blazorCurrencyData);\n}\n\n/***\n * Hijri parser\n */\nvar HijriParser;\n(function (HijriParser) {\n    /* tslint:disable */\n    const dateCorrection = [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\n        29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\n        29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\n        30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\n        30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\n        31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\n        32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\n        32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\n        33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\n        33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\n        34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\n        35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\n        35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\n        36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\n        36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\n        37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\n        38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\n        38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\n        39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\n        39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\n        40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\n        41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\n        41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\n        42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\n        42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\n        43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\n        43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\n        44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\n        45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\n        45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\n        46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\n        46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\n        47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\n        48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\n        48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\n        49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\n        49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\n        50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\n        51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\n        51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\n        52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\n        52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\n        53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\n        54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\n        54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\n        55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\n        55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\n        56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\n        56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\n        57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\n        58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\n        58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\n        59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\n        59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\n        60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\n        61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\n        61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\n        62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\n        62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\n        63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\n        64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\n        64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\n        65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\n        65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\n        66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\n        66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\n        67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\n        68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\n        68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\n        69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\n        69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\n        70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\n        71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\n        71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\n        72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\n        72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\n        73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\n        74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\n        74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\n        75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\n        75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\n        76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\n        77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\n        77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\n        78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\n        78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\n        79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\n        79990];\n    /* tslint:enable */\n    function getHijriDate(gDate) {\n        let day = gDate.getDate();\n        let month = gDate.getMonth();\n        let year = gDate.getFullYear();\n        let tMonth = month + 1;\n        let tYear = year;\n        if (tMonth < 3) {\n            tYear -= 1;\n            tMonth += 12;\n        }\n        let yPrefix = Math.floor(tYear / 100.);\n        let julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2;\n        let julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;\n        yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25);\n        julilanOffset = yPrefix - Math.floor(yPrefix / 4.) + 1;\n        let b = julianNumber + julilanOffset + 1524;\n        let c = Math.floor((b - 122.1) / 365.25);\n        let d = Math.floor(365.25 * c);\n        let tempMonth = Math.floor((b - d) / 30.6001);\n        day = (b - d) - Math.floor(30.6001 * tempMonth);\n        month = Math.floor((b - d) / 20.6001);\n        if (month > 13) {\n            c += 1;\n            month -= 12;\n        }\n        month -= 1;\n        year = c - 4716;\n        let modifiedJulianDate = julianNumber - 2400000;\n        // date calculation for year after 2077\n        let iyear = 10631. / 30.;\n        let z = julianNumber - 1948084;\n        let cyc = Math.floor(z / 10631.);\n        z = z - 10631 * cyc;\n        let j = Math.floor((z - 0.1335) / iyear);\n        let iy = 30 * cyc + j;\n        z = z - Math.floor(j * iyear + 0.1335);\n        let im = Math.floor((z + 28.5001) / 29.5);\n        /* istanbul ignore next */\n        if (im === 13) {\n            im = 12;\n        }\n        let tempDay = z - Math.floor(29.5001 * im - 29);\n        let i = 0;\n        for (; i < dateCorrection.length; i++) {\n            if (dateCorrection[i] > modifiedJulianDate) {\n                break;\n            }\n        }\n        let iln = i + 16260;\n        let ii = Math.floor((iln - 1) / 12);\n        let hYear = ii + 1;\n        let hmonth = iln - 12 * ii;\n        let hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;\n        if ((hDate + '').length > 2) {\n            hDate = tempDay;\n            hmonth = im;\n            hYear = iy;\n        }\n        return { year: hYear, month: hmonth, date: hDate };\n    }\n    HijriParser.getHijriDate = getHijriDate;\n    function toGregorian(year, month, day) {\n        let iy = year;\n        let im = month;\n        let id = day;\n        let ii = iy - 1;\n        let iln = (ii * 12) + 1 + (im - 1);\n        let i = iln - 16260;\n        let mcjdn = id + dateCorrection[i - 1] - 1;\n        let julianDate = mcjdn + 2400000;\n        let z = Math.floor(julianDate + 0.5);\n        let a = Math.floor((z - 1867216.25) / 36524.25);\n        a = z + 1 + a - Math.floor(a / 4);\n        let b = a + 1524;\n        let c = Math.floor((b - 122.1) / 365.25);\n        let d = Math.floor(365.25 * c);\n        let e = Math.floor((b - d) / 30.6001);\n        let gDay = b - d - Math.floor(e * 30.6001);\n        let gMonth = e - (e > 13.5 ? 13 : 1);\n        let gYear = c - (gMonth > 2.5 ? 4716 : 4715);\n        /* istanbul ignore next */\n        if (gYear <= 0) {\n            gMonth--;\n        } // No year zero\n        return new Date(gYear + '/' + (gMonth) + '/' + gDay);\n    }\n    HijriParser.toGregorian = toGregorian;\n})(HijriParser || (HijriParser = {}));\n\nconst abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\nconst standalone = 'stand-alone';\nconst weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\nconst timeSetter = {\n    m: 'getMinutes',\n    h: 'getHours',\n    H: 'getHours',\n    s: 'getSeconds',\n    d: 'getDate',\n    f: 'getMilliseconds'\n};\nconst datePartMatcher = {\n    'M': 'month',\n    'd': 'day',\n    'E': 'weekday',\n    'c': 'weekday',\n    'y': 'year',\n    'm': 'minute',\n    'h': 'hour',\n    'H': 'hour',\n    's': 'second',\n    'L': 'month',\n    'a': 'designator',\n    'z': 'timeZone',\n    'Z': 'timeZone',\n    'G': 'era',\n    'f': 'milliseconds'\n};\nconst timeSeparator = 'timeSeparator';\n/* tslint:disable no-any */\n/**\n * Date Format is a framework provides support for date formatting.\n * @private\n */\nclass DateFormat {\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which date  will format.\n     * @param {cldr} - Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static dateFormat(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n        let numObject = getValue('parserObject.numbers', dependable);\n        let dateObject = dependable.dateObject;\n        let formatOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar) };\n        if (isBlazor() && option.isServerRendered) {\n            option = IntlBase.compareBlazorDateFormats(option, culture);\n        }\n        let resPattern = option.format ||\n            IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n        formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : IntlBase.getDateSeparator(dependable.dateObject);\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n            if (isBlazor()) {\n                resPattern = resPattern.replace(/tt/, 'a');\n            }\n            formatOptions.pattern = resPattern;\n            formatOptions.numMapper = isBlazor() ?\n                extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n            let patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\n            for (let str of patternMatch) {\n                let len = str.length;\n                let char = str[0];\n                if (char === 'K') {\n                    char = 'h';\n                }\n                /* tslint:disable no-any */\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        if (isBlazor()) {\n                            formatOptions.weekday = getValue('days.' + IntlBase.monthIndex[len], dateObject);\n                        }\n                        else {\n                            formatOptions.weekday = dependable.dateObject[IntlBase.days][standalone][IntlBase.monthIndex[len]];\n                        }\n                        break;\n                    case 'M':\n                    case 'L':\n                        if (isBlazor()) {\n                            formatOptions.month = getValue('months.' + IntlBase.monthIndex[len], dateObject);\n                        }\n                        else {\n                            formatOptions.month = dependable.dateObject[IntlBase.month][standalone][IntlBase.monthIndex[len]];\n                        }\n                        break;\n                    case 'a':\n                        formatOptions.designator = isBlazor() ?\n                            getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\n                        break;\n                    case 'G':\n                        let eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\n                        break;\n                    case 'z':\n                        formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                        break;\n                }\n            }\n        }\n        return (value) => {\n            if (isNaN(value.getDate())) {\n                return null;\n            }\n            return this.intDateFormatter(value, formatOptions);\n        };\n    }\n    /**\n     * Returns formatted date string based on options passed.\n     * @param {Date} value\n     * @param {FormatOptions} options\n     */\n    // tslint:disable-next-line:max-func-body-length\n    static intDateFormatter(value, options) {\n        let pattern = options.pattern;\n        let ret = '';\n        let matches = pattern.match(IntlBase.dateParseRegex);\n        let dObject = this.getCurrentDateValue(value, options.isIslamic);\n        for (let match of matches) {\n            let length = match.length;\n            let char = match[0];\n            if (char === 'K') {\n                char = 'h';\n            }\n            let curval;\n            let curvalstr = '';\n            let isNumber;\n            let processNumber;\n            let curstr = '';\n            switch (char) {\n                case 'M':\n                case 'L':\n                    curval = dObject.month;\n                    if (length > 2) {\n                        ret += options.month[curval];\n                    }\n                    else {\n                        isNumber = true;\n                    }\n                    break;\n                case 'E':\n                case 'c':\n                    ret += options.weekday[weekdayKey[value.getDay()]];\n                    break;\n                case 'H':\n                case 'h':\n                case 'm':\n                case 's':\n                case 'd':\n                case 'f':\n                    isNumber = true;\n                    if (char === 'd') {\n                        curval = dObject.date;\n                    }\n                    else if (char === 'f') {\n                        isNumber = false;\n                        processNumber = true;\n                        curvalstr = value[timeSetter[char]]().toString();\n                        curvalstr = curvalstr.substring(0, length);\n                        let curlength = curvalstr.length;\n                        if (length !== curlength) {\n                            if (length > 3) {\n                                continue;\n                            }\n                            for (let i = 0; i < length - curlength; i++) {\n                                curvalstr = '0' + curvalstr.toString();\n                            }\n                        }\n                        curstr += curvalstr;\n                    }\n                    else {\n                        curval = value[timeSetter[char]]();\n                    }\n                    if (char === 'h') {\n                        curval = curval % 12 || 12;\n                    }\n                    break;\n                case 'y':\n                    processNumber = true;\n                    curstr += dObject.year;\n                    if (length === 2) {\n                        curstr = curstr.substr(curstr.length - 2);\n                    }\n                    break;\n                case 'a':\n                    let desig = value.getHours() < 12 ? 'am' : 'pm';\n                    ret += options.designator[desig];\n                    break;\n                case 'G':\n                    let dec = value.getFullYear() < 0 ? 0 : 1;\n                    let retu = options.era[dec];\n                    if (isNullOrUndefined(retu)) {\n                        retu = options.era[dec ? 0 : 1];\n                    }\n                    ret += retu || '';\n                    break;\n                case '\\'':\n                    ret += (match === '\\'\\'') ? '\\'' : match.replace(/\\'/g, '');\n                    break;\n                case 'z':\n                    let timezone = value.getTimezoneOffset();\n                    let pattern = (length < 4) ? '+H;-H' : options.timeZone.hourFormat;\n                    pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n                    if (timezone === 0) {\n                        ret += options.timeZone.gmtZeroFormat;\n                    }\n                    else {\n                        processNumber = true;\n                        curstr = this.getTimeZoneValue(timezone, pattern);\n                    }\n                    curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\n                    break;\n                case ':':\n                    ret += options.numMapper.numberSymbols[timeSeparator];\n                    /* tslint:enable no-any */\n                    break;\n                case '/':\n                    ret += options.dateSeperator;\n                    break;\n                case 'W':\n                    isNumber = true;\n                    curval = IntlBase.getWeekOfYear(value);\n                    break;\n                default:\n                    ret += match;\n            }\n            if (isNumber) {\n                processNumber = true;\n                curstr = this.checkTwodigitNumber(curval, length);\n            }\n            if (processNumber) {\n                ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper);\n            }\n        }\n        return ret;\n    }\n    static getCurrentDateValue(value, isIslamic) {\n        if (isIslamic) {\n            return HijriParser.getHijriDate(value);\n        }\n        return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };\n    }\n    /**\n     * Returns two digit numbers for given value and length\n     */\n    static checkTwodigitNumber(val, len) {\n        let ret = val + '';\n        if (len === 2 && ret.length !== 2) {\n            return '0' + ret;\n        }\n        return ret;\n    }\n    /**\n     * Returns the value of the Time Zone.\n     * @param {number} tVal\n     * @param {string} pattern\n     * @private\n     */\n    static getTimeZoneValue(tVal, pattern) {\n        let splt = pattern.split(';');\n        let curPattern = splt[tVal > 0 ? 1 : 0];\n        let no = Math.abs(tVal);\n        return curPattern = curPattern.replace(/HH?|mm/g, (str) => {\n            let len = str.length;\n            let ishour = str.indexOf('H') !== -1;\n            return this.checkTwodigitNumber(Math.floor(ishour ? (no / 60) : (no % 60)), len);\n        });\n    }\n}\n\nconst errorText = {\n    'ms': 'minimumSignificantDigits',\n    'ls': 'maximumSignificantDigits',\n    'mf': 'minimumFractionDigits',\n    'lf': 'maximumFractionDigits',\n};\nconst percentSign = 'percentSign';\nconst minusSign = 'minusSign';\nconst mapper$1 = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\n/**\n * Module for number formatting.\n * @private\n */\nclass NumberFormat {\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} culture -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n     * @param {Object} object- Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static numberFormatter(culture, option, cldr) {\n        let fOptions = extend({}, option);\n        let cOptions = {};\n        let dOptions = {};\n        let symbolPattern;\n        let dependable = IntlBase.getDependables(cldr, culture, '', true);\n        let numObject = dependable.numericObject;\n        dOptions.numberMapper = isBlazor() ? extend({}, numObject) :\n            ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n        dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n        /* tslint:disable no-any */\n        dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) :\n            dOptions.numberMapper.numberSymbols[percentSign];\n        dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) :\n            dOptions.numberMapper.numberSymbols[minusSign];\n        let symbols = dOptions.numberMapper.numberSymbols;\n        if ((option.format) && !(IntlBase.formatRegex.test(option.format))) {\n            cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject);\n        }\n        else {\n            extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n            fOptions.isCurrency = fOptions.type === 'currency';\n            fOptions.isPercent = fOptions.type === 'percent';\n            if (!isBlazor()) {\n                symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n            }\n            fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n            this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n            if (!isUndefined(fOptions.fractionDigits)) {\n                fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n            }\n            if (isUndefined(fOptions.useGrouping)) {\n                fOptions.useGrouping = true;\n            }\n            if (fOptions.isCurrency && !isBlazor()) {\n                symbolPattern = symbolPattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n            }\n            if (!isBlazor()) {\n                let split = symbolPattern.split(';');\n                cOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n                cOptions.pData = IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);\n                if (fOptions.useGrouping) {\n                    fOptions.groupSeparator = symbols[mapper$1[2]];\n                    fOptions.groupData = this.getGroupingDetails(split[0]);\n                }\n            }\n            else {\n                cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n                cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n                if (fOptions.type === 'currency' && option.currency) {\n                    IntlBase.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n                }\n            }\n            let minFrac = isUndefined(fOptions.minimumFractionDigits);\n            if (minFrac) {\n                fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n            }\n            if (isUndefined(fOptions.maximumFractionDigits)) {\n                let mval = cOptions.nData.maximumFraction;\n                fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n            }\n            let mfrac = fOptions.minimumFractionDigits;\n            let lfrac = fOptions.maximumFractionDigits;\n            if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n                if (mfrac > lfrac) {\n                    fOptions.maximumFractionDigits = mfrac;\n                }\n            }\n        }\n        extend(cOptions.nData, fOptions);\n        extend(cOptions.pData, fOptions);\n        return (value) => {\n            if (isNaN(value)) {\n                return symbols[mapper$1[1]];\n            }\n            else if (!isFinite(value)) {\n                return symbols[mapper$1[0]];\n            }\n            return this.intNumberFormatter(value, cOptions, dOptions);\n        };\n    }\n    /**\n     * Returns grouping details for the pattern provided\n     * @param {string} pattern\n     * @returns {GroupDetails}\n     */\n    static getGroupingDetails(pattern) {\n        let ret = {};\n        let match = pattern.match(IntlBase.negativeDataRegex);\n        if (match && match[4]) {\n            let pattern = match[4];\n            let p = pattern.lastIndexOf(',');\n            if (p !== -1) {\n                let temp = pattern.split('.')[0];\n                ret.primary = (temp.length - p) - 1;\n                let s = pattern.lastIndexOf(',', p - 1);\n                if (s !== -1) {\n                    ret.secondary = p - 1 - s;\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns if the provided integer range is valid.\n     * @param {number} val1\n     * @param {number} val2\n     * @param {boolean} checkbothExist\n     * @param {boolean} isFraction\n     * @returns {boolean}\n     */\n    static checkValueRange(val1, val2, checkbothExist, isFraction) {\n        let decide = isFraction ? 'f' : 's';\n        let dint = 0;\n        let str1 = errorText['l' + decide];\n        let str2 = errorText['m' + decide];\n        if (!isUndefined(val1)) {\n            this.checkRange(val1, str1, isFraction);\n            dint++;\n        }\n        if (!isUndefined(val2)) {\n            this.checkRange(val2, str2, isFraction);\n            dint++;\n        }\n        if (dint === 2) {\n            if (val1 < val2) {\n                throwError(str2 + 'specified must be less than the' + str1);\n            }\n            else {\n                return true;\n            }\n        }\n        else if (checkbothExist && dint === 1) {\n            throwError('Both' + str2 + 'and' + str2 + 'must be present');\n        }\n        return false;\n    }\n    /**\n     * Check if the provided fraction range is valid\n     * @param {number} val\n     * @param {string} text\n     * @param {boolean} isFraction\n     * @returns {void}\n     */\n    static checkRange(val, text, isFraction) {\n        let range = isFraction ? [0, 20] : [1, 21];\n        if (val < range[0] || val > range[1]) {\n            throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n        }\n    }\n    /**\n     * Returns formatted numeric string for provided formatting options\n     * @param {number} value\n     * @param {base.GenericFormatOptions} fOptions\n     * @param {CommonOptions} dOptions\n     * @returns {string}\n     */\n    static intNumberFormatter(value, fOptions, dOptions) {\n        let curData;\n        if (isUndefined(fOptions.nData.type)) {\n            return undefined;\n        }\n        else {\n            if (value < 0) {\n                value = value * -1;\n                curData = fOptions.nData;\n            }\n            else if (value === 0) {\n                curData = fOptions.zeroData || fOptions.pData;\n            }\n            else {\n                curData = fOptions.pData;\n            }\n            let fValue = '';\n            if (curData.isPercent) {\n                value = value * 100;\n            }\n            if (curData.groupOne) {\n                fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n            }\n            else {\n                fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n                if (curData.minimumIntegerDigits) {\n                    fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n                }\n            }\n            if (curData.type === 'scientific') {\n                fValue = value.toExponential(curData.maximumFractionDigits);\n                fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper$1[4]]);\n            }\n            fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper$1[3]]);\n            if (curData.useGrouping) {\n                fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper$1[3]] || '.', curData.groupData.secondary);\n            }\n            fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper);\n            if (curData.nlead === 'N/A') {\n                return curData.nlead;\n            }\n            else {\n                return curData.nlead + fValue + curData.nend;\n            }\n        }\n    }\n    /**\n     * Returns significant digits processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    static processSignificantDigits(value, min, max) {\n        let temp = value + '';\n        let tn;\n        let length = temp.length;\n        if (length < min) {\n            return value.toPrecision(min);\n        }\n        else {\n            temp = value.toPrecision(max);\n            tn = +temp;\n            return tn + '';\n        }\n    }\n    /**\n     * Returns grouped numeric string\n     * @param {string} val\n     * @param {number} level1\n     * @param {string} sep\n     * @param {string} decimalSymbol\n     * @param {number} level2\n     * @returns {string}\n     */\n    static groupNumbers(val, level1, sep, decimalSymbol, level2) {\n        let flag = !isNullOrUndefined(level2) && level2 !== 0;\n        let split = val.split(decimalSymbol);\n        let prefix = split[0];\n        let length = prefix.length;\n        let str = '';\n        while (length > level1) {\n            str = prefix.slice(length - level1, length) + (str.length ?\n                (sep + str) : '');\n            length -= level1;\n            if (flag) {\n                level1 = level2;\n                flag = false;\n            }\n        }\n        split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n        return split.join(decimalSymbol);\n    }\n    /**\n     * Returns fraction processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    static processFraction(value, min, max) {\n        let temp = (value + '').split('.')[1];\n        let length = temp ? temp.length : 0;\n        if (min && length < min) {\n            let ret = '';\n            if (length === 0) {\n                ret = value.toFixed(min);\n            }\n            else {\n                ret += value;\n                for (let j = 0; j < min - length; j++) {\n                    ret += '0';\n                }\n                return ret;\n            }\n            return value.toFixed(min);\n        }\n        else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n            return value.toFixed(max);\n        }\n        return value + '';\n    }\n    /**\n     * Returns integer processed numeric string\n     * @param {string} value\n     * @param {number} min\n     * @returns {string}\n     */\n    static processMinimumIntegers(value, min) {\n        let temp = value.split('.');\n        let lead = temp[0];\n        let len = lead.length;\n        if (len < min) {\n            for (let i = 0; i < min - len; i++) {\n                lead = '0' + lead;\n            }\n            temp[0] = lead;\n        }\n        return temp.join('.');\n    }\n}\n\nconst standalone$1 = 'stand-alone';\nconst latnRegex$1 = /^[0-9]*$/;\nconst timeSetter$1 = {\n    minute: 'setMinutes',\n    hour: 'setHours',\n    second: 'setSeconds',\n    day: 'setDate',\n    month: 'setMonth',\n    milliseconds: 'setMilliseconds'\n};\nconst month = 'months';\n/* tslint:disable no-any */\n/**\n * Date Parser.\n * @private\n */\nclass DateParser {\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     *  @return Function.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    static dateParser(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n        // tslint:disable-next-line\n        let numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), false, isBlazor());\n        let parseOptions = {};\n        if (isBlazor() && option.isServerRendered) {\n            option = IntlBase.compareBlazorDateFormats(option, culture);\n        }\n        let resPattern = option.format ||\n            IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n        let regexString = '';\n        let hourOnly;\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n            parseOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar), pattern: resPattern, evalposition: {} };\n            let patternMatch = resPattern.match(IntlBase.dateParseRegex) || [];\n            let length = patternMatch.length;\n            let gmtCorrection = 0;\n            let zCorrectTemp = 0;\n            let isgmtTraversed = false;\n            let nRegx = numOptions.numericRegex;\n            // tslint:disable-next-line\n            let numMapper = isBlazor() ? dependable.parserObject.numbers :\n                ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n            for (let i = 0; i < length; i++) {\n                let str = patternMatch[i];\n                let len = str.length;\n                let char = (str[0] === 'K') ? 'h' : str[0];\n                let isNumber;\n                let canUpdate;\n                // tslint:disable-next-line\n                let charKey = datePartMatcher[char];\n                let optional = (len === 2) ? '' : '?';\n                if (isgmtTraversed) {\n                    gmtCorrection = zCorrectTemp;\n                    isgmtTraversed = false;\n                }\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        // tslint:disable\n                        let weekData;\n                        if (isBlazor()) {\n                            weekData = getValue('days.' + IntlBase.monthIndex[len], dependable.dateObject);\n                        }\n                        else {\n                            weekData = dependable.dateObject[IntlBase.days][standalone$1][IntlBase.monthIndex[len]];\n                        }\n                        let weekObject = ParserBase.reverseObject(weekData);\n                        // tslint:enable\n                        regexString += '(' + Object.keys(weekObject).join('|') + ')';\n                        break;\n                    case 'M':\n                    case 'L':\n                    case 'd':\n                    case 'm':\n                    case 's':\n                    case 'h':\n                    case 'H':\n                    case 'f':\n                        canUpdate = true;\n                        if ((char === 'M' || char === 'L') && len > 2) {\n                            let monthData;\n                            if (isBlazor()) {\n                                /* tslint:disable no-any */\n                                monthData = getValue('months.' + IntlBase.monthIndex[len], dependable.dateObject);\n                            }\n                            else {\n                                /* tslint:disable no-any */\n                                monthData = dependable.dateObject[month][standalone$1][IntlBase.monthIndex[len]];\n                            }\n                            // tslint:disable-next-line\n                            parseOptions[charKey] = ParserBase.reverseObject(monthData);\n                            /* tslint:disable no-any */\n                            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        }\n                        else if (char === 'f') {\n                            if (len > 3) {\n                                continue;\n                            }\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';\n                        }\n                        else {\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + optional + ')';\n                        }\n                        if (char === 'h') {\n                            parseOptions.hour12 = true;\n                        }\n                        break;\n                    case 'W':\n                        let opt = len === 1 ? '?' : '';\n                        regexString += '(' + nRegx + opt + nRegx + ')';\n                        break;\n                    case 'y':\n                        canUpdate = isNumber = true;\n                        if (len === 2) {\n                            regexString += '(' + nRegx + nRegx + ')';\n                        }\n                        else {\n                            regexString += '(' + nRegx + '{' + len + ',})';\n                        }\n                        break;\n                    case 'a':\n                        canUpdate = true;\n                        let periodValur = isBlazor() ?\n                            getValue('dayPeriods', dependable.dateObject) :\n                            getValue('dayPeriods.format.wide', dependable.dateObject);\n                        parseOptions[charKey] = ParserBase.reverseObject(periodValur);\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        break;\n                    case 'G':\n                        canUpdate = true;\n                        let eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        parseOptions[charKey] = ParserBase.reverseObject(isBlazor() ?\n                            getValue('eras', dependable.dateObject) : getValue('eras.' + eText, dependable.dateObject));\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';\n                        break;\n                    case 'z':\n                        let tval = new Date().getTimezoneOffset();\n                        canUpdate = (tval !== 0);\n                        parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);\n                        let tzone = parseOptions[charKey];\n                        hourOnly = (len < 4);\n                        let hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;\n                        hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);\n                        regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';\n                        isgmtTraversed = true;\n                        zCorrectTemp = hourOnly ? 6 : 12;\n                        break;\n                    case '\\'':\n                        let iString = str.replace(/\\'/g, '');\n                        regexString += '(' + iString + ')?';\n                        break;\n                    default:\n                        regexString += '([\\\\D])';\n                        break;\n                }\n                if (canUpdate) {\n                    parseOptions.evalposition[charKey] = { isNumber: isNumber, pos: i + 1 + gmtCorrection, hourOnly: hourOnly };\n                }\n                if (i === length - 1 && !isNullOrUndefined(regexString)) {\n                    parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');\n                }\n            }\n        }\n        return (value) => {\n            let parsedDateParts = this.internalDateParse(value, parseOptions, numOptions);\n            if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {\n                return null;\n            }\n            if (parseOptions.isIslamic) {\n                let dobj = {};\n                let tYear = parsedDateParts.year;\n                let tDate = parsedDateParts.day;\n                let tMonth = parsedDateParts.month;\n                let ystrig = tYear ? (tYear + '') : '';\n                let is2DigitYear = (ystrig.length === 2);\n                if (!tYear || !tMonth || !tDate || is2DigitYear) {\n                    dobj = HijriParser.getHijriDate(new Date());\n                }\n                if (is2DigitYear) {\n                    tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);\n                }\n                // tslint:disable-next-line\n                let dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);\n                parsedDateParts.year = dateObject.getFullYear();\n                parsedDateParts.month = dateObject.getMonth() + 1;\n                parsedDateParts.day = dateObject.getDate();\n            }\n            return this.getDateObject(parsedDateParts);\n        };\n    }\n    /* tslint:disable */\n    /**\n     * Returns date object for provided date options\n     * @param {DateParts} options\n     * @param {Date} value\n     * @returns {Date}\n     */\n    static getDateObject(options, value) {\n        let res = value || new Date();\n        res.setMilliseconds(0);\n        let tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];\n        let y = options.year;\n        let desig = options.designator;\n        let tzone = options.timeZone;\n        if (!isUndefined(y)) {\n            let len = (y + '').length;\n            if (len <= 2) {\n                let century = Math.floor(res.getFullYear() / 100) * 100;\n                y += century;\n            }\n            res.setFullYear(y);\n        }\n        for (let key of tKeys) {\n            let tValue = options[key];\n            if (isUndefined(tValue) && key === \"day\") {\n                res.setDate(1);\n            }\n            if (!isUndefined(tValue)) {\n                if (key === 'month') {\n                    tValue -= 1;\n                    if (tValue < 0 || tValue > 11) {\n                        return new Date('invalid');\n                    }\n                    let pDate = res.getDate();\n                    res.setDate(1);\n                    res[timeSetter$1[key]](tValue);\n                    let lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();\n                    res.setDate(pDate < lDate ? pDate : lDate);\n                }\n                else {\n                    if (key === 'day') {\n                        let lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();\n                        if ((tValue < 1 || tValue > lastDay)) {\n                            return null;\n                        }\n                    }\n                    res[timeSetter$1[key]](tValue);\n                }\n            }\n        }\n        if (!isUndefined(desig)) {\n            let hour = res.getHours();\n            if (desig === 'pm') {\n                res.setHours(hour + (hour === 12 ? 0 : 12));\n            }\n            else if (hour === 12) {\n                res.setHours(0);\n            }\n        }\n        if (!isUndefined(tzone)) {\n            let tzValue = tzone - res.getTimezoneOffset();\n            if (tzValue !== 0) {\n                res.setMinutes(res.getMinutes() + tzValue);\n            }\n        }\n        return res;\n    }\n    /**\n     * Returns date parsing options for provided value along with parse and numeric options\n     * @param {string} value\n     * @param {ParseOptions} parseOptions\n     * @param {NumericOptions} num\n     * @returns {DateParts}\n     */\n    static internalDateParse(value, parseOptions, num) {\n        let matches = value.match(parseOptions.parserRegex);\n        let retOptions = { 'hour': 0, 'minute': 0, 'second': 0 };\n        let nRegx = num.numericRegex;\n        if (isNullOrUndefined(matches)) {\n            return null;\n        }\n        else {\n            let props = Object.keys(parseOptions.evalposition);\n            for (let prop of props) {\n                let curObject = parseOptions.evalposition[prop];\n                let matchString = matches[curObject.pos];\n                if (curObject.isNumber) {\n                    retOptions[prop] = this.internalNumberParser(matchString, num);\n                }\n                else {\n                    if (prop === 'timeZone' && !isUndefined(matchString)) {\n                        let pos = curObject.pos;\n                        let val;\n                        let tmatch = matches[pos + 1];\n                        let flag = !isUndefined(tmatch);\n                        if (curObject.hourOnly) {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;\n                        }\n                        else {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;\n                            val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);\n                        }\n                        if (!isNullOrUndefined(val)) {\n                            retOptions[prop] = val;\n                        }\n                    }\n                    else {\n                        matchString = prop === 'month' ? matchString[0].toUpperCase() + matchString.substring(1).toLowerCase() : matchString;\n                        retOptions[prop] = parseOptions[prop][matchString];\n                    }\n                }\n            }\n            if (parseOptions.hour12) {\n                retOptions.hour12 = true;\n            }\n        }\n        return retOptions;\n    }\n    /**\n     * Returns parsed number for provided Numeric string and Numeric Options\n     * @param {string} value\n     * @param {NumericOptions} option\n     * @returns {number}\n     */\n    static internalNumberParser(value, option) {\n        value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);\n        if (latnRegex$1.test(value)) {\n            return +value;\n        }\n        return null;\n    }\n    /**\n     * Returns parsed time zone RegExp for provided hour format and time zone\n     * @param {string} hourFormat\n     * @param {base.TimeZoneOptions} tZone\n     * @param {string} nRegex\n     * @returns {string}\n     */\n    static parseTimeZoneRegx(hourFormat, tZone, nRegex) {\n        let pattern = tZone.gmtFormat;\n        let ret;\n        let cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';\n        let splitStr;\n        ret = hourFormat.replace('+', '\\\\+');\n        if (hourFormat.indexOf('HH') !== -1) {\n            ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');\n        }\n        else {\n            ret = ret.replace(/H|m/g, '(' + cRegex + '?)');\n        }\n        splitStr = (ret.split(';').map((str) => {\n            return pattern.replace('{0}', str);\n        }));\n        ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;\n        return ret;\n    }\n    /**\n     * Returns zone based value.\n     * @param {boolean} flag\n     * @param {string} val1\n     * @param {string} val2\n     * @param {NumericOptions} num\n     * @returns {number}\n     */\n    static getZoneValue(flag, val1, val2, num) {\n        let ival = flag ? val1 : val2;\n        if (!ival) {\n            return 0;\n        }\n        let value = this.internalNumberParser(ival, num);\n        if (flag) {\n            return -value;\n        }\n        return value;\n    }\n}\n/* tslint:enable */\n\nconst parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;\nconst groupRegex = /,/g;\nconst keys = ['minusSign', 'infinity'];\n/**\n * Module for Number Parser.\n * @private\n */\nclass NumberParser {\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} - Specific the format in which number  will parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static numberParser(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, '', true);\n        let parseOptions = { custom: true };\n        let numOptions;\n        if ((IntlBase.formatRegex.test(option.format)) || !(option.format)) {\n            extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n            parseOptions.custom = false;\n        }\n        else {\n            extend(parseOptions, IntlBase.customFormat(option.format, null, null));\n        }\n        let numbers = getValue('numbers', dependable.parserObject);\n        numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true, isBlazor());\n        parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch));\n        // tslint:disable-next-line:no-any\n        parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];\n        let symbolpattern;\n        if (!isBlazor()) {\n            symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);\n            if (symbolpattern) {\n                symbolpattern = symbolpattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n                let split = symbolpattern.split(';');\n                parseOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, '');\n                parseOptions.pData = IntlBase.getFormatData(split[0], true, '');\n            }\n        }\n        else {\n            parseOptions.nData = extend({}, {}, getValue(parseOptions.type + 'nData', numbers));\n            parseOptions.pData = extend({}, {}, getValue(parseOptions.type + 'pData', numbers));\n            if (parseOptions.type === 'currency' && option.currency) {\n                IntlBase.replaceBlazorCurrency([parseOptions.pData, parseOptions.nData], getValue('currencySymbol', numbers), option.currency);\n            }\n        }\n        return (value) => {\n            return this.getParsedNumber(value, parseOptions, numOptions);\n        };\n    }\n    /**\n     * Returns parsed number for the provided formatting options\n     * @param {string} value\n     * @param {NumericParts} options\n     * @param {NumericOptions} numOptions\n     * @returns {number}\n     */\n    static getParsedNumber(value, options, numOptions) {\n        let isNegative;\n        let isPercent;\n        let tempValue;\n        let lead;\n        let end;\n        let ret;\n        if (value.indexOf(options.infinity) !== -1) {\n            return Infinity;\n        }\n        else {\n            value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);\n            value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);\n            if (value.indexOf('.') === 0) {\n                value = '0' + value;\n            }\n            let matches = value.match(parseRegex);\n            if (isNullOrUndefined(matches)) {\n                return NaN;\n            }\n            lead = matches[1];\n            tempValue = matches[2];\n            let exponent = matches[5];\n            end = matches[6];\n            isNegative = options.custom ? ((lead === options.nData.nlead) && (end === options.nData.nend)) :\n                ((lead.indexOf(options.nData.nlead) !== -1) && (end.indexOf(options.nData.nend) !== -1));\n            isPercent = isNegative ?\n                options.nData.isPercent :\n                options.pData.isPercent;\n            tempValue = tempValue.replace(groupRegex, '');\n            if (exponent) {\n                tempValue += exponent;\n            }\n            ret = +tempValue;\n            if (options.type === 'percent' || isPercent) {\n                ret = ret / 100;\n            }\n            if (options.custom || options.fractionDigits) {\n                ret = parseFloat(ret.toFixed(options.custom ?\n                    (isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits) : options.fractionDigits));\n            }\n            if (isNegative) {\n                ret *= -1;\n            }\n            return ret;\n        }\n    }\n}\n\nclass Observer {\n    constructor(context) {\n        this.ranArray = [];\n        this.boundedEvents = {};\n        if (isNullOrUndefined(context)) {\n            return;\n        }\n        this.context = context;\n    }\n    ;\n    /**\n     * To attach handler for given property in current context.\n     * @param {string} property - specifies the name of the event.\n     * @param {Function} handler - Specifies the handler function to be called while event notified.\n     * @param {Object} context - Specifies the context binded to the handler.\n     * @param {string} id - specifies the random generated id.\n     * @return {void}\n     */\n    on(property, handler, context, id) {\n        if (isNullOrUndefined(handler)) {\n            return;\n        }\n        let cntxt = context || this.context;\n        if (this.notExist(property)) {\n            this.boundedEvents[property] = [{ handler: handler, context: cntxt }];\n            return;\n        }\n        if (!isNullOrUndefined(id)) {\n            if (this.ranArray.indexOf(id) === -1) {\n                this.ranArray.push(id);\n                this.boundedEvents[property].push({ handler: handler, context: cntxt, id: id });\n            }\n        }\n        else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {\n            this.boundedEvents[property].push({ handler: handler, context: cntxt });\n        }\n    }\n    /**\n     * To remove handlers from a event attached using on() function.\n     * @param {string} eventName - specifies the name of the event.\n     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.\n     * @param {string} id - specifies the random generated id.\n     * @return {void}\n     */\n    off(property, handler, id) {\n        if (this.notExist(property)) {\n            return;\n        }\n        let curObject = getValue(property, this.boundedEvents);\n        if (handler) {\n            for (let i = 0; i < curObject.length; i++) {\n                if (id) {\n                    if (curObject[i].id === id) {\n                        curObject.splice(i, 1);\n                        let indexLocation = this.ranArray.indexOf(id);\n                        if (indexLocation !== -1) {\n                            this.ranArray.splice(indexLocation, 1);\n                        }\n                        break;\n                    }\n                }\n                else if (handler === curObject[i].handler) {\n                    curObject.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        else {\n            delete this.boundedEvents[property];\n        }\n    }\n    /**\n     * To notify the handlers in the specified event.\n     * @param {string} property - Specifies the event to be notify.\n     * @param {Object} args - Additional parameters to pass while calling the handler.\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it was failure to call.\n     * @return {void}\n     */\n    notify(property, argument, successHandler, errorHandler) {\n        if (this.notExist(property)) {\n            if (successHandler) {\n                successHandler.call(this, argument);\n            }\n            return;\n        }\n        if (argument) {\n            argument.name = property;\n        }\n        let blazor = 'Blazor';\n        let curObject = getValue(property, this.boundedEvents).slice(0);\n        if (window[blazor]) {\n            return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);\n        }\n        else {\n            for (let cur of curObject) {\n                cur.handler.call(cur.context, argument);\n            }\n            if (successHandler) {\n                successHandler.call(this, argument);\n            }\n        }\n    }\n    blazorCallback(objs, argument, successHandler, errorHandler, index) {\n        let isTrigger = index === objs.length - 1;\n        if (index < objs.length) {\n            let obj = objs[index];\n            let promise = obj.handler.call(obj.context, argument);\n            if (promise && typeof promise.then === 'function') {\n                if (!successHandler) {\n                    return promise;\n                }\n                promise.then((data) => {\n                    data = typeof data === 'string' && this.isJson(data) ? JSON.parse(data, this.dateReviver) : data;\n                    extend(argument, argument, data, true);\n                    if (successHandler && isTrigger) {\n                        successHandler.call(obj.context, argument);\n                    }\n                    else {\n                        return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n                    }\n                }).catch((data) => {\n                    if (errorHandler) {\n                        errorHandler.call(obj.context, typeof data === 'string' &&\n                            this.isJson(data) ? JSON.parse(data, this.dateReviver) : data);\n                    }\n                });\n            }\n            else if (successHandler && isTrigger) {\n                successHandler.call(obj.context, argument);\n            }\n            else {\n                return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-any\n    dateReviver(key, value) {\n        let dPattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;\n        if (isBlazor && typeof value === 'string' && value.match(dPattern) !== null) {\n            return (new Date(value));\n        }\n        return (value);\n    }\n    isJson(value) {\n        try {\n            JSON.parse(value);\n        }\n        catch (e) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * To destroy handlers in the event\n     */\n    destroy() {\n        this.boundedEvents = this.context = undefined;\n    }\n    /**\n     * Returns if the property exists.\n     */\n    notExist(prop) {\n        return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;\n    }\n    /**\n     * Returns if the handler is present.\n     */\n    isHandlerPresent(boundedEvents, handler) {\n        for (let cur of boundedEvents) {\n            if (cur.handler === handler) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Specifies the observer used for external change detection.\n */\nlet onIntlChange = new Observer();\n/**\n * Specifies the default rtl status for EJ2 components.\n */\nlet rightToLeft = false;\n/**\n * Specifies the CLDR data loaded for internationalization functionalities.\n * @private\n */\nlet cldrData = {};\n/**\n * Specifies the default culture value to be considered.\n * @private\n */\nlet defaultCulture = 'en-US';\n/**\n * Specifies default currency code to be considered\n * @private\n */\nlet defaultCurrencyCode = 'USD';\nconst mapper = ['numericObject', 'dateObject'];\n/**\n * Internationalization class provides support to parse and format the number and date object to the desired format.\n * ```typescript\n * // To set the culture globally\n * setCulture('en-GB');\n *\n * // To set currency code globally\n * setCurrencyCode('EUR');\n *\n * //Load cldr data\n * loadCldr(gregorainData);\n * loadCldr(timeZoneData);\n * loadCldr(numbersData);\n * loadCldr(numberSystemData);\n *\n * // To use formatter in component side\n * let Intl:Internationalization = new Internationalization();\n *\n * // Date formatting\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\n * dateFormatter(new Date('11/2/2016'));\n * dateFormatter(new Date('25/2/2030'));\n * Intl.formatDate(new Date(),{skeleton:'E'});\n *\n * //Number formatting\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\n * numberFormatter(24563334);\n * Intl.formatNumber(123123,{skeleton:'p2'});\n *\n * // Date parser\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\n * dateParser('10:30 PM');\n * Intl.parseDate('10',{skeleton:'H'});\n * ```\n */\nclass Internationalization {\n    constructor(cultureName) {\n        if (cultureName) {\n            this.culture = cultureName;\n        }\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    getDateFormat(options) {\n        return DateFormat.dateFormat(this.getCulture(), options || { type: 'date', skeleton: 'short' }, cldrData);\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    getNumberFormat(options) {\n        if (options && !options.currency) {\n            options.currency = defaultCurrencyCode;\n        }\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n    }\n    /**\n     * Returns the parser function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    getDateParser(options) {\n        return DateParser.dateParser(this.getCulture(), options || { skeleton: 'short', type: 'date' }, cldrData);\n    }\n    /**\n     * Returns the parser function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    getNumberParser(options) {\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberParser.numberParser(this.getCulture(), options || { format: 'N' }, cldrData);\n    }\n    /**\n     * Returns the formatted string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    formatNumber(value, option) {\n        return this.getNumberFormat(option)(value);\n    }\n    /**\n     * Returns the formatted date string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    formatDate(value, option) {\n        return this.getDateFormat(option)(value);\n    }\n    /**\n     * Returns the date object for given date string and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\n     * @returns {Date}\n     */\n    parseDate(value, option) {\n        return this.getDateParser(option)(value);\n    }\n    /**\n     * Returns the number object from the given string value and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\n     * @returns {number}\n     */\n    parseNumber(value, option) {\n        return this.getNumberParser(option)(value);\n    }\n    /**\n     * Returns Native Date Time Pattern\n     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\n     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\n     * @returns {string}\n     * @private\n     */\n    getDatePattern(option, isExcelFormat) {\n        return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n    }\n    /**\n     * Returns Native Number Pattern\n     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\n     * @returns {string}\n     * @private\n     */\n    getNumberPattern(option, isExcel) {\n        return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);\n    }\n    /**\n     * Returns the First Day of the Week\n     * @returns {number}\n     */\n    getFirstDayOfWeek() {\n        return IntlBase.getWeekData(this.getCulture(), cldrData);\n    }\n    getCulture() {\n        return this.culture || defaultCulture;\n    }\n}\n/**\n * Set the default culture to all EJ2 components\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\n */\nfunction setCulture(cultureName) {\n    defaultCulture = cultureName;\n    onIntlChange.notify('notifyExternalChange', { 'locale': defaultCulture });\n}\n/**\n * Set the default currency code to all EJ2 components\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\n * @returns {void}\n */\nfunction setCurrencyCode(currencyCode) {\n    defaultCurrencyCode = currencyCode;\n    onIntlChange.notify('notifyExternalChange', { 'currencyCode': defaultCurrencyCode });\n}\n/**\n * Load the CLDR data into context\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\n * @returns {void}\n */\nfunction loadCldr(...data) {\n    for (let obj of data) {\n        extend(cldrData, obj, {}, true);\n    }\n}\n/**\n * To enable or disable RTL functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\n * @returns {void}\n */\nfunction enableRtl(status = true) {\n    rightToLeft = status;\n    onIntlChange.notify('notifyExternalChange', { enableRtl: rightToLeft });\n}\n/**\n * To get the numeric CLDR object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @ignore\n * @private\n */\nfunction getNumericObject(locale, type) {\n    /* tslint:disable no-any */\n    let numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n    let dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n    let numSystem = getValue('defaultNumberingSystem', numObject);\n    let symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n    let pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n    return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), { 'dateSeparator': IntlBase.getDateSeparator(dateObject) });\n}\n/**\n * To get the numeric CLDR  number base object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\n * @ignore\n * @private\n */\nfunction getNumberDependable(locale, currency) {\n    let numObject = IntlBase.getDependables(cldrData, locale, '', true);\n    return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\n * To get the default date CLDR object.\n * @ignore\n * @private\n */\nfunction getDefaultDateObject(mode) {\n    return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}\n\nconst blazorCultureFormats = {\n    'en-US': {\n        'd': 'M/d/y',\n        'D': 'EEEE, MMMM d, y',\n        'f': 'EEEE, MMMM d, y h:mm a',\n        'F': 'EEEE, MMMM d, y h:mm:s a',\n        'g': 'M/d/y h:mm a',\n        'G': 'M/d/yyyy h:mm:ss tt',\n        'm': 'MMMM d',\n        'M': 'MMMM d',\n        'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n        't': 'h:mm tt',\n        'T': 'h:m:s tt',\n        'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n        'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n        'y': 'MMMM yyyy',\n        'Y': 'MMMM yyyy'\n    }\n};\n/**\n * Date base common constants and function for date parser and formatter.\n */\nvar IntlBase;\n(function (IntlBase) {\n    // tslint:disable-next-line:max-line-length\n    IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n    const fractionRegex = /[0-9]/g;\n    IntlBase.defaultCurrency = '$';\n    const mapper = ['infinity', 'nan', 'group', 'decimal'];\n    const patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n    const patternMatch = {\n        'G': '',\n        'M': 'm',\n        'L': 'm',\n        'H': 'h',\n        'c': 'd',\n        '\\'': '\"',\n        ' a': ' AM/PM',\n        'yy': 'yy',\n        'y': 'yyyy',\n        'EEEE': 'dddd',\n        'E': 'ddd'\n    };\n    IntlBase.dateConverterMapper = /dddd|ddd/ig;\n    const defaultFirstDay = 'sun';\n    IntlBase.islamicRegex = /^islamic/;\n    const firstDayMapper = {\n        'sun': 0,\n        'mon': 1,\n        'tue': 2,\n        'wed': 3,\n        'thu': 4,\n        'fri': 5,\n        'sat': 6\n    };\n    IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n    const typeMapper = {\n        '$': 'isCurrency',\n        '%': 'isPercent',\n        '-': 'isNegative',\n        0: 'nlead',\n        1: 'nend'\n    };\n    IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n    IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n    /* tslint:disable:quotemark */\n    IntlBase.defaultObject = {\n        'dates': {\n            'calendars': {\n                'gregorian': {\n                    'months': {\n                        'stand-alone': {\n                            'abbreviated': {\n                                '1': 'Jan',\n                                '2': 'Feb',\n                                '3': 'Mar',\n                                '4': 'Apr',\n                                '5': 'May',\n                                '6': 'Jun',\n                                '7': 'Jul',\n                                '8': 'Aug',\n                                '9': 'Sep',\n                                '10': 'Oct',\n                                '11': 'Nov',\n                                '12': 'Dec'\n                            },\n                            'narrow': {\n                                '1': 'J',\n                                '2': 'F',\n                                '3': 'M',\n                                '4': 'A',\n                                '5': 'M',\n                                '6': 'J',\n                                '7': 'J',\n                                '8': 'A',\n                                '9': 'S',\n                                '10': 'O',\n                                '11': 'N',\n                                '12': 'D'\n                            },\n                            'wide': {\n                                '1': 'January',\n                                '2': 'February',\n                                '3': 'March',\n                                '4': 'April',\n                                '5': 'May',\n                                '6': 'June',\n                                '7': 'July',\n                                '8': 'August',\n                                '9': 'September',\n                                '10': 'October',\n                                '11': 'November',\n                                '12': 'December'\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    'eras': {\n                        'eraNames': {\n                            '0': 'Before Christ',\n                            '0-alt-variant': 'Before Common Era',\n                            '1': 'Anno Domini',\n                            \"1-alt-variant\": \"Common Era\"\n                        },\n                        'eraAbbr': {\n                            '0': 'BC',\n                            '0-alt-variant': 'BCE',\n                            '1': 'AD',\n                            '1-alt-variant': 'CE'\n                        },\n                        'eraNarrow': {\n                            '0': 'B',\n                            '0-alt-variant': 'BCE',\n                            '1': 'A',\n                            '1-alt-variant': 'CE'\n                        }\n                    },\n                    'dateFormats': {\n                        'full': 'EEEE, MMMM d, y',\n                        'long': 'MMMM d, y',\n                        'medium': 'MMM d, y',\n                        'short': 'M/d/yy'\n                    },\n                    'timeFormats': {\n                        'full': 'h:mm:ss a zzzz',\n                        'long': 'h:mm:ss a z',\n                        'medium': 'h:mm:ss a',\n                        'short': 'h:mm a'\n                    },\n                    'dateTimeFormats': {\n                        'full': \"{1} 'at' {0}\",\n                        'long': \"{1} 'at' {0}\",\n                        'medium': '{1}, {0}',\n                        'short': '{1}, {0}',\n                        'availableFormats': {\n                            'd': 'd',\n                            'E': 'ccc',\n                            'Ed': 'd E',\n                            'Ehm': 'E h:mm a',\n                            'EHm': 'E HH:mm',\n                            'Ehms': 'E h:mm:ss a',\n                            'EHms': 'E HH:mm:ss',\n                            'Gy': 'y G',\n                            'GyMMM': 'MMM y G',\n                            'GyMMMd': 'MMM d, y G',\n                            'GyMMMEd': 'E, MMM d, y G',\n                            'h': 'h a',\n                            'H': 'HH',\n                            'hm': 'h:mm a',\n                            'Hm': 'HH:mm',\n                            'hms': 'h:mm:ss a',\n                            'Hms': 'HH:mm:ss',\n                            'hmsv': 'h:mm:ss a v',\n                            'Hmsv': 'HH:mm:ss v',\n                            'hmv': 'h:mm a v',\n                            'Hmv': 'HH:mm v',\n                            'M': 'L',\n                            'Md': 'M/d',\n                            'MEd': 'E, M/d',\n                            'MMM': 'LLL',\n                            'MMMd': 'MMM d',\n                            'MMMEd': 'E, MMM d',\n                            'MMMMd': 'MMMM d',\n                            'ms': 'mm:ss',\n                            'y': 'y',\n                            'yM': 'M/y',\n                            'yMd': 'M/d/y',\n                            'yMEd': 'E, M/d/y',\n                            'yMMM': 'MMM y',\n                            'yMMMd': 'MMM d, y',\n                            'yMMMEd': 'E, MMM d, y',\n                            'yMMMM': 'MMMM y',\n                        },\n                    }\n                },\n                \"islamic\": {\n                    \"months\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"1\": \"Muh.\",\n                                \"2\": \"Saf.\",\n                                \"3\": \"Rab. I\",\n                                \"4\": \"Rab. II\",\n                                \"5\": \"Jum. I\",\n                                \"6\": \"Jum. II\",\n                                \"7\": \"Raj.\",\n                                \"8\": \"Sha.\",\n                                \"9\": \"Ram.\",\n                                \"10\": \"Shaw.\",\n                                \"11\": \"Dhuʻl-Q.\",\n                                \"12\": \"Dhuʻl-H.\"\n                            },\n                            \"narrow\": {\n                                \"1\": \"1\",\n                                \"2\": \"2\",\n                                \"3\": \"3\",\n                                \"4\": \"4\",\n                                \"5\": \"5\",\n                                \"6\": \"6\",\n                                \"7\": \"7\",\n                                \"8\": \"8\",\n                                \"9\": \"9\",\n                                \"10\": \"10\",\n                                \"11\": \"11\",\n                                \"12\": \"12\"\n                            },\n                            \"wide\": {\n                                \"1\": \"Muharram\",\n                                \"2\": \"Safar\",\n                                \"3\": \"Rabiʻ I\",\n                                \"4\": \"Rabiʻ II\",\n                                \"5\": \"Jumada I\",\n                                \"6\": \"Jumada II\",\n                                \"7\": \"Rajab\",\n                                \"8\": \"Shaʻban\",\n                                \"9\": \"Ramadan\",\n                                \"10\": \"Shawwal\",\n                                \"11\": \"Dhuʻl-Qiʻdah\",\n                                \"12\": \"Dhuʻl-Hijjah\"\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    \"eras\": {\n                        \"eraNames\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraAbbr\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraNarrow\": {\n                            \"0\": \"AH\"\n                        }\n                    },\n                    \"dateFormats\": {\n                        \"full\": \"EEEE, MMMM d, y G\",\n                        \"long\": \"MMMM d, y G\",\n                        \"medium\": \"MMM d, y G\",\n                        \"short\": \"M/d/y GGGGG\"\n                    },\n                    \"timeFormats\": {\n                        \"full\": \"h:mm:ss a zzzz\",\n                        \"long\": \"h:mm:ss a z\",\n                        \"medium\": \"h:mm:ss a\",\n                        \"short\": \"h:mm a\"\n                    },\n                    \"dateTimeFormats\": {\n                        \"full\": \"{1} 'at' {0}\",\n                        \"long\": \"{1} 'at' {0}\",\n                        \"medium\": \"{1}, {0}\",\n                        \"short\": \"{1}, {0}\",\n                        \"availableFormats\": {\n                            \"d\": \"d\",\n                            \"E\": \"ccc\",\n                            \"Ed\": \"d E\",\n                            \"Ehm\": \"E h:mm a\",\n                            \"EHm\": \"E HH:mm\",\n                            \"Ehms\": \"E h:mm:ss a\",\n                            \"EHms\": \"E HH:mm:ss\",\n                            \"Gy\": \"y G\",\n                            \"GyMMM\": \"MMM y G\",\n                            \"GyMMMd\": \"MMM d, y G\",\n                            \"GyMMMEd\": \"E, MMM d, y G\",\n                            \"h\": \"h a\",\n                            \"H\": \"HH\",\n                            \"hm\": \"h:mm a\",\n                            \"Hm\": \"HH:mm\",\n                            \"hms\": \"h:mm:ss a\",\n                            \"Hms\": \"HH:mm:ss\",\n                            \"M\": \"L\",\n                            \"Md\": \"M/d\",\n                            \"MEd\": \"E, M/d\",\n                            \"MMM\": \"LLL\",\n                            \"MMMd\": \"MMM d\",\n                            \"MMMEd\": \"E, MMM d\",\n                            \"MMMMd\": \"MMMM d\",\n                            \"ms\": \"mm:ss\",\n                            \"y\": \"y G\",\n                            \"yyyy\": \"y G\",\n                            \"yyyyM\": \"M/y GGGGG\",\n                            \"yyyyMd\": \"M/d/y GGGGG\",\n                            \"yyyyMEd\": \"E, M/d/y GGGGG\",\n                            \"yyyyMMM\": \"MMM y G\",\n                            \"yyyyMMMd\": \"MMM d, y G\",\n                            \"yyyyMMMEd\": \"E, MMM d, y G\",\n                            \"yyyyMMMM\": \"MMMM y G\",\n                            \"yyyyQQQ\": \"QQQ y G\",\n                            \"yyyyQQQQ\": \"QQQQ y G\"\n                        }\n                    }\n                }\n            },\n            'timeZoneNames': {\n                \"hourFormat\": \"+HH:mm;-HH:mm\",\n                \"gmtFormat\": \"GMT{0}\",\n                \"gmtZeroFormat\": \"GMT\",\n            }\n        },\n        'numbers': {\n            'currencies': {\n                'USD': {\n                    'displayName': 'US Dollar',\n                    'symbol': '$',\n                    'symbol-alt-narrow': '$'\n                },\n                'EUR': {\n                    'displayName': 'Euro',\n                    'symbol': '€',\n                    'symbol-alt-narrow': '€'\n                },\n                'GBP': {\n                    'displayName': 'British Pound',\n                    'symbol-alt-narrow': '£'\n                },\n            },\n            'defaultNumberingSystem': 'latn',\n            'minimumGroupingDigits': '1',\n            'symbols-numberSystem-latn': {\n                'decimal': '.',\n                'group': ',',\n                'list': ';',\n                'percentSign': '%',\n                'plusSign': '+',\n                'minusSign': '-',\n                'exponential': 'E',\n                'superscriptingExponent': '×',\n                'perMille': '‰',\n                'infinity': '∞',\n                'nan': 'NaN',\n                'timeSeparator': ':'\n            },\n            'decimalFormats-numberSystem-latn': {\n                'standard': '#,##0.###',\n            },\n            'percentFormats-numberSystem-latn': {\n                'standard': '#,##0%'\n            },\n            'currencyFormats-numberSystem-latn': {\n                'standard': '¤#,##0.00',\n                'accounting': '¤#,##0.00;(¤#,##0.00)'\n            },\n            'scientificFormats-numberSystem-latn': {\n                'standard': '#E0'\n            }\n        }\n    };\n    IntlBase.blazorDefaultObject = {\n        \"numbers\": {\n            \"mapper\": {\n                \"0\": \"0\",\n                \"1\": \"1\",\n                \"2\": \"2\",\n                \"3\": \"3\",\n                \"4\": \"4\",\n                \"5\": \"5\",\n                \"6\": \"6\",\n                \"7\": \"7\",\n                \"8\": \"8\",\n                \"9\": \"9\"\n            },\n            \"mapperDigits\": \"0123456789\",\n            \"numberSymbols\": {\n                \"decimal\": \".\",\n                \"group\": \",\",\n                \"plusSign\": \"+\",\n                \"minusSign\": \"-\",\n                \"percentSign\": \"%\",\n                \"nan\": \"NaN\",\n                \"timeSeparator\": \":\",\n                \"infinity\": \"∞\"\n            },\n            \"timeSeparator\": \":\",\n            \"currencySymbol\": \"$\",\n            \"currencypData\": {\n                \"nlead\": \"$\",\n                \"nend\": \"\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"currencynData\": {\n                \"nlead\": \"($\",\n                \"nend\": \")\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            }\n        },\n        \"dates\": {\n            \"dayPeriods\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n            },\n            \"dateSeperator\": \"/\",\n            \"days\": {\n                \"abbreviated\": {\n                    \"sun\": \"Sun\",\n                    \"mon\": \"Mon\",\n                    \"tue\": \"Tue\",\n                    \"wed\": \"Wed\",\n                    \"thu\": \"Thu\",\n                    \"fri\": \"Fri\",\n                    \"sat\": \"Sat\"\n                },\n                \"short\": {\n                    \"sun\": \"Su\",\n                    \"mon\": \"Mo\",\n                    \"tue\": \"Tu\",\n                    \"wed\": \"We\",\n                    \"thu\": \"Th\",\n                    \"fri\": \"Fr\",\n                    \"sat\": \"Sa\"\n                },\n                \"wide\": {\n                    \"sun\": \"Sunday\",\n                    \"mon\": \"Monday\",\n                    \"tue\": \"Tuesday\",\n                    \"wed\": \"Wednesday\",\n                    \"thu\": \"Thursday\",\n                    \"fri\": \"Friday\",\n                    \"sat\": \"Saturday\"\n                }\n            },\n            \"months\": {\n                \"abbreviated\": {\n                    \"1\": \"Jan\",\n                    \"2\": \"Feb\",\n                    \"3\": \"Mar\",\n                    \"4\": \"Apr\",\n                    \"5\": \"May\",\n                    \"6\": \"Jun\",\n                    \"7\": \"Jul\",\n                    \"8\": \"Aug\",\n                    \"9\": \"Sep\",\n                    \"10\": \"Oct\",\n                    \"11\": \"Nov\",\n                    \"12\": \"Dec\"\n                },\n                \"wide\": {\n                    \"1\": \"January\",\n                    \"2\": \"February\",\n                    \"3\": \"March\",\n                    \"4\": \"April\",\n                    \"5\": \"May\",\n                    \"6\": \"June\",\n                    \"7\": \"July\",\n                    \"8\": \"August\",\n                    \"9\": \"September\",\n                    \"10\": \"October\",\n                    \"11\": \"November\",\n                    \"12\": \"December\"\n                }\n            },\n            \"eras\": {\n                \"1\": \"AD\"\n            }\n        }\n    };\n    /* tslint:enable:quotemark */\n    IntlBase.monthIndex = {\n        3: 'abbreviated',\n        4: 'wide',\n        5: 'narrow',\n        1: 'abbreviated'\n    };\n    /**\n     *\n     */\n    IntlBase.month = 'months';\n    IntlBase.days = 'days';\n    /**\n     * Default numerber Object\n     */\n    IntlBase.patternMatcher = {\n        C: 'currency',\n        P: 'percent',\n        N: 'decimal',\n        A: 'currency',\n        E: 'scientific'\n    };\n    /**\n     * Returns the resultant pattern based on the skeleton, dateObject and the type provided\n     * @private\n     * @param {string} skeleton\n     * @param {Object} dateObject\n     * @param {string} type\n     * @returns {string}\n     */\n    function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n        let resPattern;\n        let iType = type || 'date';\n        if (blazorCulture) {\n            resPattern = compareBlazorDateFormats({ skeleton: skeleton }, blazorCulture).format ||\n                compareBlazorDateFormats({ skeleton: 'd' }, 'en-US').format;\n        }\n        else {\n            if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n                resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n                if (iType === 'dateTime') {\n                    let dPattern = getValue('dateFormats.' + skeleton, dateObject);\n                    let tPattern = getValue('timeFormats.' + skeleton, dateObject);\n                    resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n                }\n            }\n            else {\n                resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n            }\n            if (isUndefined(resPattern) && skeleton === 'yMd') {\n                resPattern = 'M/d/y';\n            }\n        }\n        return resPattern;\n    }\n    IntlBase.getResultantPattern = getResultantPattern;\n    /**\n     * Returns the dependable object for provided cldr data and culture\n     * @private\n     * @param {Object} cldr\n     * @param {string} culture\n     * @param {boolean} isNumber\n     * @returns {Dependables}\n     */\n    function getDependables(cldr, culture, mode, isNumber) {\n        let ret = {};\n        let calendartype = mode || 'gregorian';\n        ret.parserObject = ParserBase.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n        if (isNumber) {\n            ret.numericObject = getValue('numbers', ret.parserObject);\n        }\n        else {\n            let dateString = isBlazor() ? 'dates' : ('dates.calendars.' + calendartype);\n            ret.dateObject = getValue(dateString, ret.parserObject);\n        }\n        return ret;\n    }\n    IntlBase.getDependables = getDependables;\n    /**\n     * Returns the symbol pattern for provided parameters\n     * @private\n     * @param {string} type\n     * @param {string} numSystem\n     * @param {Object} obj\n     * @param {boolean} isAccount\n     * @returns {string}\n     */\n    function getSymbolPattern(type, numSystem, obj, isAccount) {\n        return getValue(type + 'Formats-numberSystem-' +\n            numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' +\n            numSystem + '.standard', obj) : '');\n    }\n    IntlBase.getSymbolPattern = getSymbolPattern;\n    function ConvertDateToWeekFormat(format) {\n        let convertMapper = format.match(IntlBase.dateConverterMapper);\n        if (convertMapper && isBlazor()) {\n            let tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n            return format.replace(IntlBase.dateConverterMapper, tempString);\n        }\n        return format;\n    }\n    IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n    function compareBlazorDateFormats(formatOptions, culture) {\n        let format = formatOptions.format || formatOptions.skeleton;\n        let curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n        if (!curFormatMapper) {\n            curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n        }\n        if (curFormatMapper) {\n            curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n            formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n        }\n        return formatOptions;\n    }\n    IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n    /**\n     * Returns proper numeric skeleton\n     * @private\n     * @param {string} skeleton\n     * @returns {NumericSkeleton}\n     */\n    function getProperNumericSkeleton(skeleton) {\n        let matches = skeleton.match(IntlBase.formatRegex);\n        let ret = {};\n        let pattern = matches[1].toUpperCase();\n        ret.isAccount = (pattern === 'A');\n        /* tslint:disable no-any */\n        ret.type = IntlBase.patternMatcher[pattern];\n        if (skeleton.length > 1) {\n            ret.fractionDigits = parseInt(matches[2], 10);\n        }\n        return ret;\n    }\n    IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n    /**\n     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\n     * @private\n     * @param {string} pattern\n     * @param {boolean} needFraction\n     * @param {string} cSymbol\n     * @param {boolean} fractionOnly\n     * @returns {NegativeData}\n     */\n    function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n        let nData = fractionOnly ? {} : { nlead: '', nend: '' };\n        let match = pattern.match(IntlBase.customRegex);\n        if (match) {\n            if (!fractionOnly) {\n                nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n                nData.nend = changeCurrencySymbol(match[10], cSymbol);\n                nData.groupPattern = match[4];\n            }\n            let fraction = match[7];\n            if (fraction && needFraction) {\n                let fmatch = fraction.match(fractionRegex);\n                if (!isNullOrUndefined(fmatch)) {\n                    nData.minimumFraction = fmatch.length;\n                }\n                else {\n                    nData.minimumFraction = 0;\n                }\n                nData.maximumFraction = fraction.length - 1;\n            }\n        }\n        return nData;\n    }\n    IntlBase.getFormatData = getFormatData;\n    /**\n     * Changes currency symbol\n     * @private\n     * @param {string} val\n     * @param {string} sym\n     * @returns {string}\n     */\n    function changeCurrencySymbol(val, sym) {\n        if (val) {\n            return val.replace(IntlBase.defaultCurrency, sym);\n        }\n        return '';\n    }\n    /**\n     * Returns currency symbol based on currency code\n     * @private\n     * @param {Object} numericObject\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n        let symbol = altSymbol ? ('.' + altSymbol) : '.symbol';\n        let getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) ||\n            getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n        return getCurrency;\n    }\n    IntlBase.getCurrencySymbol = getCurrencySymbol;\n    /**\n     * Returns formatting options for custom number format\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Dependables} obj\n     * @returns {GenericFormatOptions}\n     */\n    function customFormat(format, dOptions, obj) {\n        let options = {};\n        let formatSplit = format.split(';');\n        let data = ['pData', 'nData', 'zeroData'];\n        for (let i = 0; i < formatSplit.length; i++) {\n            options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);\n        }\n        if (isNullOrUndefined(options.nData)) {\n            options.nData = extend({}, options.pData);\n            options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n        }\n        return options;\n    }\n    IntlBase.customFormat = customFormat;\n    /**\n     * Returns custom formatting options\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Object} numObject\n     * @returns {NegativeData}\n     */\n    function customNumberFormat(format, dOptions, numObject) {\n        let cOptions = { type: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 0 };\n        let pattern = format.match(IntlBase.customRegex);\n        if (isNullOrUndefined(pattern) || (pattern[5] === '' && format !== 'N/A')) {\n            cOptions.type = undefined;\n            return cOptions;\n        }\n        cOptions.nlead = pattern[1];\n        cOptions.nend = pattern[10];\n        let integerPart = pattern[6];\n        cOptions.useGrouping = integerPart.indexOf(',') !== -1;\n        integerPart = integerPart.replace(/,/g, '');\n        let fractionPart = pattern[7];\n        if (integerPart.indexOf('0') !== -1) {\n            cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n        }\n        if (!isNullOrUndefined(fractionPart)) {\n            cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n            cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n            if (cOptions.minimumFractionDigits === -1) {\n                cOptions.minimumFractionDigits = 0;\n            }\n            if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n                cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n            }\n        }\n        if (!isNullOrUndefined(dOptions)) {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n            if (!cOptions.isCurrency) {\n                extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n            }\n        }\n        else {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n        }\n        if (!isNullOrUndefined(numObject)) {\n            let symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n            if (cOptions.useGrouping) {\n                cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];\n                cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n            }\n            cOptions.nlead = cOptions.nlead.replace(/\\'/g, '');\n            cOptions.nend = cOptions.nend.replace(/\\'/g, '');\n        }\n        return cOptions;\n    }\n    /**\n     * Returns formatting options for currency or percent type\n     * @private\n     * @param {string[]} parts\n     * @param {string} actual\n     * @param {string} symbol\n     * @returns {NegativeData}\n     */\n    function isCurrencyPercent(parts, actual, symbol) {\n        let options = { nlead: parts[0], nend: parts[1] };\n        for (let i = 0; i < 2; i++) {\n            let part = parts[i];\n            let loc = part.indexOf(actual);\n            if ((loc !== -1) && ((loc < part.indexOf('\\'')) || (loc > part.lastIndexOf('\\'')))) {\n                options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n                options[typeMapper[actual]] = true;\n                options.type = options.isCurrency ? 'currency' : 'percent';\n                break;\n            }\n        }\n        return options;\n    }\n    IntlBase.isCurrencyPercent = isCurrencyPercent;\n    /**\n     * Returns culture based date separator\n     * @private\n     * @param {Object} dateObj\n     * @returns {string}\n     */\n    function getDateSeparator(dateObj) {\n        let value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);\n        return value ? value[1] : '/';\n    }\n    IntlBase.getDateSeparator = getDateSeparator;\n    /**\n     * Returns Native Date Time pattern\n     * @private\n     * @param {string} culture\n     * @param {DateFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n        let dependable = getDependables(cldr, culture, options.calendar);\n        if (isBlazor()) {\n            options = compareBlazorDateFormats(options, culture);\n        }\n        let actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n        if (isExcelFormat) {\n            actualPattern = actualPattern.replace(patternRegex, (pattern) => {\n                return patternMatch[pattern];\n            });\n            if (actualPattern.indexOf('z') !== -1) {\n                let tLength = actualPattern.match(/z/g).length;\n                let timeZonePattern;\n                let options = { 'timeZone': {} };\n                options.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n                options.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                let value = new Date();\n                let timezone = value.getTimezoneOffset();\n                let pattern = (tLength < 4) ? '+H;-H' : options.timeZone.hourFormat;\n                pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n                if (timezone === 0) {\n                    timeZonePattern = options.timeZone.gmtZeroFormat;\n                }\n                else {\n                    timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n                    timeZonePattern = options.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n                }\n                actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n            }\n            actualPattern = actualPattern.replace(/ $/, '');\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;\n    // tslint:disable-next-line:no-any\n    function processSymbol(actual, option) {\n        if (actual.indexOf(',') !== -1) {\n            // tslint:disable-next-line:no-any\n            let split = actual.split(',');\n            actual = (split[0] + getValue('numberMapper.numberSymbols.group', option) +\n                split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option)));\n        }\n        else {\n            actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n        }\n        return actual;\n    }\n    /**\n     * Returns Native Number pattern\n     * @private\n     * @param {string} culture\n     * @param {NumberFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualNumberFormat(culture, options, cldr, isExcel) {\n        let dependable = getDependables(cldr, culture, '', true);\n        let parseOptions = { custom: true };\n        let numrericObject = dependable.numericObject;\n        let minFrac;\n        let curObj = {};\n        let curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n        let type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n        let dOptions = {};\n        if (curMatch) {\n            dOptions.numberMapper = isBlazor() ?\n                extend({}, dependable.numericObject) :\n                ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n            let curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) :\n                getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n            let symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, (/a/i).test(options.format));\n            symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n            let split = symbolPattern.split(';');\n            curObj.hasNegativePattern = isBlazor() ? true : (split.length > 1);\n            curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) :\n                getFormatData(split[1] || '-' + split[0], true, curCode);\n            curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) :\n                getFormatData(split[0], false, curCode);\n            if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n                minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n            }\n        }\n        let actualPattern;\n        if ((IntlBase.formatRegex.test(options.format)) || !(options.format)) {\n            extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n            parseOptions.custom = false;\n            actualPattern = '###0';\n            if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n                let defaultMinimum = 0;\n                if (parseOptions.fractionDigits) {\n                    options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n                }\n                actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits ||\n                    options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n            }\n            if (options.minimumIntegerDigits) {\n                actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n            }\n            if (options.useGrouping) {\n                actualPattern = groupingPattern(actualPattern);\n            }\n            if (parseOptions.type === 'currency' || (parseOptions.type && isBlazor())) {\n                if (isBlazor() && parseOptions.type !== 'currency') {\n                    curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n                    curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n                }\n                let cPattern = actualPattern;\n                actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n                if (curObj.hasNegativePattern || isBlazor()) {\n                    actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n                }\n            }\n            if (parseOptions.type === 'percent' && !isBlazor()) {\n                actualPattern += ' %';\n            }\n        }\n        else {\n            actualPattern = options.format.replace(/\\'/g, '\"');\n        }\n        if (Object.keys(dOptions).length > 0) {\n            actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualNumberFormat = getActualNumberFormat;\n    function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n        pattern += '.';\n        for (let a = 0; a < minDigits; a++) {\n            pattern += '0';\n        }\n        if (minDigits < maxDigits) {\n            let diff = maxDigits - minDigits;\n            for (let b = 0; b < diff; b++) {\n                pattern += '#';\n            }\n        }\n        return pattern;\n    }\n    function minimumIntegerPattern(pattern, digits) {\n        let temp = pattern.split('.');\n        let integer = '';\n        for (let x = 0; x < digits; x++) {\n            integer += '0';\n        }\n        return temp[1] ? (integer + '.' + temp[1]) : integer;\n    }\n    function groupingPattern(pattern) {\n        let temp = pattern.split('.');\n        let integer = temp[0];\n        let no = 3 - integer.length % 3;\n        let hash = (no && no === 1) ? '#' : (no === 2 ? '##' : '');\n        integer = hash + integer;\n        pattern = '';\n        for (let x = integer.length - 1; x > 0; x = x - 3) {\n            pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;\n        }\n        pattern = pattern.slice(1);\n        return temp[1] ? (pattern + '.' + temp[1]) : pattern;\n    }\n    function getWeekData(culture, cldr) {\n        let firstDay = defaultFirstDay;\n        let mapper = getValue('supplemental.weekData.firstDay', cldr);\n        let iCulture = culture;\n        if ((/en-/).test(iCulture)) {\n            iCulture = iCulture.slice(3);\n        }\n        iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n        if (mapper) {\n            firstDay = mapper[iCulture] || defaultFirstDay;\n        }\n        return firstDayMapper[firstDay];\n    }\n    IntlBase.getWeekData = getWeekData;\n    /**\n     * @private\n     * @param pData\n     * @param aCurrency\n     * @param rCurrency\n     */\n    function replaceBlazorCurrency(pData, aCurrency, rCurrency) {\n        let iCurrency = getBlazorCurrencySymbol(rCurrency);\n        if (aCurrency !== iCurrency) {\n            for (let data of pData) {\n                data.nend = data.nend.replace(aCurrency, iCurrency);\n                data.nlead = data.nlead.replace(aCurrency, iCurrency);\n            }\n        }\n    }\n    IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;\n    /**\n     * @private\n     */\n    function getWeekOfYear(date) {\n        let newYear = new Date(date.getFullYear(), 0, 1);\n        let day = newYear.getDay();\n        let weeknum;\n        day = (day >= 0 ? day : day + 7);\n        let daynum = Math.floor((date.getTime() - newYear.getTime() -\n            (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n        if (day < 4) {\n            weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n            if (weeknum > 52) {\n                let nYear = new Date(this.getFullYear() + 1, 0, 1);\n                let nday = nYear.getDay();\n                nday = nday >= 0 ? nday : nday + 7;\n                weeknum = nday < 4 ? 1 : 53;\n            }\n        }\n        else {\n            weeknum = Math.floor((daynum + day - 1) / 7);\n        }\n        return weeknum;\n    }\n    IntlBase.getWeekOfYear = getWeekOfYear;\n})(IntlBase || (IntlBase = {}));\n\nconst headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nconst defaultType = 'GET';\n/**\n * Ajax class provides ability to make asynchronous HTTP request to the server\n * ```typescript\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\n *   ajax.send().then(\n *               function (value) {\n *                   console.log(value);\n *               },\n *               function (reason) {\n *                   console.log(reason);\n *               });\n * ```\n */\nclass Ajax {\n    /**\n     * Constructor for Ajax class\n     * @param  {string|Object} options?\n     * @param  {string} type?\n     * @param  {boolean} async?\n     * @returns defaultType\n     */\n    constructor(options, type, async, contentType) {\n        /**\n         * A boolean value indicating whether the request should be sent asynchronous or not.\n         * @default true\n         */\n        this.mode = true;\n        /**\n         * A boolean value indicating whether to ignore the promise reject.\n         * @private\n         * @default true\n         */\n        this.emitError = true;\n        this.options = {};\n        if (typeof options === 'string') {\n            this.url = options;\n            this.type = type ? type.toUpperCase() : defaultType;\n            this.mode = !isNullOrUndefined(async) ? async : true;\n        }\n        else if (typeof options === 'object') {\n            this.options = options;\n            merge(this, this.options);\n        }\n        this.type = this.type ? this.type.toUpperCase() : defaultType;\n        this.contentType = (this.contentType !== undefined) ? this.contentType : contentType;\n    }\n    /**\n     * Send the request to server.\n     * @param {any} data - To send the user data\n     * @return {Promise}\n     */\n    send(data) {\n        this.data = isNullOrUndefined(data) ? this.data : data;\n        let eventArgs = {\n            cancel: false,\n            httpRequest: null\n        };\n        let promise = new Promise((resolve, reject) => {\n            this.httpRequest = new XMLHttpRequest();\n            this.httpRequest.onreadystatechange = () => { this.stateChange(resolve, reject); };\n            if (!isNullOrUndefined(this.onLoad)) {\n                this.httpRequest.onload = this.onLoad;\n            }\n            if (!isNullOrUndefined(this.onProgress)) {\n                this.httpRequest.onprogress = this.onProgress;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onAbort)) {\n                this.httpRequest.onabort = this.onAbort;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onError)) {\n                this.httpRequest.onerror = this.onError;\n            }\n            //** Upload Events **/\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onUploadProgress)) {\n                this.httpRequest.upload.onprogress = this.onUploadProgress;\n            }\n            this.httpRequest.open(this.type, this.url, this.mode);\n            // Set default headers\n            if (!isNullOrUndefined(this.data) && this.contentType !== null) {\n                this.httpRequest.setRequestHeader('Content-Type', this.contentType || 'application/json; charset=utf-8');\n            }\n            if (this.beforeSend) {\n                eventArgs.httpRequest = this.httpRequest;\n                this.beforeSend(eventArgs);\n            }\n            if (!eventArgs.cancel) {\n                this.httpRequest.send(!isNullOrUndefined(this.data) ? this.data : null);\n            }\n        });\n        return promise;\n    }\n    successHandler(data) {\n        if (this.onSuccess) {\n            this.onSuccess(data, this);\n        }\n        return data;\n    }\n    failureHandler(reason) {\n        if (this.onFailure) {\n            this.onFailure(this.httpRequest);\n        }\n        return reason;\n    }\n    stateChange(resolve, reject) {\n        let data = this.httpRequest.responseText;\n        if (this.dataType && this.dataType.toLowerCase() === 'json') {\n            if (data === '') {\n                data = undefined;\n            }\n            else {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    // no exception handle\n                }\n            }\n        }\n        if (this.httpRequest.readyState === 4) {\n            //success range should be 200 to 299\n            if ((this.httpRequest.status >= 200 && this.httpRequest.status <= 299) || this.httpRequest.status === 304) {\n                resolve(this.successHandler(data));\n            }\n            else {\n                if (this.emitError) {\n                    reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n                }\n                else {\n                    resolve();\n                }\n            }\n        }\n    }\n    /**\n     * To get the response header from XMLHttpRequest\n     * @param  {string} key Key to search in the response header\n     * @returns {string}\n     */\n    getResponseHeader(key) {\n        let responseHeaders;\n        let header;\n        responseHeaders = {};\n        let headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        while (headers) {\n            responseHeaders[headers[1].toLowerCase()] = headers[2];\n            headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        }\n        header = responseHeaders[key.toLowerCase()];\n        return isNullOrUndefined(header) ? null : header;\n    }\n}\n\nconst REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;\nconst REGX_IE = /msie|trident/i;\nconst REGX_IE11 = /Trident\\/7\\./;\nconst REGX_IOS = /(ipad|iphone|ipod touch)/i;\nconst REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\\d|(ipad|iphone|ipod touch);.*os 8_\\d/i;\nconst REGX_ANDROID = /android/i;\nconst REGX_WINDOWS = /trident|windows phone|edge/i;\nconst REGX_VERSION = /(version)[ \\/]([\\w.]+)/i;\nconst REGX_BROWSER = {\n    OPERA: /(opera|opr)(?:.*version|)[ \\/]([\\w.]+)/i,\n    EDGE: /(edge)(?:.*version|)[ \\/]([\\w.]+)/i,\n    CHROME: /(chrome|crios)[ \\/]([\\w.]+)/i,\n    PANTHOMEJS: /(phantomjs)[ \\/]([\\w.]+)/i,\n    SAFARI: /(safari)[ \\/]([\\w.]+)/i,\n    WEBKIT: /(webkit)[ \\/]([\\w.]+)/i,\n    MSIE: /(msie|trident) ([\\w.]+)/i,\n    MOZILLA: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\n/* istanbul ignore else  */\nif (typeof window !== 'undefined') {\n    window.browserDetails = window.browserDetails || {};\n}\n/**\n * Get configuration details for Browser\n * @private\n */\nclass Browser {\n    static extractBrowserDetail() {\n        let browserInfo = { culture: {} };\n        let keys = Object.keys(REGX_BROWSER);\n        let clientInfo = [];\n        for (let key of keys) {\n            clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);\n            if (clientInfo) {\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase());\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name);\n                browserInfo.version = clientInfo[2];\n                browserInfo.culture.name = browserInfo.culture.language = navigator.language;\n                if (!!Browser.userAgent.match(REGX_IE11)) {\n                    browserInfo.name = 'msie';\n                    break;\n                }\n                let version = Browser.userAgent.match(REGX_VERSION);\n                if (browserInfo.name === 'safari' && version) {\n                    browserInfo.version = version[2];\n                }\n                break;\n            }\n        }\n        return browserInfo;\n    }\n    /**\n     * To get events from the browser\n     * @param {string} event - type of event triggered.\n     * @returns {Boolean}\n     */\n    static getEvent(event) {\n        // tslint:disable-next-line:no-any\n        let events = {\n            start: {\n                isPointer: 'pointerdown', isTouch: 'touchstart', isDevice: 'mousedown'\n            },\n            move: {\n                isPointer: 'pointermove', isTouch: 'touchmove', isDevice: 'mousemove'\n            },\n            end: {\n                isPointer: 'pointerup', isTouch: 'touchend', isDevice: 'mouseup'\n            },\n            cancel: {\n                isPointer: 'pointercancel', isTouch: 'touchcancel', isDevice: 'mouseleave'\n            }\n        };\n        return (Browser.isPointer ? events[event].isPointer :\n            (Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '')\n                : events[event].isDevice));\n    }\n    /**\n     * To get the Touch start event from browser\n     * @returns {string}\n     */\n    static getTouchStartEvent() {\n        return Browser.getEvent('start');\n    }\n    /**\n     * To get the Touch end event from browser\n     * @returns {string}\n     */\n    static getTouchEndEvent() {\n        return Browser.getEvent('end');\n    }\n    /**\n     * To get the Touch move event from browser\n     * @returns {string}\n     */\n    static getTouchMoveEvent() {\n        return Browser.getEvent('move');\n    }\n    /**\n     * To cancel the touch event from browser\n     * @returns {string}\n     */\n    static getTouchCancelEvent() {\n        return Browser.getEvent('cancel');\n    }\n    /**\n     * To get the value based on provided key and regX\n     * @param {string} key\n     * @param {RegExp} regX\n     * @returns {Object}\n     */\n    static getValue(key, regX) {\n        let browserDetails = window.browserDetails;\n        if ('undefined' === typeof browserDetails[key]) {\n            return browserDetails[key] = regX.test(Browser.userAgent);\n        }\n        return browserDetails[key];\n    }\n    //Properties \n    /**\n     * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.\n     * Also we can set our own userAgent.\n     */\n    static set userAgent(uA) {\n        Browser.uA = uA;\n        window.browserDetails = {};\n    }\n    static get userAgent() {\n        return Browser.uA;\n    }\n    //Read Only Properties\n    /**\n     * Property is to get the browser information like Name, Version and Language\n     * @returns BrowserInfo\n     */\n    static get info() {\n        if (isUndefined(window.browserDetails.info)) {\n            return window.browserDetails.info = Browser.extractBrowserDetail();\n        }\n        return window.browserDetails.info;\n    }\n    /**\n     * Property is to get whether the userAgent is based IE.\n     */\n    static get isIE() {\n        return Browser.getValue('isIE', REGX_IE);\n    }\n    /**\n     * Property is to get whether the browser has touch support.\n     */\n    static get isTouch() {\n        if (isUndefined(window.browserDetails.isTouch)) {\n            return (window.browserDetails.isTouch =\n                ('ontouchstart' in window.navigator) ||\n                    (window &&\n                        window.navigator &&\n                        (window.navigator.maxTouchPoints > 0)) || ('ontouchstart' in window));\n        }\n        return window.browserDetails.isTouch;\n    }\n    /**\n     * Property is to get whether the browser has Pointer support.\n     */\n    static get isPointer() {\n        if (isUndefined(window.browserDetails.isPointer)) {\n            return window.browserDetails.isPointer = ('pointerEnabled' in window.navigator);\n        }\n        return window.browserDetails.isPointer;\n    }\n    /**\n     * Property is to get whether the browser has MSPointer support.\n     */\n    static get isMSPointer() {\n        if (isUndefined(window.browserDetails.isMSPointer)) {\n            return window.browserDetails.isMSPointer = ('msPointerEnabled' in window.navigator);\n        }\n        return window.browserDetails.isMSPointer;\n    }\n    /**\n     * Property is to get whether the userAgent is device based.\n     */\n    static get isDevice() {\n        return Browser.getValue('isDevice', REGX_MOBILE);\n    }\n    /**\n     * Property is to get whether the userAgent is IOS.\n     */\n    static get isIos() {\n        return Browser.getValue('isIos', REGX_IOS);\n    }\n    /**\n     * Property is to get whether the userAgent is Ios7.\n     */\n    static get isIos7() {\n        return Browser.getValue('isIos7', REGX_IOS7);\n    }\n    /**\n     * Property is to get whether the userAgent is Android.\n     */\n    static get isAndroid() {\n        return Browser.getValue('isAndroid', REGX_ANDROID);\n    }\n    /**\n     * Property is to identify whether application ran in web view.\n     */\n    static get isWebView() {\n        if (isUndefined(window.browserDetails.isWebView)) {\n            window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap)\n                && isUndefined(window.phonegap) && window.forge !== 'object');\n            return window.browserDetails.isWebView;\n        }\n        return window.browserDetails.isWebView;\n    }\n    /**\n     * Property is to get whether the userAgent is Windows.\n     */\n    static get isWindows() {\n        return Browser.getValue('isWindows', REGX_WINDOWS);\n    }\n    /**\n     * Property is to get the touch start event. It returns event name based on browser.\n     */\n    static get touchStartEvent() {\n        if (isUndefined(window.browserDetails.touchStartEvent)) {\n            return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();\n        }\n        return window.browserDetails.touchStartEvent;\n    }\n    /**\n     * Property is to get the touch move event. It returns event name based on browser.\n     */\n    static get touchMoveEvent() {\n        if (isUndefined(window.browserDetails.touchMoveEvent)) {\n            return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();\n        }\n        return window.browserDetails.touchMoveEvent;\n    }\n    /**\n     * Property is to get the touch end event. It returns event name based on browser.\n     */\n    static get touchEndEvent() {\n        if (isUndefined(window.browserDetails.touchEndEvent)) {\n            return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();\n        }\n        return window.browserDetails.touchEndEvent;\n    }\n    /**\n     * Property is to cancel the touch end event.\n     */\n    static get touchCancelEvent() {\n        if (isUndefined(window.browserDetails.touchCancelEvent)) {\n            return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();\n        }\n        return window.browserDetails.touchCancelEvent;\n    }\n}\n/* istanbul ignore next */\nBrowser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';\n\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * @private\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\nclass EventHandler {\n    // to get the event data based on element\n    static addOrGetEventData(element) {\n        if ('__eventList' in element) {\n            return element.__eventList.events;\n        }\n        else {\n            element.__eventList = {};\n            return element.__eventList.events = [];\n        }\n    }\n    /**\n     * Add an event to the specified DOM element.\n     * @param {any} element - Target HTML DOM element\n     * @param {string} eventName - A string that specifies the name of the event\n     * @param {Function} listener - Specifies the function to run when the event occurs\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n     * @param {number} debounce - Specifies at what interval given event listener should be triggered.\n     * @return {Function}\n     */\n    static add(element, eventName, listener, bindTo, intDebounce) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        let debounceListener;\n        if (intDebounce) {\n            debounceListener = debounce(listener, intDebounce);\n        }\n        else {\n            debounceListener = listener;\n        }\n        if (bindTo) {\n            debounceListener = debounceListener.bind(bindTo);\n        }\n        let event = eventName.split(' ');\n        for (let i = 0; i < event.length; i++) {\n            eventData.push({\n                name: event[i],\n                listener: listener,\n                debounce: debounceListener\n            });\n            if (Browser.isIE) {\n                element.addEventListener(event[i], debounceListener);\n            }\n            else {\n                element.addEventListener(event[i], debounceListener, { passive: false });\n            }\n        }\n        return debounceListener;\n    }\n    /**\n     * Remove an event listener that has been attached before.\n     * @param {any} element - Specifies the target html element to remove the event\n     * @param {string} eventName - A string that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    static remove(element, eventName, listener) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        let event = eventName.split(' ');\n        for (let j = 0; j < event.length; j++) {\n            let index = -1;\n            let debounceListener;\n            if (eventData && eventData.length !== 0) {\n                eventData.some((x, i) => {\n                    return x.name === event[j] && x.listener === listener ?\n                        (index = i, debounceListener = x.debounce, true) : false;\n                });\n            }\n            if (index !== -1) {\n                eventData.splice(index, 1);\n            }\n            if (debounceListener) {\n                element.removeEventListener(event[j], debounceListener);\n            }\n        }\n    }\n    /**\n     * Clear all the event listeners that has been previously attached to the element.\n     * @param {any} element - Specifies the target html element to clear the events\n     * @return {void}\n     */\n    static clearEvents(element) {\n        let eventData;\n        let copyData;\n        eventData = EventHandler.addOrGetEventData(element);\n        copyData = extend([], copyData, eventData);\n        for (let i = 0; i < copyData.length; i++) {\n            element.removeEventListener(copyData[i].name, copyData[i].debounce);\n            eventData.shift();\n        }\n    }\n    /**\n     * Trigger particular event of the element.\n     * @param {any} element - Specifies the target html element to trigger the events\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\n     * Can be a custom event, or any of the standard events.\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\n     * @return {void}\n     */\n    static trigger(element, eventName, eventProp) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        for (let event of eventData) {\n            if (event.name === eventName) {\n                event.debounce.call(this, eventProp);\n            }\n        }\n    }\n}\n\n/**\n * Template Engine\n */\nconst LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nconst QUOTES = new RegExp(/'|\"/g);\nconst IF_STMT = new RegExp('if ?\\\\(');\nconst ELSEIF_STMT = new RegExp('else if ?\\\\(');\nconst ELSE_STMT = new RegExp('else');\nconst FOR_STMT = new RegExp('for ?\\\\(');\nconst IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nconst CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nconst NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nconst WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nconst DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nconst WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nlet exp = new RegExp('\\\\${([^}]*)}', 'g');\n// let cachedTemplate: Object = {};\nlet ARR_OBJ = /^\\..*/gm;\nlet SINGLE_SLASH = /\\\\/gi;\nlet DOUBLE_SLASH = /\\\\\\\\/gi;\nconst WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nconst WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\n\n// /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\nfunction compile$1(template, helper) {\n    let argName = 'data';\n    let evalExpResult = evalExp(template, argName, helper);\n    let fnCode = `var str=\"${evalExpResult}\"; return str;`;\n    // tslint:disable-next-line:no-function-constructor-with-string-args\n    let fn = new Function(argName, fnCode);\n    return fn.bind(helper);\n}\n// function used to evaluate the function expression\nfunction evalExp(str, nameSpace, helper) {\n    let varCOunt = 0;\n    /**\n     * Variable containing Local Keys\n     */\n    let localKeys = [];\n    let isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n    let singleSpace = '';\n    if (isClass) {\n        isClass.forEach((value) => {\n            singleSpace = value.replace(/\\s\\s+/g, ' ');\n            str = str.replace(value, singleSpace);\n        });\n    }\n    return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, (match, cnt, offset, matchStr) => {\n        const SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n        let matches = cnt.match(CALL_FUNCTION);\n        // matches to detect any function calls\n        if (matches) {\n            let rlStr = matches[1];\n            if (ELSEIF_STMT.test(cnt)) {\n                //handling else-if condition\n                cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, (str) => {\n                    str = str.trim();\n                    return addNameSpace(str, !(QUOTES.test(str)) && (localKeys.indexOf(str) === -1), nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (IF_STMT.test(cnt)) {\n                //handling if condition\n                cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, (strs) => {\n                    return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (FOR_STMT.test(cnt)) {\n                //handling for condition\n                let rlStr = matches[1].split(' of ');\n                // replace for each into actual JavaScript\n                cnt = '\"; ' + cnt.replace(matches[1], (mtc) => {\n                    localKeys.push(rlStr[0]);\n                    localKeys.push(rlStr[0] + 'Index');\n                    varCOunt = varCOunt + 1;\n                    // tslint:disable-next-line\n                    return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';\n                }) + '{ \\n ' + rlStr[0] + '= ' + addNameSpace(rlStr[1], true, nameSpace, localKeys)\n                    + '[i' + varCOunt + ']; \\n var ' + rlStr[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n            }\n            else {\n                //helper function handling\n                let fnStr = cnt.split('(');\n                let fNameSpace = (helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global');\n                fNameSpace = (/\\./.test(fnStr[0]) ? '' : fNameSpace);\n                let ftArray = matches[1].split(',');\n                if (matches[1].length !== 0 && !(/data/).test(ftArray[0]) && !(/window./).test(ftArray[0])) {\n                    matches[1] = (fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1]);\n                }\n                let splRegexp = /\\@|\\$|\\#/gm;\n                let arrObj = /\\]\\./gm;\n                if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n                    let splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n                    if (splArrRegexp.test(cnt)) {\n                        // tslint:disable-next-line\n                        cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, (strs) => {\n                            return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                        })) + '+ \"';\n                    }\n                }\n                else {\n                    cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) +\n                        cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), (fNameSpace === 'global' ? false : true), nameSpace, localKeys)) +\n                        '+\"';\n                }\n            }\n        }\n        else if (ELSE_STMT.test(cnt)) {\n            // handling else condition\n            cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n        }\n        else if (!!cnt.match(IF_OR_FOR)) {\n            // close condition \n            cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n        }\n        else if (SPECIAL_CHAR.test(cnt)) {\n            // template string with double slash with special character\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n            }\n            cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n        }\n        else {\n            // template string with double slash\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n                cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n            }\n            else {\n                // evaluate normal expression\n                cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '+\"';\n            }\n        }\n        return cnt;\n    });\n}\nfunction addNameSpace(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '.' + str : str);\n}\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n    let arrObjReg = /^\\..*/gm;\n    return ((addNS && !(NOT_NUMBER.test(str)) &&\n        ignoreList.indexOf(str.split('.')[0]) === -1 && !(arrObjReg.test(str))) ? nameSpace + '.' + str : str);\n}\n// // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '[\"' + str : str);\n}\n// tslint:disable-next-line\nfunction SlashReplace(tempStr) {\n    // tslint:disable-next-line\n    let double = `\\\\\\\\`;\n    if (tempStr.match(DOUBLE_SLASH)) {\n        tempStr = tempStr;\n    }\n    else {\n        tempStr = tempStr.replace(SINGLE_SLASH, double);\n    }\n    return tempStr;\n}\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys) {\n    str = str.trim();\n    let windowFunc = /\\window\\./gm;\n    if (!windowFunc.test(str)) {\n        let quotes = /'|\"/gm;\n        let splRegexp = /\\@|\\$|\\#/gm;\n        if (splRegexp.test(str)) {\n            str = NameSpaceForspecialChar(str, (keys.indexOf(str) === -1), nameSpaceNew, keys) + '\"]';\n        }\n        if (ARR_OBJ.test(str)) {\n            return NameSpaceArrObj(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n        else {\n            return addNameSpace(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n    }\n    else {\n        return str;\n    }\n}\n\n/**\n * Template Engine Bridge\n */\nconst HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\nconst HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\nlet blazorTemplates = {};\nfunction getRandomId() {\n    return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n * @param  {string} templateString - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n//tslint:disable-next-line\nfunction compile$$1(templateString, helper) {\n    let compiler = engineObj.compile(templateString, helper);\n    //tslint:disable-next-line\n    return (data, component, propName, templateId, isStringTemplate, index) => {\n        let result = compiler(data, component, propName);\n        let blazorTemplateId = 'BlazorTemplateId';\n        if (isBlazor() && !isStringTemplate) {\n            let randomId = getRandomId();\n            let blazorId = templateId + randomId;\n            if (!blazorTemplates[templateId]) {\n                blazorTemplates[templateId] = [];\n            }\n            if (!isNullOrUndefined(index)) {\n                let keys = Object.keys(blazorTemplates[templateId][index]);\n                for (let key of keys) {\n                    if (key !== blazorTemplateId && data[key]) {\n                        blazorTemplates[templateId][index][key] = data[key];\n                    }\n                    if (key === blazorTemplateId) {\n                        blazorId = blazorTemplates[templateId][index][key];\n                    }\n                }\n            }\n            else {\n                data[blazorTemplateId] = blazorId;\n                blazorTemplates[templateId].push(data);\n            }\n            // tslint:disable-next-line:no-any\n            return propName === 'rowTemplate' ? [createElement('tr', { id: blazorId, className: 'e-blazor-template' })] :\n                // tslint:disable-next-line:no-any\n                [createElement('div', { id: blazorId, className: 'e-blazor-template' })];\n        }\n        if (typeof result === 'string') {\n            if (HAS_SVG.test(result)) {\n                let ele = createElement('svg', { innerHTML: result });\n                return ele.childNodes;\n            }\n            else {\n                let ele = createElement((HAS_ROW.test(result) ? 'table' : 'div'), { innerHTML: result });\n                return ele.childNodes;\n            }\n        }\n        else {\n            return result;\n        }\n    };\n}\nfunction updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n    if (isBlazor()) {\n        let ejsIntrop = 'sfBlazor';\n        window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);\n        if (isEmpty !== false) {\n            blazorTemplates[templateId] = [];\n        }\n    }\n}\nfunction resetBlazorTemplate(templateId, templateName, index) {\n    let templateDiv = document.getElementById(templateId);\n    if (templateDiv) {\n        // tslint:disable-next-line:no-any\n        let innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n        for (let i = 0; i < innerTemplates.length; i++) {\n            let tempId = ' ';\n            if (!isNullOrUndefined(index)) {\n                tempId = innerTemplates[index].getAttribute('data-templateId');\n            }\n            else {\n                tempId = innerTemplates[i].getAttribute('data-templateId');\n            }\n            let tempElement = document.getElementById(tempId);\n            if (tempElement) {\n                let length = tempElement.childNodes.length;\n                for (let j = 0; j < length; j++) {\n                    if (!isNullOrUndefined(index)) {\n                        innerTemplates[index].appendChild(tempElement.childNodes[0]);\n                        i = innerTemplates.length;\n                    }\n                    else {\n                        innerTemplates[i].appendChild(tempElement.childNodes[0]);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Set your custom template engine for template rendering.\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nfunction setTemplateEngine(classObj) {\n    engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nfunction getTemplateEngine() {\n    return engineObj.compile;\n}\n//Default Engine Class\nclass Engine {\n    compile(templateString, helper = {}) {\n        return compile$1(templateString, helper);\n    }\n}\nlet engineObj = { compile: new Engine().compile };\n\nconst simpleRegex = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/;\nconst multipleSplitRegex = /(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))/g;\nconst idClassSelector = /^(\\.|#)/;\nconst selectMapper = {\n    '.': 'className',\n    '#': 'id'\n};\nconst classRegexString = '(?=.*?\\\\b{value}\\\\b)';\nconst assigner = { className: 'attributes.className', id: 'attributes.id', tagName: 'tagName' };\nconst emptyElements = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input',\n    'link', 'meta', 'param', 'embed', 'command', 'keygen', 'source', 'track', 'wbr'];\nconst blockElements = ['a', 'address', 'article', 'applet', 'aside', 'audio', 'blockquote',\n    'button', 'canvas', 'center', 'dd', 'del', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure',\n    'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'ins',\n    'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'output', 'p', 'pre', 'section',\n    'script', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nconst inlineElement = ['abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo', 'big', 'br', 'button',\n    'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map',\n    'object', 'q', 's', 'samp', 'script', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea',\n    'tt', 'u', 'var'];\nconst selfClosingElements = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th',\n    'thead', 'tr'];\nconst fillAttrs = ['checked', 'compact', 'declare', 'defer', 'disabled', 'ismap', 'multiple',\n    'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'];\nconst cspElement = ['Script', 'style'];\nconst nameMapper = { 'tabindex': 'tabIndex' };\nconst startRegex = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nconst endRegex = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nconst attributeRegex = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n/**\n * Namespace for VirtualDOM\n * @private\n */\nvar VirtualDOM;\n(function (VirtualDOM) {\n    //tslint:disable:no-any\n    function createElement(tagName, properties) {\n        let children = [];\n        let extended = extend({}, {}, properties, true);\n        if (!isNullOrUndefined(properties)) {\n            let keys = Object.keys(properties);\n            if (keys.length) {\n                if (extended.innerHTML) {\n                    children = ConvertHTMLToJSon(extended.innerHTML);\n                    delete extended.innerHTML;\n                }\n                if (extended.attrs) {\n                    extend(extended, extended.attrs);\n                    delete extended.attrs;\n                }\n                if (extended.styles) {\n                    let valArr = extended.styles.split(';');\n                    let vObj = {};\n                    for (let i = 0, length = valArr.length; i < length; i++) {\n                        let cVal = valArr[i];\n                        let styleSplit = cVal.split(':');\n                        vObj[styleSplit[0]] = styleSplit[1];\n                    }\n                    delete extended.styles;\n                    extended.style = vObj;\n                }\n            }\n        }\n        return {\n            tagName: tagName,\n            attributes: extended || {},\n            children: children\n        };\n    }\n    VirtualDOM.createElement = createElement;\n    function assignParent(childrens, parent) {\n        if (parent && childrens) {\n            childrens.forEach((child) => {\n                if (isObject(child)) {\n                    if (child.parent) {\n                        detach(child);\n                    }\n                    child.parent = parent;\n                }\n                return child;\n            });\n        }\n    }\n    VirtualDOM.assignParent = assignParent;\n    function append(fromElements, toElement) {\n        assignParent(fromElements, toElement);\n        if (toElement.children) {\n            toElement.children = toElement.children.concat(fromElements);\n        }\n        else {\n            toElement.children = [].concat(fromElements);\n        }\n    }\n    VirtualDOM.append = append;\n    function prepend(child, toElement) {\n        assignParent(child, toElement);\n        if (!toElement.children || !toElement.children.length) {\n            toElement.children = [];\n            toElement.children.concat(child);\n        }\n        else {\n            for (let i = child.length - 1; i >= 0; i--) {\n                toElement.children.unshift(child[i]);\n            }\n        }\n    }\n    VirtualDOM.prepend = prepend;\n    function detach(element) {\n        let parent = element.parent;\n        if (parent) {\n            let index = parent.children.indexOf(element);\n            if (index !== -1) {\n                parent.children.splice(index);\n            }\n        }\n        return parent;\n    }\n    VirtualDOM.detach = detach;\n    //tslint:disable-next-line\n    function vDomSelector({ ele, selector, selectAll, immediateParent }) {\n        let iSelector = selector.split(' ');\n        let curColl = ele;\n        for (let i = 0, length = iSelector.length; i < length; i++) {\n            let isDescendant = false;\n            let parent = curColl;\n            let curSelector = iSelector[i];\n            let mapper = [];\n            if (simpleRegex.test(curSelector)) {\n                processSelector(curSelector, mapper);\n            }\n            else if (curSelector.indexOf('>') === -1) {\n                let splitSelector = curSelector.match(multipleSplitRegex);\n                for (let curMap of splitSelector) {\n                    processSelector(curMap, mapper);\n                }\n            }\n            else if (curSelector.indexOf('>') !== -1) {\n                isDescendant = true;\n                let dSelector = curSelector.split('>');\n                //tslint:disable-next-line\n                let dParent = ele;\n                let descendent;\n                let flag = 0;\n                for (let sel of dSelector) {\n                    if (!dParent) {\n                        break;\n                    }\n                    if (dParent.length) {\n                        let descendentChild = [];\n                        for (let child of dParent) {\n                            descendentChild = descendentChild.concat(vDomSelector({\n                                ele: child, selector: sel,\n                                selectAll, immediateParent: !!flag\n                            }));\n                        }\n                        descendent = descendentChild;\n                    }\n                    else {\n                        descendent = vDomSelector({ ele: dParent, selector: sel, selectAll, immediateParent: !!flag });\n                    }\n                    flag++;\n                    dParent = descendent;\n                }\n                if (descendent) {\n                    curColl = descendent;\n                }\n            }\n            if (!isDescendant) {\n                if (parent.length) {\n                    let iCurSelector = [];\n                    for (let curParent of parent) {\n                        iCurSelector = iCurSelector.concat(accessElement(curParent, mapper, selectAll, immediateParent));\n                    }\n                    curColl = iCurSelector;\n                }\n                else {\n                    curColl = accessElement(parent, mapper, selectAll, immediateParent);\n                }\n            }\n        }\n        if (selectAll) {\n            return curColl;\n        }\n        else {\n            return curColl[0] || null;\n        }\n    }\n    VirtualDOM.vDomSelector = vDomSelector;\n    function processSelector(selector, mapper) {\n        let match = selector.match(idClassSelector);\n        let obj = {};\n        if (match) {\n            let curMapper = selectMapper[match[0]];\n            if (curMapper === 'className') {\n                let curObj = mapper.filter((obj) => { return obj.hasOwnProperty('className'); })[0];\n                let canPush = false;\n                if (!curObj) {\n                    canPush = true;\n                    curObj = {};\n                }\n                let existValue = curObj[curMapper] || '';\n                curObj[curMapper] = existValue + classRegexString.replace('{value}', selector.replace('.', ''));\n                if (canPush) {\n                    mapper.push(curObj);\n                }\n            }\n            else {\n                obj[curMapper] = selector.replace(match[0], '');\n                mapper.push(obj);\n            }\n        }\n        else {\n            mapper.push({ tagName: selector });\n        }\n    }\n    //tslint:disable-next-line\n    function accessElement(ele, mapper, selectAll, immediateParent) {\n        if (ele.children) {\n            //tslint:disable-next-line\n            let temp = ele.children.filter(function (child) {\n                if (typeof (child) !== 'string') {\n                    let matched = true;\n                    for (let map of mapper) {\n                        let key = Object.keys(map)[0];\n                        let expected = map[key];\n                        let actualValue = getValue(assigner[key], child);\n                        if (key === 'className') {\n                            if (!(new RegExp('^' + expected + '.*$').test(actualValue))) {\n                                matched = false;\n                                break;\n                            }\n                        }\n                        else if (actualValue !== expected) {\n                            matched = false;\n                            break;\n                        }\n                    }\n                    return matched;\n                }\n                else {\n                    return false;\n                }\n            });\n            if (!immediateParent && (!temp.length || selectAll)) {\n                ele.children.forEach((child) => {\n                    if (isObject(child)) {\n                        temp = temp.concat(accessElement(child, mapper, selectAll));\n                    }\n                });\n            }\n            return temp;\n        }\n        else {\n            return [];\n        }\n    }\n    VirtualDOM.accessElement = accessElement;\n    function ConvertHTMLToJSon(htmlString) {\n        let results = [];\n        let isText;\n        let tagArray = [];\n        let nodeArray = [];\n        while (htmlString) {\n            isText = true;\n            let lastVal = getLastValue(tagArray);\n            if (!lastVal || !contains(cspElement, lastVal)) {\n                if (htmlString.indexOf('</') === 0) {\n                    let match = htmlString.match(endRegex);\n                    if (match) {\n                        htmlString = htmlString.substring(match[0].length);\n                        //tslint:disable-next-line\n                        match[0].replace(endRegex, iterateEndTag);\n                    }\n                    isText = false;\n                }\n                else if (htmlString.indexOf('<') === 0) {\n                    let match = htmlString.match(startRegex);\n                    if (match) {\n                        htmlString = htmlString.substring(match[0].length);\n                        //tslint:disable-next-line\n                        match[0].replace(startRegex, iterateStartTag);\n                    }\n                    isText = false;\n                }\n                if (isText) {\n                    let tagIndex = htmlString.indexOf('<');\n                    let text = tagIndex < 0 ? htmlString : htmlString.substring(0, tagIndex);\n                    htmlString = tagIndex < 0 ? '' : htmlString.substring(tagIndex);\n                    iterateText(text);\n                }\n            }\n            else {\n                //tslint:disable-next-line\n                htmlString = htmlString.replace(new RegExp('([\\\\s\\\\S]*?)<\\/' + getLastValue(nodeArray) + '[^>]*>'), (all, text) => {\n                    text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1$2');\n                    iterateText(text);\n                    return '';\n                });\n                iterateEndTag('', getLastValue(tagArray));\n            }\n            \n        }\n        function iterateStartTag(start, tagName, rest) {\n            tagName = tagName.toLowerCase();\n            if (contains(blockElements, tagName)) {\n                while (getLastValue(tagArray) && contains(inlineElement, getLastValue(tagArray))) {\n                    iterateEndTag('', getLastValue(tagArray));\n                }\n            }\n            if (contains(selfClosingElements, tagName) && getLastValue(tagArray)) {\n                iterateEndTag('', tagName);\n            }\n            let isSelfTag = contains(emptyElements, tagName);\n            if (!isSelfTag) {\n                tagArray.push(tagName);\n            }\n            let attrs = {};\n            //tslint:disable-next-line\n            rest.replace(attributeRegex, function (match, name, ...names) {\n                //tslint:disable-next-line\n                let val = names[2] ? names[2] :\n                    names[3] ? names[3] :\n                        names[4] ? names[4] :\n                            contains(fillAttrs, name) ? name : '';\n                if (name === 'style') {\n                    let valArr = val.split(';');\n                    let vObj = {};\n                    for (let i = 0, length = valArr.length; i < length; i++) {\n                        let cVal = valArr[i];\n                        let styleSplit = cVal.split(':');\n                        vObj[styleSplit[0]] = styleSplit[1];\n                    }\n                    val = vObj;\n                }\n                name = nameMapper[name] || name;\n                attrs[name] = val;\n                //tslint:disable-next-line\n            });\n            attrs['data-id'] = getRandomId();\n            let tagObject = {\n                tagName: tagName,\n                attributes: attrs\n            };\n            if (isSelfTag) {\n                let parent = (nodeArray[0] || results);\n                if (parent.children === undefined) {\n                    parent.children = [];\n                }\n                tagObject.parent = parent;\n                parent.children.push(tagObject);\n            }\n            else {\n                nodeArray.unshift(tagObject);\n            }\n        }\n        function iterateEndTag(start, tagName) {\n            let pos;\n            if (!tagName) {\n                pos = 0;\n            }\n            else {\n                for (pos = tagArray.length - 1; pos >= 0; pos--) {\n                    if (tagArray[pos] === tagName) {\n                        break;\n                    }\n                }\n            }\n            if (pos >= 0) {\n                for (let j = nodeArray.length - 1; j >= pos; j--) {\n                    //tslint:disable-next-line\n                    let node = nodeArray.shift();\n                    if (nodeArray.length === 0) {\n                        results.push(node);\n                    }\n                    else {\n                        let parent = nodeArray[0];\n                        if (parent.children === undefined) {\n                            parent.children = [];\n                        }\n                        node.parent = parent;\n                        parent.children.push(node);\n                    }\n                }\n                tagArray.length = pos;\n            }\n        }\n        function iterateText(text) {\n            if (nodeArray.length === 0) {\n                results.push(text);\n            }\n            else {\n                let parent = nodeArray[0];\n                if (parent.children === undefined) {\n                    parent.children = [];\n                }\n                parent.children.push(text);\n            }\n        }\n        return results;\n    }\n    VirtualDOM.ConvertHTMLToJSon = ConvertHTMLToJSon;\n    //tslint:disable-next-line \n    function getLastValue(arr) {\n        return arr[arr.length - 1];\n    }\n    function contains(arr, key) {\n        return arr.indexOf(key) !== -1;\n    }\n    //tslint:disable-next-line\n    function cloneNode(ele, deep) {\n        if (isObject(ele)) {\n            if (deep) {\n                return extend({}, {}, ele, true);\n            }\n            else {\n                return { tagName: ele.tagName, attributes: ele.attributes };\n            }\n        }\n        else {\n            return ele.cloneNode(deep);\n        }\n    }\n    VirtualDOM.cloneNode = cloneNode;\n    function setStyleAttribute(element, attrs) {\n        if (element.attributes.style) {\n            (element.attributes).style = extend({}, attrs);\n        }\n        else {\n            element.attributes.style = extend(element.attributes.style, attrs);\n        }\n    }\n    VirtualDOM.setStyleAttribute = setStyleAttribute;\n    //tslint:enable:no-any\n})(VirtualDOM || (VirtualDOM = {}));\n\n/**\n * Functions related to dom operations.\n */\nconst SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nfunction createElement(tagName, properties) {\n    //tslint:disable-next-line\n    let element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nfunction addClass(elements, classes) {\n    let classList = getClassList(classes);\n    for (let ele of elements) {\n        for (let className of classList) {\n            if (isObject(ele)) {\n                let curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nfunction removeClass(elements, classes) {\n    let classList = getClassList(classes);\n    for (let ele of elements) {\n        let flag = isObject(ele);\n        let canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (let className of classList) {\n                if (flag) {\n                    let classes = getValue('attributes.className', ele);\n                    let classArr = classes.split(' ');\n                    let index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    let classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nfunction isVisible(element) {\n    let ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nfunction prepend(fromElements, toElement, isEval) {\n    //tslint:disable:no-any\n    if (isObject(toElement)) {\n        VirtualDOM.prepend(fromElements, toElement);\n    }\n    else {\n        let docFrag = document.createDocumentFragment();\n        for (let ele of fromElements) {\n            docFrag.appendChild(ele);\n        }\n        toElement.insertBefore(docFrag, toElement.firstElementChild);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nfunction append(fromElements, toElement, isEval) {\n    if (isObject(toElement)) {\n        VirtualDOM.append(fromElements, toElement);\n    }\n    else {\n        let docFrag = document.createDocumentFragment();\n        for (let ele of fromElements) {\n            docFrag.appendChild(ele);\n        }\n        toElement.appendChild(docFrag);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n//tslint: enable:no-any\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    let eleArray = ele.querySelectorAll('script');\n    eleArray.forEach((element) => {\n        let script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nfunction detach(element) {\n    if (isObject(element)) {\n        return VirtualDOM.detach(element);\n    }\n    else {\n        let parentNode = element.parentNode;\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nfunction remove(element) {\n    if (isObject(element)) {\n        VirtualDOM.detach(element);\n    }\n    else {\n        let parentNode = element.parentNode;\n        EventHandler.clearEvents(element);\n        parentNode.removeChild(element);\n    }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nfunction attributes(element, attributes) {\n    let keys = Object.keys(attributes);\n    let ele = element;\n    for (let key of keys) {\n        if (isObject(ele)) {\n            let iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[iKey] = attributes[key];\n        }\n        else {\n            ele.setAttribute(key, attributes[key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nfunction select(selector, context = document, needsVDOM) {\n    if (isObject(context) && needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector, selectAll: false });\n    }\n    else {\n        return context.querySelector(selector);\n    }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nfunction selectAll(selector, context = document, needsVDOM) {\n    if (isObject(context) && !needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector, selectAll: true });\n    }\n    else {\n        let nodeList = context.querySelectorAll(selector);\n        return nodeList;\n    }\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nfunction closest(element, selector) {\n    let el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nfunction siblings(element) {\n    let siblings = [];\n    let childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (let curNode of childNodes) {\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nfunction getAttributeOrDefault(element, property, value) {\n    let attrVal;\n    let isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nfunction setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        if (isObject(element)) {\n            // tslint:disable-next-line:no-any\n            VirtualDOM.setStyleAttribute(element, attrs);\n        }\n        else {\n            Object.keys(attrs).forEach((key) => {\n                // tslint:disable-next-line:no-any\n                element.style[key] = attrs[key];\n            });\n        }\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nfunction classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nfunction matches(element, selector) {\n    //tslint:disable-next-line\n    let matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\nfunction includeInnerHTML(ele, innerHTML) {\n    if (isObject(ele)) {\n        if (innerHTML === '') {\n            ele.children = [];\n        }\n        else {\n            let res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n            if (res.length) {\n                VirtualDOM.assignParent(res, ele);\n                ele.children = res;\n            }\n        }\n    }\n    else {\n        ele.innerHTML = innerHTML;\n    }\n}\n//tslint:disable-next-line\nfunction containsClass(ele, className) {\n    if (isObject(ele)) {\n        // tslint:disable-next-line:no-any\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nfunction cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n        else {\n            return { tagName: element.tagName, attributes: element.attributes };\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n\nconst isColEName = new RegExp('\\]');\n/* tslint:enable:no-any */\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n * @private\n */\nclass Base {\n    /**\n     * Base constructor accept options and element\n     */\n    constructor(options, element) {\n        this.isRendered = false;\n        this.isComplexArraySetter = false;\n        this.isServerRendered = false;\n        this.allowServerDataBinding = true;\n        this.isProtectedOnChange = true;\n        this.properties = {};\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.bulkChanges = {};\n        this.refreshing = false;\n        this.ignoreCollectionWatch = false;\n        // tslint:disable-next-line:no-empty\n        this.finalUpdate = () => { };\n        this.childChangedProperties = {};\n        this.modelObserver = new Observer(this);\n        if (!isUndefined(element)) {\n            if ('string' === typeof (element)) {\n                this.element = document.querySelector(element);\n            }\n            else {\n                this.element = element;\n            }\n            if (!isNullOrUndefined(this.element)) {\n                this.isProtectedOnChange = false;\n                this.addInstance();\n            }\n        }\n        if (!isUndefined(options)) {\n            this.setProperties(options, true);\n        }\n        this.isDestroyed = false;\n    }\n    /** Property base section */\n    /**\n     * Function used to set bunch of property at a time.\n     * @private\n     * @param  {Object} prop - JSON object which holds components properties.\n     * @param  {boolean} muteOnChange? - Specifies to true when we set properties.\n     */\n    setProperties(prop, muteOnChange) {\n        let prevDetection = this.isProtectedOnChange;\n        this.isProtectedOnChange = !!muteOnChange;\n        merge(this, prop);\n        if (muteOnChange !== true) {\n            merge(this.changedProperties, prop);\n            this.dataBind();\n        }\n        else if (isBlazor() && this.isRendered) {\n            this.serverDataBind(prop);\n        }\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.isProtectedOnChange = prevDetection;\n    }\n    ;\n    /**\n     * Calls for child element data bind\n     * @param {Object} obj\n     * @param {Object} parent\n     * @returns {void}\n     */\n    // tslint:disable-next-line:no-any\n    static callChildDataBind(obj, parent) {\n        let keys = Object.keys(obj);\n        for (let key of keys) {\n            if (parent[key] instanceof Array) {\n                for (let obj of parent[key]) {\n                    if (obj.dataBind !== undefined) {\n                        obj.dataBind();\n                    }\n                }\n            }\n            else {\n                parent[key].dataBind();\n            }\n        }\n    }\n    clearChanges() {\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.childChangedProperties = {};\n    }\n    /**\n     * Bind property changes immediately to components\n     */\n    dataBind() {\n        Base.callChildDataBind(this.childChangedProperties, this);\n        if (Object.getOwnPropertyNames(this.changedProperties).length) {\n            let prevDetection = this.isProtectedOnChange;\n            let newChanges = this.changedProperties;\n            let oldChanges = this.oldProperties;\n            this.clearChanges();\n            this.isProtectedOnChange = true;\n            this.onPropertyChanged(newChanges, oldChanges);\n            this.isProtectedOnChange = prevDetection;\n        }\n    }\n    ;\n    /* tslint:disable:no-any */\n    serverDataBind(newChanges) {\n        if (!isBlazor()) {\n            return;\n        }\n        newChanges = newChanges ? newChanges : {};\n        extend(this.bulkChanges, {}, newChanges, true);\n        if (this.allowServerDataBinding) {\n            let sfBlazor = 'sfBlazor';\n            window[sfBlazor].updateModel(this);\n            this.bulkChanges = {};\n        }\n    }\n    /* tslint:enable:no-any */\n    saveChanges(key, newValue, oldValue) {\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            let newChanges = {};\n            newChanges[key] = newValue;\n            this.serverDataBind(newChanges);\n        }\n        if (this.isProtectedOnChange) {\n            return;\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.finalUpdate();\n        this.finalUpdate = setImmediate(this.dataBind.bind(this));\n    }\n    ;\n    /** Event Base Section */\n    /**\n     * Adds the handler to the given event listener.\n     * @param {string} eventName - A String that specifies the name of the event\n     * @param {Function} listener - Specifies the call to run when the event occurs.\n     * @return {void}\n     */\n    addEventListener(eventName, handler) {\n        this.modelObserver.on(eventName, handler);\n    }\n    /**\n     * Removes the handler from the given event listener.\n     * @param {string} eventName - A String that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    removeEventListener(eventName, handler) {\n        this.modelObserver.off(eventName, handler);\n    }\n    /**\n     * Triggers the handlers in the specified event.\n     * @private\n     * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n     * Can be a custom event, or any of the standard events.\n     * @param {Event} eventProp - Additional parameters to pass on to the event properties\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it failured to call.\n     * @return {void}\n     */\n    trigger(eventName, eventProp, successHandler, errorHandler) {\n        if (this.isDestroyed !== true) {\n            let prevDetection = this.isProtectedOnChange;\n            this.isProtectedOnChange = false;\n            let data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);\n            if (isColEName.test(eventName)) {\n                let handler = getValue(eventName, this);\n                if (handler) {\n                    let blazor = 'Blazor';\n                    if (window[blazor]) {\n                        let promise = handler.call(this, eventProp);\n                        if (promise && typeof promise.then === 'function') {\n                            if (!successHandler) {\n                                data = promise;\n                            }\n                            else {\n                                promise.then((data) => {\n                                    if (successHandler) {\n                                        data = typeof data === 'string' && this.modelObserver.isJson(data) ?\n                                            JSON.parse(data) : data;\n                                        successHandler.call(this, data);\n                                    }\n                                }).catch((data) => {\n                                    if (errorHandler) {\n                                        data = typeof data === 'string' && this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                                        errorHandler.call(this, data);\n                                    }\n                                });\n                            }\n                        }\n                        else if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                    else {\n                        handler.call(this, eventProp);\n                        if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                }\n                else if (successHandler) {\n                    successHandler.call(this, eventProp);\n                }\n            }\n            this.isProtectedOnChange = prevDetection;\n            return data;\n        }\n    }\n    /**\n     * To maintain instance in base class\n     */\n    addInstance() {\n        // Add module class to the root element\n        let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n        addClass([this.element], ['e-lib', moduleClass]);\n        if (!isNullOrUndefined(this.element.ej2_instances)) {\n            this.element.ej2_instances.push(this);\n        }\n        else {\n            setValue('ej2_instances', [this], this.element);\n        }\n    }\n    /**\n     * To remove the instance from the element\n     */\n    destroy() {\n        this.element.ej2_instances =\n            this.element.ej2_instances.filter((i) => { return i !== this; });\n        removeClass([this.element], ['e-' + this.getModuleName()]);\n        if (this.element.ej2_instances.length === 0) {\n            // Remove module class from the root element\n            removeClass([this.element], ['e-lib']);\n        }\n        this.clearChanges();\n        this.modelObserver.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * Global function to get the component instance from the rendered element.\n * @param elem Specifies the HTMLElement or element id string.\n * @param comp Specifies the component module name or Component.\n */\n// tslint:disable-next-line:no-any\nfunction getComponent(elem, comp) {\n    let instance;\n    let i;\n    let ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\n    for (i = 0; i < ele.ej2_instances.length; i++) {\n        instance = ele.ej2_instances[i];\n        if (typeof comp === 'string') {\n            let compName = instance.getModuleName();\n            if (comp === compName) {\n                return instance;\n            }\n        }\n        else {\n            // tslint:disable-next-line:no-any\n            if (instance instanceof comp) {\n                return instance;\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Function to remove the child instances.\n * @return {void}\n * @private\n */\n// tslint:disable-next-line:no-any\nfunction removeChildInstance(element) {\n    // tslint:disable-next-line:no-any\n    let childEle = [].slice.call(element.getElementsByClassName('e-control'));\n    for (let i = 0; i < childEle.length; i++) {\n        let compName = childEle[i].classList[1].split('e-')[1];\n        // tslint:disable-next-line:no-any\n        let compInstance = getComponent(childEle[i], compName);\n        if (!isUndefined(compInstance)) {\n            compInstance.destroy();\n        }\n    }\n}\n\n/**\n * Returns the Class Object\n * @param {ClassObject} instance - instance of ClassObject\n * @param {string} curKey - key of the current instance\n * @param {Object} defaultValue - default Value\n * @param {Object[]} type\n */\nfunction getObject(instance, curKey, defaultValue, type) {\n    if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {\n        instance.properties[curKey] = createInstance(type, [instance, curKey, defaultValue]);\n    }\n    return instance.properties[curKey];\n}\n/**\n * Returns object array\n * @param {ClassObject} instance\n * @param {string} curKey\n * @param {Object[]} defaultValue\n * @param type\n * @param {boolean} isSetter\n * @returns {Object[]}\n */\nfunction getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {\n    let result = [];\n    let len = defaultValue ? defaultValue.length : 0;\n    for (let i = 0; i < len; i++) {\n        let curType = type;\n        if (isFactory) {\n            curType = type(defaultValue[i], instance);\n        }\n        if (isSetter) {\n            let inst = createInstance(curType, [instance, curKey, {}, true]);\n            inst.setProperties(defaultValue[i], true);\n            result.push(inst);\n        }\n        else {\n            result.push(createInstance(curType, [instance, curKey, defaultValue[i], false]));\n        }\n    }\n    return result;\n}\n/**\n * Returns the properties of the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\nfunction propertyGetter(defaultValue, curKey) {\n    return function () {\n        if (!this.properties.hasOwnProperty(curKey)) {\n            this.properties[curKey] = defaultValue;\n        }\n        return this.properties[curKey];\n    };\n}\n/**\n * Set the properties for the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\nfunction propertySetter(defaultValue, curKey) {\n    return function (newValue) {\n        if (this.properties[curKey] !== newValue) {\n            let oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n            this.saveChanges(curKey, newValue, oldVal);\n            this.properties[curKey] = newValue;\n        }\n    };\n}\n/**\n * Returns complex objects\n */\nfunction complexGetter(defaultValue, curKey, type) {\n    return function () {\n        return getObject(this, curKey, defaultValue, type);\n    };\n}\n/**\n * Sets complex objects\n */\nfunction complexSetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        getObject(this, curKey, defaultValue, type).setProperties(newValue);\n    };\n}\nfunction complexFactoryGetter(defaultValue, curKey, type) {\n    return function () {\n        let curType = type({});\n        if (this.properties.hasOwnProperty(curKey)) {\n            return this.properties[curKey];\n        }\n        else {\n            return getObject(this, curKey, defaultValue, curType);\n        }\n    };\n}\nfunction complexFactorySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        let curType = type(newValue, this);\n        getObject(this, curKey, defaultValue, curType).setProperties(newValue);\n    };\n}\nfunction complexArrayGetter(defaultValue, curKey, type) {\n    return function () {\n        if (!this.properties.hasOwnProperty(curKey)) {\n            let defCollection = getObjectArray(this, curKey, defaultValue, type, false);\n            this.properties[curKey] = defCollection;\n        }\n        let ignore = ((this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch)\n            || this.ignoreCollectionWatch);\n        if (!this.properties[curKey].hasOwnProperty('push') && !ignore) {\n            ['push', 'pop'].forEach((extendFunc) => {\n                let descriptor = {\n                    value: complexArrayDefinedCallback(extendFunc, curKey, type, this.properties[curKey]).bind(this),\n                    configurable: true\n                };\n                Object.defineProperty(this.properties[curKey], extendFunc, descriptor);\n            });\n        }\n        if (!this.properties[curKey].hasOwnProperty('isComplexArray')) {\n            Object.defineProperty(this.properties[curKey], 'isComplexArray', { value: true });\n        }\n        return this.properties[curKey];\n    };\n}\nfunction complexArraySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        this.isComplexArraySetter = true;\n        let oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);\n        let newValCollection = getObjectArray(this, curKey, newValue, type, true);\n        this.isComplexArraySetter = false;\n        this.saveChanges(curKey, newValCollection, oldValueCollection);\n        this.properties[curKey] = newValCollection;\n    };\n}\nfunction complexArrayFactorySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        let oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n        let newValCollection = getObjectArray(this, curKey, newValue, type, true, true);\n        this.saveChanges(curKey, newValCollection, oldValueCollection);\n        this.properties[curKey] = newValCollection;\n    };\n}\nfunction complexArrayFactoryGetter(defaultValue, curKey, type) {\n    return function () {\n        let curType = type({});\n        if (!this.properties.hasOwnProperty(curKey)) {\n            let defCollection = getObjectArray(this, curKey, defaultValue, curType, false);\n            this.properties[curKey] = defCollection;\n        }\n        return this.properties[curKey];\n    };\n}\nfunction complexArrayDefinedCallback(dFunc, curKey, type, prop) {\n    /* tslint:disable no-function-expression */\n    return function (...newValue) {\n        let keyString = this.propName ? this.getParentKey() + '.' + curKey + '-' : curKey + '-';\n        switch (dFunc) {\n            case 'push':\n                for (let i = 0; i < newValue.length; i++) {\n                    Array.prototype[dFunc].apply(prop, [newValue[i]]);\n                    let model = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, dFunc);\n                    this.serverDataBind(model, newValue[i], false, dFunc);\n                }\n                break;\n            case 'pop':\n                Array.prototype[dFunc].apply(prop);\n                let model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);\n                this.serverDataBind(model, { ejsAction: 'pop' }, false, dFunc);\n                break;\n        }\n        return prop;\n    };\n    /* tslint:enable no-function-expression */\n}\nfunction getArrayModel(keyString, value, isControlParent, arrayFunction) {\n    let modelObject = keyString;\n    if (isControlParent) {\n        modelObject = {};\n        modelObject[keyString] = value;\n        if (value && typeof value === 'object') {\n            let action = 'ejsAction';\n            modelObject[keyString][action] = arrayFunction;\n        }\n    }\n    return modelObject;\n}\n/**\n * Method used to create property. General syntax below.\n * @param  {T} defaultValue? - Specifies the default value of property.\n * ```\n * @Property('TypeScript')\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Property(defaultValue) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: propertySetter(defaultValue, key),\n            get: propertyGetter(defaultValue, key),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'prop', defaultValue);\n    };\n}\n/**\n * Method used to create complex property. General syntax below.\n * @param  {T} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Complex<Type>({},Type)\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Complex(defaultValue, type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexSetter(defaultValue, key, type),\n            get: complexGetter(defaultValue, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'complexProp', defaultValue, type);\n    };\n}\n/**\n * Method used to create complex Factory property. General syntax below.\n * @param  {Function} defaultType - Specifies the default value of property.\n * @param  {Function} type - Specifies the class factory type of complex object.\n * ```\n * @ComplexFactory(defaultType, factoryFunction)\n * propertyName: Type1 | Type2;\n * ```\n * @private\n */\nfunction ComplexFactory(type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexFactorySetter({}, key, type),\n            get: complexFactoryGetter({}, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'complexProp', {}, type);\n    };\n}\n/**\n * Method used to create complex array property. General syntax below.\n * @param  {T[]} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Collection(defaultValue, type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexArraySetter(defaultValue, key, type),\n            get: complexArrayGetter(defaultValue, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'colProp', defaultValue, type);\n    };\n}\n/**\n * Method used to create complex factory array property. General syntax below.\n * @param  {T[]} defaultType - Specifies the default type of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\nfunction CollectionFactory(type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexArrayFactorySetter([], key, type),\n            get: complexArrayFactoryGetter([], key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'colProp', {}, type);\n    };\n}\n/**\n * Method used to create event property. General syntax below.\n * @param  {Function} defaultValue? - Specifies the default value of property.\n * @param  {boolean} isComplex? - Specifies the whether it is complex object.\n * ```\n * @Event(()=>{return true;})\n * ```\n * @private\n */\nfunction Event$1() {\n    return (target, key) => {\n        let eventDescriptor = {\n            set: function (newValue) {\n                let oldValue = this.properties[key];\n                if (oldValue !== newValue) {\n                    let finalContext = getParentContext(this, key);\n                    if (isUndefined(oldValue) === false) {\n                        finalContext.context.removeEventListener(finalContext.prefix, oldValue);\n                    }\n                    finalContext.context.addEventListener(finalContext.prefix, newValue);\n                    this.properties[key] = newValue;\n                }\n            },\n            get: propertyGetter(undefined, key),\n            enumerable: true,\n            configurable: true\n        };\n        Object.defineProperty(target, key, eventDescriptor);\n        addPropertyCollection(target, key, 'event');\n    };\n}\n/**\n * NotifyPropertyChanges is triggers the call back when the property has been changed.\n *\n * ```\n *  @NotifyPropertyChanges\n * class DemoClass implements INotifyPropertyChanged {\n *\n *     @Property()\n *     property1: string;\n *\n *     dataBind: () => void;\n *\n *     constructor() { }\n *\n *     onPropertyChanged(newProp: any, oldProp: any) {\n *         // Called when property changed\n *     }\n * }\n * ```\n * @private\n */\nfunction NotifyPropertyChanges(classConstructor) {\n    /** Need to code */\n}\n/**\n * Method  used to create the builderObject for the target component.\n * @private\n */\nfunction addPropertyCollection(target, key, propertyType, defaultValue, type) {\n    if (isUndefined(target.propList)) {\n        target.propList = {\n            props: [],\n            complexProps: [],\n            colProps: [],\n            events: [],\n            propNames: [],\n            complexPropNames: [],\n            colPropNames: [],\n            eventNames: []\n        };\n    }\n    /* tslint:disable no-any */\n    target.propList[propertyType + 's'].push({\n        propertyName: key,\n        defaultValue: defaultValue,\n        type: type\n    });\n    target.propList[propertyType + 'Names'].push(key);\n    /* tslint:enable no-any */\n}\n/**\n * Returns an object containing the builder properties\n * @param {Function} component\n * @private\n */\nfunction getBuilderProperties(component) {\n    if (isUndefined(component.prototype.builderObject)) {\n        component.prototype.builderObject = {\n            properties: {}, propCollections: [], add: function () {\n                this.isPropertyArray = true;\n                this.propCollections.push(extend({}, this.properties, {}));\n            }\n        };\n        let rex = /complex/;\n        for (let key of Object.keys(component.prototype.propList)) {\n            for (let prop of component.prototype.propList[key]) {\n                if (rex.test(key)) {\n                    component.prototype.builderObject[prop.propertyName] = function (value) {\n                        let childType = {};\n                        merge(childType, getBuilderProperties(prop.type));\n                        value(childType);\n                        let tempValue;\n                        if (!childType.isPropertyArray) {\n                            tempValue = extend({}, childType.properties, {});\n                        }\n                        else {\n                            tempValue = childType.propCollections;\n                        }\n                        this.properties[prop.propertyName] = tempValue;\n                        childType.properties = {};\n                        childType.propCollections = [];\n                        childType.isPropertyArray = false;\n                        return this;\n                    };\n                }\n                else {\n                    component.prototype.builderObject[prop.propertyName] = function (value) {\n                        this.properties[prop.propertyName] = value;\n                        return this;\n                    };\n                }\n            }\n        }\n    }\n    return component.prototype.builderObject;\n}\n/**\n * Method used to create builder for the components\n * @param {any} component -specifies the target component for which builder to be created.\n * @private\n */\nfunction CreateBuilder(component) {\n    let builderFunction = function (element) {\n        this.element = element;\n        return this;\n    };\n    let instanceFunction = (element) => {\n        if (!builderFunction.prototype.hasOwnProperty('create')) {\n            builderFunction.prototype = getBuilderProperties(component);\n            builderFunction.prototype.create = function () {\n                let temp = extend({}, {}, this.properties);\n                this.properties = {};\n                return new component(temp, this.element);\n            };\n        }\n        return new builderFunction(element);\n    };\n    return instanceFunction;\n}\n/**\n * Returns parent options for the object\n * @param {Object} context\n * @param {string} prefix\n * @private\n */\nfunction getParentContext(context, prefix) {\n    if (context.hasOwnProperty('parentObj') === false) {\n        return { context: context, prefix: prefix };\n    }\n    else {\n        let curText = getValue('propName', context);\n        if (curText) {\n            prefix = curText + '-' + prefix;\n        }\n        return getParentContext(getValue('parentObj', context), prefix);\n    }\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Animation_1;\n/**\n * The Animation framework provide options to animate the html DOM elements\n * ```typescript\n *   let animeObject = new Animation({\n *      name: 'SlideLeftIn',\n *      duration: 1000\n *   });\n *   animeObject.animate('#anime1');\n *   animeObject.animate('#anime2', { duration: 500 });\n * ```\n */\nlet Animation = Animation_1 = class Animation extends Base {\n    constructor(options) {\n        super(options, undefined);\n        /**\n         * @private\n         */\n        this.easing = {\n            ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',\n            linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',\n            easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',\n            easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',\n            easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',\n            elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',\n            elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',\n            elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'\n        };\n    }\n    /**\n     * Applies animation to the current element.\n     * @param {string | HTMLElement} element - Element which needs to be animated.\n     * @param {AnimationModel} options - Overriding default animation settings.\n     * @return {void}\n     */\n    animate(element, options) {\n        options = !options ? {} : options;\n        let model = this.getModel(options);\n        if (typeof element === 'string') {\n            let elements = Array.prototype.slice.call(selectAll(element, document));\n            for (let element of elements) {\n                model.element = element;\n                Animation_1.delayAnimation(model);\n            }\n        }\n        else {\n            model.element = element;\n            Animation_1.delayAnimation(model);\n        }\n    }\n    /**\n     * Stop the animation effect on animated element.\n     * @param {HTMLElement} element - Element which needs to be stop the animation.\n     * @param {AnimationOptions} model - Handling the animation model at stop function.\n     * @return {void}\n     */\n    static stop(element, model) {\n        element.style.animation = '';\n        element.removeAttribute('e-animate');\n        let animationId = element.getAttribute('e-animation-id');\n        if (animationId) {\n            let frameId = parseInt(animationId, 10);\n            cancelAnimationFrame(frameId);\n            element.removeAttribute('e-animation-id');\n        }\n        if (model && model.end) {\n            model.end.call(this, model);\n        }\n    }\n    /**\n     * Set delay to animation element\n     * @param {AnimationModel} model\n     * @returns {void}\n     */\n    static delayAnimation(model) {\n        if (model.delay) {\n            setTimeout(() => { Animation_1.applyAnimation(model); }, model.delay);\n        }\n        else {\n            Animation_1.applyAnimation(model);\n        }\n    }\n    /**\n     * Triggers animation\n     * @param {AnimationModel} model\n     * @returns {void}\n     */\n    static applyAnimation(model) {\n        model.timeStamp = 0;\n        let step = 0;\n        let timerId = 0;\n        let startTime = 0;\n        let prevTimeStamp = 0;\n        let duration = model.duration;\n        model.element.setAttribute('e-animate', 'true');\n        let startAnimation = (timeStamp) => {\n            try {\n                if (timeStamp) {\n                    // let step: number = model.timeStamp = timeStamp - startTime;\n                    /** phantomjs workaround for timestamp fix */\n                    prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;\n                    model.timeStamp = (timeStamp + model.timeStamp) - prevTimeStamp;\n                    prevTimeStamp = timeStamp;\n                    /** phantomjs workaround end */\n                    // trigger animation begin event\n                    if (!step && model.begin) {\n                        model.begin.call(this, model);\n                    }\n                    step = step + 1;\n                    let avg = model.timeStamp / step;\n                    if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate')) {\n                        // apply animation effect to the current element                \n                        model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction;\n                        if (model.progress) {\n                            model.progress.call(this, model);\n                        }\n                        // repeat requestAnimationFrame \n                        requestAnimationFrame(startAnimation);\n                    }\n                    else {\n                        // clear requestAnimationFrame\n                        cancelAnimationFrame(timerId);\n                        model.element.removeAttribute('e-animation-id');\n                        model.element.removeAttribute('e-animate');\n                        model.element.style.animation = '';\n                        if (model.end) {\n                            model.end.call(this, model);\n                        }\n                    }\n                }\n                else {\n                    startTime = performance.now();\n                    // set initial requestAnimationFrame\n                    timerId = requestAnimationFrame(startAnimation);\n                    model.element.setAttribute('e-animation-id', timerId.toString());\n                }\n            }\n            catch (e) {\n                cancelAnimationFrame(timerId);\n                model.element.removeAttribute('e-animation-id');\n                if (model.fail) {\n                    model.fail.call(this, e);\n                }\n            }\n        };\n        startAnimation();\n    }\n    /**\n     * Returns Animation Model\n     * @param {AnimationModel} options\n     * @returns {AnimationModel}\n     */\n    getModel(options) {\n        return {\n            name: options.name || this.name,\n            delay: options.delay || this.delay,\n            duration: (options.duration !== undefined ? options.duration : this.duration),\n            begin: options.begin || this.begin,\n            end: options.end || this.end,\n            fail: options.fail || this.fail,\n            progress: options.progress || this.progress,\n            timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] :\n                (options.timingFunction || this.easing[this.timingFunction])\n        };\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // no code needed\n    }\n    /**\n     * Returns module name as animation\n     * @private\n     */\n    getModuleName() {\n        return 'animation';\n    }\n    /**\n     * @private\n     */\n    destroy() {\n        //Override base destroy;\n    }\n};\n__decorate([\n    Property('FadeIn')\n], Animation.prototype, \"name\", void 0);\n__decorate([\n    Property(400)\n], Animation.prototype, \"duration\", void 0);\n__decorate([\n    Property('ease')\n], Animation.prototype, \"timingFunction\", void 0);\n__decorate([\n    Property(0)\n], Animation.prototype, \"delay\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"progress\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"begin\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"end\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"fail\", void 0);\nAnimation = Animation_1 = __decorate([\n    NotifyPropertyChanges\n], Animation);\n/**\n * Ripple provides material theme's wave effect when an element is clicked\n * ```html\n * <div id='ripple'></div>\n * <script>\n *   rippleEffect(document.getElementById('ripple'));\n * </script>\n * ```\n * @private\n * @param HTMLElement element - Target element\n * @param RippleOptions rippleOptions - Ripple options .\n */\nfunction rippleEffect(element, rippleOptions, done) {\n    let rippleModel = getRippleModel(rippleOptions);\n    if (rippleModel.rippleFlag === false || (rippleModel.rippleFlag === undefined && !isRippleEnabled)) {\n        return Function;\n    }\n    element.setAttribute('data-ripple', 'true');\n    EventHandler.add(element, 'mousedown', rippleHandler, { parent: element, rippleOptions: rippleModel });\n    EventHandler.add(element, 'mouseup', rippleUpHandler, { parent: element, rippleOptions: rippleModel, done: done });\n    EventHandler.add(element, 'mouseleave', rippleLeaveHandler, { parent: element, rippleOptions: rippleModel });\n    if (Browser.isPointer) {\n        EventHandler.add(element, 'transitionend', rippleLeaveHandler, { parent: element, rippleOptions: rippleModel });\n    }\n    return (() => {\n        element.removeAttribute('data-ripple');\n        EventHandler.remove(element, 'mousedown', rippleHandler);\n        EventHandler.remove(element, 'mouseup', rippleUpHandler);\n        EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n        EventHandler.remove(element, 'transitionend', rippleLeaveHandler);\n    });\n}\nfunction getRippleModel(rippleOptions) {\n    let rippleModel = {\n        selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,\n        ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,\n        rippleFlag: rippleOptions && rippleOptions.rippleFlag,\n        isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,\n        duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350\n    };\n    return rippleModel;\n}\n/**\n * Handler for ripple event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleHandler(e) {\n    let target = (e.target);\n    let selector = this.rippleOptions.selector;\n    let element = selector ? closest(target, selector) : target;\n    if (!element || (this.rippleOptions && closest(target, this.rippleOptions.ignore))) {\n        return;\n    }\n    let offset = element.getBoundingClientRect();\n    let offsetX = e.pageX - document.body.scrollLeft;\n    let offsetY = e.pageY - ((!document.body.scrollTop && document.documentElement) ?\n        document.documentElement.scrollTop : document.body.scrollTop);\n    let pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));\n    let pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));\n    let radius = Math.sqrt(pageX * pageX + pageY * pageY);\n    let diameter = radius * 2 + 'px';\n    let x = offsetX - offset.left - radius;\n    let y = offsetY - offset.top - radius;\n    if (this.rippleOptions && this.rippleOptions.isCenterRipple) {\n        x = 0;\n        y = 0;\n        diameter = '100%';\n    }\n    element.classList.add('e-ripple');\n    let duration = this.rippleOptions.duration.toString();\n    let styles = 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + 'px;' +\n        'transition-duration: ' + duration + 'ms;';\n    let rippleElement = createElement('div', { className: 'e-ripple-element', styles: styles });\n    element.appendChild(rippleElement);\n    window.getComputedStyle(rippleElement).getPropertyValue('opacity');\n    rippleElement.style.transform = 'scale(1)';\n    if (element !== this.parent) {\n        EventHandler.add(element, 'mouseleave', rippleLeaveHandler, { parent: this.parent, rippleOptions: this.rippleOptions });\n    }\n}\n/**\n * Handler for ripple element mouse up event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleUpHandler(e) {\n    removeRipple(e, this);\n}\n/**\n * Handler for ripple element mouse move event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleLeaveHandler(e) {\n    removeRipple(e, this);\n}\n/**\n * Handler for removing ripple element\n * @param {MouseEvent} e\n * @param {rippleArgs} eventArgs\n * @returns {void}\n * @private\n */\nfunction removeRipple(e, eventArgs) {\n    let duration = eventArgs.rippleOptions.duration;\n    let target = (e.target);\n    let selector = eventArgs.rippleOptions.selector;\n    let element = selector ? closest(target, selector) : target;\n    if (!element || (element && element.className.indexOf('e-ripple') === -1)) {\n        return;\n    }\n    let rippleElements = selectAll('.e-ripple-element', element);\n    let rippleElement = rippleElements[rippleElements.length - 1];\n    if (rippleElement) {\n        rippleElement.style.opacity = '0.5';\n    }\n    if (eventArgs.parent !== element) {\n        EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n    }\n    /* tslint:disable:align */\n    setTimeout(() => {\n        if (rippleElement && rippleElement.parentNode) {\n            rippleElement.parentNode.removeChild(rippleElement);\n        }\n        if (!element.getElementsByClassName('e-ripple-element').length) {\n            element.classList.remove('e-ripple');\n        }\n        if (eventArgs.done) {\n            eventArgs.done(e);\n        }\n    }, duration);\n}\nlet isRippleEnabled = false;\n/**\n * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.\n * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.\n * @returns {boolean}\n */\nfunction enableRipple(isRipple) {\n    isRippleEnabled = isRipple;\n    return isRippleEnabled;\n}\n\n/**\n * Module loading operations\n */\nconst MODULE_SUFFIX = 'Module';\nclass ModuleLoader {\n    constructor(parent) {\n        this.loadedModules = [];\n        this.parent = parent;\n    }\n    ;\n    /**\n     * Inject required modules in component library\n     * @return {void}\n     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\n     * @param {Function[]} moduleList - Array of modules to be injected from sample side\n     */\n    inject(requiredModules, moduleList) {\n        let reqLength = requiredModules.length;\n        if (reqLength === 0) {\n            this.clean();\n            return;\n        }\n        if (this.loadedModules.length) {\n            this.clearUnusedModule(requiredModules);\n        }\n        for (let i = 0; i < reqLength; i++) {\n            let modl = requiredModules[i];\n            for (let module of moduleList) {\n                let modName = modl.member;\n                if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\n                    let moduleObject = createInstance(module, modl.args);\n                    let memberName = this.getMemberName(modName);\n                    if (modl.isProperty) {\n                        setValue(memberName, module, this.parent);\n                    }\n                    else {\n                        setValue(memberName, moduleObject, this.parent);\n                    }\n                    let loadedModule = modl;\n                    loadedModule.member = memberName;\n                    this.loadedModules.push(loadedModule);\n                }\n            }\n        }\n    }\n    /**\n     * To remove the created object while destroying the control\n     * @return {void}\n     */\n    clean() {\n        for (let modules of this.loadedModules) {\n            if (!modules.isProperty) {\n                getValue(modules.member, this.parent).destroy();\n            }\n        }\n        this.loadedModules = [];\n    }\n    /**\n     * Removes all unused modules\n     * @param {ModuleDeclaration[]} moduleList\n     * @returns {void}\n     */\n    clearUnusedModule(moduleList) {\n        let usedModules = moduleList.map((arg) => { return this.getMemberName(arg.member); });\n        let removableModule = this.loadedModules.filter((module) => {\n            return usedModules.indexOf(module.member) === -1;\n        });\n        for (let mod of removableModule) {\n            if (!mod.isProperty) {\n                getValue(mod.member, this.parent).destroy();\n            }\n            this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\n            deleteObject(this.parent, mod.member);\n        }\n    }\n    /**\n     * To get the name of the member.\n     * @param {string} name\n     * @returns {string}\n     */\n    getMemberName(name) {\n        return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\n    }\n    /**\n     * Returns boolean based on whether the module specified is loaded or not\n     * @param {string} modName\n     * @returns {boolean}\n     */\n    isModuleLoaded(modName) {\n        for (let mod of this.loadedModules) {\n            if (mod.member === this.getMemberName(modName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * To detect the changes for inner properties.\n * @private\n */\nclass ChildProperty {\n    constructor(parent, propName, defaultValue, isArray) {\n        this.isComplexArraySetter = false;\n        this.properties = {};\n        this.changedProperties = {};\n        this.childChangedProperties = {};\n        this.oldProperties = {};\n        // tslint:disable-next-line:no-empty\n        this.finalUpdate = () => { };\n        this.callChildDataBind = getValue('callChildDataBind', Base);\n        this.parentObj = parent;\n        this.controlParent = this.parentObj.controlParent || this.parentObj;\n        this.propName = propName;\n        this.isParentArray = isArray;\n        this.setProperties(defaultValue, true);\n    }\n    /**\n     * Updates the property changes\n     * @param {boolean} val\n     * @param {string} propName\n     * @returns {void}\n     */\n    updateChange(val, propName) {\n        if (val === true) {\n            this.parentObj.childChangedProperties[propName] = val;\n        }\n        else {\n            delete this.parentObj.childChangedProperties[propName];\n        }\n        if (this.parentObj.updateChange) {\n            this.parentObj.updateChange(val, this.parentObj.propName);\n        }\n    }\n    /**\n     * Updates time out duration\n     */\n    updateTimeOut() {\n        if (this.parentObj.updateTimeOut) {\n            this.parentObj.finalUpdate();\n            this.parentObj.updateTimeOut();\n        }\n        else {\n            let changeTime = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n            let clearUpdate = () => {\n                clearTimeout(changeTime);\n            };\n            this.finalUpdate = clearUpdate;\n        }\n    }\n    /**\n     * Clears changed properties\n     */\n    clearChanges() {\n        this.finalUpdate();\n        this.updateChange(false, this.propName);\n        this.oldProperties = {};\n        this.changedProperties = {};\n    }\n    /**\n     * Set property changes\n     * @param {Object} prop\n     * @param {boolean} muteOnChange\n     * {void}\n     */\n    setProperties(prop, muteOnChange) {\n        if (muteOnChange === true) {\n            merge(this, prop);\n            this.updateChange(false, this.propName);\n            this.clearChanges();\n        }\n        else {\n            merge(this, prop);\n        }\n    }\n    /**\n     * Binds data\n     */\n    dataBind() {\n        this.callChildDataBind(this.childChangedProperties, this);\n        if (this.isParentArray) {\n            let curIndex = this.parentObj[this.propName].indexOf(this);\n            if (Object.keys(this.changedProperties).length) {\n                setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n                setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n            }\n        }\n        else {\n            this.parentObj.changedProperties[this.propName] = this.changedProperties;\n            this.parentObj.oldProperties[this.propName] = this.oldProperties;\n        }\n        this.clearChanges();\n    }\n    /**\n     * Saves changes to newer values\n     * @param {string} key\n     * @param {Object} newValue\n     * @param {Object} oldValue\n     * @returns {void}\n     */\n    saveChanges(key, newValue, oldValue, restrictServerDataBind) {\n        if (this.controlParent.isProtectedOnChange) {\n            return;\n        }\n        if (!restrictServerDataBind) {\n            this.serverDataBind(key, newValue, true);\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.updateChange(true, this.propName);\n        this.finalUpdate();\n        this.updateTimeOut();\n    }\n    serverDataBind(key, value, isSaveChanges, action) {\n        if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n            // tslint:disable-next-line:no-any\n            let parent;\n            let newChanges = {};\n            let parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n            /* istanbul ignore else  */\n            if (parentKey.indexOf('.') !== -1) {\n                let complexKeys = parentKey.split('.');\n                parent = newChanges;\n                for (let i = 0; i < complexKeys.length; i++) {\n                    let isFinal = i === complexKeys.length - 1;\n                    parent[complexKeys[i]] = isFinal ? value : {};\n                    parent = isFinal ? parent : parent[complexKeys[i]];\n                }\n            }\n            else {\n                newChanges[parentKey] = {};\n                parent = newChanges[parentKey];\n                newChanges[parentKey][key] = value;\n            }\n            /* istanbul ignore next */\n            if (this.isParentArray) {\n                let actionProperty = 'ejsAction';\n                parent[actionProperty] = action ? action : 'none';\n            }\n            this.controlParent.serverDataBind(newChanges);\n        }\n    }\n    getParentKey(isSaveChanges) {\n        // tslint:disable-next-line:no-any\n        let index = '';\n        let propName = this.propName;\n        /* istanbul ignore next */\n        if (this.isParentArray) {\n            index = this.parentObj[this.propName].indexOf(this);\n            let valueLength = this.parentObj[this.propName].length;\n            valueLength = isSaveChanges ? valueLength : (valueLength > 0 ? valueLength - 1 : 0);\n            index = index !== -1 ? '-' + index : '-' + valueLength;\n            propName = propName + index;\n        }\n        if (this.controlParent !== this.parentObj) {\n            propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n        }\n        return propName;\n    }\n}\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet componentCount = 0;\nlet lastPageID;\nlet lastHistoryLen = 0;\n/**\n * Base class for all Essential JavaScript components\n */\nlet Component = class Component extends Base {\n    /**\n     * Initialize the constructor for component base\n     */\n    constructor(options, selector) {\n        super(options, selector);\n        this.randomId = uniqueID();\n        /**\n         * string template option for Blazor template rendering\n         * @private\n         */\n        this.isStringTemplate = false;\n        this.needsID = false;\n        this.isReactHybrid = false;\n        if (isNullOrUndefined(this.enableRtl)) {\n            this.setProperties({ 'enableRtl': rightToLeft }, true);\n        }\n        if (isNullOrUndefined(this.locale)) {\n            this.setProperties({ 'locale': defaultCulture }, true);\n        }\n        this.moduleLoader = new ModuleLoader(this);\n        this.localObserver = new Observer(this);\n        // tslint:disable-next-line:no-function-constructor-with-string-args\n        onIntlChange.on('notifyExternalChange', this.detectFunction, this, this.randomId);\n        if (!isUndefined(selector)) {\n            this.appendTo();\n        }\n    }\n    requiredModules() {\n        return [];\n    }\n    ;\n    /**\n     * Destroys the sub modules while destroying the widget\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n        if (this.enablePersistence) {\n            this.setPersistData();\n        }\n        this.localObserver.destroy();\n        if (this.refreshing) {\n            return;\n        }\n        removeClass([this.element], ['e-control']);\n        this.trigger('destroyed', { cancel: false });\n        super.destroy();\n        this.moduleLoader.clean();\n        onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);\n    }\n    /**\n     * Applies all the pending property changes and render the component again.\n     */\n    refresh() {\n        this.refreshing = true;\n        this.moduleLoader.clean();\n        this.destroy();\n        this.clearChanges();\n        this.localObserver = new Observer(this);\n        this.preRender();\n        this.injectModules();\n        this.render();\n        this.refreshing = false;\n    }\n    accessMount() {\n        if (this.mount && !this.isReactHybrid) {\n            this.mount();\n        }\n    }\n    /**\n     * Returns the route element of the component\n     */\n    getRootElement() {\n        if (this.isReactHybrid) {\n            return this.actualElement;\n        }\n        else {\n            return this.element;\n        }\n    }\n    /**\n     * Appends the control within the given HTML element\n     * @param {string | HTMLElement} selector - Target element where control needs to be appended\n     */\n    appendTo(selector) {\n        if (!isNullOrUndefined(selector) && typeof (selector) === 'string') {\n            this.element = document.querySelector(selector);\n        }\n        else if (!isNullOrUndefined(selector)) {\n            this.element = selector;\n        }\n        if (!isNullOrUndefined(this.element)) {\n            let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n            addClass([this.element], ['e-control', moduleClass]);\n            this.isProtectedOnChange = false;\n            if (this.needsID && !this.element.id) {\n                this.element.id = this.getUniqueID(this.getModuleName());\n            }\n            if (this.enablePersistence) {\n                this.mergePersistData();\n                window.addEventListener('unload', this.setPersistData.bind(this));\n            }\n            let inst = getValue('ej2_instances', this.element);\n            if (!inst || inst.indexOf(this) === -1) {\n                super.addInstance();\n            }\n            this.preRender();\n            this.injectModules();\n            this.render();\n            if (!this.mount) {\n                this.trigger('created');\n            }\n            else {\n                this.accessMount();\n            }\n        }\n    }\n    /**\n     * It is used to process the post rendering functionalities to a component.\n     */\n    renderComplete(wrapperElement) {\n        if (isBlazor()) {\n            let sfBlazor = 'sfBlazor';\n            // tslint:disable-next-line:no-any\n            window[sfBlazor].renderComplete(this.element, wrapperElement);\n        }\n        this.isRendered = true;\n    }\n    /**\n     * When invoked, applies the pending property changes immediately to the component.\n     */\n    dataBind() {\n        this.injectModules();\n        super.dataBind();\n    }\n    ;\n    /**\n     * Attach one or more  event handler to the current component context.\n     * It is used for internal handling event internally within the component only.\n     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n     * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs\n     * @param {Object} context - optional parameter Specifies the context to be bind in the handler.\n     * @return {void}\n     * @private\n     */\n    on(event, handler, context) {\n        if (typeof event === 'string') {\n            this.localObserver.on(event, handler, context);\n        }\n        else {\n            for (let arg of event) {\n                this.localObserver.on(arg.event, arg.handler, arg.context);\n            }\n        }\n    }\n    /**\n     * To remove one or more event handler that has been attached with the on() method.\n     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n     * @param {Function} handler - optional parameter Specifies the function to run when the event occurs\n     * @return {void}\n     * @private\n     */\n    off(event, handler) {\n        if (typeof event === 'string') {\n            this.localObserver.off(event, handler);\n        }\n        else {\n            for (let arg of event) {\n                this.localObserver.off(arg.event, arg.handler);\n            }\n        }\n    }\n    /**\n     * To notify the handlers in the specified event.\n     * @param {string} property - Specifies the event to be notify.\n     * @param {Object} argument - Additional parameters to pass while calling the handler.\n     * @return {void}\n     * @private\n     */\n    notify(property, argument) {\n        if (this.isDestroyed !== true) {\n            this.localObserver.notify(property, argument);\n        }\n    }\n    /**\n     * Get injected modules\n     * @private\n     */\n    getInjectedModules() {\n        return this.injectedModules;\n    }\n    ;\n    /**\n     * Dynamically injects the required modules to the component.\n     */\n    static Inject(...moduleList) {\n        if (!this.prototype.injectedModules) {\n            this.prototype.injectedModules = [];\n        }\n        for (let i = 0; i < moduleList.length; i++) {\n            if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {\n                this.prototype.injectedModules.push(moduleList[i]);\n            }\n        }\n    }\n    /**\n     * This is a instance method to create an element.\n     * @private\n     */\n    //tslint:disable:no-any\n    createElement(tagName, prop, isVDOM) {\n        if (isVDOM && this.isReactHybrid) {\n            if (prop) {\n                prop = {};\n            }\n            prop['data-id'] = getRandomId();\n            return VirtualDOM.createElement(tagName, prop);\n        }\n        else {\n            return createElement(tagName, prop);\n        }\n    }\n    /**\n     *\n     * @param handler - handler to be triggered after state Updated.\n     * @param argument - Arguments to be passed to caller.\n     * @private\n     */\n    //tslint:disable:no-any\n    triggerStateChange(handler, argument) {\n        if (this.isReactHybrid) {\n            //tslint:disable:no-any\n            this.setState();\n            this.currentContext = { calls: handler, args: argument };\n        }\n    }\n    // tslint: enable: no-any\n    injectModules() {\n        if (this.injectedModules && this.injectedModules.length) {\n            this.moduleLoader.inject(this.requiredModules(), this.injectedModules);\n        }\n    }\n    detectFunction(args) {\n        let prop = Object.keys(args);\n        if (prop.length) {\n            this[prop[0]] = args[prop[0]];\n        }\n    }\n    mergePersistData() {\n        let data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n        if (!(isNullOrUndefined(data) || (data === ''))) {\n            this.setProperties(JSON.parse(data), true);\n        }\n    }\n    setPersistData() {\n        if (!this.isDestroyed) {\n            window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());\n        }\n    }\n    //tslint:disable-next-line\n    clearTemplate(templateName, index) {\n        //No Code\n    }\n    getUniqueID(definedName) {\n        if (this.isHistoryChanged()) {\n            componentCount = 0;\n        }\n        lastPageID = this.pageID(location.href);\n        lastHistoryLen = history.length;\n        return definedName + '_' + lastPageID + '_' + componentCount++;\n    }\n    pageID(url) {\n        let hash = 0;\n        if (url.length === 0) {\n            return hash;\n        }\n        for (let i = 0; i < url.length; i++) {\n            let char = url.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return Math.abs(hash);\n    }\n    isHistoryChanged() {\n        return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;\n    }\n    addOnPersist(options) {\n        let persistObj = {};\n        for (let key of options) {\n            let objValue;\n            objValue = getValue(key, this);\n            if (!isUndefined(objValue)) {\n                setValue(key, this.getActualProperties(objValue), persistObj);\n            }\n        }\n        return JSON.stringify(persistObj, (key, value) => {\n            return this.getActualProperties(value);\n        });\n    }\n    getActualProperties(obj) {\n        if (obj instanceof ChildProperty) {\n            return getValue('properties', obj);\n        }\n        else {\n            return obj;\n        }\n    }\n    ignoreOnPersist(options) {\n        return JSON.stringify(this.iterateJsonProperties(this.properties, options));\n    }\n    iterateJsonProperties(obj, ignoreList) {\n        let newObj = {};\n        for (let key of Object.keys(obj)) {\n            if (ignoreList.indexOf(key) === -1) {\n                // tslint:disable-next-line:no-any\n                let value = obj[key];\n                if (typeof value === 'object' && !(value instanceof Array)) {\n                    let newList = ignoreList.filter((str) => {\n                        return new RegExp(key + '.').test(str);\n                    }).map((str) => {\n                        return str.replace(key + '.', '');\n                    });\n                    newObj[key] = this.iterateJsonProperties(this.getActualProperties(value), newList);\n                }\n                else {\n                    newObj[key] = value;\n                }\n            }\n        }\n        return newObj;\n    }\n};\n__decorate$1([\n    Property(false)\n], Component.prototype, \"enablePersistence\", void 0);\n__decorate$1([\n    Property()\n], Component.prototype, \"enableRtl\", void 0);\n__decorate$1([\n    Property()\n], Component.prototype, \"locale\", void 0);\nComponent = __decorate$1([\n    NotifyPropertyChanges\n], Component);\n//Function handling for page navigation detection \n/* istanbul ignore next */\n(() => {\n    if (typeof window !== 'undefined') {\n        window.addEventListener('popstate', \n        /* istanbul ignore next */\n        () => {\n            componentCount = 0;\n        });\n    }\n})();\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Draggable_1;\nconst defaultPosition = { left: 0, top: 0, bottom: 0, right: 0 };\nconst isDraggedObject = { isDragged: false };\n/**\n * Specifies the position coordinates\n */\nclass Position extends ChildProperty {\n}\n__decorate$2([\n    Property(0)\n], Position.prototype, \"left\", void 0);\n__decorate$2([\n    Property(0)\n], Position.prototype, \"top\", void 0);\n/**\n * Draggable Module provides support to enable draggable functionality in Dom Elements.\n * ```html\n * <div id='drag'>Draggable</div>\n * <script>\n * var ele = document.getElementById('drag');\n * var drag:Draggable = new Draggable(ele,{\n *     clone:false,\n *     drag: function(e) {\n *      //drag handler code.\n *      },\n *     handle:'.class'\n * });\n * </script>\n * ```\n */\nlet Draggable = Draggable_1 = class Draggable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.dragLimit = Draggable_1.getDefaultPosition();\n        this.borderWidth = Draggable_1.getDefaultPosition();\n        this.padding = Draggable_1.getDefaultPosition();\n        this.diffX = 0;\n        this.prevLeft = 0;\n        this.prevTop = 0;\n        this.dragProcessStarted = false;\n        /* tslint:disable no-any */\n        this.tapHoldTimer = 0;\n        this.externalInitialize = false;\n        this.diffY = 0;\n        this.parentScrollX = 0;\n        this.parentScrollY = 0;\n        this.droppables = {};\n        this.bind();\n    }\n    bind() {\n        this.toggleEvents();\n        if (Browser.isIE) {\n            addClass([this.element], 'e-block-touch');\n        }\n        this.droppables[this.scope] = {};\n    }\n    static getDefaultPosition() {\n        return extend({}, defaultPosition);\n    }\n    toggleEvents(isUnWire) {\n        let ele;\n        if (!isUndefined(this.handle)) {\n            ele = select(this.handle, this.element);\n        }\n        let handler = (this.enableTapHold && Browser.isDevice && Browser.isTouch) ? this.mobileInitialize : this.initialize;\n        if (isUnWire) {\n            EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);\n        }\n        else {\n            EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);\n        }\n    }\n    /* istanbul ignore next */\n    mobileInitialize(evt) {\n        let target = evt.currentTarget;\n        this.tapHoldTimer = setTimeout(() => {\n            this.externalInitialize = true;\n            this.removeTapholdTimer();\n            this.initialize(evt, target);\n        }, this.tapHoldThreshold);\n        EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);\n        EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);\n    }\n    /* istanbul ignore next */\n    removeTapholdTimer() {\n        clearTimeout(this.tapHoldTimer);\n        EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);\n        EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);\n    }\n    /* istanbul ignore next */\n    getScrollableParent(element, axis) {\n        let scroll = { 'vertical': 'scrollHeight', 'horizontal': 'scrollWidth' };\n        let client = { 'vertical': 'clientHeight', 'horizontal': 'clientWidth' };\n        if (isNullOrUndefined(element)) {\n            return null;\n        }\n        if (element[scroll[axis]] > element[client[axis]]) {\n            if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {\n                if (axis === 'vertical') {\n                    this.parentScrollY = this.parentScrollY +\n                        (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);\n                }\n                else {\n                    this.parentScrollX = this.parentScrollX +\n                        (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);\n                }\n                if (!isNullOrUndefined(element)) {\n                    return this.getScrollableParent(element.parentNode, axis);\n                }\n                else {\n                    return element;\n                }\n            }\n            else {\n                return this.getScrollableParent(element.parentNode, axis);\n            }\n        }\n        else {\n            return this.getScrollableParent(element.parentNode, axis);\n        }\n    }\n    getScrollableValues() {\n        this.parentScrollX = 0;\n        this.parentScrollY = 0;\n        let isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');\n        let verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');\n        let horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');\n    }\n    initialize(evt, curTarget) {\n        this.currentStateTarget = evt.target;\n        if (this.isDragStarted()) {\n            return;\n        }\n        else {\n            this.isDragStarted(true);\n            this.externalInitialize = false;\n        }\n        this.target = (evt.currentTarget || curTarget);\n        this.dragProcessStarted = false;\n        if (this.abort) {\n            /* tslint:disable no-any */\n            let abortSelectors = this.abort;\n            if (typeof abortSelectors === 'string') {\n                abortSelectors = [abortSelectors];\n            }\n            for (let i = 0; i < abortSelectors.length; i++) {\n                if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {\n                    /* istanbul ignore next */\n                    if (this.isDragStarted()) {\n                        this.isDragStarted(true);\n                    }\n                    return;\n                }\n            }\n        }\n        if (this.preventDefault && !isUndefined(evt.changedTouches)) {\n            evt.preventDefault();\n        }\n        this.element.setAttribute('aria-grabbed', 'true');\n        let intCoord = this.getCoordinates(evt);\n        this.initialPosition = { x: intCoord.pageX, y: intCoord.pageY };\n        if (!this.clone) {\n            let pos = this.element.getBoundingClientRect();\n            this.getScrollableValues();\n            if (evt.clientX === evt.pageX) {\n                this.parentScrollX = 0;\n            }\n            if (evt.clientY === evt.pageY) {\n                this.parentScrollY = 0;\n            }\n            this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);\n            this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);\n        }\n        if (this.externalInitialize) {\n            this.intDragStart(evt);\n        }\n        else {\n            EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);\n            EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);\n        }\n        this.toggleEvents(true);\n        document.body.classList.add('e-prevent-select');\n        this.externalInitialize = false;\n        EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);\n    }\n    intDragStart(evt) {\n        this.removeTapholdTimer();\n        let isChangeTouch = !isUndefined(evt.changedTouches);\n        if (isChangeTouch && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        if (isChangeTouch) {\n            evt.preventDefault();\n        }\n        let intCordinate = this.getCoordinates(evt);\n        let pos;\n        let styleProp = getComputedStyle(this.element);\n        this.margin = {\n            left: parseInt(styleProp.marginLeft, 10),\n            top: parseInt(styleProp.marginTop, 10),\n            right: parseInt(styleProp.marginRight, 10),\n            bottom: parseInt(styleProp.marginBottom, 10),\n        };\n        let element = this.element;\n        if (this.clone && this.dragTarget) {\n            let intClosest = closest(evt.target, this.dragTarget);\n            if (!isNullOrUndefined(intClosest)) {\n                element = intClosest;\n            }\n        }\n        this.offset = this.calculateParentPosition(element);\n        this.position = this.getMousePosition(evt, this.isDragScroll);\n        let x = this.initialPosition.x - intCordinate.pageX;\n        let y = this.initialPosition.y - intCordinate.pageY;\n        let distance = Math.sqrt((x * x) + (y * y));\n        if ((distance >= this.distance || this.externalInitialize)) {\n            let ele = this.getHelperElement(evt);\n            if (!ele || isNullOrUndefined(ele)) {\n                return;\n            }\n            let dragTargetElement = this.helperElement = ele;\n            this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);\n            if (this.dragStart) {\n                let curTarget = this.getProperTargetElement(evt);\n                let args = {\n                    event: evt,\n                    element: element,\n                    target: curTarget,\n                    bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,\n                    dragElement: dragTargetElement\n                };\n                this.trigger('dragStart', args);\n            }\n            if (this.dragArea) {\n                this.setDragArea();\n            }\n            else {\n                this.dragLimit = { left: 0, right: 0, bottom: 0, top: 0 };\n                this.borderWidth = { top: 0, left: 0 };\n            }\n            pos = { left: this.position.left - this.parentClientRect.left, top: this.position.top - this.parentClientRect.top };\n            if (this.clone && !this.enableTailMode) {\n                this.diffX = this.position.left - this.offset.left;\n                this.diffY = this.position.top - this.offset.top;\n            }\n            this.getScrollableValues();\n            let posValue = this.getProcessedPositionValue({\n                top: (pos.top - this.diffY) + 'px',\n                left: (pos.left - this.diffX) + 'px'\n            });\n            this.dragElePosition = { top: pos.top, left: pos.left };\n            setStyleAttribute(dragTargetElement, this.getDragPosition({ position: 'absolute', left: posValue.left, top: posValue.top }));\n            EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n            EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n            if (!isBlazor()) {\n                this.bindDragEvents(dragTargetElement);\n            }\n        }\n    }\n    bindDragEvents(dragTargetElement) {\n        if (isVisible(dragTargetElement)) {\n            EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);\n            EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);\n            this.setGlobalDroppables(false, this.element, dragTargetElement);\n        }\n        else {\n            this.toggleEvents();\n            document.body.classList.remove('e-prevent-select');\n        }\n    }\n    elementInViewport(el) {\n        this.top = el.offsetTop;\n        this.left = el.offsetLeft;\n        this.width = el.offsetWidth;\n        this.height = el.offsetHeight;\n        while (el.offsetParent) {\n            el = el.offsetParent;\n            this.top += el.offsetTop;\n            this.left += el.offsetLeft;\n        }\n        return (this.top >= window.pageYOffset &&\n            this.left >= window.pageXOffset &&\n            (this.top + this.height) <= (window.pageYOffset + window.innerHeight) &&\n            (this.left + this.width) <= (window.pageXOffset + window.innerWidth));\n    }\n    getProcessedPositionValue(value) {\n        if (this.queryPositionInfo) {\n            return this.queryPositionInfo(value);\n        }\n        return value;\n    }\n    calculateParentPosition(ele) {\n        if (isNullOrUndefined(ele)) {\n            return { left: 0, top: 0 };\n        }\n        let rect = ele.getBoundingClientRect();\n        let style = getComputedStyle(ele);\n        return {\n            left: (rect.left + window.pageXOffset) - parseInt(style.marginLeft, 10),\n            top: (rect.top + window.pageYOffset) - parseInt(style.marginTop, 10)\n        };\n    }\n    // tslint:disable-next-line:max-func-body-length\n    intDrag(evt) {\n        if (!isUndefined(evt.changedTouches) && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        let left;\n        let top;\n        this.position = this.getMousePosition(evt, this.isDragScroll);\n        let docHeight = this.getDocumentWidthHeight('Height');\n        if (docHeight < this.position.top) {\n            this.position.top = docHeight;\n        }\n        let docWidth = this.getDocumentWidthHeight('Width');\n        if (docWidth < this.position.left) {\n            this.position.left = docWidth;\n        }\n        if (this.drag) {\n            let curTarget = this.getProperTargetElement(evt);\n            this.trigger('drag', { event: evt, element: this.element, target: curTarget });\n        }\n        let eleObj = this.checkTargetElement(evt);\n        if (eleObj.target && eleObj.instance) {\n            /* tslint:disable no-any */\n            let flag = true;\n            if (this.hoverObject) {\n                if (this.hoverObject.instance !== eleObj.instance) {\n                    this.triggerOutFunction(evt, eleObj);\n                }\n                else {\n                    flag = false;\n                }\n            }\n            if (flag) {\n                eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n                eleObj.instance.intOver(evt, eleObj.target);\n                this.hoverObject = eleObj;\n            }\n        }\n        else if (this.hoverObject) {\n            this.triggerOutFunction(evt, eleObj);\n        }\n        let helperElement = this.droppables[this.scope].helper;\n        this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);\n        let tLeft = this.parentClientRect.left;\n        let tTop = this.parentClientRect.top;\n        let intCoord = this.getCoordinates(evt);\n        let pagex = intCoord.pageX;\n        let pagey = intCoord.pageY;\n        let dLeft = this.position.left - this.diffX;\n        let dTop = this.position.top - this.diffY;\n        if (this.dragArea) {\n            let styles = getComputedStyle(helperElement);\n            if (this.pageX !== pagex || this.skipDistanceCheck) {\n                let helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft)\n                    + parseFloat(styles.marginRight));\n                if (this.dragLimit.left > dLeft && dLeft > 0) {\n                    left = this.dragLimit.left;\n                }\n                else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {\n                    left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;\n                }\n                else {\n                    left = dLeft < 0 ? this.dragLimit.left : dLeft;\n                }\n            }\n            if (this.pageY !== pagey || this.skipDistanceCheck) {\n                let helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop)\n                    + parseFloat(styles.marginBottom));\n                if (this.dragLimit.top > dTop && dTop > 0) {\n                    top = this.dragLimit.top;\n                }\n                else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {\n                    top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;\n                }\n                else {\n                    top = dTop < 0 ? this.dragLimit.top : dTop;\n                }\n            }\n        }\n        else {\n            left = dLeft;\n            top = dTop;\n        }\n        let iTop = tTop + this.borderWidth.top;\n        let iLeft = tLeft + this.borderWidth.left;\n        if (this.dragProcessStarted) {\n            if (isNullOrUndefined(top)) {\n                top = this.prevTop;\n            }\n            if (isNullOrUndefined(left)) {\n                left = this.prevLeft;\n            }\n        }\n        let draEleTop;\n        let draEleLeft;\n        if (this.dragArea) {\n            draEleTop = (top - iTop) < 0 ? this.dragLimit.top : (top - iTop);\n            draEleLeft = (left - iLeft) < 0 ? this.dragElePosition.left : (left - iLeft);\n        }\n        else {\n            draEleTop = top - iTop;\n            draEleLeft = left - iLeft;\n        }\n        let dragValue = this.getProcessedPositionValue({ top: draEleTop + 'px', left: draEleLeft + 'px' });\n        setStyleAttribute(helperElement, this.getDragPosition(dragValue));\n        if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {\n            this.helperElement.scrollIntoView();\n        }\n        this.dragProcessStarted = true;\n        this.prevLeft = left;\n        this.prevTop = top;\n        this.position.left = left;\n        this.position.top = top;\n        this.pageX = pagex;\n        this.pageY = pagey;\n    }\n    triggerOutFunction(evt, eleObj) {\n        this.hoverObject.instance.intOut(evt, eleObj.target);\n        this.hoverObject.instance.dragData[this.scope] = null;\n        this.hoverObject = null;\n    }\n    getDragPosition(dragValue) {\n        let temp = extend({}, dragValue);\n        if (this.axis) {\n            if (this.axis === 'x') {\n                delete temp.top;\n            }\n            else if (this.axis === 'y') {\n                delete temp.left;\n            }\n        }\n        return temp;\n    }\n    getDocumentWidthHeight(str) {\n        let docBody = document.body;\n        let docEle = document.documentElement;\n        let returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);\n        return returnValue;\n    }\n    intDragStop(evt) {\n        this.dragProcessStarted = false;\n        if (!isUndefined(evt.changedTouches) && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        let type = ['touchend', 'pointerup', 'mouseup'];\n        if (type.indexOf(evt.type) !== -1) {\n            if (this.dragStop) {\n                let curTarget = this.getProperTargetElement(evt);\n                this.trigger('dragStop', { event: evt, element: this.element, target: curTarget, helper: this.helperElement });\n            }\n            this.intDestroy(evt);\n        }\n        else {\n            this.element.setAttribute('aria-grabbed', 'false');\n        }\n        let eleObj = this.checkTargetElement(evt);\n        if (eleObj.target && eleObj.instance) {\n            eleObj.instance.dragStopCalled = true;\n            eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n            eleObj.instance.intDrop(evt, eleObj.target);\n        }\n        this.setGlobalDroppables(true);\n        document.body.classList.remove('e-prevent-select');\n    }\n    /**\n     * @private\n     */\n    intDestroy(evt) {\n        this.dragProcessStarted = false;\n        this.toggleEvents();\n        document.body.classList.remove('e-prevent-select');\n        this.element.setAttribute('aria-grabbed', 'false');\n        EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n        EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);\n        EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n        EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);\n        if (this.isDragStarted()) {\n            this.isDragStarted(true);\n        }\n    }\n    // triggers when property changed\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    getModuleName() {\n        return 'draggable';\n    }\n    isDragStarted(change) {\n        if (change) {\n            isDraggedObject.isDragged = !isDraggedObject.isDragged;\n        }\n        return isDraggedObject.isDragged;\n    }\n    setDragArea() {\n        let eleWidthBound;\n        let eleHeightBound;\n        let top = 0;\n        let left = 0;\n        let ele;\n        let type = typeof this.dragArea;\n        if (type === 'string') {\n            ele = select(this.dragArea);\n        }\n        else {\n            ele = this.dragArea;\n        }\n        if (ele) {\n            let elementArea = ele.getBoundingClientRect();\n            eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;\n            eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;\n            let keys = ['Top', 'Left', 'Bottom', 'Right'];\n            let styles = getComputedStyle(ele);\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                let tborder = styles['border' + key + 'Width'];\n                let tpadding = styles['padding' + key];\n                let lowerKey = key.toLowerCase();\n                this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);\n                this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);\n            }\n            top = elementArea.top;\n            left = elementArea.left;\n            this.dragLimit.left = left + this.borderWidth.left + this.padding.left;\n            this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;\n            this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);\n            this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);\n        }\n    }\n    getProperTargetElement(evt) {\n        let intCoord = this.getCoordinates(evt);\n        let ele;\n        let prevStyle = this.helperElement.style.pointerEvents || '';\n        if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {\n            this.helperElement.style.pointerEvents = 'none';\n            ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);\n            this.helperElement.style.pointerEvents = prevStyle;\n        }\n        else {\n            ele = evt.target;\n        }\n        return ele;\n    }\n    getMousePosition(evt, isdragscroll) {\n        /* tslint:disable no-any */\n        let dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;\n        let intCoord = this.getCoordinates(evt);\n        let pageX;\n        let pageY;\n        let isOffsetParent = isNullOrUndefined(dragEle.offsetParent);\n        /* istanbul ignore next */\n        if (isdragscroll) {\n            pageX = this.clone ? intCoord.pageX :\n                (intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft)) - this.relativeXPosition;\n            pageY = this.clone ? intCoord.pageY :\n                (intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop)) - this.relativeYPosition;\n        }\n        else {\n            pageX = this.clone ? intCoord.pageX : (intCoord.pageX + window.pageXOffset) - this.relativeXPosition;\n            pageY = this.clone ? intCoord.pageY : (intCoord.pageY + window.pageYOffset) - this.relativeYPosition;\n        }\n        return {\n            left: pageX - (this.margin.left + this.cursorAt.left),\n            top: pageY - (this.margin.top + this.cursorAt.top)\n        };\n    }\n    getCoordinates(evt) {\n        if (evt.type.indexOf('touch') > -1) {\n            return evt.changedTouches[0];\n        }\n        return evt;\n    }\n    getHelperElement(evt) {\n        let element;\n        if (this.clone) {\n            if (this.helper) {\n                element = this.helper({ sender: evt, element: this.target });\n            }\n            else {\n                element = createElement('div', { className: 'e-drag-helper e-block-touch', innerHTML: 'Draggable' });\n                document.body.appendChild(element);\n            }\n        }\n        else {\n            element = this.element;\n        }\n        return element;\n    }\n    setGlobalDroppables(reset, drag, helper) {\n        this.droppables[this.scope] = reset ? null : {\n            draggable: drag,\n            helper: helper,\n            draggedElement: this.element\n        };\n    }\n    checkTargetElement(evt) {\n        let target = this.getProperTargetElement(evt);\n        let dropIns = this.getDropInstance(target);\n        if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {\n            let parent = closest(target.parentNode, '.e-droppable') || target.parentElement;\n            if (parent) {\n                dropIns = this.getDropInstance(parent);\n            }\n        }\n        return { target: target, instance: dropIns };\n    }\n    getDropInstance(ele) {\n        let name = 'getModuleName';\n        let drop;\n        let eleInst = ele && ele.ej2_instances;\n        if (eleInst) {\n            for (let inst of eleInst) {\n                if (inst[name]() === 'droppable') {\n                    drop = inst;\n                    break;\n                }\n            }\n        }\n        return drop;\n    }\n    destroy() {\n        this.toggleEvents(true);\n        super.destroy();\n    }\n};\n__decorate$2([\n    Complex({}, Position)\n], Draggable.prototype, \"cursorAt\", void 0);\n__decorate$2([\n    Property(true)\n], Draggable.prototype, \"clone\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"dragArea\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"isDragScroll\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"drag\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"dragStart\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"dragStop\", void 0);\n__decorate$2([\n    Property(1)\n], Draggable.prototype, \"distance\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"handle\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"abort\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"helper\", void 0);\n__decorate$2([\n    Property('default')\n], Draggable.prototype, \"scope\", void 0);\n__decorate$2([\n    Property('')\n], Draggable.prototype, \"dragTarget\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"axis\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"queryPositionInfo\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableTailMode\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"skipDistanceCheck\", void 0);\n__decorate$2([\n    Property(true)\n], Draggable.prototype, \"preventDefault\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableAutoScroll\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableTapHold\", void 0);\n__decorate$2([\n    Property(750)\n], Draggable.prototype, \"tapHoldThreshold\", void 0);\nDraggable = Draggable_1 = __decorate$2([\n    NotifyPropertyChanges\n], Draggable);\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Droppable Module provides support to enable droppable functionality in Dom Elements.\n * ```html\n * <div id='drop'>Droppable</div>\n * <script>\n * let ele:HTMLElement = document.getElementById('drop');\n * var drag:Droppable = new Droppable(ele,{\n *     accept:'.drop',\n *     drop: function(e) {\n *      //drop handler code.\n *     }\n * });\n * </script>\n * ```\n */\nlet Droppable = class Droppable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.mouseOver = false;\n        this.dragData = {};\n        this.dragStopCalled = false;\n        this.bind();\n    }\n    bind() {\n        this.wireEvents();\n    }\n    wireEvents() {\n        EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);\n    }\n    // triggers when property changed\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    getModuleName() {\n        return 'droppable';\n    }\n    intOver(event, element) {\n        if (!this.mouseOver) {\n            let drag = this.dragData[this.scope];\n            this.trigger('over', { event: event, target: element, dragData: drag });\n            this.mouseOver = true;\n        }\n    }\n    intOut(event, element) {\n        if (this.mouseOver) {\n            this.trigger('out', { evt: event, target: element });\n            this.mouseOver = false;\n        }\n    }\n    intDrop(evt, element) {\n        if (!this.dragStopCalled) {\n            return;\n        }\n        else {\n            this.dragStopCalled = false;\n        }\n        let accept = true;\n        let drag = this.dragData[this.scope];\n        let isDrag = drag ? (drag.helper && isVisible(drag.helper)) : false;\n        let area;\n        if (isDrag) {\n            area = this.isDropArea(evt, drag.helper, element);\n            if (this.accept) {\n                accept = matches(drag.helper, this.accept);\n            }\n        }\n        if (isDrag && this.drop && area.canDrop && accept) {\n            this.trigger('drop', { event: evt, target: area.target, droppedElement: drag.helper, dragData: drag });\n        }\n        this.mouseOver = false;\n    }\n    isDropArea(evt, helper, element) {\n        let area = { canDrop: true, target: element || evt.target };\n        let isTouch = evt.type === 'touchend';\n        if (isTouch || area.target === helper) {\n            helper.style.display = 'none';\n            let coord = isTouch ? (evt.changedTouches[0]) : evt;\n            let ele = document.elementFromPoint(coord.clientX, coord.clientY);\n            area.canDrop = false;\n            area.canDrop = compareElementParent(ele, this.element);\n            if (area.canDrop) {\n                area.target = ele;\n            }\n            helper.style.display = '';\n        }\n        return area;\n    }\n    destroy() {\n        EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);\n        super.destroy();\n    }\n};\n__decorate$3([\n    Property()\n], Droppable.prototype, \"accept\", void 0);\n__decorate$3([\n    Property('default')\n], Droppable.prototype, \"scope\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"drop\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"over\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"out\", void 0);\nDroppable = __decorate$3([\n    NotifyPropertyChanges\n], Droppable);\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar KeyboardEvents_1;\nlet keyCode = {\n    'backspace': 8,\n    'tab': 9,\n    'enter': 13,\n    'shift': 16,\n    'control': 17,\n    'alt': 18,\n    'pause': 19,\n    'capslock': 20,\n    'space': 32,\n    'escape': 27,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'insert': 45,\n    'delete': 46,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'semicolon': 186,\n    'plus': 187,\n    'comma': 188,\n    'minus': 189,\n    'dot': 190,\n    'forwardslash': 191,\n    'graveaccent': 192,\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'singlequote': 222\n};\n/**\n * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.\n * ```html\n * <div id='testEle'>  </div>;\n * <script>\n *   let node: HTMLElement = document.querySelector('#testEle');\n *   let kbInstance = new KeyboardEvents({\n *       element: node,\n *       keyConfigs:{ selectAll : 'ctrl+a' },\n *       keyAction: function (e:KeyboardEvent, action:string) {\n *           // handler function code\n *       }\n *   });\n * </script>\n * ```\n */\nlet KeyboardEvents = KeyboardEvents_1 = class KeyboardEvents extends Base {\n    /**\n     * Initializes the KeyboardEvents\n     * @param {HTMLElement} element\n     * @param {KeyboardEventsModel} options\n     */\n    constructor(element, options) {\n        super(options, element);\n        /**\n         * To handle a key press event returns null\n         */\n        this.keyPressHandler = (e) => {\n            let isAltKey = e.altKey;\n            let isCtrlKey = e.ctrlKey;\n            let isShiftKey = e.shiftKey;\n            let curkeyCode = e.which;\n            let keys = Object.keys(this.keyConfigs);\n            for (let key of keys) {\n                let configCollection = this.keyConfigs[key].split(',');\n                for (let rconfig of configCollection) {\n                    let rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());\n                    if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey &&\n                        isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {\n                        e.action = key;\n                        if (this.keyAction) {\n                            this.keyAction(e);\n                        }\n                    }\n                }\n            }\n        };\n        this.bind();\n    }\n    /**\n     * Unwire bound events and destroy the instance.\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        super.destroy();\n    }\n    /**\n     * Function can be used to specify certain action if a property is changed\n     * @param newProp\n     * @param oldProp\n     * @returns {void}\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // No code are needed\n    }\n    ;\n    bind() {\n        this.wireEvents();\n    }\n    /**\n     * To get the module name, returns 'keyboard'.\n     * @private\n     */\n    getModuleName() {\n        return 'keyboard';\n    }\n    /**\n     * Wiring event handlers to events\n     */\n    wireEvents() {\n        this.element.addEventListener(this.eventName, this.keyPressHandler);\n    }\n    /**\n     * Unwiring event handlers to events\n     */\n    unwireEvents() {\n        this.element.removeEventListener(this.eventName, this.keyPressHandler);\n    }\n    /**\n     * To get the key configuration data\n     * @param {string} config - configuration data\n     * returns {KeyData}\n     */\n    static getKeyConfigData(config) {\n        if (config in this.configCache) {\n            return this.configCache[config];\n        }\n        let keys = config.toLowerCase().split('+');\n        let keyData = {\n            altKey: (keys.indexOf('alt') !== -1 ? true : false),\n            ctrlKey: (keys.indexOf('ctrl') !== -1 ? true : false),\n            shiftKey: (keys.indexOf('shift') !== -1 ? true : false),\n            keyCode: null\n        };\n        if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {\n            keyData.keyCode = Number(keys[keys.length - 1]);\n        }\n        else {\n            keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);\n        }\n        KeyboardEvents_1.configCache[config] = keyData;\n        return keyData;\n    }\n    // Return the keycode value as string \n    static getKeyCode(keyVal) {\n        return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);\n    }\n};\nKeyboardEvents.configCache = {};\n__decorate$4([\n    Property({})\n], KeyboardEvents.prototype, \"keyConfigs\", void 0);\n__decorate$4([\n    Property('keyup')\n], KeyboardEvents.prototype, \"eventName\", void 0);\n__decorate$4([\n    Event$1()\n], KeyboardEvents.prototype, \"keyAction\", void 0);\nKeyboardEvents = KeyboardEvents_1 = __decorate$4([\n    NotifyPropertyChanges\n], KeyboardEvents);\n\n/**\n * L10n modules provides localized text for different culture.\n * ```typescript\n * import {setCulture} from '@syncfusion/ts-base-library';\n * //load global locale object common for all components.\n * L10n.load({\n *    'fr-BE': {\n *       'button': {\n *            'check': 'vérifié'\n *        }\n *    }\n * });\n * //set globale default locale culture.\n * setCulture('fr-BE');\n * let instance: L10n = new L10n('button', {\n *    check: 'checked'\n * });\n * //Get locale text for current property.\n * instance.getConstant('check');\n * //Change locale culture in a component.\n * instance.setLocale('en-US');\n * ```\n */\nclass L10n {\n    /**\n     * Constructor\n     */\n    constructor(controlName, localeStrings, locale) {\n        this.controlName = controlName;\n        this.localeStrings = localeStrings;\n        this.setLocale(locale || defaultCulture);\n    }\n    /**\n     * Sets the locale text\n     * @param {string} locale\n     * @returns {void}\n     */\n    setLocale(locale) {\n        let intLocale = this.intGetControlConstant(L10n.locale, locale);\n        this.currentLocale = intLocale || this.localeStrings;\n    }\n    /**\n     * Sets the global locale for all components.\n     * @param {Object} localeObject - specifies the localeObject to be set as global locale.\n     */\n    static load(localeObject) {\n        this.locale = extend(this.locale, localeObject, {}, true);\n    }\n    /**\n     * Returns current locale text for the property based on the culture name and control name.\n     * @param {string} propertyName - specifies the property for which localize text to be returned.\n     * @return string\n     */\n    getConstant(prop) {\n        // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\n        if (!isNullOrUndefined(this.currentLocale[prop])) {\n            return this.currentLocale[prop];\n        }\n        else {\n            return this.localeStrings[prop] || '';\n        }\n    }\n    /**\n     * Returns the control constant object for current object and the locale specified.\n     * @param {Object} curObject\n     * @param {string} locale\n     * @returns {Object}\n     */\n    intGetControlConstant(curObject, locale) {\n        if ((curObject)[locale]) {\n            return (curObject)[locale][this.controlName];\n        }\n        return null;\n    }\n}\nL10n.locale = {};\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,\n */\nclass SwipeSettings extends ChildProperty {\n}\n__decorate$5([\n    Property(50)\n], SwipeSettings.prototype, \"swipeThresholdDistance\", void 0);\nconst swipeRegex = /(Up|Down)/;\n/**\n * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,\n * ```typescript\n *    let node: HTMLElement;\n * let touchObj: Touch = new Touch({\n *    element: node,\n *    tap: function (e) {\n *        // tap handler function code\n *    }\n *    tapHold: function (e) {\n *        // tap hold handler function code\n *    }\n *    scroll: function (e) {\n *        // scroll handler function code\n *    }\n *    swipe: function (e) {\n *        // swipe handler function code\n *    }\n * });\n * ```\n */\nlet Touch = class Touch extends Base {\n    /* End-Properties */\n    constructor(element, options) {\n        super(options, element);\n        this.touchAction = true;\n        this.tapCount = 0;\n        this.startEvent = (evt) => {\n            if (this.touchAction === true) {\n                let point = this.updateChangeTouches(evt);\n                if (evt.changedTouches !== undefined) {\n                    this.touchAction = false;\n                }\n                this.isTouchMoved = false;\n                this.movedDirection = '';\n                this.startPoint = this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };\n                this.startEventData = point;\n                this.hScrollLocked = this.vScrollLocked = false;\n                this.tStampStart = Date.now();\n                this.timeOutTapHold = setTimeout(() => { this.tapHoldEvent(evt); }, this.tapHoldThreshold);\n                EventHandler.add(this.element, Browser.touchMoveEvent, this.moveEvent, this);\n                EventHandler.add(this.element, Browser.touchEndEvent, this.endEvent, this);\n                EventHandler.add(this.element, Browser.touchCancelEvent, this.cancelEvent, this);\n            }\n        };\n        this.moveEvent = (evt) => {\n            let point = this.updateChangeTouches(evt);\n            this.movedPoint = point;\n            this.isTouchMoved = !(point.clientX === this.startPoint.clientX && point.clientY === this.startPoint.clientY);\n            let eScrollArgs = {};\n            if (this.isTouchMoved) {\n                clearTimeout(this.timeOutTapHold);\n                this.calcScrollPoints(evt);\n                let scrollArg = {\n                    startEvents: this.startEventData,\n                    originalEvent: evt, startX: this.startPoint.clientX,\n                    startY: this.startPoint.clientY, distanceX: this.distanceX,\n                    distanceY: this.distanceY, scrollDirection: this.scrollDirection,\n                    velocity: this.getVelocity(point)\n                };\n                eScrollArgs = extend(eScrollArgs, {}, scrollArg);\n                this.trigger('scroll', eScrollArgs);\n                this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };\n            }\n        };\n        this.cancelEvent = (evt) => {\n            clearTimeout(this.timeOutTapHold);\n            clearTimeout(this.timeOutTap);\n            this.tapCount = 0;\n            this.swipeFn(evt);\n            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n        };\n        this.endEvent = (evt) => {\n            this.swipeFn(evt);\n            if (!this.isTouchMoved) {\n                if (typeof this.tap === 'function') {\n                    this.trigger('tap', { originalEvent: evt, tapCount: ++this.tapCount });\n                    this.timeOutTap = setTimeout(() => {\n                        this.tapCount = 0;\n                    }, this.tapThreshold);\n                }\n            }\n            this.modeclear();\n        };\n        this.swipeFn = (evt) => {\n            clearTimeout(this.timeOutTapHold);\n            clearTimeout(this.timeOutTap);\n            let point = this.updateChangeTouches(evt);\n            let diffX = point.clientX - this.startPoint.clientX;\n            let diffY = point.clientY - this.startPoint.clientY;\n            diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);\n            diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);\n            this.isTouchMoved = diffX > 1 || diffY > 1;\n            this.endPoint = point;\n            this.calcPoints(evt);\n            let swipeArgs = {\n                originalEvent: evt,\n                startEvents: this.startEventData,\n                startX: this.startPoint.clientX,\n                startY: this.startPoint.clientY,\n                distanceX: this.distanceX, distanceY: this.distanceY, swipeDirection: this.movedDirection,\n                velocity: this.getVelocity(point)\n            };\n            if (this.isTouchMoved) {\n                let eSwipeArgs;\n                let tDistance = this.swipeSettings.swipeThresholdDistance;\n                eSwipeArgs = extend(eSwipeArgs, this.defaultArgs, swipeArgs);\n                let canTrigger = false;\n                let ele = this.element;\n                let scrollBool = this.isScrollable(ele);\n                let moved = swipeRegex.test(this.movedDirection);\n                if ((tDistance < this.distanceX && !moved) || (tDistance < this.distanceY && moved)) {\n                    if (!scrollBool) {\n                        canTrigger = true;\n                    }\n                    else {\n                        canTrigger = this.checkSwipe(ele, moved);\n                    }\n                }\n                if (canTrigger) {\n                    this.trigger('swipe', eSwipeArgs);\n                }\n            }\n            this.modeclear();\n        };\n        this.modeclear = () => {\n            this.modeClear = setTimeout(() => {\n                this.touchAction = true;\n            }, (typeof this.tap !== 'function' ? 0 : 20));\n            this.lastTapTime = new Date().getTime();\n            EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n            EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n        };\n        this.bind();\n    }\n    // triggers when property changed \n    /**\n     * @private\n     * @param newProp\n     * @param oldProp\n     */\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    bind() {\n        this.wireEvents();\n        if (Browser.isIE) {\n            this.element.classList.add('e-block-touch');\n        }\n    }\n    /**\n     * To destroy the touch instance.\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        super.destroy();\n    }\n    // Need to changes the event binding once we updated the event handler.\n    wireEvents() {\n        EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);\n    }\n    /**\n     * Returns module name as touch\n     * @returns {string}\n     * @private\n     */\n    getModuleName() {\n        return 'touch';\n    }\n    /**\n     * Returns if the HTML element is Scrollable.\n     * @param {HTMLElement} element - HTML Element to check if Scrollable.\n     * @returns {boolean}\n     */\n    isScrollable(element) {\n        let eleStyle = getComputedStyle(element);\n        let style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;\n        if ((/(auto|scroll)/).test(style)) {\n            return true;\n        }\n        return false;\n    }\n    tapHoldEvent(evt) {\n        this.tapCount = 0;\n        this.touchAction = true;\n        let eTapArgs;\n        EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n        EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n        eTapArgs = { originalEvent: evt };\n        this.trigger('tapHold', eTapArgs);\n        EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n    }\n    calcPoints(evt) {\n        let point = this.updateChangeTouches(evt);\n        this.defaultArgs = { originalEvent: evt };\n        this.distanceX = Math.abs((Math.abs(point.clientX) - Math.abs(this.startPoint.clientX)));\n        this.distanceY = Math.abs((Math.abs(point.clientY) - Math.abs(this.startPoint.clientY)));\n        if (this.distanceX > this.distanceY) {\n            this.movedDirection = (point.clientX > this.startPoint.clientX) ? 'Right' : 'Left';\n        }\n        else {\n            this.movedDirection = (point.clientY < this.startPoint.clientY) ? 'Up' : 'Down';\n        }\n    }\n    calcScrollPoints(evt) {\n        let point = this.updateChangeTouches(evt);\n        this.defaultArgs = { originalEvent: evt };\n        this.distanceX = Math.abs((Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX)));\n        this.distanceY = Math.abs((Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY)));\n        if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {\n            this.scrollDirection = (point.clientX > this.lastMovedPoint.clientX) ? 'Right' : 'Left';\n            this.hScrollLocked = true;\n        }\n        else {\n            this.scrollDirection = (point.clientY < this.lastMovedPoint.clientY) ? 'Up' : 'Down';\n            this.vScrollLocked = true;\n        }\n    }\n    getVelocity(pnt) {\n        let newX = pnt.clientX;\n        let newY = pnt.clientY;\n        let newT = Date.now();\n        let xDist = newX - this.startPoint.clientX;\n        let yDist = newY - this.startPoint.clientX;\n        let interval = newT - this.tStampStart;\n        return Math.sqrt(xDist * xDist + yDist * yDist) / interval;\n    }\n    // tslint:disable-next-line:no-any\n    checkSwipe(ele, flag) {\n        let keys = ['scroll', 'offset'];\n        let temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];\n        if ((ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]])) {\n            return true;\n        }\n        return (ele[keys[0] + temp[1]] === 0) ||\n            (ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]]);\n    }\n    updateChangeTouches(evt) {\n        // tslint:disable-next-line:max-line-length\n        let point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;\n        return point;\n    }\n};\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"tap\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"tapHold\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"swipe\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"scroll\", void 0);\n__decorate$5([\n    Property(350)\n], Touch.prototype, \"tapThreshold\", void 0);\n__decorate$5([\n    Property(750)\n], Touch.prototype, \"tapHoldThreshold\", void 0);\n__decorate$5([\n    Complex({}, SwipeSettings)\n], Touch.prototype, \"swipeSettings\", void 0);\nTouch = __decorate$5([\n    NotifyPropertyChanges\n], Touch);\n\n/**\n * SanitizeHtmlHelper for sanitize the value.\n */\nconst removeTags = [\n    'script',\n    'style',\n    'iframe[src]',\n    'link[href*=\"javascript:\"]',\n    'object[type=\"text/x-scriptlet\"]',\n    'object[data^=\"data:text/html;base64\"]',\n    'img[src^=\"data:text/html;base64\"]',\n    '[src^=\"javascript:\"]',\n    '[dynsrc^=\"javascript:\"]',\n    '[lowsrc^=\"javascript:\"]',\n    '[type^=\"application/x-shockwave-flash\"]'\n];\nconst removeAttrs = [\n    { attribute: 'href', selector: '[href*=\"javascript:\"]' },\n    { attribute: 'background', selector: '[background^=\"javascript:\"]' },\n    { attribute: 'style', selector: '[style*=\"javascript:\"]' },\n    { attribute: 'style', selector: '[style*=\"expression(\"]' },\n    { attribute: 'href', selector: 'a[href^=\"data:text/html;base64\"]' }\n];\nconst jsEvents = ['onchange',\n    'onclick',\n    'onmouseover',\n    'onmouseout',\n    'onkeydown',\n    'onload',\n    'onerror',\n    'onblur',\n    'onfocus',\n    'onbeforeload',\n    'onbeforeunload',\n    'onkeyup',\n    'onsubmit',\n    'onafterprint',\n    'onbeforeonload',\n    'onbeforeprint',\n    'onblur',\n    'oncanplay',\n    'oncanplaythrough',\n    'onchange',\n    'onclick',\n    'oncontextmenu',\n    'ondblclick',\n    'ondrag',\n    'ondragend',\n    'ondragenter',\n    'ondragleave',\n    'ondragover',\n    'ondragstart',\n    'ondrop',\n    'ondurationchange',\n    'onemptied',\n    'onended',\n    'onerror',\n    'onerror',\n    'onfocus',\n    'onformchange',\n    'onforminput',\n    'onhaschange',\n    'oninput',\n    'oninvalid',\n    'onkeydown',\n    'onkeypress',\n    'onkeyup',\n    'onload',\n    'onloadeddata',\n    'onloadedmetadata',\n    'onloadstart',\n    'onmessage',\n    'onmousedown',\n    'onmousemove',\n    'onmouseout',\n    'onmouseover',\n    'onmouseup',\n    'onmousewheel',\n    'onoffline',\n    'onoine',\n    'ononline',\n    'onpagehide',\n    'onpageshow',\n    'onpause',\n    'onplay',\n    'onplaying',\n    'onpopstate',\n    'onprogress',\n    'onratechange',\n    'onreadystatechange',\n    'onredo',\n    'onresize',\n    'onscroll',\n    'onseeked',\n    'onseeking',\n    'onselect',\n    'onstalled',\n    'onstorage',\n    'onsubmit',\n    'onsuspend',\n    'ontimeupdate',\n    'onundo',\n    'onunload',\n    'onvolumechange',\n    'onwaiting',\n    'onmouseenter',\n    'onmouseleave',\n    'onmousewheel',\n    'onstart',\n    'onpropertychange'\n];\nclass SanitizeHtmlHelper {\n    static beforeSanitize() {\n        return {\n            selectors: {\n                tags: removeTags,\n                attributes: removeAttrs\n            }\n        };\n    }\n    ;\n    static sanitize(value) {\n        let item = this.beforeSanitize();\n        let output = this.serializeValue(item, value);\n        return output;\n    }\n    static serializeValue(item, value) {\n        this.removeAttrs = item.selectors.attributes;\n        this.removeTags = item.selectors.tags;\n        this.wrapElement = document.createElement('div');\n        this.wrapElement.innerHTML = value;\n        this.removeXssTags();\n        this.removeJsEvents();\n        this.removeXssAttrs();\n        let tempEleValue = this.wrapElement.innerHTML;\n        this.removeElement();\n        return tempEleValue;\n    }\n    static removeElement() {\n        // Removes an element's attibute to avoid html tag validation\n        let nodes = this.wrapElement.children;\n        for (let j = 0; j < nodes.length; j++) {\n            let attribute = nodes[j].attributes;\n            for (let i = 0; i < attribute.length; i++) {\n                this.wrapElement.children[j].removeAttribute(attribute[i].localName);\n            }\n        }\n    }\n    static removeXssTags() {\n        let elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                detach(element);\n            });\n        }\n        else {\n            return;\n        }\n    }\n    static removeJsEvents() {\n        let elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                jsEvents.forEach((attr) => {\n                    if (element.hasAttribute(attr)) {\n                        element.removeAttribute(attr);\n                    }\n                });\n            });\n        }\n        else {\n            return;\n        }\n    }\n    static removeXssAttrs() {\n        this.removeAttrs.forEach((item, index) => {\n            let elements = this.wrapElement.querySelectorAll(item.selector);\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    element.removeAttribute(item.attribute);\n                });\n            }\n        });\n    }\n}\n\n/**\n * Base modules\n */\n\nexport { blazorCultureFormats, IntlBase, Ajax, Animation, rippleEffect, isRippleEnabled, enableRipple, Base, getComponent, removeChildInstance, Browser, Component, ChildProperty, Position, Draggable, Droppable, EventHandler, onIntlChange, rightToLeft, cldrData, defaultCulture, defaultCurrencyCode, Internationalization, setCulture, setCurrencyCode, loadCldr, enableRtl, getNumericObject, getNumberDependable, getDefaultDateObject, KeyboardEvents, L10n, ModuleLoader, Property, Complex, ComplexFactory, Collection, CollectionFactory, Event$1 as Event, NotifyPropertyChanges, CreateBuilder, SwipeSettings, Touch, HijriParser, blazorTemplates, getRandomId, compile$$1 as compile, updateBlazorTemplate, resetBlazorTemplate, setTemplateEngine, getTemplateEngine, disableBlazorMode, createInstance, setImmediate, getValue, setValue, deleteObject, isObject, getEnumValue, merge, extend, isNullOrUndefined, isUndefined, getUniqueID, debounce, queryParams, isObjectArray, compareElementParent, throwError, print, formatUnit, enableBlazorMode, isBlazor, getElement, getInstance, addInstance, uniqueID, createElement, addClass, removeClass, isVisible, prepend, append, detach, remove, attributes, select, selectAll, closest, siblings, getAttributeOrDefault, setStyleAttribute, classList, matches, includeInnerHTML, containsClass, cloneNode, Observer, SanitizeHtmlHelper };\n//# sourceMappingURL=ej2-base.es2015.js.map\n","import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        let order = 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            grouped[val].items.push(jsonData[i]);\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query));\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        this.getAggregateResult(pvt, data, args, groupDs, query);\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        if (pvt && pvt.groups && pvt.groups.length) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            selected[splits[0]].push(splits[1]);\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${this.options.select}=${selected[expand].join(',')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest]))) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        let ajax = new Ajax(req);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        req = ajax.send();\n        req.catch((e) => true); // to handle failure remote requests.        \n        this.requests.push(ajax);\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    }\n    doAjaxRequest(res) {\n        let defer = new Deferred();\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        let ajax = new Ajax(res);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = (record, request) => {\n            try {\n                DataUtil.parse.parseJson(record);\n            }\n            catch (e) {\n                record = [];\n            }\n            record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n            defer.resolve(record);\n        };\n        ajax.onFailure = (e) => {\n            defer.reject([{ error: e }]);\n        };\n        ajax.send().catch((e) => true); // to handle the failure requests.\n        return defer.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CacheAdaptor, DataUtil };\n//# sourceMappingURL=ej2-data.es2015.js.map\n","import { Component, Event, EventHandler, NotifyPropertyChanges, Observer, Property, SanitizeHtmlHelper, addClass, append, attributes, closest, deleteObject, detach, getElement, getInstance, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, removeClass, rippleEffect, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Initialize wrapper element for angular.\n * @private\n */\nfunction wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {\n    let input = element;\n    if (element.tagName === tag) {\n        let ejInstance = getValue('ej2_instances', element);\n        input = createElement('input', { attrs: { 'type': type } });\n        let props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];\n        for (let index = 0, len = element.attributes.length; index < len; index++) {\n            if (props.indexOf(element.attributes[index].nodeName) === -1) {\n                input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);\n            }\n        }\n        attributes(element, { 'class': WRAPPER, 'role': role, 'aria-checked': 'false' });\n        element.appendChild(input);\n        setValue('ej2_instances', ejInstance, input);\n        deleteObject(element, 'ej2_instances');\n    }\n    return input;\n}\nfunction getTextNode(element) {\n    let node;\n    let childnode = element.childNodes;\n    for (let i = 0; i < childnode.length; i++) {\n        node = childnode[i];\n        if (node.nodeType === 3) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Destroy the button components.\n * @private\n */\nfunction destroy(ejInst, wrapper, tagName) {\n    if (tagName === 'INPUT') {\n        wrapper.parentNode.insertBefore(ejInst.element, wrapper);\n        detach(wrapper);\n        ejInst.element.checked = false;\n        ['name', 'value', 'disabled'].forEach((key) => {\n            ejInst.element.removeAttribute(key);\n        });\n    }\n    else {\n        ['role', 'aria-checked', 'class'].forEach((key) => {\n            wrapper.removeAttribute(key);\n        });\n        wrapper.innerHTML = '';\n    }\n}\nfunction preRender(proxy, control, wrapper, element, moduleName) {\n    element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);\n    proxy.element = element;\n    if (proxy.element.getAttribute('type') !== 'checkbox') {\n        proxy.element.setAttribute('type', 'checkbox');\n    }\n    if (!proxy.element.id) {\n        proxy.element.id = getUniqueID('e-' + moduleName);\n    }\n}\n/**\n * Creates CheckBox component UI with theming and ripple support.\n * @private\n */\nfunction createCheckBox(createElement, enableRipple = false, options = {}) {\n    let wrapper = createElement('div', { className: 'e-checkbox-wrapper e-css' });\n    if (options.cssClass) {\n        addClass([wrapper], options.cssClass.split(' '));\n    }\n    if (options.enableRtl) {\n        wrapper.classList.add('e-rtl');\n    }\n    if (enableRipple) {\n        let rippleSpan = createElement('span', { className: 'e-ripple-container' });\n        rippleEffect(rippleSpan, { isCenterRipple: true, duration: 400 });\n        wrapper.appendChild(rippleSpan);\n    }\n    let frameSpan = createElement('span', { className: 'e-frame e-icons' });\n    if (options.checked) {\n        frameSpan.classList.add('e-check');\n    }\n    wrapper.appendChild(frameSpan);\n    if (options.label) {\n        let labelSpan = createElement('span', { className: 'e-label', innerHTML: options.label });\n        wrapper.appendChild(labelSpan);\n    }\n    return wrapper;\n}\nfunction rippleMouseHandler(e, rippleSpan) {\n    if (rippleSpan) {\n        let event = document.createEvent('MouseEvents');\n        event.initEvent(e.type, false, true);\n        rippleSpan.dispatchEvent(event);\n    }\n}\n/**\n * Append hidden input to given element\n * @private\n */\nfunction setHiddenInput(proxy, wrap) {\n    if (proxy.element.getAttribute('ejs-for')) {\n        wrap.appendChild(proxy.createElement('input', {\n            attrs: { 'name': proxy.name || proxy.element.name, 'value': 'false', 'type': 'hidden' }\n        }));\n    }\n}\n\n/**\n * Common modules\n */\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst buttonObserver = new Observer();\nconst cssClassName = {\n    RTL: 'e-rtl',\n    BUTTON: 'e-btn',\n    PRIMARY: 'e-primary',\n    ICONBTN: 'e-icon-btn'\n};\n/**\n * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.\n * ```html\n * <button id=\"button\">Button</button>\n * ```\n * ```typescript\n * <script>\n * var btnObj = new Button();\n * btnObj.appendTo(\"#button\");\n * </script>\n * ```\n */\nlet Button = class Button extends Component {\n    /**\n     * Constructor for creating the widget\n     * @param  {ButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        // pre render code snippets\n    }\n    /**\n     * Initialize the control rendering\n     * @returns void\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.wireEvents();\n            }\n            buttonObserver.notify('component-rendered', { id: this.element.id, instance: this });\n        }\n        else {\n            this.initialize();\n        }\n        this.removeRippleEffect = rippleEffect(this.element, { selector: '.' + cssClassName.BUTTON });\n        this.renderComplete();\n    }\n    initialize() {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n        if (this.isPrimary) {\n            this.element.classList.add(cssClassName.PRIMARY);\n        }\n        if (!isBlazor() || (isBlazor() && this.getModuleName() !== 'progress-btn')) {\n            if (this.content) {\n                let tempContent = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(this.content) : this.content;\n                this.element.innerHTML = tempContent;\n            }\n            this.setIconCss();\n        }\n        if (this.enableRtl) {\n            this.element.classList.add(cssClassName.RTL);\n        }\n        if (this.disabled) {\n            this.controlStatus(this.disabled);\n        }\n        else {\n            this.wireEvents();\n        }\n    }\n    controlStatus(disabled) {\n        this.element.disabled = disabled;\n    }\n    setIconCss() {\n        if (this.iconCss) {\n            let span = this.createElement('span', { className: 'e-btn-icon ' + this.iconCss });\n            if (!this.element.textContent.trim()) {\n                this.element.classList.add(cssClassName.ICONBTN);\n            }\n            else {\n                span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n                if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n                    this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n                }\n            }\n            let node = this.element.childNodes[0];\n            if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n                this.element.insertBefore(span, node);\n            }\n            else {\n                this.element.appendChild(span);\n            }\n        }\n    }\n    wireEvents() {\n        if (this.isToggle) {\n            EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n        }\n    }\n    unWireEvents() {\n        if (this.isToggle) {\n            EventHandler.remove(this.element, 'click', this.btnClickHandler);\n        }\n    }\n    btnClickHandler() {\n        if (this.element.classList.contains('e-active')) {\n            this.element.classList.remove('e-active');\n        }\n        else {\n            this.element.classList.add('e-active');\n        }\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        if (!(isBlazor() && this.isServerRendered)) {\n            let span;\n            let classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger',\n                'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round',\n                'e-top-icon-btn', 'e-bottom-icon-btn'];\n            if (this.cssClass) {\n                classList = classList.concat(this.cssClass.split(' '));\n            }\n            super.destroy();\n            removeClass([this.element], classList);\n            if (!this.element.getAttribute('class')) {\n                this.element.removeAttribute('class');\n            }\n            if (this.disabled) {\n                this.element.removeAttribute('disabled');\n            }\n            if (this.content) {\n                this.element.innerHTML = this.element.innerHTML.replace(this.content, '');\n            }\n            span = this.element.querySelector('span.e-btn-icon');\n            if (span) {\n                detach(span);\n            }\n        }\n        this.unWireEvents();\n        if (isRippleEnabled) {\n            this.removeRippleEffect();\n        }\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'btn';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Dynamically injects the required modules to the component.\n     * @private\n     */\n    static Inject() {\n        // Inject code snippets\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ButtonModel} newProp\n     * @param  {ButtonModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'isPrimary':\n                    if (newProp.isPrimary) {\n                        this.element.classList.add(cssClassName.PRIMARY);\n                    }\n                    else {\n                        this.element.classList.remove(cssClassName.PRIMARY);\n                    }\n                    break;\n                case 'disabled':\n                    this.controlStatus(newProp.disabled);\n                    break;\n                case 'iconCss':\n                    let span = this.element.querySelector('span.e-btn-icon');\n                    if (span) {\n                        if (newProp.iconCss) {\n                            span.className = 'e-btn-icon ' + newProp.iconCss;\n                            if (this.element.textContent.trim()) {\n                                if (this.iconPosition === 'Left') {\n                                    span.classList.add('e-icon-left');\n                                }\n                                else {\n                                    span.classList.add('e-icon-right');\n                                }\n                            }\n                        }\n                        else {\n                            detach(span);\n                        }\n                    }\n                    else {\n                        this.setIconCss();\n                    }\n                    break;\n                case 'iconPosition':\n                    removeClass([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);\n                    span = this.element.querySelector('span.e-btn-icon');\n                    if (span) {\n                        detach(span);\n                    }\n                    this.setIconCss();\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([this.element], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([this.element], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        this.element.classList.add(cssClassName.RTL);\n                    }\n                    else {\n                        this.element.classList.remove(cssClassName.RTL);\n                    }\n                    break;\n                case 'content':\n                    let node = getTextNode(this.element);\n                    if (!node) {\n                        this.element.classList.remove(cssClassName.ICONBTN);\n                    }\n                    if (!isBlazor() || (isBlazor() && !this.isServerRendered && this.getModuleName() !== 'progress-btn')) {\n                        if (this.enableHtmlSanitizer) {\n                            newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);\n                        }\n                        this.element.innerHTML = newProp.content;\n                        this.setIconCss();\n                    }\n                    break;\n                case 'isToggle':\n                    if (newProp.isToggle) {\n                        EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n                    }\n                    else {\n                        EventHandler.remove(this.element, 'click', this.btnClickHandler);\n                        removeClass([this.element], ['e-active']);\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Click the button element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to Button\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate([\n    Property('Left')\n], Button.prototype, \"iconPosition\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"iconCss\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"isPrimary\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"cssClass\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"content\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"isToggle\", void 0);\n__decorate([\n    Property()\n], Button.prototype, \"locale\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Event()\n], Button.prototype, \"created\", void 0);\nButton = __decorate([\n    NotifyPropertyChanges\n], Button);\n\n/**\n * Button modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CHECK = 'e-check';\nconst DISABLED = 'e-checkbox-disabled';\nconst FRAME = 'e-frame';\nconst INDETERMINATE = 'e-stop';\nconst LABEL = 'e-label';\nconst RIPPLE = 'e-ripple-container';\nconst RIPPLECHECK = 'e-ripple-check';\nconst RIPPLEINDETERMINATE = 'e-ripple-stop';\nconst RTL = 'e-rtl';\nconst WRAPPER = 'e-checkbox-wrapper';\nconst containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];\n/**\n * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.\n * It contains checked, unchecked, and indeterminate states.\n * ```html\n * <input type=\"checkbox\" id=\"checkbox\"/>\n * <script>\n * var checkboxObj = new CheckBox({ label: \"Default\" });\n * checkboxObj.appendTo(\"#checkbox\");\n * </script>\n * ```\n */\nlet CheckBox = class CheckBox extends Component {\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n        this.isMouseClick = false;\n    }\n    changeState(state) {\n        let ariaState;\n        let rippleSpan;\n        let frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n        if (isRippleEnabled) {\n            rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        }\n        if (state === 'check') {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLEINDETERMINATE);\n                rippleSpan.classList.add(RIPPLECHECK);\n            }\n            ariaState = 'true';\n            this.element.checked = true;\n        }\n        else if (state === 'uncheck') {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);\n            }\n            ariaState = 'false';\n            this.element.checked = false;\n        }\n        else {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLECHECK);\n                rippleSpan.classList.add(RIPPLEINDETERMINATE);\n            }\n            ariaState = 'mixed';\n            this.element.indeterminate = true;\n        }\n        this.getWrapper().setAttribute('aria-checked', ariaState);\n    }\n    clickHandler(event) {\n        if (this.isMouseClick) {\n            this.focusOutHandler();\n            this.isMouseClick = false;\n        }\n        if (this.indeterminate) {\n            this.changeState(this.checked ? 'check' : 'uncheck');\n            this.indeterminate = false;\n            this.element.indeterminate = false;\n        }\n        else if (this.checked) {\n            this.changeState('uncheck');\n            this.checked = false;\n        }\n        else {\n            this.changeState('check');\n            this.checked = true;\n        }\n        let changeEventArgs = { checked: this.element.checked, event: event };\n        this.trigger('change', changeEventArgs);\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n        else {\n            super.destroy();\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            if (this.tagName === 'INPUT') {\n                wrapper.parentNode.insertBefore(this.element, wrapper);\n                detach(wrapper);\n                this.element.checked = false;\n                if (this.indeterminate) {\n                    this.element.indeterminate = false;\n                }\n                ['name', 'value', 'disabled'].forEach((key) => {\n                    this.element.removeAttribute(key);\n                });\n            }\n            else {\n                ['role', 'aria-checked', 'class'].forEach((key) => {\n                    wrapper.removeAttribute(key);\n                });\n                wrapper.innerHTML = '';\n            }\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getWrapper().classList.remove('e-focus');\n        this.isFocused = false;\n    }\n    /**\n     * Gets the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'checkbox';\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked', 'indeterminate']);\n    }\n    getWrapper() {\n        return this.element.parentElement.parentElement;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState('check');\n        }\n        if (this.indeterminate) {\n            this.changeState();\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    }\n    initWrapper() {\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER, attrs: { 'role': 'checkbox', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let label = this.createElement('label', { attrs: { for: this.element.id } });\n        let frameSpan = this.createElement('span', { className: 'e-icons ' + FRAME });\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        wrapper.appendChild(label);\n        label.appendChild(this.element);\n        setHiddenInput(this, label);\n        label.appendChild(frameSpan);\n        if (isRippleEnabled) {\n            let rippleSpan = this.createElement('span', { className: RIPPLE });\n            if (this.labelPosition === 'Before') {\n                label.appendChild(rippleSpan);\n            }\n            else {\n                label.insertBefore(rippleSpan, frameSpan);\n            }\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    }\n    keyUpHandler() {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    }\n    labelMouseHandler(e) {\n        this.isMouseClick = true;\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        rippleMouseHandler(e, rippleSpan);\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    this.indeterminate = false;\n                    this.element.indeterminate = false;\n                    this.changeState(newProp.checked ? 'check' : 'uncheck');\n                    break;\n                case 'indeterminate':\n                    if (newProp.indeterminate) {\n                        this.changeState();\n                    }\n                    else {\n                        this.element.indeterminate = false;\n                        this.changeState(this.checked ? 'check' : 'uncheck');\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    let label = wrapper.getElementsByClassName(LABEL)[0];\n                    let labelWrap = wrapper.getElementsByTagName('label')[0];\n                    detach(label);\n                    if (newProp.labelPosition === 'After') {\n                        labelWrap.appendChild(label);\n                    }\n                    else {\n                        labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHtmlAttributeToWrapper();\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        if (isBlazor() && this.isServerRendered) {\n            return;\n        }\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'checkbox') {\n            this.element.setAttribute('type', 'checkbox');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n    }\n    /**\n     * Initialize the control rendering.\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (isRippleEnabled) {\n                rippleEffect(this.getWrapper().getElementsByClassName(RIPPLE)[0], { duration: 400, isCenterRipple: true });\n            }\n        }\n        else {\n            this.initWrapper();\n            this.initialize();\n        }\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.updateHtmlAttributeToWrapper();\n        this.renderComplete();\n    }\n    setDisabled() {\n        let wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED);\n        wrapper.setAttribute('aria-disabled', 'true');\n    }\n    setText(text) {\n        let label = this.getWrapper().getElementsByClassName(LABEL)[0];\n        if (label) {\n            label.textContent = text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(text) : text;\n            label = this.createElement('span', { className: LABEL, innerHTML: text });\n            let labelWrap = this.getWrapper().getElementsByTagName('label')[0];\n            if (this.labelPosition === 'Before') {\n                labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName(FRAME)[0]);\n            }\n            else {\n                labelWrap.appendChild(label);\n            }\n        }\n    }\n    changeHandler(e) {\n        e.stopPropagation();\n    }\n    formResetHandler() {\n        this.checked = this.initialCheckedValue;\n        this.element.checked = this.initialCheckedValue;\n    }\n    unWireEvents() {\n        let wrapper = this.getWrapper();\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        let label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.remove(label, 'mousedown', this.labelMouseHandler);\n        EventHandler.remove(label, 'mouseup', this.labelMouseHandler);\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.remove(this.element, 'change', this.changeHandler);\n        }\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        let label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.add(label, 'mousedown', this.labelMouseHandler, this);\n        EventHandler.add(label, 'mouseup', this.labelMouseHandler, this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.add(this.element, 'change', this.changeHandler, this);\n        }\n    }\n    updateHtmlAttributeToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) > -1) {\n                    let wrapper = this.getWrapper();\n                    if (key === 'class') {\n                        addClass([wrapper], this.htmlAttributes[key].split(' '));\n                    }\n                    else if (key === 'title') {\n                        wrapper.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                    else if (key === 'style') {\n                        let frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n                        frameSpan.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                    else {\n                        this.element.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Click the CheckBox element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to CheckBox\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$1([\n    Event()\n], CheckBox.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], CheckBox.prototype, \"created\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"checked\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"disabled\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"indeterminate\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"label\", void 0);\n__decorate$1([\n    Property('After')\n], CheckBox.prototype, \"labelPosition\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"name\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"value\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Property({})\n], CheckBox.prototype, \"htmlAttributes\", void 0);\nCheckBox = __decorate$1([\n    NotifyPropertyChanges\n], CheckBox);\n\n/**\n * CheckBox modules\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar RadioButton_1;\nconst LABEL$1 = 'e-label';\nconst RIPPLE$1 = 'e-ripple-container';\nconst RTL$1 = 'e-rtl';\nconst WRAPPER$1 = 'e-radio-wrapper';\n/**\n * The RadioButton is a graphical user interface element that allows you to select one option from the choices.\n * It contains checked and unchecked states.\n * ```html\n * <input type=\"radio\" id=\"radio\"/>\n * <script>\n * var radioObj = new RadioButton({ label: \"Default\" });\n * radioObj.appendTo(\"#radio\");\n * </script>\n * ```\n */\nlet RadioButton = RadioButton_1 = class RadioButton extends Component {\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n    }\n    changeHandler(event) {\n        this.checked = true;\n        this.dataBind();\n        let changeEventArgs = { value: this.value, event: event };\n        this.trigger('change', changeEventArgs);\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n            event.stopPropagation();\n        }\n    }\n    updateChange(state) {\n        let input;\n        let instance;\n        let radioGrp = this.getRadioGroup();\n        for (let i = 0; i < radioGrp.length; i++) {\n            input = radioGrp[i];\n            if (input !== this.element) {\n                instance = getInstance(input, RadioButton_1);\n                instance.checked = false;\n                if (this.tagName === 'EJS-RADIOBUTTON') {\n                    instance.angularValue = this.value;\n                }\n            }\n        }\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n        else {\n            let radioWrap = this.element.parentElement;\n            super.destroy();\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            if (this.tagName === 'INPUT') {\n                radioWrap.parentNode.insertBefore(this.element, radioWrap);\n                detach(radioWrap);\n                this.element.checked = false;\n                ['name', 'value', 'disabled'].forEach((key) => {\n                    this.element.removeAttribute(key);\n                });\n            }\n            else {\n                ['role', 'aria-checked', 'class'].forEach((key) => {\n                    radioWrap.removeAttribute(key);\n                });\n                radioWrap.innerHTML = '';\n            }\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getLabel().classList.remove('e-focus');\n    }\n    getModuleName() {\n        return 'radio';\n    }\n    /**\n     * To get the value of selected radio button in a group.\n     * @method getSelectedValue\n     * @return {string}\n     */\n    getSelectedValue() {\n        let input;\n        let radioGrp = this.getRadioGroup();\n        for (let i = 0, len = radioGrp.length; i < len; i++) {\n            input = radioGrp[i];\n            if (input.checked) {\n                return input.value;\n            }\n        }\n        return '';\n    }\n    getRadioGroup() {\n        return document.querySelectorAll('input.e-radio[name=\"' + this.element.getAttribute('name') + '\"]');\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked']);\n    }\n    getLabel() {\n        return this.element.nextElementSibling;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        this.initWrapper();\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.element.checked = true;\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    }\n    initWrapper() {\n        let rippleSpan;\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER$1)) {\n            wrapper = this.createElement('div', { className: WRAPPER$1 });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let label = this.createElement('label', { attrs: { for: this.element.id } });\n        wrapper.appendChild(this.element);\n        wrapper.appendChild(label);\n        if (isRippleEnabled) {\n            rippleSpan = this.createElement('span', { className: (RIPPLE$1) });\n            label.appendChild(rippleSpan);\n            rippleEffect(rippleSpan, {\n                duration: 400,\n                isCenterRipple: true\n            });\n        }\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            label.classList.add(RTL$1);\n        }\n        if (this.cssClass) {\n            addClass([label], this.cssClass.split(' '));\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    }\n    keyUpHandler() {\n        if (this.isFocused) {\n            this.getLabel().classList.add('e-focus');\n        }\n    }\n    labelRippleHandler(e) {\n        let ripple = this.getLabel().getElementsByClassName(RIPPLE$1)[0];\n        rippleMouseHandler(e, ripple);\n    }\n    formResetHandler() {\n        this.checked = this.initialCheckedValue;\n        if (this.initialCheckedValue) {\n            attributes(this.element, { 'checked': 'true' });\n        }\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let label = this.getLabel();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    if (newProp.checked) {\n                        this.updateChange(newProp.checked);\n                    }\n                    this.element.checked = newProp.checked;\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([label], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([label], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        label.classList.add(RTL$1);\n                    }\n                    else {\n                        label.classList.remove(RTL$1);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    if (newProp.labelPosition === 'Before') {\n                        label.classList.add('e-right');\n                    }\n                    else {\n                        label.classList.remove('e-right');\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize checked Property, Angular and React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        if (isBlazor() && this.isServerRendered) {\n            return;\n        }\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER$1, 'radio');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'radio') {\n            this.element.setAttribute('type', 'radio');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n            let formControlName = this.element.getAttribute('formcontrolname');\n            if (formControlName) {\n                this.setProperties({ 'name': formControlName }, true);\n                this.element.setAttribute('name', formControlName);\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (isRippleEnabled) {\n                let rippleSpan = this.element.parentElement.getElementsByClassName(RIPPLE$1)[0];\n                rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n            }\n        }\n        else {\n            this.initialize();\n        }\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    setDisabled() {\n        this.element.disabled = true;\n    }\n    setText(text) {\n        let label = this.getLabel();\n        let textLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (textLabel) {\n            textLabel.textContent = text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(text) : text;\n            textLabel = this.createElement('span', { className: LABEL$1, innerHTML: text });\n            label.appendChild(textLabel);\n        }\n        if (this.labelPosition === 'Before') {\n            this.getLabel().classList.add('e-right');\n        }\n        else {\n            this.getLabel().classList.remove('e-right');\n        }\n    }\n    unWireEvents() {\n        let label = this.getLabel();\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        let rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (rippleLabel) {\n            EventHandler.remove(rippleLabel, 'mousedown', this.labelRippleHandler);\n            EventHandler.remove(rippleLabel, 'mouseup', this.labelRippleHandler);\n        }\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    wireEvents() {\n        let label = this.getLabel();\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        let rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (rippleLabel) {\n            EventHandler.add(rippleLabel, 'mousedown', this.labelRippleHandler, this);\n            EventHandler.add(rippleLabel, 'mouseup', this.labelRippleHandler, this);\n        }\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n    }\n    /**\n     * Click the RadioButton element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to RadioButton\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$2([\n    Event()\n], RadioButton.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], RadioButton.prototype, \"created\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"checked\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"disabled\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"label\", void 0);\n__decorate$2([\n    Property('After')\n], RadioButton.prototype, \"labelPosition\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"name\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"value\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"enableHtmlSanitizer\", void 0);\nRadioButton = RadioButton_1 = __decorate$2([\n    NotifyPropertyChanges\n], RadioButton);\n\n/**\n * RadioButton modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DISABLED$1 = 'e-switch-disabled';\nconst RIPPLE$2 = 'e-ripple-container';\nconst RIPPLE_CHECK = 'e-ripple-check';\nconst RTL$2 = 'e-rtl';\nconst WRAPPER$2 = 'e-switch-wrapper';\nconst ACTIVE = 'e-switch-active';\n/**\n * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.\n * ```html\n * <input type=\"checkbox\" id=\"switch\"/>\n * <script>\n * var switchObj = new Switch({});\n * switchObj.appendTo(\"#switch\");\n * </script>\n * ```\n */\nlet Switch = class Switch extends Component {\n    /**\n     * Constructor for creating the widget.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n        this.isDrag = false;\n    }\n    changeState(state) {\n        let ariaState;\n        let rippleSpan;\n        let wrapper = this.getWrapper();\n        let bar = wrapper.querySelector('.e-switch-inner');\n        let handle = wrapper.querySelector('.e-switch-handle');\n        if (isRippleEnabled) {\n            rippleSpan = wrapper.getElementsByClassName(RIPPLE$2)[0];\n        }\n        if (state) {\n            addClass([bar, handle], ACTIVE);\n            ariaState = 'true';\n            this.element.checked = true;\n            this.checked = true;\n            if (rippleSpan) {\n                addClass([rippleSpan], [RIPPLE_CHECK]);\n            }\n        }\n        else {\n            removeClass([bar, handle], ACTIVE);\n            ariaState = 'false';\n            this.element.checked = false;\n            this.checked = false;\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLE_CHECK]);\n            }\n        }\n        wrapper.setAttribute('aria-checked', ariaState);\n    }\n    clickHandler(evt) {\n        this.isDrag = false;\n        this.focusOutHandler();\n        this.changeState(!this.checked);\n        this.element.focus();\n        let changeEventArgs = { checked: this.element.checked, event: evt };\n        this.trigger('change', changeEventArgs);\n    }\n    /**\n     * Destroys the Switch widget.\n     * @returns void\n     */\n    destroy() {\n        if (isBlazor() && this.isServerRendered) {\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n        else {\n            super.destroy();\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            destroy(this, this.getWrapper(), this.tagName);\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getWrapper().classList.remove('e-focus');\n    }\n    /**\n     * Gets the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'switch';\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked']);\n    }\n    getWrapper() {\n        return this.element.parentElement;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialSwitchCheckedValue)) {\n            this.initialSwitchCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState(true);\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n        if (this.onLabel || this.offLabel) {\n            this.setLabel(this.onLabel, this.offLabel);\n        }\n    }\n    initWrapper() {\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER$2)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER$2, attrs: { 'role': 'switch', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let switchInner = this.createElement('span', { className: 'e-switch-inner' });\n        let onLabel = this.createElement('span', { className: 'e-switch-on' });\n        let offLabel = this.createElement('span', { className: 'e-switch-off' });\n        let handle = this.createElement('span', { className: 'e-switch-handle' });\n        wrapper.appendChild(this.element);\n        setHiddenInput(this, wrapper);\n        switchInner.appendChild(onLabel);\n        switchInner.appendChild(offLabel);\n        wrapper.appendChild(switchInner);\n        wrapper.appendChild(handle);\n        if (isRippleEnabled) {\n            let rippleSpan = this.createElement('span', { className: RIPPLE$2 });\n            handle.appendChild(rippleSpan);\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL$2);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    this.changeState(newProp.checked);\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED$1);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'onLabel':\n                case 'offLabel':\n                    this.setLabel(newProp.onLabel, newProp.offLabel);\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL$2);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL$2);\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        if (isBlazor() && this.isServerRendered) {\n            return;\n        }\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        preRender(this, 'EJS-SWITCH', WRAPPER$2, element, this.getModuleName());\n    }\n    /**\n     * Initialize control rendering.\n     * @private\n     */\n    render() {\n        if (isBlazor() && this.isServerRendered) {\n            if (isRippleEnabled) {\n                rippleEffect(this.element.parentElement, { duration: 400, isCenterRipple: true });\n            }\n        }\n        else {\n            this.initWrapper();\n            this.initialize();\n        }\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    rippleHandler(e) {\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        rippleMouseHandler(e, rippleSpan);\n        if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {\n            this.isDrag = true;\n            this.isFocused = false;\n        }\n    }\n    rippleTouchHandler(eventType) {\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        if (rippleSpan) {\n            let event = document.createEvent('MouseEvents');\n            event.initEvent(eventType, false, true);\n            rippleSpan.dispatchEvent(event);\n        }\n    }\n    setDisabled() {\n        let wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED$1);\n        wrapper.setAttribute('aria-disabled', 'true');\n    }\n    setLabel(onText, offText) {\n        let wrapper = this.getWrapper();\n        if (onText) {\n            wrapper.querySelector('.e-switch-on').textContent = onText;\n        }\n        if (offText) {\n            wrapper.querySelector('.e-switch-off').textContent = offText;\n        }\n    }\n    switchFocusHandler() {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    }\n    switchMouseUp(e) {\n        let target = e.target;\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        if (e.type === 'touchmove') {\n            e.preventDefault();\n        }\n        if (e.type === 'touchstart') {\n            this.isDrag = true;\n            this.rippleTouchHandler('mousedown');\n        }\n        if (this.isDrag) {\n            if ((e.type === 'mouseup' && target.className.indexOf('e-switch') < 0) || e.type === 'touchend') {\n                this.clickHandler(e);\n                this.rippleTouchHandler('mouseup');\n                e.preventDefault();\n            }\n        }\n    }\n    formResetHandler() {\n        this.checked = this.initialSwitchCheckedValue;\n        this.element.checked = this.initialSwitchCheckedValue;\n    }\n    /**\n     * Toggle the Switch component state into checked/unchecked.\n     * @returns void\n     */\n    toggle() {\n        this.clickHandler();\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        let handle = wrapper.querySelector('.e-switch-handle');\n        this.delegateMouseUpHandler = this.switchMouseUp.bind(this);\n        this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);\n        EventHandler.add(wrapper, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'mouseup', this.delegateMouseUpHandler, this);\n        EventHandler.add(this.element, 'keyup', this.delegateKeyUpHandler, this);\n        EventHandler.add(wrapper, 'mousedown mouseup', this.rippleHandler, this);\n        EventHandler.add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n    }\n    unWireEvents() {\n        let wrapper = this.getWrapper();\n        let handle = wrapper.querySelector('.e-switch-handle');\n        EventHandler.remove(wrapper, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        EventHandler.remove(this.element, 'mouseup', this.delegateMouseUpHandler);\n        EventHandler.remove(this.element, 'keyup', this.delegateKeyUpHandler);\n        EventHandler.remove(wrapper, 'mousedown mouseup', this.rippleHandler);\n        EventHandler.remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    /**\n     * Click the switch element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to Switch\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$3([\n    Event()\n], Switch.prototype, \"change\", void 0);\n__decorate$3([\n    Event()\n], Switch.prototype, \"created\", void 0);\n__decorate$3([\n    Property(false)\n], Switch.prototype, \"checked\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property(false)\n], Switch.prototype, \"disabled\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"name\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"onLabel\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"offLabel\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"value\", void 0);\nSwitch = __decorate$3([\n    NotifyPropertyChanges\n], Switch);\n\n/**\n * Switch modules\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst classNames = {\n    chipSet: 'e-chip-set',\n    chip: 'e-chip',\n    avatar: 'e-chip-avatar',\n    text: 'e-chip-text',\n    icon: 'e-chip-icon',\n    delete: 'e-chip-delete',\n    deleteIcon: 'e-dlt-btn',\n    multiSelection: 'e-multi-selection',\n    singleSelection: 'e-selection',\n    active: 'e-active',\n    chipWrapper: 'e-chip-avatar-wrap',\n    iconWrapper: 'e-chip-icon-wrap',\n    focused: 'e-focused',\n    disabled: 'e-disabled',\n    rtl: 'e-rtl',\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\nlet ChipList = class ChipList extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.multiSelectedChip = [];\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        //prerender\n    }\n    /**\n     * To find the chips length.\n     * @returns boolean\n     * @private\n     */\n    chipType() {\n        return (this.chips && this.chips.length && this.chips.length > 0);\n    }\n    /**\n     * To Initialize the control rendering.\n     * @returns void\n     * @private\n     */\n    render() {\n        this.type = this.chips.length ? 'chipset' : (this.text || this.element.innerText ? 'chip' : 'chipset');\n        if (!isBlazor() || !this.isServerRendered) {\n            this.setAttributes();\n            this.createChip();\n            this.setRtl();\n            this.select(this.selectedChips);\n        }\n        this.wireEvent(false);\n        this.rippleFunction = rippleEffect(this.element, {\n            selector: '.e-chip'\n        });\n        this.renderComplete();\n    }\n    createChip() {\n        this.innerText = this.element.innerText.trim();\n        if (isBlazor()) {\n            let childElement = this.element.querySelectorAll('.e-chip');\n            for (let i = 0; i < childElement.length; i++) {\n                if (childElement[i] != null) {\n                    detach(childElement[i]);\n                }\n            }\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n    }\n    setAttributes() {\n        if (this.type === 'chip') {\n            this.element.tabIndex = 0;\n            this.element.setAttribute('role', 'option');\n        }\n        else {\n            this.element.classList.add(classNames.chipSet);\n            this.element.setAttribute('role', 'listbox');\n            if (this.selection === 'Multiple') {\n                this.element.classList.add(classNames.multiSelection);\n                this.element.setAttribute('aria-multiselectable', 'true');\n            }\n            else if (this.selection === 'Single') {\n                this.element.classList.add(classNames.singleSelection);\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n            else {\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n        }\n    }\n    setRtl() {\n        this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n    }\n    chipCreation(data) {\n        let chipListArray = [];\n        for (let i = 0; i < data.length; i++) {\n            let fieldsData = this.getFieldValues(data[i]);\n            let chipArray = this.elementCreation(fieldsData);\n            let className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' +\n                (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : (fieldsData.leadingIconCss ?\n                    classNames.iconWrapper : ' ')) + ' ' + fieldsData.cssClass).split(' ').filter((css) => css);\n            if (!this.chipType()) {\n                chipListArray = chipArray;\n                addClass([this.element], className);\n                this.element.setAttribute('aria-label', fieldsData.text);\n                if (fieldsData.value) {\n                    this.element.setAttribute('data-value', fieldsData.value.toString());\n                }\n            }\n            else {\n                let wrapper = this.createElement('DIV', {\n                    className: className.join(' '), attrs: {\n                        tabIndex: '0', role: 'option',\n                        'aria-label': fieldsData.text, 'aria-selected': 'false'\n                    }\n                });\n                if (fieldsData.value) {\n                    wrapper.setAttribute('data-value', fieldsData.value.toString());\n                }\n                append(chipArray, wrapper);\n                chipListArray.push(wrapper);\n            }\n        }\n        append(chipListArray, this.element);\n    }\n    getFieldValues(data) {\n        let chipEnabled = !(this.enabled.toString() === 'false');\n        let fields = {\n            text: typeof data === 'object' ? (data.text ? data.text.toString() : this.text.toString()) :\n                (!this.chipType() ? (this.innerText ? this.innerText : this.text.toString()) : data.toString()),\n            cssClass: typeof data === 'object' ? (data.cssClass ? data.cssClass.toString() : this.cssClass.toString()) :\n                (this.cssClass.toString()),\n            leadingIconCss: typeof data === 'object' ? (data.leadingIconCss ? data.leadingIconCss.toString() :\n                this.leadingIconCss.toString()) : (this.leadingIconCss.toString()),\n            avatarIconCss: typeof data === 'object' ? (data.avatarIconCss ? data.avatarIconCss.toString() :\n                this.avatarIconCss.toString()) : (this.avatarIconCss.toString()),\n            avatarText: typeof data === 'object' ? (data.avatarText ? data.avatarText.toString() : this.avatarText.toString()) :\n                (this.avatarText.toString()),\n            trailingIconCss: typeof data === 'object' ? (data.trailingIconCss ? data.trailingIconCss.toString() :\n                this.trailingIconCss.toString()) : (this.trailingIconCss.toString()),\n            enabled: typeof data === 'object' ? (!isNullOrUndefined(data.enabled) ? (data.enabled.toString() === 'false' ? false : true) :\n                chipEnabled) : (chipEnabled),\n            value: typeof data === 'object' ? ((data.value ? data.value.toString() : null)) : null,\n            leadingIconUrl: typeof data === 'object' ? (data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl) :\n                this.leadingIconUrl,\n            trailingIconUrl: typeof data === 'object' ? (data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl) :\n                this.trailingIconUrl\n        };\n        return fields;\n    }\n    elementCreation(fields) {\n        let chipArray = [];\n        if (fields.avatarText || fields.avatarIconCss) {\n            let className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n            let chipAvatarElement = this.createElement('span', { className: className });\n            chipAvatarElement.innerText = fields.avatarText;\n            chipArray.push(chipAvatarElement);\n        }\n        else if (fields.leadingIconCss) {\n            let className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n            let chipIconElement = this.createElement('span', { className: className });\n            chipArray.push(chipIconElement);\n        }\n        else if (fields.leadingIconUrl) {\n            let className = (classNames.avatar + ' ' + 'image-url').trim();\n            let chipIconElement = this.createElement('span', { className: className });\n            chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n            chipArray.push(chipIconElement);\n        }\n        let chipTextElement = this.createElement('span', { className: classNames.text });\n        chipTextElement.innerText = fields.text;\n        chipArray.push(chipTextElement);\n        if (fields.trailingIconCss || (this.chipType() && this.enableDelete)) {\n            let className = (classNames.delete + ' ' +\n                (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n            let chipdeleteElement = this.createElement('span', { className: className });\n            chipArray.push(chipdeleteElement);\n        }\n        else if (fields.trailingIconUrl) {\n            let className = ('trailing-icon-url').trim();\n            let chipIconsElement = this.createElement('span', { className: className });\n            chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n            chipArray.push(chipIconsElement);\n        }\n        return chipArray;\n    }\n    /**\n     * A function that finds chip based on given input.\n     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n     */\n    find(fields) {\n        let chipData;\n        let chipElement = fields instanceof HTMLElement ?\n            fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n        if (chipElement && this.chipType()) {\n            chipData = { text: undefined, index: undefined, element: undefined, data: undefined };\n            chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n            chipData.text = typeof this.chips[chipData.index] === 'object' ?\n                (this.chips[chipData.index].text ?\n                    this.chips[chipData.index].text.toString() : '') :\n                this.chips[chipData.index].toString();\n            chipData.data = this.chips[chipData.index];\n            chipData.element = chipElement;\n        }\n        return chipData;\n    }\n    /**\n     * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n     *  array of number or array of chip model or string data or number data or chip model.\n     * @deprecated\n     */\n    add(chipsData) {\n        if (this.type !== 'chip') {\n            let fieldData = chipsData instanceof Array ?\n                chipsData : [chipsData];\n            this.chips.push(...fieldData);\n            this.chipCreation(fieldData);\n        }\n    }\n    /**\n     * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     */\n    select(fields) {\n        this.onSelect(fields, false);\n    }\n    multiSelection(newProp) {\n        const items = this.element.querySelectorAll('.' + 'e-chip');\n        for (let j = 0; j < newProp.length; j++) {\n            if (typeof newProp[j] === 'string') {\n                for (let k = 0; k < items.length; k++) {\n                    if (newProp[j] !== k) {\n                        if (newProp[j] === items[k].attributes[5].value) {\n                            this.multiSelectedChip.push(k);\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.multiSelectedChip.push(newProp[j]);\n            }\n        }\n    }\n    onSelect(fields, callFromProperty) {\n        if (this.chipType() && this.selection !== 'None') {\n            if (callFromProperty) {\n                let chipElements = this.element.querySelectorAll('.' + classNames.chip);\n                for (let i = 0; i < chipElements.length; i++) {\n                    chipElements[i].setAttribute('aria-selected', 'false');\n                    chipElements[i].classList.remove(classNames.active);\n                }\n            }\n            let fieldData = fields instanceof Array ? fields : [fields];\n            for (let i = 0; i < fieldData.length; i++) {\n                let chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i]\n                    : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n                if (chipElement instanceof HTMLElement) {\n                    this.selectionHandler(chipElement);\n                }\n            }\n        }\n    }\n    /**\n     * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     */\n    remove(fields) {\n        if (this.chipType()) {\n            let fieldData = fields instanceof Array ? fields : [fields];\n            let chipElements = [];\n            let chipCollection = this.element.querySelectorAll('.' + classNames.chip);\n            fieldData.forEach((data) => {\n                let chipElement = data instanceof HTMLElement ? data\n                    : chipCollection[data];\n                if (chipElement instanceof HTMLElement) {\n                    chipElements.push(chipElement);\n                }\n            });\n            chipElements.forEach((element) => {\n                let chips = this.element.querySelectorAll('.' + classNames.chip);\n                let index = Array.prototype.slice.call(chips).indexOf(element);\n                this.deleteHandler(element, index);\n            });\n        }\n    }\n    /**\n     * Returns the selected chip(s) data.\n     */\n    getSelectedChips() {\n        let selectedChips;\n        if (this.chipType() && this.selection !== 'None') {\n            let selectedItems = { texts: [], Indexes: [], data: [], elements: [] };\n            const items = this.element.querySelectorAll('.' + classNames.active);\n            for (let i = 0; i < items.length; i++) {\n                const chip = items[i];\n                selectedItems.elements.push(chip);\n                let index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n                selectedItems.Indexes.push(index);\n                selectedItems.data.push(this.chips[index]);\n                let text = typeof this.chips[index] === 'object' ?\n                    this.chips[index].text ? this.chips[index].text.toString()\n                        : null : this.chips[index].toString();\n                selectedItems.texts.push(text);\n            }\n            let selectedItem = {\n                text: selectedItems.texts[0], index: selectedItems.Indexes[0],\n                data: selectedItems.data[0], element: selectedItems.elements[0]\n            };\n            selectedChips = !isNullOrUndefined(selectedItem.index) ?\n                (this.selection === 'Multiple' ? selectedItems : selectedItem) : undefined;\n        }\n        return selectedChips;\n    }\n    wireEvent(unWireEvent) {\n        if (!unWireEvent) {\n            EventHandler.add(this.element, 'click', this.clickHandler, this);\n            EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n            EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n            EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n        }\n        else {\n            EventHandler.remove(this.element, 'click', this.clickHandler);\n            EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n            EventHandler.remove(this.element, 'keydown', this.keyHandler);\n            EventHandler.remove(this.element, 'keyup', this.keyHandler);\n        }\n    }\n    keyHandler(e) {\n        if (e.target.classList.contains(classNames.chip)) {\n            if (e.type === 'keydown') {\n                if (e.keyCode === 13) {\n                    this.clickHandler(e);\n                }\n                else if (e.keyCode === 46 && this.enableDelete) {\n                    this.clickHandler(e, true);\n                }\n            }\n            else if (e.keyCode === 9) {\n                this.focusInHandler(e.target);\n            }\n        }\n    }\n    focusInHandler(chipWrapper) {\n        if (!chipWrapper.classList.contains(classNames.focused)) {\n            chipWrapper.classList.add(classNames.focused);\n        }\n    }\n    focusOutHandler(e) {\n        let chipWrapper = closest(e.target, '.' + classNames.chip);\n        let focusedElement = !this.chipType() ? (this.element.classList.contains(classNames.focused) ?\n            this.element : null) : this.element.querySelector('.' + classNames.focused);\n        if (chipWrapper && focusedElement) {\n            focusedElement.classList.remove(classNames.focused);\n        }\n    }\n    clickHandler(e, del = false) {\n        let chipWrapper = closest(e.target, '.' + classNames.chip);\n        if (chipWrapper) {\n            let chipDataArgs;\n            if (this.chipType()) {\n                chipDataArgs = this.find(chipWrapper);\n            }\n            else {\n                let index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n                chipDataArgs = {\n                    text: this.innerText ? this.innerText : this.text,\n                    element: chipWrapper, data: this.text, index: index\n                };\n            }\n            chipDataArgs.event = e;\n            chipDataArgs.cancel = false;\n            this.trigger('beforeClick', chipDataArgs, (observedArgs) => {\n                if (!observedArgs.cancel) {\n                    observedArgs.element = isBlazor() ? getElement(observedArgs.element) : observedArgs.element;\n                    this.clickEventHandler(observedArgs.element, e, del);\n                }\n            });\n        }\n    }\n    clickEventHandler(chipWrapper, e, del) {\n        if (this.chipType()) {\n            let chipData = this.find(chipWrapper);\n            chipData.event = e;\n            let deleteElement = e.target.classList.contains(classNames.deleteIcon) ?\n                e.target : (del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined);\n            if (deleteElement && this.enableDelete) {\n                chipData.cancel = false;\n                let deletedItemArgs = chipData;\n                this.trigger('delete', deletedItemArgs, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        observedArgs.element = isBlazor() ? getElement(observedArgs.element) : observedArgs.element;\n                        this.deleteHandler(observedArgs.element, observedArgs.index);\n                    }\n                });\n            }\n            else if (this.selection !== 'None') {\n                this.selectionHandler(chipWrapper);\n                chipData.selected = chipWrapper.classList.contains(classNames.active);\n                let selectedItemArgs = chipData;\n                this.trigger('click', selectedItemArgs);\n            }\n            else {\n                this.focusInHandler(chipWrapper);\n                let clickedItemArgs = chipData;\n                this.trigger('click', clickedItemArgs);\n            }\n        }\n        else {\n            this.focusInHandler(chipWrapper);\n            let clickedItemArgs = {\n                text: this.innerText ? this.innerText : this.text,\n                element: chipWrapper, data: this.text, event: e\n            };\n            this.trigger('click', clickedItemArgs);\n        }\n    }\n    selectionHandler(chipWrapper) {\n        if (this.selection === 'Single') {\n            let activeElement = this.element.querySelector('.' + classNames.active);\n            if (activeElement && activeElement !== chipWrapper) {\n                activeElement.classList.remove(classNames.active);\n                activeElement.setAttribute('aria-selected', 'false');\n            }\n            this.setProperties({ selectedChips: null }, true);\n        }\n        else {\n            this.setProperties({ selectedChips: [] }, true);\n        }\n        if (chipWrapper.classList.contains(classNames.active)) {\n            chipWrapper.classList.remove(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'false');\n        }\n        else {\n            chipWrapper.classList.add(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'true');\n        }\n        this.updateSelectedChips();\n    }\n    updateSelectedChips() {\n        let chipListEle = this.element.querySelectorAll('.e-chip');\n        let chipCollIndex = [];\n        let chipCollValue = [];\n        let chip = null;\n        let value;\n        for (let i = 0; i < chipListEle.length; i++) {\n            let selectedEle = this.element.querySelectorAll('.e-chip')[i];\n            if (selectedEle.getAttribute('aria-selected') === 'true') {\n                value = selectedEle.getAttribute('data-value');\n                if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n                    chip = value ? value : i;\n                    break;\n                }\n                else {\n                    value ? chipCollValue.push(value) : chipCollIndex.push(i);\n                }\n            }\n        }\n        this.setProperties({ selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex }, true);\n    }\n    deleteHandler(chipWrapper, index) {\n        this.allowServerDataBinding = true;\n        this.chips.splice(index, 1);\n        this.setProperties({ chips: this.chips }, true);\n        this.serverDataBind();\n        this.allowServerDataBinding = false;\n        if (!(isBlazor() && this.isServerRendered)) {\n            detach(chipWrapper);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     */\n    destroy() {\n        removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl,\n            classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper,\n            classNames.active, classNames.focused].concat(this.cssClass.toString().split(' ').filter((css) => css)));\n        this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n        this.wireEvent(true);\n        this.rippleFunction();\n        if (isBlazor()) {\n            let chipChildElement = !this.chipType() ? this.element.querySelectorAll('.e-chip-text') :\n                this.element.querySelectorAll('.e-chip');\n            for (let i = 0; i < chipChildElement.length; i++) {\n                if (chipChildElement[i] != null) {\n                    detach(chipChildElement[i]);\n                }\n            }\n        }\n        else {\n            super.destroy();\n            this.element.innerHTML = '';\n            this.element.innerText = this.innerText;\n        }\n    }\n    removeMultipleAttributes(attributes$$1, element) {\n        attributes$$1.forEach((attr) => {\n            element.removeAttribute(attr);\n        });\n    }\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    getModuleName() {\n        return 'chip-list';\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'chips':\n                case 'text':\n                case 'avatarText':\n                case 'avatarIconCss':\n                case 'leadingIconCss':\n                case 'trailingIconCss':\n                case 'selection':\n                case 'enableDelete':\n                case 'enabled':\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        this.isServerRendered = false;\n                        this.refresh();\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'cssClass':\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        if (!this.chipType()) {\n                            removeClass([this.element], oldProp.cssClass.toString().split(' ').filter((css) => css));\n                            addClass([this.element], newProp.cssClass.toString().split(' ').filter((css) => css));\n                        }\n                        else {\n                            this.isServerRendered = false;\n                            this.refresh();\n                            this.isServerRendered = true;\n                        }\n                    }\n                    break;\n                case 'selectedChips':\n                    removeClass(this.element.querySelectorAll('.e-active'), 'e-active');\n                    if (this.selection === 'Multiple') {\n                        this.multiSelectedChip = [];\n                        this.multiSelection(newProp.selectedChips);\n                        this.onSelect(this.multiSelectedChip, true);\n                        this.updateSelectedChips();\n                    }\n                    else {\n                        this.onSelect(newProp.selectedChips, true);\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRtl();\n                    break;\n            }\n        }\n    }\n};\n__decorate$4([\n    Property([])\n], ChipList.prototype, \"chips\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"text\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"avatarText\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"avatarIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"leadingIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"trailingIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"leadingIconUrl\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"trailingIconUrl\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(true)\n], ChipList.prototype, \"enabled\", void 0);\n__decorate$4([\n    Property([])\n], ChipList.prototype, \"selectedChips\", void 0);\n__decorate$4([\n    Property('None')\n], ChipList.prototype, \"selection\", void 0);\n__decorate$4([\n    Property(false)\n], ChipList.prototype, \"enableDelete\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"click\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"beforeClick\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"delete\", void 0);\nChipList = __decorate$4([\n    NotifyPropertyChanges\n], ChipList);\n\n/**\n * Represents ChipList `Chip` model class.\n */\nclass Chip {\n}\n\n/**\n * Chip modules\n */\n\n/**\n * Button all modules\n */\n\nexport { wrapperInitialize, getTextNode, destroy, preRender, createCheckBox, rippleMouseHandler, setHiddenInput, buttonObserver, Button, CheckBox, RadioButton, Switch, classNames, ChipList, Chip };\n//# sourceMappingURL=ej2-buttons.es2015.js.map\n","import { Animation, Base, ChildProperty, Complex, Component, Draggable, Event, EventHandler, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, blazorTemplates, closest, compareElementParent, compile, debounce, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isBlazor, isNullOrUndefined, isVisible, merge, prepend, remove, removeClass, resetBlazorTemplate, rippleEffect, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\n\nlet cssClass = {\n    li: 'e-list-item',\n    ul: 'e-list-parent e-ul',\n    group: 'e-list-group-item',\n    icon: 'e-list-icon',\n    text: 'e-list-text',\n    check: 'e-list-check',\n    checked: 'e-checked',\n    selected: 'e-selected',\n    expanded: 'e-expanded',\n    textContent: 'e-text-content',\n    hasChild: 'e-has-child',\n    level: 'e-level',\n    url: 'e-list-url',\n    collapsible: 'e-icon-collapsible',\n    disabled: 'e-disabled',\n    image: 'e-list-img',\n    iconWrapper: 'e-icon-wrapper',\n    anchorWrap: 'e-anchor-wrap',\n    navigable: 'e-navigable'\n};\n/**\n * Base List Generator\n */\nvar ListBase;\n(function (ListBase) {\n    /**\n     * Default mapped fields.\n     */\n    ListBase.defaultMappedFields = {\n        id: 'id',\n        text: 'text',\n        url: 'url',\n        value: 'value',\n        isChecked: 'isChecked',\n        enabled: 'enabled',\n        expanded: 'expanded',\n        selected: 'selected',\n        iconCss: 'iconCss',\n        child: 'child',\n        isVisible: 'isVisible',\n        hasChildren: 'hasChildren',\n        tooltip: 'tooltip',\n        htmlAttributes: 'htmlAttributes',\n        urlAttributes: 'urlAttributes',\n        imageAttributes: 'imageAttributes',\n        imageUrl: 'imageUrl',\n        groupBy: null\n    };\n    let defaultAriaAttributes = {\n        level: 1,\n        listRole: 'presentation',\n        itemRole: 'presentation',\n        groupItemRole: 'group',\n        itemText: 'list-item',\n        wrapperRole: 'presentation'\n    };\n    let defaultListBaseOptions = {\n        showCheckBox: false,\n        showIcon: false,\n        enableHtmlSanitizer: false,\n        expandCollapse: false,\n        fields: ListBase.defaultMappedFields,\n        ariaAttributes: defaultAriaAttributes,\n        listClass: '',\n        itemClass: '',\n        processSubChild: false,\n        sortOrder: 'None',\n        template: null,\n        groupTemplate: null,\n        headerTemplate: null,\n        expandIconClass: 'e-icon-collapsible',\n        moduleName: 'list',\n        expandIconPosition: 'Right',\n        itemNavigable: false\n    };\n    /**\n     * Function helps to created and return the UL Li element based on your data.\n     * @param  {{[key:string]:Object}[]|string[]} dataSource - Specifies an array of JSON or String data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    function createList(createElement, dataSource, options, isSingleLevel) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let type = typeofData(dataSource).typeof;\n        if (type === 'string' || type === 'number') {\n            return createListFromArray(createElement, dataSource, isSingleLevel, options);\n        }\n        else {\n            return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel);\n        }\n    }\n    ListBase.createList = createList;\n    /**\n     * Function helps to created an element list based on string array input .\n     * @param  {string[]} dataSource - Specifies an array of string data\n     */\n    function createListFromArray(createElement, dataSource, isSingleLevel, options) {\n        let subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options);\n        return generateUL(createElement, subChild, null, options);\n    }\n    ListBase.createListFromArray = createListFromArray;\n    /**\n     * Function helps to created an element list based on string array input .\n     * @param  {string[]} dataSource - Specifies an array of string data\n     */\n    function createListItemFromArray(createElement, dataSource, isSingleLevel, options) {\n        let subChild = [];\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let id = generateId(); // generate id for drop-down-list option.\n        for (let i = 0; i < dataSource.length; i++) {\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            let li;\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    options: curOpt\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (isSingleLevel) {\n                li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);\n            }\n            else {\n                li = generateLI(createElement, dataSource[i], undefined, null, null, options);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    item: li,\n                    options: curOpt\n                };\n                curOpt.itemCreated(curData);\n            }\n            subChild.push(li);\n        }\n        return subChild;\n    }\n    ListBase.createListItemFromArray = createListItemFromArray;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let id;\n        let checkboxElement = [];\n        if (level) {\n            ariaAttributes.level = level;\n        }\n        let child = [];\n        let li;\n        let anchorElement;\n        if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) &&\n            !typeofData(dataSource).item.hasOwnProperty(fields.id)) {\n            id = generateId(); // generate id for drop-down-list option.\n        }\n        for (let i = 0; i < dataSource.length; i++) {\n            let fieldData = getFieldValues(dataSource[i], fields);\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreating(curData);\n            }\n            let curItem = dataSource[i];\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], fields);\n            }\n            if (fieldData.hasOwnProperty(fields.id) && !isNullOrUndefined(fieldData[fields.id])) {\n                id = fieldData[fields.id];\n            }\n            let innerEle = [];\n            if (curOpt.showCheckBox) {\n                if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {\n                    checkboxElement.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n                else {\n                    innerEle.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n            }\n            if (isSingleLevel === true) {\n                if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {\n                    innerEle.push(createElement('span', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] }));\n                }\n                li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, (curItem.hasOwnProperty('isHeader') &&\n                    curItem.isHeader) ? true : false, id, i, options);\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n            }\n            else {\n                li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options);\n                li.classList.add(cssClass.level + '-' + ariaAttributes.level);\n                li.setAttribute('aria-level', ariaAttributes.level.toString());\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (fieldData.hasOwnProperty(fields.tooltip)) {\n                    li.setAttribute('title', fieldData[fields.tooltip]);\n                }\n                if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                    setAttribute(li, fieldData[fields.htmlAttributes]);\n                }\n                if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {\n                    li.classList.add(cssClass.disabled);\n                }\n                if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {\n                    li.style.display = 'none';\n                }\n                if (fieldData.hasOwnProperty(fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl])\n                    && !curOpt.template) {\n                    let attr = { src: fieldData[fields.imageUrl] };\n                    merge(attr, fieldData[fields.imageAttributes]);\n                    let imageElemnt = createElement('img', { className: cssClass.image, attrs: attr });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', imageElemnt);\n                    }\n                    else {\n                        prepend([imageElemnt], li.firstElementChild);\n                    }\n                }\n                if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) &&\n                    !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {\n                    let iconElement;\n                    iconElement = createElement('div', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', iconElement);\n                    }\n                    else {\n                        prepend([iconElement], li.firstElementChild);\n                    }\n                }\n                if (innerEle.length) {\n                    prepend(innerEle, li.firstElementChild);\n                }\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n                processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);\n            }\n            if (anchorElement) {\n                addClass([li], [cssClass.navigable]);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    item: li,\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreated(curData);\n            }\n            checkboxElement = [];\n            child.push(li);\n        }\n        return child;\n    }\n    ListBase.createListItemFromJson = createListItemFromJson;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    function createListFromJson(createElement, dataSource, options, level, isSingleLevel) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel);\n        return generateUL(createElement, li, curOpt.listClass, options);\n    }\n    ListBase.createListFromJson = createListFromJson;\n    /**\n     * Return the next or previous visible element.\n     * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.\n     * @param  {Element} li - An element to find next or previous after this element.\n     * @param  {boolean} isPrevious? - Specify when the need get previous element from array.\n     */\n    function getSiblingLI(elementArray, element, isPrevious) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        if (!elementArray || !elementArray.length) {\n            return void 0;\n        }\n        let siblingLI;\n        let liIndex;\n        let liCollections = Array.prototype.slice.call(elementArray);\n        if (element) {\n            liIndex = indexOf(element, liCollections);\n        }\n        else {\n            liIndex = (isPrevious === true ? liCollections.length : -1);\n        }\n        siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];\n        while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {\n            liIndex = liIndex + (isPrevious === true ? -1 : 1);\n            siblingLI = liCollections[liIndex];\n        }\n        return siblingLI;\n    }\n    ListBase.getSiblingLI = getSiblingLI;\n    /**\n     * Return the index of the li element\n     * @param  {Element} item - An element to find next or previous after this element.\n     * @param  {Element[]|NodeList} elementArray - An element array to find index of given li.\n     */\n    function indexOf(item, elementArray) {\n        if (!elementArray || !item) {\n            return void 0;\n        }\n        else {\n            let liCollections = elementArray;\n            liCollections = Array.prototype.slice.call(elementArray);\n            return liCollections.indexOf(item);\n        }\n    }\n    ListBase.indexOf = indexOf;\n    /**\n     * Returns the grouped data from given dataSource.\n     * @param  {{[key:string]:Object}[]} dataSource - The JSON data which is necessary to process.\n     * @param  {FieldsMapping} fields - Fields that are mapped from the data source.\n     * @param  {SortOrder='None'} sortOrder- Specifies final result sort order.\n     */\n    function groupDataSource(dataSource, fields, sortOrder = 'None') {\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let cusQuery = new Query().group(curFields.groupBy);\n        // need to remove once sorting issues fixed in DataManager\n        cusQuery = addSorting(sortOrder, 'key', cusQuery);\n        let ds = getDataSource(dataSource, cusQuery);\n        dataSource = [];\n        for (let j = 0; j < ds.length; j++) {\n            let itemObj = ds[j].items;\n            let grpItem = {};\n            let hdr = 'isHeader';\n            grpItem[curFields.text] = ds[j].key;\n            grpItem[hdr] = true;\n            let newtext = curFields.text;\n            if (newtext === 'id') {\n                newtext = 'text';\n                grpItem[newtext] = ds[j].key;\n            }\n            grpItem._id = 'group-list-item-' + (ds[j].key ?\n                ds[j].key.toString().trim() : 'undefined');\n            grpItem.items = itemObj;\n            dataSource.push(grpItem);\n            for (let k = 0; k < itemObj.length; k++) {\n                dataSource.push(itemObj[k]);\n            }\n        }\n        return dataSource;\n    }\n    ListBase.groupDataSource = groupDataSource;\n    /**\n     * Returns a sorted query object.\n     * @param  {SortOrder} sortOrder - Specifies that sort order.\n     * @param  {string} sortBy - Specifies sortBy fields.\n     * @param  {Query=new Query()} query - Pass if any existing query.\n     */\n    function addSorting(sortOrder, sortBy, query = new Query()) {\n        if (sortOrder === 'Ascending') {\n            query.sortBy(sortBy, 'ascending', true);\n        }\n        else if (sortOrder === 'Descending') {\n            query.sortBy(sortBy, 'descending', true);\n        }\n        else {\n            for (let i = 0; i < query.queries.length; i++) {\n                if (query.queries[i].fn === 'onSortBy') {\n                    query.queries.splice(i, 1);\n                }\n            }\n        }\n        return query;\n    }\n    ListBase.addSorting = addSorting;\n    /**\n     * Return an array of JSON Data that processed based on queries.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {Query} query - Specifies query that need to process.\n     */\n    function getDataSource(dataSource, query) {\n        // tslint:disable-next-line\n        return new DataManager(dataSource)\n            .executeLocal(query);\n    }\n    ListBase.getDataSource = getDataSource;\n    /**\n     * Created JSON data based the UL and LI element\n     * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON\n     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n     */\n    function createJsonFromElement(element, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        let curEle = element.cloneNode(true);\n        let jsonAr = [];\n        curEle.classList.add('json-parent');\n        let childs = curEle.querySelectorAll('.json-parent>li');\n        curEle.classList.remove('json-parent');\n        for (let i = 0; i < childs.length; i++) {\n            let li = childs[i];\n            let anchor = li.querySelector('a');\n            let ul = li.querySelector('ul');\n            let json = {};\n            let childNodes = anchor ? anchor.childNodes : li.childNodes;\n            let keys = Object.keys(childNodes);\n            for (let i = 0; i < childNodes.length; i++) {\n                if (!(childNodes[Number(keys[i])]).hasChildNodes()) {\n                    json[fields.text] = childNodes[Number(keys[i])].textContent;\n                }\n            }\n            let attributes$$1 = getAllAttributes(li);\n            if (attributes$$1.id) {\n                json[fields.id] = attributes$$1.id;\n                delete attributes$$1.id;\n            }\n            else {\n                json[fields.id] = generateId();\n            }\n            if (Object.keys(attributes$$1).length) {\n                json[fields.htmlAttributes] = attributes$$1;\n            }\n            if (anchor) {\n                attributes$$1 = getAllAttributes(anchor);\n                if (Object.keys(attributes$$1).length) {\n                    json[fields.urlAttributes] = attributes$$1;\n                }\n            }\n            if (ul) {\n                json[fields.child] = createJsonFromElement(ul, options);\n            }\n            jsonAr.push(json);\n        }\n        return jsonAr;\n    }\n    ListBase.createJsonFromElement = createJsonFromElement;\n    function typeofData(data) {\n        let match = { typeof: null, item: null };\n        for (let i = 0; i < data.length; i++) {\n            if (!isNullOrUndefined(data[i])) {\n                return match = { typeof: typeof data[i], item: data[i] };\n            }\n        }\n        return match;\n    }\n    function setAttribute(element, elementAttributes) {\n        let attr = {};\n        merge(attr, elementAttributes);\n        if (attr.class) {\n            addClass([element], attr.class.split(' '));\n            delete attr.class;\n        }\n        attributes(element, attr);\n    }\n    function getAllAttributes(element) {\n        let attributes$$1 = {};\n        let attr = element.attributes;\n        for (let index = 0; index < attr.length; index++) {\n            attributes$$1[attr[index].nodeName] = attr[index].nodeValue;\n        }\n        return attributes$$1;\n    }\n    /**\n     * Created UL element from content template.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n     */\n    function renderContentTemplate(createElement, template, dataSource, fields, options) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        let ulElement = createElement('ul', { className: cssClass.ul, attrs: { role: 'presentation' } });\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let compiledString = compile(template);\n        let liCollection = [];\n        let id = generateId(); // generate id for drop-down-list option.\n        for (let i = 0; i < dataSource.length; i++) {\n            let fieldData = getFieldValues(dataSource[i], curFields);\n            let curItem = dataSource[i];\n            let isHeader = curItem.isHeader;\n            let value = fieldData[curFields.value];\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], curFields);\n                value = fieldData[curFields.value];\n            }\n            let li = createElement('li', {\n                id: id + '-' + i,\n                className: isHeader ? cssClass.group : cssClass.li, attrs: { role: 'presentation' }\n            });\n            if (isHeader) {\n                li.innerText = fieldData[curFields.text];\n            }\n            else {\n                const currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;\n                append(compiledString(curItem, null, null, currentID, !!curOpt.isStringTemplate), li);\n                li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n                li.setAttribute('role', 'option');\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    item: li,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreated(curData);\n            }\n            liCollection.push(li);\n        }\n        append(liCollection, ulElement);\n        return ulElement;\n    }\n    ListBase.renderContentTemplate = renderContentTemplate;\n    /**\n     * Created header items from group template.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.\n     * @param  {Element[]} headerItems? - Specifies listbase header items.\n     */\n    function renderGroupTemplate(groupTemplate, groupDataSource, fields, headerItems, options) {\n        let compiledString = compile(groupTemplate);\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let category = curFields.groupBy;\n        for (let header of headerItems) {\n            let headerData = {};\n            headerData[category] = header.textContent;\n            header.innerHTML = '';\n            append(compiledString(headerData, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);\n        }\n        return headerItems;\n    }\n    ListBase.renderGroupTemplate = renderGroupTemplate;\n    function generateId() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    ListBase.generateId = generateId;\n    function processSubChild(createElement, fieldData, fields, ds, options, element, level) {\n        // Get SubList\n        let subDS = fieldData[fields.child] || [];\n        let hasChildren = fieldData[fields.hasChildren];\n        //Create Sub child\n        if (subDS.length) {\n            hasChildren = true;\n            element.classList.add(cssClass.hasChild);\n            if (options.processSubChild) {\n                let subLi = createListFromJson(createElement, subDS, options, ++level);\n                element.appendChild(subLi);\n            }\n        }\n        // Create expand and collapse node\n        if (!!options.expandCollapse && hasChildren && !options.template) {\n            element.firstElementChild.classList.add(cssClass.iconWrapper);\n            let expandElement = options.expandIconPosition === 'Left' ? prepend : append;\n            expandElement([createElement('div', { className: 'e-icons ' + options.expandIconClass })], element.querySelector('.' + cssClass.textContent));\n        }\n    }\n    function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let text = item;\n        let value = item;\n        let dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {\n            dataSource = item;\n            text = (typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number') ?\n                fieldData[fields.text] : (fieldData[fields.text] || '');\n            value = fieldData[fields.value];\n        }\n        let elementID;\n        if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id])\n            && fieldData[fields.id] !== '') {\n            elementID = id;\n        }\n        else {\n            elementID = id + '-' + index;\n        }\n        let li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            id: elementID, attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {\n            li.classList.add(cssClass.disabled);\n        }\n        if (grpLI) {\n            li.innerText = text;\n        }\n        else {\n            li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n            li.setAttribute('role', 'option');\n            if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                setAttribute(li, fieldData[fields.htmlAttributes]);\n            }\n            if (innerElements.length && !curOpt.itemNavigable) {\n                append(innerElements, li);\n            }\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));\n            }\n            else {\n                if (innerElements.length && curOpt.itemNavigable) {\n                    append(innerElements, li);\n                }\n                li.appendChild(document.createTextNode(text));\n            }\n        }\n        return li;\n    }\n    function getModuleClass(moduleName) {\n        let moduleClass;\n        return moduleClass = {\n            li: `e-${moduleName}-item`,\n            ul: `e-${moduleName}-parent e-ul`,\n            group: `e-${moduleName}-group-item`,\n            icon: `e-${moduleName}-icon`,\n            text: `e-${moduleName}-text`,\n            check: `e-${moduleName}-check`,\n            checked: 'e-checked',\n            selected: 'e-selected',\n            expanded: 'e-expanded',\n            textContent: 'e-text-content',\n            hasChild: 'e-has-child',\n            level: 'e-level',\n            url: `e-${moduleName}-url`,\n            collapsible: 'e-icon-collapsible',\n            disabled: 'e-disabled',\n            image: `e-${moduleName}-img`,\n            iconWrapper: 'e-icon-wrapper',\n            anchorWrap: 'e-anchor-wrap',\n            navigable: 'e-navigable',\n        };\n    }\n    function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {\n        let fieldData = getFieldValues(dataSource, fields);\n        let attr = { href: fieldData[fields.url] };\n        if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {\n            merge(attr, fieldData[fields.urlAttributes]);\n            attr.href = fieldData[fields.url] ? fieldData[fields.url] :\n                fieldData[fields.urlAttributes].href;\n        }\n        let anchorTag;\n        if (!isFullNavigation) {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url, innerHTML: text });\n        }\n        else {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url });\n            let anchorWrapper = createElement('div', { className: cssClass.anchorWrap });\n            if (innerElements && innerElements.length) {\n                append(innerElements, anchorWrapper);\n            }\n            anchorWrapper.appendChild(document.createTextNode(text));\n            append([anchorWrapper], anchorTag);\n        }\n        setAttribute(anchorTag, attr);\n        return anchorTag;\n    }\n    /* tslint:disable:align */\n    function generateLI(createElement, item, fieldData, fields, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let text = item;\n        let uID;\n        let grpLI;\n        let dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number') {\n            dataSource = item;\n            text = fieldData[fields.text] || '';\n            // tslint:disable-next-line\n            uID = (isNullOrUndefined(fieldData['_id'])) ? fieldData[fields.id] : fieldData['_id'];\n            grpLI = (item.hasOwnProperty('isHeader') && item.isHeader)\n                ? true : false;\n        }\n        if (options && options.enableHtmlSanitizer) {\n            text = SanitizeHtmlHelper.sanitize(text);\n        }\n        let li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        !isNullOrUndefined(uID) ? li.setAttribute('data-uid', uID) : li.setAttribute('data-uid', generateId());\n        const blazId = 'BlazId';\n        if (options && !!options.removeBlazorID\n            && typeof item === 'object'\n            && item.hasOwnProperty(blazId)) {\n            delete item[blazId];\n        }\n        if (grpLI && options && options.groupTemplate) {\n            let compiledString = compile(options.groupTemplate);\n            append(compiledString(item, null, null, curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);\n        }\n        else if (!grpLI && options && options.template) {\n            let compiledString = compile(options.template);\n            append(compiledString(item, null, null, curOpt.templateID, !!curOpt.isStringTemplate), li);\n        }\n        else {\n            let innerDiv = createElement('div', {\n                className: cssClass.textContent,\n                attrs: (ariaAttributes.wrapperRole !== '' ? { role: ariaAttributes.wrapperRole } : {})\n            });\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));\n            }\n            else {\n                let element = createElement('span', {\n                    className: cssClass.text,\n                    attrs: (ariaAttributes.itemText !== '' ? { role: ariaAttributes.itemText } : {})\n                });\n                if (options && options.enableHtmlSanitizer) {\n                    element.innerText = SanitizeHtmlHelper.sanitize(text);\n                }\n                else {\n                    element.innerHTML = text;\n                }\n                innerDiv.appendChild(element);\n            }\n            li.appendChild(innerDiv);\n        }\n        return li;\n    }\n    /**\n     * Returns UL element based on the given LI element.\n     * @param  {HTMLElement[]} liElement - Specifies array of LI element.\n     * @param  {string} className? - Specifies class name that need to be added in UL element.\n     * @param  {ListBaseOptions} options? - Specifies ListBase options.\n     */\n    function generateUL(createElement, liElement, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let ulElement = createElement('ul', {\n            className: cssClass.ul + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.listRole !== '' ? { role: ariaAttributes.listRole } : {})\n        });\n        append(liElement, ulElement);\n        return ulElement;\n    }\n    ListBase.generateUL = generateUL;\n    /**\n     * Returns LI element with additional DIV tag based on the given LI element.\n     * @param  {liElement} liElement - Specifies LI element.\n     * @param  {string} className? - Specifies class name that need to be added in created DIV element.\n     * @param  {ListBaseOptions} options? - Specifies ListBase options.\n     */\n    function generateIcon(createElement, liElement, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let expandElement = curOpt.expandIconPosition === 'Left' ? prepend : append;\n        expandElement([createElement('div', {\n                className: 'e-icons ' + curOpt.expandIconClass + ' ' +\n                    (isNullOrUndefined(className) ? '' : className)\n            })], liElement.querySelector('.' + cssClass.textContent));\n        return liElement;\n    }\n    ListBase.generateIcon = generateIcon;\n})(ListBase || (ListBase = {}));\n/**\n * Used to get dataSource item from complex data using fields.\n * @param {{[key:string]:Object}|string[]|string} dataSource - Specifies an  JSON or String data.\n * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.\n */\nfunction getFieldValues(dataItem, fields) {\n    let fieldData = {};\n    if (isNullOrUndefined(dataItem) || typeof (dataItem) === 'string' || typeof (dataItem) === 'number'\n        || !isNullOrUndefined(dataItem.isHeader)) {\n        return dataItem;\n    }\n    else {\n        for (let field of Object.keys(fields)) {\n            let dataField = fields[field];\n            let value = !isNullOrUndefined(dataField) &&\n                typeof (dataField) === 'string' ? getValue(dataField, dataItem) : undefined;\n            if (!isNullOrUndefined(value)) {\n                fieldData[dataField] = value;\n            }\n        }\n    }\n    return fieldData;\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];\nconst effectsConfig = {\n    'None': [],\n    'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],\n    'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],\n    'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],\n    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\nconst effectsRTLConfig = {\n    'None': [],\n    'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],\n    'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],\n    'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],\n    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\n// don't use space in classnames.\nconst classNames = {\n    root: 'e-listview',\n    hover: 'e-hover',\n    selected: 'e-active',\n    focused: 'e-focused',\n    parentItem: 'e-list-parent',\n    listItem: 'e-list-item',\n    listIcon: 'e-list-icon',\n    textContent: 'e-text-content',\n    listItemText: 'e-list-text',\n    groupListItem: 'e-list-group-item',\n    hasChild: 'e-has-child',\n    view: 'e-view',\n    header: 'e-list-header',\n    headerText: 'e-headertext',\n    headerTemplateText: 'e-headertemplate-text',\n    text: 'e-text',\n    disable: 'e-disabled',\n    content: 'e-content',\n    icon: 'e-icons',\n    backIcon: 'e-icon-back',\n    checkboxWrapper: 'e-checkbox-wrapper',\n    checkbox: 'e-checkbox',\n    checked: 'e-check',\n    checklist: 'e-checklist',\n    checkboxIcon: 'e-frame',\n    checkboxRight: 'e-checkbox-right',\n    checkboxLeft: 'e-checkbox-left',\n    listviewCheckbox: 'e-listview-checkbox',\n    itemCheckList: 'e-checklist',\n    virtualElementContainer: 'e-list-virtualcontainer'\n};\nconst LISTVIEW_TEMPLATE_PROPERTY = 'Template';\nconst LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst swipeVelocity = 0.5;\n/**\n * Represents the field settings of the ListView.\n */\nclass FieldSettings extends ChildProperty {\n}\n__decorate([\n    Property('id')\n], FieldSettings.prototype, \"id\", void 0);\n__decorate([\n    Property('text')\n], FieldSettings.prototype, \"text\", void 0);\n__decorate([\n    Property('isChecked')\n], FieldSettings.prototype, \"isChecked\", void 0);\n__decorate([\n    Property('isVisible')\n], FieldSettings.prototype, \"isVisible\", void 0);\n__decorate([\n    Property('enabled')\n], FieldSettings.prototype, \"enabled\", void 0);\n__decorate([\n    Property('iconCss')\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate([\n    Property('child')\n], FieldSettings.prototype, \"child\", void 0);\n__decorate([\n    Property('tooltip')\n], FieldSettings.prototype, \"tooltip\", void 0);\n__decorate([\n    Property('groupBy')\n], FieldSettings.prototype, \"groupBy\", void 0);\n__decorate([\n    Property('text')\n], FieldSettings.prototype, \"sortBy\", void 0);\n__decorate([\n    Property('htmlAttributes')\n], FieldSettings.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property('tableName')\n], FieldSettings.prototype, \"tableName\", void 0);\n/**\n * Represents the EJ2 ListView control.\n * ```html\n * <div id=\"listview\">\n * <ul>\n * <li>Favorite</li>\n * <li>Documents</li>\n * <li>Downloads</li>\n * </ul>\n * </div>\n * ```\n * ```typescript\n *   var listviewObject = new ListView({});\n *   listviewObject.appendTo(\"#listview\");\n * ```\n */\nlet ListView = class ListView extends Component {\n    /**\n     * Constructor for creating the widget\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.itemReRender = false;\n        this.previousSelectedItems = [];\n        this.hiddenItems = [];\n        this.enabledItems = [];\n        this.disabledItems = [];\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'htmlAttributes':\n                    this.setHTMLAttribute();\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'enable':\n                    this.setEnable();\n                    break;\n                case 'width':\n                case 'height':\n                    this.setSize();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n                case 'fields':\n                    this.listBaseOption.fields = this.fields.properties;\n                    if (this.enableVirtualization) {\n                        if (!(this.isServerRendered && isBlazor())) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'headerTitle':\n                    if (!this.curDSLevel.length) {\n                        this.header(this.headerTitle, false);\n                    }\n                    break;\n                case 'query':\n                    if (this.enableVirtualization) {\n                        if (!(isBlazor() && this.isServerRendered)) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'showHeader':\n                    this.header(this.headerTitle, false);\n                    break;\n                case 'enableVirtualization':\n                    if (!isNullOrUndefined(this.contentContainer)) {\n                        detach(this.contentContainer);\n                    }\n                    this.refresh();\n                    break;\n                case 'showCheckBox':\n                case 'checkBoxPosition':\n                    if (!isBlazor() || !this.isServerRendered) {\n                        if (this.enableVirtualization) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                        else {\n                            this.setCheckbox();\n                        }\n                    }\n                    break;\n                case 'dataSource':\n                    if (this.enableVirtualization) {\n                        if (!(this.isServerRendered && isBlazor())) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'sortOrder':\n                case 'showIcon':\n                    if (isBlazor() && this.isServerRendered) {\n                        // tslint:disable\n                        this.interopAdaptor.invokeMethodAsync('ItemSorting');\n                        //tslint:enable\n                    }\n                    else {\n                        if (this.enableVirtualization) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                        else {\n                            this.listBaseOption.showIcon = this.showIcon;\n                            this.curViewDS = this.getSubDS();\n                            this.resetCurrentList();\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    // Model Changes\n    setHTMLAttribute() {\n        if (Object.keys(this.htmlAttributes).length) {\n            attributes(this.element, this.htmlAttributes);\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' ').filter((css) => css));\n        }\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' ').filter((css) => css));\n        }\n    }\n    setSize() {\n        this.element.style.height = formatUnit(this.height);\n        this.element.style.width = formatUnit(this.width);\n        this.isWindow = this.element.clientHeight ? false : true;\n    }\n    setEnable() {\n        this.enableElement(this.element, this.enable);\n    }\n    setEnableRTL() {\n        if (this.enableRtl) {\n            this.element.classList.add('e-rtl');\n        }\n        else {\n            this.element.classList.remove('e-rtl');\n        }\n    }\n    enableElement(element, isEnabled) {\n        if (isEnabled) {\n            element.classList.remove(classNames.disable);\n        }\n        else {\n            element.classList.add(classNames.disable);\n        }\n    }\n    // Support Component Functions\n    header(text, showBack) {\n        if (isBlazor() && this.isServerRendered) {\n            let args = { HeaderText: text, BackButton: showBack };\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('HeaderTitle', args);\n            // tslint:disable\n        }\n        else {\n            if (this.headerEle === undefined && this.showHeader) {\n                if (this.enableHtmlSanitizer) {\n                    this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);\n                }\n                this.headerEle = this.createElement('div', { className: classNames.header });\n                let innerHeaderEle = this.createElement('span', { className: classNames.headerText, innerHTML: this.headerTitle });\n                let textEle = this.createElement('div', { className: classNames.text, innerHTML: innerHeaderEle.outerHTML });\n                let hedBackButton = this.createElement('div', {\n                    className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',\n                    attrs: { style: 'display:none;' }\n                });\n                this.headerEle.appendChild(hedBackButton);\n                this.headerEle.appendChild(textEle);\n                if (this.headerTemplate) {\n                    let compiledString = compile(this.headerTemplate);\n                    let headerTemplateEle = this.createElement('div', { className: classNames.headerTemplateText });\n                    append(compiledString({}, null, null, this.LISTVIEW_HEADERTEMPLATE_ID), headerTemplateEle);\n                    append([headerTemplateEle], this.headerEle);\n                    this.updateBlazorTemplates(false, true, true);\n                }\n                if (this.headerTemplate && this.headerTitle) {\n                    textEle.classList.add('header');\n                }\n                this.element.classList.add('e-has-header');\n                prepend([this.headerEle], this.element);\n            }\n            else if (this.headerEle) {\n                if (this.showHeader) {\n                    this.headerEle.style.display = '';\n                    let textEle = this.headerEle.querySelector('.' + classNames.headerText);\n                    let hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);\n                    if (this.enableHtmlSanitizer) {\n                        text = SanitizeHtmlHelper.sanitize(text);\n                    }\n                    textEle.innerHTML = text;\n                    if (this.headerTemplate && showBack) {\n                        textEle.parentElement.classList.remove('header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');\n                    }\n                    if (this.headerTemplate && !showBack) {\n                        textEle.parentElement.classList.add('header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');\n                    }\n                    if (showBack === true) {\n                        hedBackButton.style.display = '';\n                    }\n                    else {\n                        hedBackButton.style.display = 'none';\n                    }\n                }\n                else {\n                    this.headerEle.style.display = 'none';\n                }\n            }\n        }\n    }\n    // Animation Related Functions\n    switchView(fromView, toView, reverse) {\n        if (fromView && toView) {\n            let fPos = fromView.style.position;\n            let overflow = (this.element.style.overflow !== 'hidden') ? this.element.style.overflow : '';\n            fromView.style.position = 'absolute';\n            fromView.classList.add('e-view');\n            let anim;\n            let duration = this.animation.duration;\n            if (this.animation.effect) {\n                anim = (this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect]);\n            }\n            else {\n                let slideLeft = 'SlideLeft';\n                anim = effectsConfig[slideLeft];\n                reverse = this.enableRtl;\n                duration = 0;\n            }\n            this.element.style.overflow = 'hidden';\n            this.aniObj.animate(fromView, {\n                name: (reverse === true ? anim[0] : anim[1]),\n                duration: duration,\n                timingFunction: this.animation.easing,\n                end: (model) => {\n                    fromView.style.display = 'none';\n                    this.element.style.overflow = overflow;\n                    fromView.style.position = fPos;\n                    fromView.classList.remove('e-view');\n                }\n            });\n            toView.style.display = '';\n            this.aniObj.animate(toView, {\n                name: (reverse === true ? anim[2] : anim[3]),\n                duration: duration,\n                timingFunction: this.animation.easing,\n                end: () => {\n                    this.trigger('actionComplete');\n                }\n            });\n            this.curUL = toView;\n        }\n    }\n    preRender() {\n        this.listBaseOption = {\n            template: this.template,\n            headerTemplate: this.headerTemplate,\n            groupTemplate: this.groupTemplate, expandCollapse: true, listClass: '',\n            ariaAttributes: {\n                itemRole: 'option', listRole: 'presentation', itemText: '',\n                groupItemRole: 'group', wrapperRole: 'presentation'\n            },\n            fields: this.fields.properties, sortOrder: this.sortOrder, showIcon: this.showIcon,\n            itemCreated: this.renderCheckbox.bind(this),\n            templateID: `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`,\n            groupTemplateID: `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`,\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            removeBlazorID: true\n        };\n        this.initialization();\n    }\n    updateLiElementHeight() {\n        let liContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n        if (liContainer.children[0]) {\n            this.liElementHeight = liContainer.children[0].getBoundingClientRect().height;\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight);\n            // tslint:enable\n        }\n    }\n    initialization() {\n        if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n            let ulContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n            if (ulContainer !== null) {\n                if (this.height === '') {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('SetComponentHeight', window.innerHeight);\n                    // tslint:enable\n                    this.isWindow = true;\n                    ulContainer.scrollIntoView();\n                }\n                if (this.height.toString().indexOf('%') !== -1) {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('SetContainerHeight', this.element.getBoundingClientRect().height.toString());\n                    // tslint:enable\n                }\n                if (ulContainer.children[0]) {\n                    this.liElementHeight = ulContainer.children[0].getBoundingClientRect().height;\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight);\n                    // tslint:enable\n                }\n            }\n        }\n        this.curDSLevel = [];\n        this.animateOptions = {};\n        this.curViewDS = [];\n        this.currentLiElements = [];\n        this.isNestedList = false;\n        this.selectedData = [];\n        this.selectedId = [];\n        this.LISTVIEW_TEMPLATE_ID = `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`;\n        this.LISTVIEW_GROUPTEMPLATE_ID = `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`;\n        this.LISTVIEW_HEADERTEMPLATE_ID = `${this.element.id}${LISTVIEW_HEADERTEMPLATE_PROPERTY}`;\n        this.aniObj = new Animation(this.animateOptions);\n        this.removeElement(this.curUL);\n        this.removeElement(this.ulElement);\n        this.removeElement(this.headerEle);\n        this.removeElement(this.contentContainer);\n        this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;\n    }\n    renderCheckbox(args) {\n        if (args.item.classList.contains(classNames.hasChild)) {\n            this.isNestedList = true;\n        }\n        if (this.showCheckBox && this.isValidLI(args.item)) {\n            let checkboxElement;\n            let fieldData;\n            checkboxElement = createCheckBox(this.createElement, false, {\n                checked: false, enableRtl: this.enableRtl,\n                cssClass: classNames.listviewCheckbox\n            });\n            checkboxElement.setAttribute('role', 'checkbox');\n            let frameElement = checkboxElement.querySelector('.' + classNames.checkboxIcon);\n            args.item.classList.add(classNames.itemCheckList);\n            args.item.firstElementChild.classList.add(classNames.checkbox);\n            if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {\n                fieldData = getFieldValues(args.curData, this.listBaseOption.fields);\n                if (fieldData[this.listBaseOption.fields.isChecked]) {\n                    this.checkInternally(args, checkboxElement);\n                }\n            }\n            else if (((typeof this.dataSource[0] === 'string' ||\n                typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1)) {\n                this.checkInternally(args, checkboxElement);\n            }\n            checkboxElement.setAttribute('aria-checked', frameElement.classList.contains(classNames.checked) ? 'true' : 'false');\n            if (this.checkBoxPosition === 'Left') {\n                checkboxElement.classList.add(classNames.checkboxLeft);\n                args.item.firstElementChild.classList.add(classNames.checkboxLeft);\n                args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);\n            }\n            else {\n                checkboxElement.classList.add(classNames.checkboxRight);\n                args.item.firstElementChild.classList.add(classNames.checkboxRight);\n                args.item.firstElementChild.appendChild(checkboxElement);\n            }\n            this.currentLiElements.push(args.item);\n            this.checkBoxPosition === 'Left' ? this.virtualCheckBox = args.item.firstElementChild.children[0] :\n                this.virtualCheckBox = args.item.firstElementChild.lastElementChild;\n        }\n    }\n    checkInternally(args, checkboxElement) {\n        args.item.classList.add(classNames.selected);\n        args.item.setAttribute('aria-selected', 'true');\n        checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);\n        checkboxElement.setAttribute('aria-checked', 'true');\n    }\n    /**\n     * Checks the specific list item by passing the unchecked fields as an argument to this method.\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n    checkItem(item) {\n        this.toggleCheckBase(item, true);\n    }\n    toggleCheckBase(item, checked) {\n        if (this.showCheckBox) {\n            let liElement = item;\n            if (item instanceof Object && item.constructor !== HTMLLIElement) {\n                liElement = this.getLiFromObjOrElement(item);\n            }\n            if (!isNullOrUndefined(liElement)) {\n                let checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);\n                checked ? liElement.classList.add(classNames.selected) : liElement.classList.remove(classNames.selected);\n                liElement.setAttribute('aria-selected', checked ? 'true' : 'false');\n                checked ? checkboxIcon.classList.add(classNames.checked) : checkboxIcon.classList.remove(classNames.checked);\n                checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');\n            }\n            this.setSelectedItemData(liElement);\n        }\n    }\n    /**\n     * Uncheck the specific list item by passing the checked fields as an argument to this method.\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n    uncheckItem(item) {\n        this.toggleCheckBase(item, false);\n    }\n    /**\n     * Checks all the unchecked items in the ListView.\n     */\n    checkAllItems() {\n        this.toggleAllCheckBase(true);\n    }\n    /**\n     * Uncheck all the checked items in ListView.\n     */\n    uncheckAllItems() {\n        this.toggleAllCheckBase(false);\n    }\n    toggleAllCheckBase(checked) {\n        if (this.showCheckBox) {\n            for (let i = 0; i < this.liCollection.length; i++) {\n                let checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);\n                if (checkIcon) {\n                    if (checked) {\n                        if (!checkIcon.classList.contains(classNames.checked)) {\n                            this.checkItem(this.liCollection[i]);\n                        }\n                    }\n                    else {\n                        if (checkIcon.classList.contains(classNames.checked)) {\n                            this.uncheckItem(this.liCollection[i]);\n                        }\n                    }\n                }\n            }\n            if (this.enableVirtualization) {\n                this.virtualizationModule.checkedItem(checked);\n            }\n        }\n    }\n    setCheckbox() {\n        if (this.showCheckBox) {\n            let liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n            let args = {\n                item: undefined, curData: undefined, dataSource: undefined, fields: undefined,\n                options: undefined, text: ''\n            };\n            for (let i = 0; i < liCollection.length; i++) {\n                let element = liCollection[i];\n                args.item = element;\n                args.curData = this.getItemData(element);\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\n                    this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n                }\n                this.renderCheckbox(args);\n                if (args.item.classList.contains(classNames.selected)) {\n                    this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n                }\n            }\n        }\n        else {\n            let liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));\n            for (let i = 0; i < liCollection.length; i++) {\n                let element = liCollection[i];\n                element.classList.remove(classNames.selected);\n                element.firstElementChild.classList.remove(classNames.checkbox);\n                this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n            }\n            if (this.selectedItems) {\n                this.selectedItems.item.classList.add(classNames.selected);\n            }\n        }\n    }\n    /**\n     * Refresh the height of the list item.\n     */\n    refreshItemHeight() {\n        this.virtualizationModule.refreshItemHeight();\n    }\n    clickHandler(e) {\n        let target = e.target;\n        let classList = target.classList;\n        let closestElement;\n        if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {\n            if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                this.uncheckAllItems();\n            }\n            this.back();\n        }\n        else {\n            let li = closest(target.parentNode, '.' + classNames.listItem);\n            if (li === null) {\n                li = target;\n            }\n            this.removeFocus();\n            if (this.enable && this.showCheckBox && this.isValidLI(li)) {\n                if (e.target.classList.contains(classNames.checkboxIcon)) {\n                    li.classList.add(classNames.focused);\n                    if (isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n                        let args = {\n                            curData: undefined, dataSource: undefined, fields: undefined, options: undefined,\n                            text: undefined, item: li\n                        };\n                        this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n                    }\n                    else {\n                        this.uncheckItem(li);\n                        li.classList.add(classNames.focused);\n                    }\n                    if (this.enableVirtualization) {\n                        this.virtualizationModule.setCheckboxLI(li, e);\n                    }\n                    if (e) {\n                        let eventArgs = this.selectEventData(li, e);\n                        let checkIcon = li.querySelector('.' + classNames.checkboxIcon);\n                        merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });\n                        this.trigger('select', eventArgs);\n                    }\n                }\n                else if (li.classList.contains(classNames.hasChild)) {\n                    this.removeHover();\n                    this.removeSelect();\n                    this.removeSelect(li);\n                    this.setSelectLI(li, e);\n                    li.classList.remove(classNames.selected);\n                }\n                else {\n                    this.setCheckboxLI(li, e);\n                }\n            }\n            else {\n                this.setSelectLI(li, e);\n            }\n            closestElement = closest(e.target, 'li');\n            if (closestElement !== undefined) {\n                if (closestElement.classList.contains('e-has-child') &&\n                    !e.target.parentElement.classList.contains('e-listview-checkbox')) {\n                    closestElement.classList.add(classNames.disable);\n                }\n            }\n        }\n        if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n            let ulElementContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n            if (ulElementContainer.querySelector('.e-active')) {\n                // tslint:disable-next-line:no-any\n                let selectedElements = ulElementContainer.querySelectorAll('.e-active');\n                // tslint:enable-next-line:no-any\n                if (this.showCheckBox) {\n                    for (let i = 0; i < selectedElements.length; i++) {\n                        // tslint:disable-next-line:no-any\n                        if (!this.previousSelectedItems.includes(selectedElements[i].getAttribute('data-uid'))) {\n                            this.previousSelectedItems.push(selectedElements[i].getAttribute('data-uid'));\n                        }\n                        // tslint:enable-next-line:no-any\n                    }\n                }\n                else {\n                    this.previousSelectedItems[0] = (ulElementContainer.querySelector('.e-active').getAttribute('data-uid'));\n                }\n            }\n            if (ulElementContainer.querySelector('.e-focused')) {\n                // tslint:disable-next-line:no-any\n                let focusElement = ulElementContainer.querySelector('.e-focused');\n                // tslint:enable-next-line:no-any\n                if (!focusElement.classList.contains('e-active')) {\n                    let focusElementId = focusElement.getAttribute('data-uid');\n                    // tslint:disable-next-line:no-any\n                    if (this.previousSelectedItems.includes(focusElementId)) {\n                        let selectedElement1 = this.previousSelectedItems.slice(0, this.previousSelectedItems.indexOf(focusElementId));\n                        let selectedElement2 = this.previousSelectedItems.\n                            slice(this.previousSelectedItems.indexOf(focusElementId) + 1, this.previousSelectedItems.length);\n                        this.previousSelectedItems = selectedElement1.concat(selectedElement2);\n                    }\n                    // tslint:enable-next-line:no-any\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        return element && element.parentNode && element.parentNode.removeChild(element);\n    }\n    hoverHandler(e) {\n        let curLi = closest(e.target.parentNode, '.' + classNames.listItem);\n        this.setHoverLI(curLi);\n    }\n    leaveHandler(e) {\n        this.removeHover();\n    }\n    ;\n    homeKeyHandler(e, end) {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            if (this.selectedItems) {\n                (this.selectedItems.item).setAttribute('aria-selected', 'false');\n            }\n            let li = this.curUL.querySelectorAll('.' + classNames.listItem);\n            let focusedElement = this.curUL.querySelector('.' + classNames.focused) ||\n                this.curUL.querySelector('.' + classNames.selected);\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.focused);\n                if (!this.showCheckBox) {\n                    focusedElement.classList.remove(classNames.selected);\n                }\n            }\n            let index = !end ? 0 : li.length - 1;\n            if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {\n                li[index].classList.add(classNames.focused);\n            }\n            else {\n                this.setSelectLI(li[index], e);\n            }\n            if (li[index]) {\n                this.element.setAttribute('aria-activedescendant', li[index].id.toString());\n            }\n            else {\n                this.element.removeAttribute('aria-activedescendant');\n            }\n        }\n    }\n    onArrowKeyDown(e, prev) {\n        let siblingLI;\n        let li;\n        let hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n        if (hasChild || this.showCheckBox) {\n            li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n            if (!isNullOrUndefined(siblingLI)) {\n                if (li) {\n                    li.classList.remove(classNames.focused);\n                    if (!this.showCheckBox) {\n                        li.classList.remove(classNames.selected);\n                    }\n                }\n                if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {\n                    siblingLI.classList.add(classNames.focused);\n                }\n                else {\n                    this.setSelectLI(siblingLI, e);\n                }\n            }\n        }\n        else {\n            li = this.curUL.querySelector('.' + classNames.selected);\n            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n            this.setSelectLI(siblingLI, e);\n        }\n        if (siblingLI) {\n            this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());\n        }\n        else {\n            this.element.removeAttribute('aria-activedescendant');\n        }\n        return siblingLI;\n    }\n    arrowKeyHandler(e, prev) {\n        e.preventDefault();\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let siblingLI = this.onArrowKeyDown(e, prev);\n            let elementTop = this.element.getBoundingClientRect().top;\n            let elementHeight = this.element.getBoundingClientRect().height;\n            let firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();\n            let heightDiff;\n            let groupItemBounds;\n            if (this.fields.groupBy) {\n                groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();\n            }\n            if (siblingLI) {\n                let siblingTop = siblingLI.getBoundingClientRect().top;\n                let siblingHeight = siblingLI.getBoundingClientRect().height;\n                if (!prev) {\n                    let height = this.isWindow ? window.innerHeight : elementHeight;\n                    heightDiff = this.isWindow ? (siblingTop + siblingHeight) :\n                        ((siblingTop - elementTop) + siblingHeight);\n                    if (heightDiff > height) {\n                        this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) :\n                            this.element.scrollTop = this.element.scrollTop + (heightDiff - height);\n                    }\n                }\n                else {\n                    heightDiff = this.isWindow ? siblingTop : (siblingTop - elementTop);\n                    if (heightDiff < 0) {\n                        this.isWindow ? window.scroll(0, pageYOffset + heightDiff) :\n                            this.element.scrollTop = this.element.scrollTop + heightDiff;\n                    }\n                }\n            }\n            else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {\n                this.onUIScrolled = () => {\n                    this.onArrowKeyDown(e, prev);\n                    this.onUIScrolled = undefined;\n                };\n                heightDiff = this.virtualizationModule.listItemHeight;\n                this.isWindow ? window.scroll(0, pageYOffset - heightDiff) :\n                    this.element.scrollTop = this.element.scrollTop - heightDiff;\n            }\n            else if (prev) {\n                if (this.showHeader && this.headerEle) {\n                    let topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;\n                    let headerBounds = this.headerEle.getBoundingClientRect();\n                    heightDiff = headerBounds.top < 0 ? (headerBounds.height - topHeight) : 0;\n                    this.isWindow ? window.scroll(0, pageYOffset - heightDiff)\n                        : this.element.scrollTop = 0;\n                }\n                else if (this.fields.groupBy) {\n                    heightDiff = this.isWindow ? (groupItemBounds.top < 0 ? groupItemBounds.top : 0) :\n                        (elementTop - firstItemBounds.top) + groupItemBounds.height;\n                    this.isWindow ? window.scroll(0, pageYOffset + heightDiff) :\n                        this.element.scrollTop = this.element.scrollTop - heightDiff;\n                }\n            }\n        }\n    }\n    enterKeyHandler(e) {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n            let li = this.curUL.querySelector('.' + classNames.focused);\n            if (hasChild && li) {\n                li.classList.remove(classNames.focused);\n                if (this.showCheckBox) {\n                    this.removeSelect();\n                    this.removeSelect(li);\n                    this.removeHover();\n                }\n                this.setSelectLI(li, e);\n            }\n        }\n    }\n    spaceKeyHandler(e) {\n        if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {\n            let li = this.curUL.querySelector('.' + classNames.focused);\n            if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n                let args = {\n                    curData: undefined, dataSource: undefined, fields: undefined, options: undefined,\n                    text: undefined, item: li\n                };\n                this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n            }\n            else {\n                this.uncheckItem(li);\n            }\n        }\n    }\n    keyActionHandler(e) {\n        switch (e.keyCode) {\n            case 36:\n                this.homeKeyHandler(e);\n                break;\n            case 35:\n                this.homeKeyHandler(e, true);\n                break;\n            case 40:\n                this.arrowKeyHandler(e);\n                break;\n            case 38:\n                this.arrowKeyHandler(e, true);\n                break;\n            case 13:\n                this.enterKeyHandler(e);\n                break;\n            case 8:\n                if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                    this.uncheckAllItems();\n                }\n                this.back();\n                break;\n            case 32:\n                this.spaceKeyHandler(e);\n                break;\n        }\n    }\n    swipeActionHandler(e) {\n        if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {\n            if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                this.uncheckAllItems();\n            }\n            this.back();\n        }\n    }\n    focusout() {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let focusedElement = this.curUL.querySelector('.' + classNames.focused);\n            let activeElement = this.curUL.querySelector('[aria-selected = true]');\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.focused);\n                if (activeElement && !this.showCheckBox) {\n                    activeElement.classList.add(classNames.selected);\n                }\n            }\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        if (!this.enableVirtualization) {\n            EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n            EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);\n        }\n        EventHandler.add(this.element, 'focusout', this.focusout, this);\n        this.touchModule = new Touch(this.element, { swipe: this.swipeActionHandler.bind(this) });\n    }\n    unWireEvents() {\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        if (!this.enableVirtualization) {\n            EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n            EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n        }\n        EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n        EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n        this.touchModule.destroy();\n    }\n    removeFocus() {\n        let focusedLI = this.element.querySelectorAll('.' + classNames.focused);\n        for (let ele of focusedLI) {\n            ele.classList.remove(classNames.focused);\n        }\n    }\n    removeHover() {\n        let hoverLI = this.element.querySelector('.' + classNames.hover);\n        if (hoverLI) {\n            hoverLI.classList.remove(classNames.hover);\n        }\n    }\n    removeSelect(li) {\n        if (isNullOrUndefined(li)) {\n            let selectedLI = this.element.querySelectorAll('.' + classNames.selected);\n            for (let ele of selectedLI) {\n                if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {\n                    continue;\n                }\n                else {\n                    ele.setAttribute('aria-selected', 'false');\n                    ele.classList.remove(classNames.selected);\n                }\n            }\n        }\n        else {\n            li.classList.remove(classNames.selected);\n            li.setAttribute('aria-selected', 'false');\n        }\n    }\n    isValidLI(li) {\n        return (li && li.classList.contains(classNames.listItem)\n            && !li.classList.contains(classNames.groupListItem)\n            && !li.classList.contains(classNames.disable));\n    }\n    setCheckboxLI(li, e) {\n        if (this.isValidLI(li) && this.enable && this.showCheckBox) {\n            if (this.curUL.querySelector('.' + classNames.focused)) {\n                this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n            }\n            li.classList.add(classNames.focused);\n            let checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);\n            let checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);\n            this.removeHover();\n            if (!checkIcon.classList.contains(classNames.checked)) {\n                checkIcon.classList.add(classNames.checked);\n                li.classList.add(classNames.selected);\n                li.setAttribute('aria-selected', 'true');\n            }\n            else {\n                checkIcon.classList.remove(classNames.checked);\n                li.classList.remove(classNames.selected);\n                li.setAttribute('aria-selected', 'false');\n            }\n            checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ?\n                'true' : 'false');\n            let eventArgs = this.selectEventData(li, e);\n            merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });\n            if (this.enableVirtualization) {\n                this.virtualizationModule.setCheckboxLI(li, e);\n            }\n            this.trigger('select', eventArgs);\n            this.setSelectedItemData(li);\n            this.renderSubList(li);\n        }\n    }\n    selectEventData(li, e) {\n        let data = this.getItemData(li);\n        let fieldData = getFieldValues(data, this.listBaseOption.fields);\n        let selectedItem;\n        if (!isNullOrUndefined(data)\n            && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {\n            selectedItem = { item: li, text: li && li.innerText.trim(), data: this.dataSource };\n        }\n        else {\n            selectedItem = { item: li, text: fieldData && fieldData[this.listBaseOption.fields.text], data: data };\n        }\n        let eventArgs = {};\n        merge(eventArgs, selectedItem);\n        if (e) {\n            merge(eventArgs, { isInteracted: true, event: e, index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li) });\n        }\n        return eventArgs;\n    }\n    setSelectedItemData(li) {\n        let data = this.getItemData(li);\n        let fieldData = getFieldValues(data, this.listBaseOption.fields);\n        if (!isNullOrUndefined(data) && ((typeof this.dataSource[0] === 'string') ||\n            (typeof this.dataSource[0] === 'number'))) {\n            this.selectedItems = {\n                item: li,\n                text: li && li.innerText.trim(),\n                data: this.dataSource\n            };\n        }\n        else {\n            this.selectedItems = {\n                item: li,\n                text: fieldData && fieldData[this.listBaseOption.fields.text],\n                data: data\n            };\n        }\n    }\n    setSelectLI(li, e) {\n        if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {\n            if (!this.showCheckBox) {\n                this.removeSelect();\n            }\n            li.classList.add(classNames.selected);\n            li.setAttribute('aria-selected', 'true');\n            this.removeHover();\n            this.setSelectedItemData(li);\n            if (this.enableVirtualization) {\n                this.virtualizationModule.setSelectLI(li, e);\n            }\n            let eventArgs = this.selectEventData(li, e);\n            this.trigger('select', eventArgs);\n            this.selectedLI = li;\n            this.renderSubList(li);\n        }\n    }\n    setHoverLI(li) {\n        if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {\n            let lastLi = this.element.querySelectorAll('.' + classNames.hover);\n            if (lastLi && lastLi.length) {\n                removeClass(lastLi, classNames.hover);\n            }\n            if (!li.classList.contains(classNames.selected) || this.showCheckBox) {\n                li.classList.add(classNames.hover);\n            }\n        }\n    }\n    //Data Source Related Functions\n    getSubDS() {\n        let levelKeys = this.curDSLevel;\n        if (levelKeys.length) {\n            let ds = this.localData;\n            for (let key of levelKeys) {\n                let field = {};\n                field[this.fields.id] = key;\n                this.curDSJSON = this.findItemFromDS(ds, field);\n                let fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n                ds = this.curDSJSON ? fieldData[this.fields.child] : ds;\n            }\n            return ds;\n        }\n        return this.localData;\n    }\n    getItemData(li) {\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        let fields = this.getElementUID(li);\n        let curDS;\n        if (isNullOrUndefined(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {\n            curDS = this.curViewDS;\n        }\n        else {\n            curDS = dataSource;\n        }\n        return this.findItemFromDS(curDS, fields);\n    }\n    findItemFromDS(dataSource, fields, parent) {\n        let resultJSON;\n        if (dataSource && dataSource.length && fields) {\n            dataSource.some((data) => {\n                let fieldData = getFieldValues(data, this.listBaseOption.fields);\n                //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)\n                if ((fields[this.fields.id] || fields[this.fields.text]) &&\n                    (!fields[this.fields.id] || (!isNullOrUndefined(fieldData[this.fields.id]) &&\n                        fieldData[this.fields.id].toString()) === fields[this.fields.id].toString()) &&\n                    (!fields[this.fields.text] || fieldData[this.fields.text] === fields[this.fields.text])) {\n                    resultJSON = (parent ? dataSource : data);\n                }\n                else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {\n                    resultJSON = (parent ? dataSource : data);\n                }\n                else if (!isNullOrUndefined(fields[this.fields.id]) && isNullOrUndefined(fieldData[this.fields.id])) {\n                    let li = this.element.querySelector('[data-uid=\"'\n                        + fields[this.fields.id] + '\"]');\n                    if (li && li.innerText.trim() === fieldData[this.fields.text]) {\n                        resultJSON = data;\n                    }\n                }\n                else if (fieldData.hasOwnProperty(this.fields.child) && fieldData[this.fields.child].length) {\n                    resultJSON = this.findItemFromDS(fieldData[this.fields.child], fields, parent);\n                }\n                return !!resultJSON;\n            });\n        }\n        else {\n            resultJSON = dataSource;\n        }\n        return resultJSON;\n    }\n    getQuery() {\n        let columns = [];\n        let query = (this.query ? this.query : new Query());\n        if (!this.query) {\n            for (let column of Object.keys(this.fields.properties)) {\n                if (column !== 'tableName' && !!(this.fields[column]) &&\n                    this.fields[column] !==\n                        ListBase.defaultMappedFields[column]\n                    && columns.indexOf(this.fields[column]) === -1) {\n                    columns.push(this.fields[column]);\n                }\n            }\n            query.select(columns);\n            if (this.fields.properties.hasOwnProperty('tableName')) {\n                query.from(this.fields.tableName);\n            }\n        }\n        return query;\n    }\n    setViewDataSource(dataSource = this.localData) {\n        if (dataSource && this.fields.groupBy) {\n            if (this.sortOrder !== 'None') {\n                this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);\n            }\n            else {\n                this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);\n            }\n        }\n        else if (dataSource && this.sortOrder !== 'None') {\n            this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy));\n        }\n        else {\n            this.curViewDS = dataSource;\n        }\n    }\n    isInAnimation() {\n        return this.curUL.classList.contains('.e-animate');\n    }\n    setLocalData() {\n        this.trigger('actionBegin');\n        let listViewComponent = this;\n        if (this.dataSource instanceof DataManager) {\n            this.dataSource.executeQuery(this.getQuery()).then((e) => {\n                if (this.isDestroyed) {\n                    return;\n                }\n                this.localData = e.result;\n                if (!this.isServerRendered || (!isBlazor())) {\n                    listViewComponent.removeElement(listViewComponent.contentContainer);\n                }\n                this.renderList();\n                this.trigger('actionComplete', e);\n            }).catch((e) => {\n                if (this.isDestroyed) {\n                    return;\n                }\n                this.trigger('actionFailure', e);\n            });\n        }\n        else if (!this.dataSource || !this.dataSource.length) {\n            let ul = this.element.querySelector('ul');\n            if (ul) {\n                remove(ul);\n                this.setProperties({ dataSource: ListBase.createJsonFromElement(ul) }, true);\n                this.localData = this.dataSource;\n                this.renderList();\n                this.trigger('actionComplete', { data: this.localData });\n            }\n        }\n        else {\n            this.localData = this.dataSource;\n            this.renderList();\n            this.trigger('actionComplete', { data: this.localData });\n        }\n    }\n    reRender() {\n        if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n            this.resetBlazorTemplates();\n            this.removeElement(this.headerEle);\n            this.removeElement(this.ulElement);\n            this.removeElement(this.contentContainer);\n            if (Object.keys(window).indexOf('ejsInterop') === -1) {\n                this.element.innerHTML = '';\n            }\n            this.headerEle = this.ulElement = this.liCollection = undefined;\n            this.header();\n        }\n        this.setLocalData();\n    }\n    resetCurrentList() {\n        this.resetBlazorTemplates();\n        this.setViewDataSource(this.curViewDS);\n        this.contentContainer.innerHTML = '';\n        this.createList();\n        this.renderIntoDom(this.curUL);\n    }\n    setAttributes(liElements) {\n        for (let i = 0; i < liElements.length; i++) {\n            let element = liElements[i];\n            if (element.classList.contains('e-list-item')) {\n                element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));\n                element.setAttribute('aria-selected', 'false');\n                element.setAttribute('tabindex', '-1');\n            }\n        }\n    }\n    createList() {\n        this.currentLiElements = [];\n        this.isNestedList = false;\n        this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption);\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        this.setAttributes(this.liCollection);\n        this.updateBlazorTemplates(true);\n    }\n    resetBlazorTemplates() {\n        // tslint:disable-next-line:no-any\n        let templateCollection = blazorTemplates;\n        if (this.template) {\n            templateCollection[this.LISTVIEW_TEMPLATE_ID] = [];\n            resetBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY);\n        }\n        if (this.groupTemplate) {\n            templateCollection[this.LISTVIEW_GROUPTEMPLATE_ID] = [];\n            resetBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY);\n        }\n        if (this.headerTemplate) {\n            resetBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY);\n        }\n    }\n    updateBlazorTemplates(template = false, headerTemplate = false, resetExistingElements = false) {\n        if (this.template && template && !this.enableVirtualization) {\n            updateBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n        if (this.groupTemplate && template && !this.enableVirtualization) {\n            updateBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n        if (this.headerTemplate && headerTemplate) {\n            updateBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n    }\n    exceptionEvent(e) {\n        this.trigger('actionFailure', e);\n    }\n    UpdateCurrentUL() {\n        this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);\n        if (this.curUL) {\n            // tslint:disable\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n            // tslint:enable\n        }\n    }\n    removeActiveClass() {\n        let listViewComponent = this;\n        setTimeout(() => {\n            let ulContainer = listViewComponent.element.querySelector('.' + classNames.virtualElementContainer);\n            for (let i = 0; i < ulContainer.childElementCount; i++) {\n                let selectedElement = ulContainer.children[i];\n                let elementIndex;\n                let hiddenElementIndex;\n                if (listViewComponent.showCheckBox) {\n                    if (listViewComponent.previousSelectedItems.length > 0) {\n                        for (let j = 0; j < listViewComponent.previousSelectedItems.length; j++) {\n                            if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[j]) {\n                                selectedElement.classList.add('e-active');\n                                selectedElement.setAttribute('aria-selected', 'true');\n                                if (selectedElement.querySelector('.e-frame.e-icons')) {\n                                    selectedElement.querySelector('.e-frame.e-icons').classList.add('e-check');\n                                }\n                                elementIndex = i;\n                            }\n                            else {\n                                if (elementIndex !== i) {\n                                    selectedElement.classList.remove('e-active');\n                                    selectedElement.removeAttribute('aria-selected');\n                                    if (selectedElement.querySelector('.e-check')) {\n                                        selectedElement.querySelector('.e-check').classList.remove('e-check');\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        selectedElement.classList.remove('e-active');\n                        selectedElement.removeAttribute('aria-selected');\n                        if (selectedElement.querySelector('.e-check')) {\n                            selectedElement.querySelector('.e-check').classList.remove('e-check');\n                        }\n                    }\n                }\n                else {\n                    if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[0]) {\n                        selectedElement.classList.add('e-active');\n                        selectedElement.setAttribute('aria-selected', 'true');\n                    }\n                    else {\n                        selectedElement.classList.remove('e-active');\n                        selectedElement.removeAttribute('aria-selected');\n                    }\n                }\n                if (listViewComponent.hiddenItems.length > 0) {\n                    for (let k = 0; k < listViewComponent.hiddenItems.length; k++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[k]) {\n                            selectedElement.style.display = 'none';\n                            hiddenElementIndex = i;\n                        }\n                        else {\n                            if (hiddenElementIndex !== i) {\n                                selectedElement.style.display = null;\n                            }\n                        }\n                    }\n                }\n                if (listViewComponent.enabledItems.length > 0) {\n                    for (let x = 0; x < listViewComponent.enabledItems.length; x++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.enabledItems[x]) {\n                            if (selectedElement.classList.contains('e-disabled')) {\n                                selectedElement.classList.remove('e-disabled');\n                            }\n                        }\n                    }\n                }\n                if (listViewComponent.disabledItems.length > 0) {\n                    for (let y = 0; y < listViewComponent.disabledItems.length; y++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.disabledItems[y]) {\n                            if (!selectedElement.classList.contains('e-disabled')) {\n                                selectedElement.classList.add('e-disabled');\n                            }\n                        }\n                    }\n                }\n            }\n        }, 200);\n    }\n    renderingNestedList() {\n        let ul = closest(this.liElement.parentNode, '.' + classNames.parentItem);\n        let ctrlId = this.element.id;\n        let ulElement = document.getElementById(ctrlId);\n        let currentListItem = ulElement.getElementsByTagName('UL')[ulElement.getElementsByTagName('UL').length - 1];\n        this.switchView(ul, currentListItem);\n        this.liElement = null;\n    }\n    renderSubList(li) {\n        this.liElement = li;\n        let uID = li.getAttribute('data-uid');\n        if (li.classList.contains(classNames.hasChild) && uID) {\n            let ul = closest(li.parentNode, '.' + classNames.parentItem);\n            let ele = this.element.querySelector('[pid=\\'' + uID + '\\']');\n            this.curDSLevel.push(uID);\n            this.setViewDataSource(this.getSubDS());\n            if (!ele) {\n                let data = this.curViewDS;\n                if (isBlazor() && this.isServerRendered) {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('ListChildDataSource', data);\n                    // tslint:enable\n                }\n                else {\n                    ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length);\n                    let lists = ele.querySelectorAll('.' + classNames.listItem);\n                    this.setAttributes(lists);\n                    ele.setAttribute('pID', uID);\n                    ele.style.display = 'none';\n                    this.renderIntoDom(ele);\n                    this.updateBlazorTemplates(true);\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n                this.switchView(ul, ele);\n            }\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n            if (this.selectedItems) {\n                let fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);\n                this.header((fieldData[this.listBaseOption.fields.text]), true);\n            }\n            this.selectedLI = undefined;\n        }\n    }\n    renderIntoDom(ele) {\n        this.contentContainer.appendChild(ele);\n    }\n    renderList(data) {\n        this.setViewDataSource(data);\n        if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n            if (this.enableVirtualization) {\n                if (Object.keys(this.dataSource).length) {\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {\n                            this.listBaseOption.template = null;\n                            this.listBaseOption.groupTemplate = null;\n                            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);\n                        }\n                    }\n                }\n                this.virtualizationModule.uiVirtualization();\n            }\n            else {\n                this.createList();\n                this.contentContainer = this.createElement('div', { className: classNames.content });\n                this.element.appendChild(this.contentContainer);\n                this.renderIntoDom(this.ulElement);\n            }\n        }\n    }\n    getElementUID(obj) {\n        let fields = {};\n        if (obj instanceof Element) {\n            fields[this.fields.id] = obj.getAttribute('data-uid');\n        }\n        else {\n            fields = obj;\n        }\n        return fields;\n    }\n    /**\n     * Initializes the ListView component rendering.\n     */\n    render() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.element.classList.add(classNames.root);\n            attributes(this.element, { role: 'list', tabindex: '0' });\n            this.setCSSClass();\n            this.setEnableRTL();\n            this.setEnable();\n            this.setSize();\n            this.wireEvents();\n            this.header();\n            this.setLocalData();\n            this.setHTMLAttribute();\n        }\n        else {\n            this.initBlazor(true);\n        }\n        this.rippleFn = rippleEffect(this.element, {\n            selector: '.' + classNames.listItem\n        });\n        this.renderComplete();\n    }\n    initBlazor(firstRender) {\n        if (firstRender === null) {\n            firstRender = false;\n        }\n        this.setLocalData();\n        this.setViewDataSource(this.localData);\n        this.contentContainer = this.element.querySelector('.' + classNames.content);\n        if (firstRender) {\n            this.wireEvents();\n        }\n    }\n    /**\n     * It is used to destroy the ListView component.\n     */\n    destroy() {\n        this.resetBlazorTemplates();\n        this.unWireEvents();\n        let classAr = [classNames.root, classNames.disable, 'e-rtl',\n            'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter((css) => css));\n        removeClass([this.element], classAr);\n        this.element.removeAttribute('role');\n        this.element.removeAttribute('tabindex');\n        this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.element.innerHTML = '';\n            super.destroy();\n        }\n        else {\n            this.element.style.display = 'none';\n        }\n    }\n    /**\n     * Switches back from the navigated sub list item.\n     */\n    back() {\n        let pID = this.curDSLevel[this.curDSLevel.length - 1];\n        if (pID === undefined || this.isInAnimation()) {\n            return;\n        }\n        this.curDSLevel.pop();\n        this.setViewDataSource(this.getSubDS());\n        let toUL = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n        let fromUL = this.curUL;\n        if (!toUL) {\n            this.createList();\n            this.renderIntoDom(this.ulElement);\n            toUL = this.curUL;\n        }\n        else {\n            if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n                toUL = toUL.parentElement.parentElement.parentElement;\n            }\n            else {\n                toUL = toUL.parentElement;\n            }\n        }\n        let fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n        let text = fieldData[this.fields.text];\n        this.switchView(fromUL, toUL, true);\n        this.removeFocus();\n        let li = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n        li.classList.remove(classNames.disable);\n        li.classList.add(classNames.focused);\n        if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {\n            li.setAttribute('aria-selected', 'true');\n        }\n        else {\n            li.classList.remove(classNames.selected);\n            li.setAttribute('aria-selected', 'false');\n        }\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        if (this.enableHtmlSanitizer) {\n            this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);\n        }\n        this.header((this.curDSLevel.length ? text : this.headerTitle), (this.curDSLevel.length ? true : false));\n    }\n    /**\n     * Selects the list item from the ListView by passing the elements or field object.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    selectItem(item) {\n        if (this.enableVirtualization) {\n            this.virtualizationModule.selectItem(item);\n        }\n        else if (this.showCheckBox) {\n            this.setCheckboxLI(this.getLiFromObjOrElement(item));\n        }\n        else {\n            isNullOrUndefined(item) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(item));\n        }\n    }\n    getLiFromObjOrElement(obj) {\n        let li;\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        if (!isNullOrUndefined(obj)) {\n            if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n                if (obj instanceof Element) {\n                    let uid = obj.getAttribute('data-uid').toString();\n                    for (let i = 0; i < this.liCollection.length; i++) {\n                        if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {\n                            li = this.liCollection[i];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), (item) => {\n                        if (item.innerText.trim() === obj.toString()) {\n                            li = item;\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                }\n            }\n            else {\n                let resultJSON = this.getItemData(obj);\n                let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n                if (resultJSON) {\n                    li = this.element.querySelector('[data-uid=\"'\n                        + fieldData[this.fields.id] + '\"]');\n                    if (!this.enableVirtualization && isNullOrUndefined(li)) {\n                        let curLi = this.element.querySelectorAll('.' + classNames.listItem);\n                        for (let i = 0; i < curLi.length; i++) {\n                            if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {\n                                li = curLi[i];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return li;\n    }\n    /**\n     * Selects multiple list items from the ListView.\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of\n     *  elements or array of fields Object with ID and Text fields.\n     */\n    selectMultipleItems(item) {\n        if (!isNullOrUndefined(item)) {\n            for (let i = 0; i < item.length; i++) {\n                if (!isNullOrUndefined(item[i])) {\n                    this.selectItem(item[i]);\n                }\n            }\n        }\n    }\n    getParentId() {\n        let parentId = [];\n        if (this.isNestedList) {\n            for (let i = this.curDSLevel.length - 1; i >= 0; i--) {\n                parentId.push(this.curDSLevel[i]);\n            }\n        }\n        return parentId;\n    }\n    /**\n     * Gets the details of the currently selected item from the list items.\n     * @blazorType ListSelectedItem<TValue>\n     */\n    getSelectedItems() {\n        // tslint:disable-next-line:no-any\n        let finalValue;\n        let isCompleted = false;\n        this.selectedId = [];\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        if (this.enableVirtualization && !isCompleted) {\n            finalValue = this.virtualizationModule.getSelectedItems();\n            isCompleted = true;\n        }\n        else if (this.showCheckBox && !isCompleted) {\n            // tslint:disable-next-line:no-any\n            let liCollection = this.curUL.getElementsByClassName(classNames.selected);\n            let liTextCollection = [];\n            let liDataCollection = [];\n            this.selectedId = [];\n            let dataParent = [];\n            for (let i = 0; i < liCollection.length; i++) {\n                if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n                    liTextCollection.push(liCollection[i].innerText.trim());\n                }\n                else {\n                    let tempData = this.getItemData(liCollection[i]);\n                    let fieldData = getFieldValues(tempData, this.listBaseOption.fields);\n                    if (this.isNestedList) {\n                        dataParent.push({ data: tempData, parentId: this.getParentId() });\n                    }\n                    else {\n                        liDataCollection.push(tempData);\n                    }\n                    if (fieldData) {\n                        liTextCollection.push(fieldData[this.listBaseOption.fields.text]);\n                        this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n                    }\n                    else {\n                        liTextCollection.push(undefined);\n                        this.selectedId.push(undefined);\n                    }\n                }\n            }\n            if ((typeof dataSource[0] === 'string'\n                || typeof dataSource[0] === 'number')\n                && !isCompleted) {\n                finalValue = { item: liCollection, data: dataSource, text: liTextCollection };\n                isCompleted = true;\n            }\n            if (this.isNestedList && !isCompleted) {\n                finalValue = { item: liCollection, data: dataParent, text: liTextCollection };\n                isCompleted = true;\n            }\n            else if (!isCompleted) {\n                finalValue = { item: liCollection, data: liDataCollection, text: liTextCollection };\n                isCompleted = true;\n            }\n        }\n        else if (!isCompleted) {\n            let liElement = this.element.getElementsByClassName(classNames.selected)[0];\n            let fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);\n            if ((typeof dataSource[0] === 'string'\n                || typeof dataSource[0] === 'number')\n                && !isCompleted) {\n                finalValue = (!isNullOrUndefined(liElement)) ? {\n                    item: liElement, data: dataSource,\n                    text: liElement.innerText.trim()\n                } : undefined;\n                isCompleted = true;\n            }\n            else if (!isCompleted) {\n                if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {\n                    finalValue = undefined;\n                    isCompleted = true;\n                }\n                else {\n                    this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n                    finalValue = {\n                        text: fieldData[this.listBaseOption.fields.text], item: liElement,\n                        data: this.getItemData(liElement)\n                    };\n                    isCompleted = true;\n                }\n            }\n        }\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            return this.blazorGetSelectedItems(finalValue);\n        }\n        else {\n            return finalValue;\n        }\n    }\n    // tslint:disable-next-line:no-any\n    blazorGetSelectedItems(finalGetSelectedItem) {\n        let blazorSelectedItem = {\n            data: [],\n            index: [],\n            parentId: [],\n            text: []\n        };\n        if (!isNullOrUndefined(finalGetSelectedItem)) {\n            if (!isNullOrUndefined(finalGetSelectedItem.data)) {\n                if (this.showCheckBox && this.isNestedList) {\n                    for (let i = 0; i < finalGetSelectedItem.data.length; i++) {\n                        blazorSelectedItem.data.push(finalGetSelectedItem.data[i].data);\n                    }\n                    if (!isNullOrUndefined(finalGetSelectedItem.data[0])\n                        && !isNullOrUndefined(finalGetSelectedItem.data[0].parentId)) {\n                        blazorSelectedItem.parentId = finalGetSelectedItem.data[0].parentId;\n                    }\n                }\n                else {\n                    blazorSelectedItem.data = this.convertItemsToArray(finalGetSelectedItem.data);\n                }\n            }\n            if (!isNullOrUndefined(finalGetSelectedItem.text)) {\n                blazorSelectedItem.text = this.convertItemsToArray(finalGetSelectedItem.text);\n            }\n            if (!isNullOrUndefined(finalGetSelectedItem.index)) {\n                blazorSelectedItem.index = this.convertItemsToArray(finalGetSelectedItem.index);\n            }\n        }\n        return blazorSelectedItem;\n    }\n    // tslint:disable-next-line:no-any\n    convertItemsToArray(items) {\n        return Array.isArray(items) ? [...items] : [items];\n    }\n    /**\n     * Finds out an item details from the current list.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     * @blazorType TValue\n     */\n    findItem(item) {\n        return this.getItemData(item);\n    }\n    /**\n     * Enables the disabled list items by passing the Id and text fields.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    enableItem(item) {\n        this.setItemState(item, true);\n        if (this.enableVirtualization) {\n            this.virtualizationModule.enableItem(item);\n        }\n    }\n    /**\n     * Disables the list items by passing the Id and text fields.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    disableItem(item) {\n        this.setItemState(item, false);\n        if (this.enableVirtualization) {\n            this.virtualizationModule.disableItem(item);\n        }\n    }\n    //A function that used to set state of the list item like enable, disable.\n    setItemState(item, isEnable) {\n        let resultJSON = this.getItemData(item);\n        let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n        if (resultJSON) {\n            let li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n            if (isEnable) {\n                if (li) {\n                    li.classList.remove(classNames.disable);\n                }\n                delete resultJSON[this.fields.enabled];\n            }\n            else if (!isEnable) {\n                if (li) {\n                    li.classList.add(classNames.disable);\n                }\n                resultJSON[this.fields.enabled] = false;\n            }\n        }\n    }\n    /**\n     * Shows the hide list item from the ListView.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    showItem(item) {\n        this.showHideItem(item, false, '');\n        if (this.enableVirtualization) {\n            this.virtualizationModule.showItem(item);\n        }\n    }\n    /**\n     * Hides an list item from the ListView.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    hideItem(item) {\n        this.showHideItem(item, true, 'none');\n        if (this.enableVirtualization) {\n            this.virtualizationModule.hideItem(item);\n        }\n    }\n    showHideItem(obj, isHide, display) {\n        let resultJSON = this.getItemData(obj);\n        let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n        if (resultJSON) {\n            let li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n            if (li) {\n                li.style.display = display;\n            }\n            if (isHide) {\n                resultJSON[this.fields.isVisible] = false;\n            }\n            else {\n                delete resultJSON[this.fields.isVisible];\n            }\n        }\n    }\n    /**\n     * Adds the new list item(s) to the current ListView.\n     * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need\n     * to be added and `fields` as the target item to which we need to add the given item(s) as its children.\n     * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     * @param  {{[key:string]:Object}[]} data - JSON Array Data that need to add.\n     * @param  {Fields} fields - Target item to add the given data as its children (can be null).\n     * @blazorArgsType data|object,fields|object\n     */\n    addItem(data, fields = undefined) {\n        const dataSource = this.dataSource instanceof DataManager\n            ? this.localData : this.dataSource;\n        this.addItemInternally(data, fields, dataSource);\n    }\n    addItemInternally(data, fields, dataSource) {\n        if (data instanceof Array) {\n            if (this.enableVirtualization) {\n                this.virtualizationModule.addItem(data, fields, dataSource);\n            }\n            else {\n                const ds = this.findItemFromDS(dataSource, fields);\n                let child;\n                if (ds) {\n                    const fieldData = getFieldValues(ds, this.listBaseOption.fields);\n                    child = fieldData[this.fields.child];\n                    if (!child) {\n                        child = [];\n                    }\n                    child = child.concat(data);\n                }\n                // check for whether target is nested level or top level in list\n                if (ds instanceof Array) {\n                    for (let i = 0; i < data.length; i++) {\n                        dataSource.push(data[i]);\n                        this.setViewDataSource(dataSource);\n                        // since it is top level target, get the content container's first child\n                        // as it is always the top level UL\n                        const targetUL = this.contentContainer\n                            ? this.contentContainer.children[0]\n                            : null;\n                        // check for whether the list was previously empty or not, if it is\n                        // proceed to call initial render\n                        if (this.contentContainer && targetUL) {\n                            this.addItemIntoDom(data[i], targetUL, this.curViewDS);\n                        }\n                        else {\n                            this.reRender();\n                        }\n                    }\n                    if (this.curUL) {\n                        this.updateBlazorTemplates(true);\n                    }\n                    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n                }\n                else {\n                    // proceed as target item is in nested level, only if it is a valid target ds\n                    if (ds) {\n                        ds[this.fields.child] = child;\n                        this.addItemInNestedList(ds, data);\n                    }\n                }\n            }\n        }\n    }\n    addItemInNestedList(targetItemData, itemQueue) {\n        const targetItemId = targetItemData[this.fields.id];\n        const targetChildDS = targetItemData[this.fields.child];\n        const isAlreadyRenderedUL = this.element.querySelector('[pid=\\'' + targetItemId + '\\']');\n        const targetLi = this.element.querySelector('[data-uid=\\'' + targetItemId + '\\']');\n        const targetUL = isAlreadyRenderedUL\n            ? isAlreadyRenderedUL\n            : targetLi\n                ? closest(targetLi, 'ul')\n                : null;\n        const targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];\n        const isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;\n        let isRefreshTemplateNeeded = false;\n        // if li element is already rendered, that element needs to be refreshed so that\n        // it becomes child viewable due to new child items are added now\n        if (isTargetEmptyChild) {\n            const targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption);\n            this.setAttributes(targetRefreshedElement);\n            targetUL.insertBefore(targetRefreshedElement[0], targetLi);\n            detach(targetLi);\n            isRefreshTemplateNeeded = true;\n        }\n        // if it is already rendered element, we need to create and append new elements\n        if (isAlreadyRenderedUL && itemQueue) {\n            for (let i = 0; i < itemQueue.length; i++) {\n                targetDS.push(itemQueue[i]);\n                this.addItemIntoDom(itemQueue[i], targetUL, targetDS);\n            }\n            isRefreshTemplateNeeded = true;\n        }\n        if (isRefreshTemplateNeeded) {\n            this.updateBlazorTemplates(true);\n        }\n    }\n    addItemIntoDom(currentItem, targetUL, curViewDS) {\n        let index = curViewDS.indexOf(currentItem);\n        this.addListItem(currentItem, index, targetUL, curViewDS);\n        let curItemDS = curViewDS[index - 1];\n        if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {\n            this.addListItem(curItemDS, (index - 1), targetUL, curViewDS);\n        }\n    }\n    addListItem(dataSource, index, ulElement, curViewDS) {\n        let target = this.getLiFromObjOrElement(curViewDS[index + 1]) ||\n            this.getLiFromObjOrElement(curViewDS[index + 2]) || null;\n        let li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption);\n        this.setAttributes(li);\n        ulElement.insertBefore(li[0], target);\n    }\n    /**\n     * Removes the list item from the data source based on a passed\n     *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    removeItem(item) {\n        const listDataSource = this.dataSource instanceof DataManager\n            ? this.localData : this.dataSource;\n        if (this.enableVirtualization) {\n            this.virtualizationModule.removeItem(item);\n        }\n        else {\n            this.removeItemFromList(item, listDataSource);\n            this.updateBlazorTemplates(true);\n        }\n    }\n    removeItemFromList(obj, listDataSource) {\n        const curViewDS = this.curViewDS;\n        let fields = obj instanceof Element ? this.getElementUID(obj) : obj;\n        let dataSource;\n        dataSource = this.findItemFromDS(listDataSource, fields, true);\n        if (dataSource) {\n            let data;\n            data = this.findItemFromDS(dataSource, fields);\n            let index = curViewDS.indexOf(data);\n            let li = this.getLiFromObjOrElement(obj);\n            let groupLi;\n            this.validateNestedView(li);\n            if (this.fields.groupBy && this.curViewDS[index - 1] &&\n                curViewDS[index - 1].isHeader &&\n                curViewDS[index - 1].items.length === 1) {\n                if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) &&\n                    (isNullOrUndefined(li.nextElementSibling) || (li.nextElementSibling &&\n                        li.nextElementSibling.classList.contains(classNames.groupListItem)))) {\n                    groupLi = li.previousElementSibling;\n                }\n            }\n            if (li) {\n                detach(li);\n            }\n            if (groupLi) {\n                detach(groupLi);\n            }\n            // tslint:disable-next-line:no-any\n            const foundData = (dataSource.length - 1) <= 0\n                ? this.findParent(this.localData, this.fields.id, (value) => value === data[this.fields.id], null) : null;\n            let dsIndex = dataSource.indexOf(data);\n            dataSource.splice(dsIndex, 1);\n            this.setViewDataSource(listDataSource);\n            if (foundData\n                && foundData.parent\n                && Array.isArray(foundData.parent[this.fields.child])\n                && foundData.parent[this.fields.child].length <= 0) {\n                const parentLi = this.getLiFromObjOrElement(foundData.parent);\n                if (parentLi) {\n                    let li = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption);\n                    this.setAttributes(li);\n                    parentLi.parentElement.insertBefore(li[0], parentLi);\n                    parentLi.parentElement.removeChild(parentLi);\n                }\n            }\n            if (dataSource.length <= 0) {\n                this.back();\n            }\n            this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n        }\n    }\n    // validate before removing an element whether the current view is inside target element's child view\n    validateNestedView(li) {\n        const liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;\n        if (liID && this.curDSLevel && this.curDSLevel.length > 0) {\n            while (this.curDSLevel.some((id) => id.toString().toLowerCase() === liID)) {\n                this.back();\n            }\n        }\n    }\n    /**\n     * Removes multiple items from the ListView by passing the array of elements or array of field objects.\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.\n     */\n    removeMultipleItems(item) {\n        if (item.length) {\n            for (let i = 0; i < item.length; i++) {\n                this.removeItem(item[i]);\n            }\n            this.updateBlazorTemplates(true);\n        }\n    }\n    // tslint:disable-next-line:no-any\n    findParent(dataSource, id, callback, parent) {\n        if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {\n            return extend({}, dataSource);\n        }\n        for (let i = 0; i < Object.keys(dataSource).length; i++) {\n            if (dataSource[Object.keys(dataSource)[i]]\n                && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {\n                // tslint:disable-next-line:no-any\n                let result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);\n                if (result != null) {\n                    if (!result.parent) {\n                        result.parent = parent;\n                    }\n                    return result;\n                }\n            }\n        }\n        return null;\n    }\n    // Module Required function\n    getModuleName() {\n        return 'listview';\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.enableVirtualization) {\n            modules.push({ args: [this], member: 'virtualization' });\n        }\n        return modules;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes',\n            'enable', 'fields', 'animation', 'headerTitle',\n            'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);\n    }\n};\n__decorate([\n    Property('')\n], ListView.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"enableVirtualization\", void 0);\n__decorate([\n    Property({})\n], ListView.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(true)\n], ListView.prototype, \"enable\", void 0);\n__decorate([\n    Property([])\n], ListView.prototype, \"dataSource\", void 0);\n__decorate([\n    Property()\n], ListView.prototype, \"query\", void 0);\n__decorate([\n    Complex(ListBase.defaultMappedFields, FieldSettings)\n], ListView.prototype, \"fields\", void 0);\n__decorate([\n    Property({ effect: 'SlideLeft', duration: 400, easing: 'ease' })\n], ListView.prototype, \"animation\", void 0);\n__decorate([\n    Property('None')\n], ListView.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showIcon\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showCheckBox\", void 0);\n__decorate([\n    Property('Left')\n], ListView.prototype, \"checkBoxPosition\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"headerTitle\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showHeader\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"height\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"template\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionFailure\", void 0);\nListView = __decorate([\n    NotifyPropertyChanges\n], ListView);\n\nconst listElementCount = 1.5;\nconst windowElementCount = 3;\nclass Virtualization {\n    constructor(instance) {\n        this.elementDifference = 0;\n        this.listViewInstance = instance;\n    }\n    /**\n     * For internal use only.\n     * @private\n     */\n    isNgTemplate() {\n        return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';\n    }\n    /**\n     * For internal use only.\n     * @private\n     */\n    uiVirtualization() {\n        this.wireScrollEvent(false);\n        let curViewDS = this.listViewInstance.curViewDS;\n        let firstDs = curViewDS.slice(0, 1);\n        if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n            this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption);\n            this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', { className: classNames.content });\n            this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);\n            this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);\n        }\n        this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;\n        this.expectedDomItemCount = this.ValidateItemCount(10000);\n        this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);\n        this.uiFirstIndex = 0;\n        this.uiLastIndex = this.domItemCount - 1;\n        let otherDs = curViewDS.slice(1, this.domItemCount);\n        if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n            let listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption);\n            append(listItems, this.listViewInstance.ulElement);\n            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n            this.topElement = this.listViewInstance.createElement('div');\n            this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);\n            this.bottomElement = this.listViewInstance.createElement('div');\n            this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);\n            this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\n            this.topElement.style.height = 0 + 'px';\n            this.bottomElement.style.height = this.totalHeight + 'px';\n            this.topElementHeight = 0;\n            this.bottomElementHeight = this.totalHeight;\n        }\n        else {\n            this.listViewInstance.contentContainer = this.listViewInstance.element.querySelector('.e-content');\n            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n        }\n        this.listDiff = 0;\n        this.uiIndicesInitialization();\n    }\n    wireScrollEvent(destroy) {\n        if (!destroy) {\n            if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n                if (this.listViewInstance.isWindow) {\n                    this.onVirtualScroll = this.onVirtualUiScroll.bind(this);\n                    window.addEventListener('scroll', this.onVirtualScroll);\n                }\n                else {\n                    EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);\n                }\n            }\n            else {\n                if (this.listViewInstance.isWindow) {\n                    // tslint:disable-next-line:no-any\n                    this.onVirtualScroll = debounce(this.onVirtualUiScroll.bind(this), 350);\n                    // tslint:enable-next-line:no-any      \n                    this.updateUl = this.updateUlContainer.bind(this);\n                    window.addEventListener('scroll', this.onVirtualScroll);\n                    window.addEventListener('scroll', this.updateUl);\n                }\n                else {\n                    EventHandler.add(this.listViewInstance.element, 'scroll', debounce(this.onVirtualUiScroll, 350), this);\n                    EventHandler.add(this.listViewInstance.element, 'scroll', this.updateUlContainer, this);\n                }\n            }\n        }\n        else {\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) :\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.updateUl) :\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);\n        }\n    }\n    updateUlContainer(e) {\n        let listDiff;\n        let virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + classNames.virtualElementContainer);\n        if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n            this.listViewInstance.updateLiElementHeight();\n        }\n        if (this.listViewInstance.isWindow) {\n            // tslint:disable-next-line:no-any\n            listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2;\n            // tslint:enable-next-line:no-any  \n        }\n        else {\n            // tslint:disable-next-line:no-any\n            listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2;\n            // tslint:enable-next-line:no-any  \n        }\n        if (((listDiff - 1) * this.listViewInstance.liElementHeight) < 0) {\n            virtualElementContainer.style.top = '0px';\n        }\n        else {\n            virtualElementContainer.style.top = (listDiff) * this.listViewInstance.liElementHeight + 'px';\n        }\n    }\n    ValidateItemCount(dataSourceLength) {\n        const height = parseFloat(formatUnit(this.listViewInstance.height));\n        let itemCount;\n        if (this.listViewInstance.isWindow) {\n            itemCount = Math.round((window.innerHeight / this.listItemHeight) * windowElementCount);\n        }\n        else {\n            if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {\n                // tslint:disable-next-line:max-line-length\n                itemCount = Math.round((this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight) * listElementCount);\n            }\n            else {\n                itemCount = Math.round((height / this.listItemHeight) * listElementCount);\n            }\n        }\n        if (itemCount > dataSourceLength) {\n            itemCount = dataSourceLength;\n        }\n        return itemCount;\n    }\n    uiIndicesInitialization() {\n        this.uiIndices = { 'activeIndices': [], 'disabledItemIndices': [], 'hiddenItemIndices': [] };\n        let data = this.listViewInstance.curViewDS;\n        for (let i = 0; i < data.length; i++) {\n            if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {\n                this.uiIndices.activeIndices.push(i);\n            }\n            if (!isNullOrUndefined(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {\n                this.uiIndices.disabledItemIndices.push(i);\n            }\n        }\n        if (this.isNgTemplate()) {\n            let items = this.listViewInstance.element.querySelectorAll('.' + classNames.listItem);\n            for (let index = 0; index < items.length; index++) {\n                items[index].context = this.listViewInstance.viewContainerRef.get(index).context;\n            }\n        }\n    }\n    refreshItemHeight() {\n        if (this.listViewInstance.curViewDS.length) {\n            let curViewDS = this.listViewInstance.curViewDS;\n            if (isBlazor() && this.listViewInstance.isServerRendered) {\n                this.listViewInstance.ulElement.children[0].style.height =\n                    (this.listViewInstance.liElementHeight * (Object.keys(curViewDS).length)) + 'px';\n            }\n            else {\n                this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;\n                this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\n                this.bottomElementHeight = this.totalHeight;\n                this.bottomElement.style.height = this.totalHeight + 'px';\n            }\n        }\n    }\n    getscrollerHeight(startingHeight) {\n        return this.listViewInstance.isWindow ? (((pageYOffset - startingHeight) <= 0) ? 0 :\n            (pageYOffset - startingHeight)) : ((this.listViewInstance.element.scrollTop - startingHeight) <= 0) ? 0 :\n            (this.listViewInstance.element.scrollTop - startingHeight);\n    }\n    onVirtualUiScroll(e) {\n        let startingHeight;\n        if (this.listViewInstance.isWindow) {\n            startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top -\n                document.documentElement.getBoundingClientRect().top;\n        }\n        else {\n            startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;\n        }\n        this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n        let scroll = this.getscrollerHeight(startingHeight);\n        this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n        this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n        [this.topElementHeight, this.bottomElementHeight] = scroll <= this.totalHeight ?\n            [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0];\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let listDiff;\n            if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n                this.listViewInstance.updateLiElementHeight();\n            }\n            if (this.listViewInstance.isWindow) {\n                listDiff = Math.round(document.documentElement.scrollTop / this.listViewInstance.liElementHeight);\n            }\n            else {\n                // tslint:disable-next-line:no-any\n                listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight);\n                // tslint:enable-next-line:no-any\n            }\n            if ((listDiff - 2) - this.elementDifference >= 3 || (listDiff - 2) - this.elementDifference <= -1) {\n                let args = { listDiff: listDiff - 2, selectedItems: this.listViewInstance.previousSelectedItems };\n                this.listViewInstance.interopAdaptor.invokeMethodAsync('VirtalScrolling', args);\n                if (this.listViewInstance.ulElement.querySelector('.e-focused')) {\n                    this.listViewInstance.ulElement.querySelector('.e-focused').classList.remove('e-focused');\n                }\n                this.elementDifference = listDiff - 2;\n            }\n        }\n        else {\n            if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n                this.topElement.style.height = this.topElementHeight + 'px';\n                this.bottomElement.style.height = this.bottomElementHeight + 'px';\n                if (scroll > this.scrollPosition) {\n                    let listDiff = Math.round(((this.topElementHeight / this.listItemHeight) - this.listDiff));\n                    if (listDiff > (this.expectedDomItemCount + 5)) {\n                        this.onLongScroll(listDiff, true);\n                    }\n                    else {\n                        this.onNormalScroll(listDiff, true);\n                    }\n                }\n                else {\n                    let listDiff = Math.round((this.listDiff - (this.topElementHeight / this.listItemHeight)));\n                    if (listDiff > (this.expectedDomItemCount + 5)) {\n                        this.onLongScroll(listDiff, false);\n                    }\n                    else {\n                        this.onNormalScroll(listDiff, false);\n                    }\n                }\n            }\n            this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n            if (typeof this.listViewInstance.onUIScrolled === 'function') {\n                this.listViewInstance.onUIScrolled();\n            }\n        }\n        this.scrollPosition = scroll;\n    }\n    onLongScroll(listDiff, isScrollingDown) {\n        let index = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\n        let elements = this.listViewInstance.ulElement.querySelectorAll('li');\n        for (let i = 0; i < elements.length; i++) {\n            this.updateUI(elements[i], index);\n            index++;\n        }\n        this.uiLastIndex = isScrollingDown ? (this.uiLastIndex + listDiff) : (this.uiLastIndex - listDiff);\n        this.uiFirstIndex = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\n    }\n    onNormalScroll(listDiff, isScrollingDown) {\n        if (isScrollingDown) {\n            for (let i = 0; i < listDiff; i++) {\n                let index = ++this.uiLastIndex;\n                this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);\n                this.uiFirstIndex++;\n            }\n        }\n        else {\n            for (let i = 0; i < listDiff; i++) {\n                let index = --this.uiFirstIndex;\n                let target = this.topElement.nextSibling;\n                this.updateUI(this.bottomElement.previousElementSibling, index, target);\n                this.uiLastIndex--;\n            }\n        }\n    }\n    updateUiContent(element, index) {\n        let curViewDs = this.listViewInstance.curViewDS;\n        if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n            typeof this.listViewInstance.dataSource[0] === 'number') {\n            element.dataset.uid = ListBase.generateId();\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\n                this.listViewInstance.curViewDS[index].toString();\n        }\n        else {\n            element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ?\n                curViewDs[index][this.listViewInstance.fields.id].toString() : ListBase.generateId();\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\n                curViewDs[index][this.listViewInstance.fields.text].toString();\n        }\n        if (this.listViewInstance.showIcon) {\n            if (element.querySelector('.' + classNames.listIcon)) {\n                detach(element.querySelector('.' + classNames.listIcon));\n            }\n            if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {\n                let textContent = element.querySelector('.' + classNames.textContent);\n                let target = this.listViewInstance.createElement('div', {\n                    className: classNames.listIcon + ' ' +\n                        this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]\n                });\n                textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));\n            }\n        }\n        if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {\n            if (!this.checkListWrapper) {\n                this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);\n            }\n            let textContent = element.querySelector('.' + classNames.textContent);\n            if (this.listViewInstance.curViewDS[index].isHeader) {\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\n                    element.classList.remove(classNames.checklist);\n                    textContent.classList.remove(classNames.checkbox);\n                    detach(element.querySelector('.' + classNames.checkboxWrapper));\n                }\n            }\n            else {\n                if (!element.querySelector('.' + classNames.checkboxWrapper)) {\n                    element.classList.add(classNames.checklist);\n                    textContent.classList.add(classNames.checkbox);\n                    textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));\n                }\n            }\n        }\n    }\n    changeElementAttributes(element, index) {\n        element.classList.remove(classNames.disable);\n        if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {\n            element.classList.add(classNames.disable);\n        }\n        element.style.display = '';\n        if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {\n            element.style.display = 'none';\n        }\n        if (this.listViewInstance.showCheckBox) {\n            let checklistElement = element.querySelector('.' + classNames.checkboxWrapper);\n            element.classList.remove(classNames.selected);\n            element.classList.remove(classNames.focused);\n            if (checklistElement) {\n                checklistElement.removeAttribute('aria-checked');\n                checklistElement.firstElementChild.classList.remove(classNames.checked);\n            }\n            if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 &&\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n                element.classList.add(classNames.selected);\n                checklistElement.firstElementChild.classList.add(classNames.checked);\n                checklistElement.setAttribute('aria-checked', 'true');\n                if (this.activeIndex === index) {\n                    element.classList.add(classNames.focused);\n                }\n            }\n        }\n        else {\n            element.classList.remove(classNames.selected);\n            element.removeAttribute('aria-selected');\n            if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index &&\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n                element.classList.add(classNames.selected);\n                element.setAttribute('aria-selected', 'true');\n            }\n        }\n        if (this.listViewInstance.fields.groupBy) {\n            if (this.listViewInstance.curViewDS[index].isHeader) {\n                if (element.classList.contains(classNames.listItem)) {\n                    element.classList.remove(classNames.listItem);\n                    element.setAttribute('role', 'group');\n                    element.classList.add(classNames.groupListItem);\n                }\n            }\n            else {\n                if (element.classList.contains(classNames.groupListItem)) {\n                    element.classList.remove(classNames.groupListItem);\n                    element.setAttribute('role', 'listitem');\n                    element.classList.add(classNames.listItem);\n                }\n            }\n        }\n    }\n    findDSAndIndexFromId(ds, fields) {\n        let resultJSON = {};\n        fields = this.listViewInstance.getElementUID(fields);\n        if (!isNullOrUndefined(fields)) {\n            ds.some((data, index) => {\n                if ((fields[this.listViewInstance.fields.id] &&\n                    fields[this.listViewInstance.fields.id].toString()\n                        === (data[this.listViewInstance.fields.id] && data[this.listViewInstance.fields.id].toString())) || fields === data) {\n                    resultJSON.index = index;\n                    resultJSON.data = data;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            });\n        }\n        return resultJSON;\n    }\n    getSelectedItems() {\n        if (!isNullOrUndefined(this.activeIndex) || (this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length)) {\n            let dataCollection = [];\n            let textCollection = [];\n            if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n                typeof this.listViewInstance.dataSource[0] === 'number') {\n                let curViewDS = this.listViewInstance.curViewDS;\n                if (this.listViewInstance.showCheckBox) {\n                    let indices = this.uiIndices.activeIndices;\n                    for (let i = 0; i < indices.length; i++) {\n                        dataCollection.push(curViewDS[indices[i]]);\n                    }\n                    return {\n                        text: dataCollection,\n                        data: dataCollection,\n                        index: this.uiIndices.activeIndices.map((index) => this.listViewInstance.dataSource.indexOf(curViewDS[index]))\n                    };\n                }\n                else {\n                    return {\n                        text: curViewDS[this.activeIndex],\n                        data: curViewDS[this.activeIndex],\n                        index: this.listViewInstance.dataSource.indexOf(curViewDS[this.activeIndex])\n                    };\n                }\n            }\n            else {\n                if (isBlazor() && this.listViewInstance.isServerRendered) {\n                    let scrollDiff = Math.round(this.listViewInstance.element.scrollTop /\n                        this.listViewInstance.liElementHeight) - 2;\n                    if (scrollDiff < 0) {\n                        scrollDiff = 0;\n                    }\n                    this.activeIndex += scrollDiff;\n                }\n                let curViewDS = this.listViewInstance.curViewDS;\n                let text = this.listViewInstance.fields.text;\n                if (this.listViewInstance.showCheckBox) {\n                    let indexArray = this.uiIndices.activeIndices;\n                    for (let i = 0; i < indexArray.length; i++) {\n                        textCollection.push(curViewDS[indexArray[i]][text]);\n                        dataCollection.push(curViewDS[indexArray[i]]);\n                    }\n                    let dataSource = this.listViewInstance.dataSource instanceof DataManager\n                        ? curViewDS : this.listViewInstance.dataSource;\n                    return {\n                        text: textCollection,\n                        data: dataCollection,\n                        index: this.uiIndices.activeIndices.map((index) => dataSource.indexOf(curViewDS[index]))\n                    };\n                }\n                else {\n                    let dataSource = this.listViewInstance.dataSource instanceof DataManager\n                        ? curViewDS : this.listViewInstance.dataSource;\n                    return {\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n                        data: curViewDS[this.activeIndex],\n                        index: dataSource.indexOf(curViewDS[this.activeIndex])\n                    };\n                }\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n    selectItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (Object.keys(resutJSON).length) {\n            let isSelected = this.activeIndex === resutJSON.index;\n            let isChecked;\n            this.activeIndex = resutJSON.index;\n            if (this.listViewInstance.showCheckBox) {\n                if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {\n                    isChecked = true;\n                    this.uiIndices.activeIndices.push(resutJSON.index);\n                }\n                else {\n                    isChecked = false;\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);\n                }\n                if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {\n                    this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n                }\n            }\n            if (this.listViewInstance.getLiFromObjOrElement(obj)) {\n                if (this.listViewInstance.showCheckBox) {\n                    this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));\n                }\n                else {\n                    this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));\n                }\n            }\n            else {\n                let eventArgs;\n                if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n                    typeof this.listViewInstance.dataSource[0] === 'number') {\n                    eventArgs = {\n                        text: this.listViewInstance.curViewDS[this.activeIndex],\n                        data: this.listViewInstance.curViewDS[this.activeIndex],\n                        index: this.activeIndex\n                    };\n                }\n                else {\n                    let curViewDS = this.listViewInstance.curViewDS;\n                    eventArgs = {\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n                        data: curViewDS[this.activeIndex],\n                        index: this.activeIndex\n                    };\n                }\n                if (this.listViewInstance.showCheckBox) {\n                    eventArgs.isChecked = isChecked;\n                    this.listViewInstance.trigger('select', eventArgs);\n                }\n                else if (!isSelected) {\n                    this.listViewInstance.removeSelect();\n                    this.listViewInstance.trigger('select', eventArgs);\n                }\n            }\n        }\n        else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {\n            this.listViewInstance.removeSelect();\n            this.activeIndex = undefined;\n        }\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let elementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (this.listViewInstance.showCheckBox) {\n                if (!this.listViewInstance.previousSelectedItems.includes(elementId)) {\n                    this.listViewInstance.previousSelectedItems.push(elementId);\n                }\n                else {\n                    let indexPosition = this.listViewInstance.previousSelectedItems.indexOf(elementId);\n                    if (indexPosition > -1) {\n                        this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n                    }\n                }\n            }\n            else {\n                this.listViewInstance.previousSelectedItems[0] = elementId;\n            }\n            this.listViewInstance.removeActiveClass();\n        }\n    }\n    enableItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let itemId = resutJSON.data[this.listViewInstance.fields.id];\n            if (!this.listViewInstance.enabledItems.includes(itemId)) {\n                this.listViewInstance.enabledItems.push(itemId);\n                this.listViewInstance.removeActiveClass();\n            }\n            if (this.listViewInstance.disabledItems.includes(itemId)) {\n                let indexPosition = this.listViewInstance.disabledItems.indexOf(itemId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.disabledItems.splice(indexPosition, 1);\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length) {\n                this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);\n            }\n        }\n    }\n    disableItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let liElementId = resutJSON.data[this.listViewInstance.fields.id];\n            if (!this.listViewInstance.disabledItems.includes(liElementId)) {\n                this.listViewInstance.disabledItems.push(liElementId);\n                this.listViewInstance.removeActiveClass();\n            }\n            if (this.listViewInstance.enabledItems.includes(liElementId)) {\n                let indexPosition = this.listViewInstance.enabledItems.indexOf(liElementId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.enabledItems.splice(indexPosition, 1);\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {\n                this.uiIndices.disabledItemIndices.push(resutJSON.index);\n            }\n        }\n    }\n    showItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let hiddenElementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (this.listViewInstance.hiddenItems.includes(hiddenElementId)) {\n                let indexPosition = this.listViewInstance.hiddenItems.indexOf(hiddenElementId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n                    this.listViewInstance.removeActiveClass();\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length) {\n                this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);\n            }\n        }\n    }\n    hideItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let elementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (!this.listViewInstance.hiddenItems.includes(elementId)) {\n                this.listViewInstance.hiddenItems.push(elementId);\n                this.listViewInstance.removeActiveClass();\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {\n                this.uiIndices.hiddenItemIndices.push(resutJSON.index);\n            }\n        }\n    }\n    removeItem(obj) {\n        let dataSource;\n        const curViewDS = this.listViewInstance.curViewDS;\n        let resutJSON = this.findDSAndIndexFromId(curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            if (resutJSON.index !== undefined) {\n                // tslint:disable\n                this.listViewInstance.interopAdaptor.invokeMethodAsync('RemoveItemPosition', resutJSON.index);\n                // tslint:enable\n            }\n        }\n        if (Object.keys(resutJSON).length) {\n            dataSource = resutJSON.data;\n            if (curViewDS[resutJSON.index - 1] &&\n                curViewDS[resutJSON.index - 1].isHeader &&\n                (curViewDS[resutJSON.index - 1])\n                    .items.length === 1) {\n                this.removeUiItem(resutJSON.index - 1);\n                this.removeUiItem(resutJSON.index - 1);\n            }\n            else {\n                if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n                    this.removeUiItem(resutJSON.index);\n                }\n            }\n        }\n        const listDataSource = this.listViewInstance.dataSource instanceof DataManager\n            ? this.listViewInstance.localData : this.listViewInstance.dataSource;\n        let index = listDataSource.indexOf(dataSource);\n        if (index !== -1) {\n            listDataSource.splice(index, 1);\n            this.listViewInstance.setViewDataSource(listDataSource);\n        }\n        // recollect all the list item into collection\n        this.listViewInstance.liCollection =\n            this.listViewInstance.curUL.querySelectorAll('li');\n    }\n    setCheckboxLI(li, e) {\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            this.uiFirstIndex = Math.round(this.listViewInstance.element.scrollTop / 36) - 4;\n            if (this.uiFirstIndex < 0) {\n                this.uiFirstIndex = 0;\n            }\n        }\n        let index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n        if (li.classList.contains(classNames.selected)) {\n            if (this.uiIndices.activeIndices.indexOf(index) === -1) {\n                this.uiIndices.activeIndices.push(index);\n            }\n        }\n        else {\n            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n        }\n    }\n    setSelectLI(li, e) {\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n    }\n    checkedItem(checked) {\n        if (checked) {\n            this.uiIndices.activeIndices = [];\n            this.activeIndex = undefined;\n            let data = this.listViewInstance.curViewDS;\n            for (let index = 0; index < data.length; index++) {\n                if (!data[index].isHeader) {\n                    this.uiIndices.activeIndices.push(index);\n                }\n            }\n        }\n        else {\n            this.activeIndex = undefined;\n            this.uiIndices.activeIndices = [];\n        }\n    }\n    addUiItem(index) {\n        // virtually new add list item based on the scollbar position\n        // if the scroll bar is at the top, just pretend the new item has been added since no UI\n        // change is required for the item that has been added at last but when scroll bar is at the bottom\n        // just detach top and inject into bottom to mimic new item is added\n        let curViewDs = this.listViewInstance.curViewDS;\n        this.changeUiIndices(index, true);\n        if (this.activeIndex && this.activeIndex >= index) {\n            this.activeIndex++;\n        }\n        if (this.listViewInstance.showCheckBox &&\n            curViewDs[index][this.listViewInstance.fields.isChecked]) {\n            this.uiIndices.activeIndices.push(index);\n        }\n        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n        }\n        if (parseFloat(this.bottomElement.style.height)) {\n            let liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;\n            let target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\n                this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n            if (target) {\n                this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n                this.updateUI(liItem, index, target);\n            }\n        }\n        else {\n            let liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;\n            let target;\n            if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\n                target = this.listViewInstance.curUL.lastElementChild;\n            }\n            else {\n                target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\n                    this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n            }\n            this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';\n            this.uiFirstIndex++;\n            this.uiLastIndex++;\n            if (target) {\n                this.updateUI(liItem, index, target);\n                this.listViewInstance.isWindow ? window.scrollTo(0, (pageYOffset + this.listItemHeight)) :\n                    this.listViewInstance.element.scrollTop += this.listItemHeight;\n            }\n        }\n        this.totalHeight += this.listItemHeight;\n        this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n    }\n    removeUiItem(index) {\n        this.totalHeight -= this.listItemHeight;\n        let curViewDS = this.listViewInstance.curViewDS[index];\n        let liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);\n        this.listViewInstance.curViewDS.splice(index, 1);\n        if (this.activeIndex && this.activeIndex >= index) {\n            this.activeIndex--;\n        }\n        if (liItem) {\n            if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {\n                detach(liItem);\n                this.domItemCount--;\n                this.uiLastIndex--;\n                this.totalHeight = 0;\n            }\n            else {\n                if (liItem.classList.contains(classNames.disable)) {\n                    liItem.classList.remove(classNames.disable);\n                    this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);\n                }\n                if (liItem.style.display === 'none') {\n                    liItem.style.display = '';\n                    this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);\n                }\n                if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {\n                    this.listViewInstance.removeSelect();\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n                    let checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);\n                    checklistElement.removeAttribute('aria-checked');\n                    checklistElement.firstElementChild.classList.remove(classNames.checked);\n                    if (liItem.classList.contains(classNames.focused)) {\n                        liItem.classList.remove(classNames.focused);\n                        this.activeIndex = undefined;\n                    }\n                }\n                else if (liItem.classList.contains(classNames.selected)) {\n                    this.listViewInstance.removeSelect();\n                    this.activeIndex = undefined;\n                }\n                if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n                }\n                else if (parseFloat(this.bottomElement.style.height)) {\n                    this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n                }\n                else {\n                    this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';\n                    this.updateUI(liItem, (this.uiFirstIndex - 1), this.topElement.nextSibling);\n                    this.uiLastIndex--;\n                    this.uiFirstIndex--;\n                }\n            }\n        }\n        this.changeUiIndices(index, false);\n        this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n    }\n    changeUiIndices(index, increment) {\n        let keys = Object.keys(this.uiIndices);\n        for (let ind = 0; ind < keys.length; ind++) {\n            this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map((i) => {\n                if (i >= index) {\n                    return increment ? ++i : --i;\n                }\n                else {\n                    return i;\n                }\n            });\n        }\n    }\n    addItem(data, fields, dataSource) {\n        for (let i = 0; i < data.length; i++) {\n            let currentItem = data[i];\n            // push the given data to main data array\n            dataSource.push(currentItem);\n            // recalculate all the group data or other datasource related things\n            this.listViewInstance.setViewDataSource(dataSource);\n            // render list items for first time due to no datasource present earlier\n            if (!this.domItemCount) {\n                // fresh rendering for first time\n                if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {\n                    this.listViewInstance.listBaseOption.template = null;\n                    this.listViewInstance.listBaseOption.groupTemplate = null;\n                    this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);\n                }\n                this.uiVirtualization();\n                // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM\n            }\n            else if (this.domItemCount < this.expectedDomItemCount) {\n                let ds = this.listViewInstance.findItemFromDS(dataSource, fields);\n                if (ds instanceof Array) {\n                    if (this.listViewInstance.ulElement) {\n                        let index = this.listViewInstance.curViewDS.indexOf(currentItem);\n                        // inject new list item into DOM\n                        this.createAndInjectNewItem(currentItem, index);\n                        // check for group header item\n                        let curViewDS = this.listViewInstance.curViewDS[index - 1];\n                        if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n                            // target group item index in datasource\n                            --index;\n                            // inject new group header into DOM for previously created list item\n                            this.createAndInjectNewItem(curViewDS, index);\n                        }\n                    }\n                    // recollect all the list item into collection\n                    this.listViewInstance.liCollection =\n                        this.listViewInstance.curUL.querySelectorAll('li');\n                }\n            }\n            else {\n                let index = this.listViewInstance.curViewDS.indexOf(currentItem);\n                // virtually new add list item based on the scollbar position\n                this.addUiItem(index);\n                // check for group header item needs to be added\n                let curViewDS = this.listViewInstance.curViewDS[index - 1];\n                if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n                    this.addUiItem(index - 1);\n                }\n            }\n        }\n    }\n    createAndInjectNewItem(itemData, index) {\n        // generate li item for given datasource\n        let target;\n        let li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption);\n        // check for target element whether to insert before last item or group item\n        if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\n            target = this.listViewInstance.curUL.lastElementChild;\n        }\n        else {\n            // target group header's first child item to append its header\n            target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) ||\n                this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);\n        }\n        // insert before the target element\n        this.listViewInstance.ulElement.insertBefore(li[0], target);\n        // increment internal DOM count, last index count for new element\n        this.domItemCount++;\n        if (this.bottomElementHeight <= 0) {\n            this.uiLastIndex++;\n        }\n        // recalculate the current item height, to avoid jumpy scroller\n        this.refreshItemHeight();\n    }\n    createUIItem(args) {\n        let virtualTemplate = this.listViewInstance.template;\n        let template = this.listViewInstance.createElement('div');\n        let commonTemplate = '<div class=\"e-text-content\" role=\"presentation\"> ' +\n            '<span class=\"e-list-text\"> ${' + this.listViewInstance.fields.text + '} </span></div>';\n        if (this.listViewInstance.showCheckBox) {\n            // tslint:disable-next-line:no-any\n            this.listViewInstance.renderCheckbox(args);\n            // tslint:enable-next-line:no-any\n            if ((!isNullOrUndefined(this.listViewInstance.virtualCheckBox)) &&\n                (!isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML))) {\n                let div = document.createElement('div');\n                div.innerHTML = this.listViewInstance.template || commonTemplate;\n                div.children[0].classList.add('e-checkbox');\n                this.listViewInstance.checkBoxPosition === 'Left' ? div.children[0].classList.add('e-checkbox-left') :\n                    div.children[0].classList.add('e-checkbox-right');\n                if (this.listViewInstance.checkBoxPosition === 'Left') {\n                    div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);\n                }\n                else {\n                    div.children[0].appendChild(this.listViewInstance.virtualCheckBox);\n                }\n                this.listViewInstance.template = div.innerHTML;\n            }\n            template.innerHTML = this.listViewInstance.template;\n            this.listViewInstance.template = virtualTemplate;\n        }\n        else {\n            template.innerHTML = this.listViewInstance.template || commonTemplate;\n        }\n        // tslint:disable-next-line:no-any\n        let templateElements = template.getElementsByTagName('*');\n        let groupTemplate = this.listViewInstance.createElement('div');\n        if (this.listViewInstance.fields.groupBy) {\n            groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;\n        }\n        // tslint:disable-next-line:no-any\n        let groupTemplateElements = groupTemplate.getElementsByTagName('*');\n        if (args.curData.isHeader) {\n            this.headerData = args.curData;\n        }\n        this.templateData = args.curData.isHeader ? args.curData.items[0] :\n            args.curData;\n        args.item.innerHTML = '';\n        args.item.context = { data: args.curData, nodes: { flatTemplateNodes: [], groupTemplateNodes: [] } };\n        for (let i = 0; i < templateElements.length; i++) {\n            this.compileTemplate(templateElements[i], args.item, false);\n        }\n        for (let i = 0; i < groupTemplateElements.length; i++) {\n            this.compileTemplate(groupTemplateElements[i], args.item, true);\n        }\n        args.item.context.template = args.curData.isHeader ? template.firstElementChild :\n            groupTemplate.firstElementChild;\n        args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';\n        let element = args.curData.isHeader ? groupTemplate : template;\n        args.item.insertBefore(element.firstElementChild, null);\n    }\n    compileTemplate(element, item, isHeader) {\n        this.textProperty(element, item, isHeader);\n        this.classProperty(element, item, isHeader);\n        this.attributeProperty(element, item, isHeader);\n    }\n    onChange(newData, listElement) {\n        listElement.context.data = newData;\n        let groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;\n        let flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;\n        if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {\n            let element = listElement.firstElementChild;\n            detach(listElement.firstElementChild);\n            listElement.insertBefore(listElement.context.template, null);\n            listElement.context.template = element;\n            listElement.context.type = 'flatList';\n            for (let i = 0; i < groupTemplateNodes.length; i++) {\n                groupTemplateNodes[i].onChange(newData);\n            }\n        }\n        else if (!newData.isHeader && listElement.context.type === 'flatList') {\n            let element = listElement.firstElementChild;\n            detach(listElement.firstElementChild);\n            listElement.insertBefore(listElement.context.template, null);\n            listElement.context.template = element;\n            listElement.context.type = 'groupList';\n            for (let i = 0; i < flatTemplateNodes.length; i++) {\n                flatTemplateNodes[i].onChange(newData);\n            }\n        }\n        else if (!newData.isHeader) {\n            for (let i = 0; i < flatTemplateNodes.length; i++) {\n                flatTemplateNodes[i].onChange(newData);\n            }\n        }\n        else {\n            for (let i = 0; i < groupTemplateNodes.length; i++) {\n                groupTemplateNodes[i].onChange(newData);\n            }\n        }\n    }\n    updateContextData(listElement, node, isHeader) {\n        if (isHeader) {\n            listElement.context.nodes.groupTemplateNodes.push(node);\n        }\n        else {\n            listElement.context.nodes.flatTemplateNodes.push(node);\n        }\n    }\n    classProperty(element, listElement, isHeader) {\n        let regex = new RegExp('\\\\${([^}]*)}', 'g');\n        let resultantOutput = [];\n        let regexMatch;\n        while (regexMatch !== null) {\n            let match = regex.exec(element.className);\n            resultantOutput.push(match);\n            regexMatch = match;\n            if (regexMatch === null) {\n                resultantOutput.pop();\n            }\n        }\n        if (resultantOutput && resultantOutput.length) {\n            for (let i = 0; i < resultantOutput.length; i++) {\n                let classNameMatch = resultantOutput[i];\n                let classFunction;\n                if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\\$/g, 'data.'));\n                }\n                else {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);\n                }\n                let subNode = {};\n                if (isHeader) {\n                    subNode.bindedvalue = classFunction(this.headerData);\n                }\n                else {\n                    subNode.bindedvalue = classFunction(this.templateData);\n                }\n                subNode.onChange = (value) => {\n                    if (subNode.bindedvalue) {\n                        removeClass([element], subNode.bindedvalue.split(' ').filter((css) => css));\n                    }\n                    let newCss = classFunction(value);\n                    if (newCss) {\n                        addClass([element], (newCss).split(' ').filter((css) => css));\n                    }\n                    subNode.bindedvalue = newCss;\n                };\n                let className = classNameMatch[0].split(' ');\n                for (let i = 0; i < className.length; i++) {\n                    element.classList.remove(className[i]);\n                }\n                if (subNode.bindedvalue) {\n                    addClass([element], subNode.bindedvalue.split(' ').filter((css) => css));\n                }\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    attributeProperty(element, listElement, isHeader) {\n        let attributeNames = [];\n        for (let i = 0; i < element.attributes.length; i++) {\n            attributeNames.push(element.attributes[i].nodeName);\n        }\n        if (attributeNames.indexOf('class') !== -1) {\n            attributeNames.splice(attributeNames.indexOf('class'), 1);\n        }\n        for (let i = 0; i < attributeNames.length; i++) {\n            let attributeName = attributeNames[i];\n            let attrNameMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(attributeName) || [];\n            let attrValueMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName))\n                || [];\n            let attributeNameFunction;\n            let attributeValueFunction;\n            if (attrNameMatch.length || attrValueMatch.length) {\n                if (attrNameMatch[1]) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);\n                }\n                if (attrValueMatch[1]) {\n                    if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\n                        attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\\$/g, 'data.'));\n                    }\n                    else {\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\n                        attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);\n                    }\n                }\n                let subNode = {};\n                if (isHeader) {\n                    subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.headerData),\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.headerData)];\n                }\n                else {\n                    subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.templateData),\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.templateData)];\n                }\n                subNode.attrName = subNode.bindedvalue[0] === undefined ?\n                    attributeName : subNode.bindedvalue[0];\n                subNode.onChange = (value) => {\n                    let bindedvalue = subNode.bindedvalue[1] === undefined ?\n                        element.getAttribute(subNode.attrName) : attributeValueFunction(value);\n                    element.removeAttribute(subNode.attrName);\n                    subNode.attrName = subNode.bindedvalue[0] === undefined ? subNode.attrName : attributeNameFunction(value);\n                    element.setAttribute(subNode.attrName, bindedvalue);\n                    subNode.bindedvalue = [subNode.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value),\n                        subNode.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];\n                };\n                let attributeValue = subNode.bindedvalue[1] === undefined ? element.getAttribute(attributeName) :\n                    subNode.bindedvalue[1];\n                element.removeAttribute(attributeName);\n                element.setAttribute(subNode.attrName, attributeValue);\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    textProperty(element, listElement, isHeader) {\n        let regex = new RegExp('\\\\${([^}]*)}', 'g');\n        let resultantOutput = [];\n        let regexMatch;\n        while (regexMatch !== null) {\n            let match = regex.exec(element.innerText);\n            resultantOutput.push(match);\n            regexMatch = match;\n            if (regexMatch === null) {\n                resultantOutput.pop();\n            }\n        }\n        let isChildHasTextContent = Array.prototype.some.call(element.children, (element) => {\n            if (new RegExp('\\\\${([^}]*)}', 'g').exec(element.innerText)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {\n            for (let i = 0; i < resultantOutput.length; i++) {\n                let textPropertyMatch = resultantOutput[i];\n                let subNode = {};\n                let textFunction;\n                if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\\$/g, 'data.'));\n                }\n                else {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);\n                }\n                if (isHeader) {\n                    subNode.bindedvalue = textFunction(this.headerData);\n                }\n                else {\n                    subNode.bindedvalue = textFunction(this.templateData);\n                }\n                subNode.onChange = (value) => {\n                    element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));\n                    subNode.bindedvalue = textFunction(value);\n                };\n                element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    reRenderUiVirtualization() {\n        this.wireScrollEvent(true);\n        if (this.listViewInstance.contentContainer) {\n            detach(this.listViewInstance.contentContainer);\n        }\n        this.listViewInstance.preRender();\n        // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero\n        // and then manually adding item using addItem API\n        this.domItemCount = 0;\n        this.listViewInstance.header();\n        this.listViewInstance.setLocalData();\n    }\n    updateUI(element, index, targetElement) {\n        let onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;\n        if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {\n            let curViewDS = this.listViewInstance.curViewDS[index];\n            element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ?\n                curViewDS[this.listViewInstance.fields.id].toString() : ListBase.generateId();\n            onChange(curViewDS, element, this);\n        }\n        else {\n            this.updateUiContent(element, index);\n        }\n        this.changeElementAttributes(element, index);\n        if (targetElement) {\n            this.listViewInstance.ulElement.insertBefore(element, targetElement);\n        }\n    }\n    onNgChange(newData, listElement, virtualThis) {\n        // compile given target element with template for new data\n        let templateCompiler = compile(virtualThis.listViewInstance.template);\n        let resultElement = templateCompiler(newData);\n        while (listElement.lastChild) {\n            listElement.removeChild(listElement.lastChild);\n        }\n        listElement.appendChild(resultElement[0]);\n    }\n    getModuleName() {\n        return 'virtualization';\n    }\n    destroy() {\n        this.wireScrollEvent(true);\n    }\n}\n\n/**\n * Listview Component\n */\n\n/**\n * Listview Component\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Sortable_1;\n/**\n * Sortable Module provides support to enable sortable functionality in Dom Elements.\n * ```html\n * <div id=\"sortable\">\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n *   <div>Item 3</div>\n *   <div>Item 4</div>\n *   <div>Item 5</div>\n * </div>\n * ```\n * ```typescript\n *   let ele: HTMLElement = document.getElementById('sortable');\n *   let sortObj: Sortable = new Sortable(ele, {});\n * ```\n */\nlet Sortable = Sortable_1 = class Sortable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.getHelper = (e) => {\n            let target = this.getSortableElement(e.sender.target);\n            if (!this.isValidTarget(target, this)) {\n                return false;\n            }\n            let element;\n            if (this.helper) {\n                element = this.helper({ sender: target, element: e.element });\n            }\n            else {\n                element = target.cloneNode(true);\n                element.style.width = `${target.offsetWidth}px`;\n                element.style.height = `${target.offsetHeight}px`;\n            }\n            addClass([element], ['e-sortableclone']);\n            document.body.appendChild(element);\n            return element;\n        };\n        this.onDrag = (e) => {\n            this.trigger('drag', { event: e.event, element: this.element, target: e.target });\n            let newInst = this.getSortableInstance(e.target);\n            let target = this.getSortableElement(e.target, newInst);\n            if ((this.isValidTarget(target, newInst) || e.target.className.indexOf('e-list-group-item') > -1) && this.curTarget !== target &&\n                (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {\n                if (e.target.className.indexOf('e-list-group-item') > -1) {\n                    target = e.target;\n                }\n                this.curTarget = target;\n                let oldIdx = this.getIndex(newInst.placeHolderElement, newInst);\n                oldIdx = isNullOrUndefined(oldIdx) ? this.getIndex(this.target) :\n                    this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;\n                newInst.placeHolderElement = this.getPlaceHolder(target, newInst);\n                let newIdx = this.getIndex(target, newInst);\n                let idx = newInst.element !== this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;\n                if (newInst.placeHolderElement) {\n                    if (e.target.className.indexOf('e-list-group-item') > -1) {\n                        newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);\n                    }\n                    else if (newInst.element !== this.element && idx === newInst.element.childElementCount - 1) {\n                        newInst.element.appendChild(newInst.placeHolderElement);\n                    }\n                    else {\n                        newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[idx]);\n                    }\n                    this.refreshDisabled(oldIdx, newIdx, newInst);\n                }\n                else {\n                    this.updateItemClass(newInst);\n                    newInst.element.insertBefore(this.target, newInst.element.children[idx]);\n                    this.refreshDisabled(oldIdx, newIdx, newInst);\n                    this.curTarget = this.target;\n                    this.trigger('drop', { droppedElement: this.target, element: newInst.element, previousIndex: oldIdx, currentIndex: newIdx,\n                        target: e.target, helper: document.getElementsByClassName('e-sortableclone')[0], event: e.event, scope: this.scope });\n                }\n            }\n            newInst = this.getSortableInstance(this.curTarget);\n            if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {\n                if (this.isPlaceHolderPresent(newInst)) {\n                    this.removePlaceHolder(newInst);\n                }\n            }\n            else {\n                let placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));\n                let inst;\n                placeHolders.forEach((placeHolder) => {\n                    inst = this.getSortableInstance(placeHolder);\n                    if (inst.element && inst !== newInst) {\n                        this.removePlaceHolder(inst);\n                    }\n                });\n            }\n        };\n        this.onDragStart = (e) => {\n            this.target = this.getSortableElement(e.target);\n            let cancelDrag = false;\n            this.target.classList.add('e-grabbed');\n            this.curTarget = this.target;\n            e.helper = document.getElementsByClassName('e-sortableclone')[0];\n            let args = { cancel: false, element: this.element, target: this.target };\n            this.trigger('beforeDragStart', args, (observedArgs) => {\n                if (observedArgs.cancel) {\n                    cancelDrag = observedArgs.cancel;\n                    this.onDragStop(e);\n                }\n            });\n            if (cancelDrag) {\n                return;\n            }\n            if (isBlazor) {\n                this.trigger('dragStart', { event: e.event, element: this.element, target: this.target,\n                    bindEvents: e.bindEvents, dragElement: e.dragElement });\n            }\n            else {\n                this.trigger('dragStart', { event: e.event, element: this.element, target: this.target });\n            }\n        };\n        this.onDragStop = (e) => {\n            let dropInst = this.getSortableInstance(this.curTarget);\n            let prevIdx;\n            let curIdx;\n            let handled;\n            prevIdx = this.getIndex(this.target);\n            if (this.isPlaceHolderPresent(dropInst)) {\n                let curIdx = this.getIndex(dropInst.placeHolderElement, dropInst);\n                let args = { previousIndex: prevIdx, currentIndex: curIdx, target: e.target, droppedElement: this.target,\n                    helper: e.helper, cancel: false, handled: false };\n                this.trigger('beforeDrop', args, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        handled = observedArgs.handled;\n                        this.updateItemClass(dropInst);\n                        if (observedArgs.handled) {\n                            let ele = this.target.cloneNode(true);\n                            this.target.classList.remove('e-grabbed');\n                            this.target = ele;\n                        }\n                        dropInst.element.insertBefore(this.target, dropInst.placeHolderElement);\n                        let curIdx = this.getIndex(this.target, dropInst);\n                        prevIdx = this === dropInst && (prevIdx - curIdx) > 1 ? prevIdx - 1 : prevIdx;\n                        this.trigger('drop', { event: e.event, element: dropInst.element, previousIndex: prevIdx, currentIndex: curIdx,\n                            target: e.target, helper: e.helper, droppedElement: this.target, scopeName: this.scope, handled: handled });\n                    }\n                    remove(dropInst.placeHolderElement);\n                });\n            }\n            dropInst = this.getSortableInstance(e.target);\n            curIdx = dropInst.element.childElementCount;\n            prevIdx = this.getIndex(this.target);\n            if (dropInst.element === e.target) {\n                let beforeDropArgs = { previousIndex: prevIdx, currentIndex: curIdx, target: e.target,\n                    droppedElement: this.target, helper: e.helper, cancel: false };\n                this.trigger('beforeDrop', beforeDropArgs, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        this.updateItemClass(dropInst);\n                        dropInst.element.appendChild(this.target);\n                        this.trigger('drop', { event: e.event, element: dropInst.element, previousIndex: prevIdx, currentIndex: curIdx,\n                            target: e.target, helper: e.helper, droppedElement: this.target, scopeName: this.scope });\n                    }\n                });\n            }\n            this.target.classList.remove('e-grabbed');\n            this.target = null;\n            this.curTarget = null;\n            remove(e.helper);\n            getComponent(this.element, Draggable).intDestroy(e.event);\n        };\n        this.bind();\n    }\n    bind() {\n        if (!this.element.id) {\n            this.element.id = getUniqueID('sortable');\n        }\n        if (!this.itemClass) {\n            this.itemClass = 'e-sort-item';\n            this.dataBind();\n        }\n        this.initializeDraggable();\n    }\n    initializeDraggable() {\n        new Draggable(this.element, {\n            helper: this.getHelper,\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragStop: this.onDragStop,\n            dragTarget: `.${this.itemClass}`,\n            enableTapHold: true,\n            tapHoldThreshold: 200,\n            queryPositionInfo: this.queryPositionInfo\n        });\n    }\n    getPlaceHolder(target, instance) {\n        if (instance.placeHolder) {\n            if (this.isPlaceHolderPresent(instance)) {\n                remove(instance.placeHolderElement);\n            }\n            instance.placeHolderElement = instance.placeHolder({ element: instance.element, grabbedElement: this.target, target: target });\n            instance.placeHolderElement.classList.add('e-sortable-placeholder');\n            return instance.placeHolderElement;\n        }\n        return null;\n    }\n    isValidTarget(target, instance) {\n        return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) &&\n            !target.classList.contains('e-disabled');\n    }\n    removePlaceHolder(instance) {\n        remove(instance.placeHolderElement);\n        instance.placeHolderElement = null;\n    }\n    updateItemClass(instance) {\n        if (this !== instance) {\n            this.target.classList.remove(this.itemClass);\n            this.target.classList.add(instance.itemClass);\n        }\n    }\n    getSortableInstance(element) {\n        element = closest(element, `.e-${this.getModuleName()}`);\n        if (element) {\n            let inst = getComponent(element, Sortable_1);\n            return inst.scope && this.scope && inst.scope === this.scope ? inst : this;\n        }\n        else {\n            return this;\n        }\n    }\n    refreshDisabled(oldIdx, newIdx, instance) {\n        if (instance === this) {\n            let element;\n            let increased = oldIdx < newIdx;\n            let disabledIdx;\n            let start = increased ? oldIdx : newIdx;\n            let end = increased ? newIdx : oldIdx;\n            while (start <= end) {\n                element = this.element.children[start];\n                if (element.classList.contains('e-disabled')) {\n                    disabledIdx = this.getIndex(element);\n                    this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);\n                    start = increased ? disabledIdx + 2 : disabledIdx + 1;\n                }\n                else {\n                    start++;\n                }\n            }\n        }\n    }\n    getIndex(target, instance = this) {\n        let idx;\n        [].slice.call(instance.element.children).forEach((element, index) => {\n            if (element === target) {\n                idx = index;\n            }\n        });\n        return idx;\n    }\n    getSortableElement(element, instance = this) {\n        return closest(element, `.${instance.itemClass}`);\n    }\n    queryPositionInfo(value) {\n        value.left = pageXOffset ? `${parseFloat(value.left) - pageXOffset}px` : value.left;\n        value.top = pageYOffset ? `${parseFloat(value.top) - pageYOffset}px` : value.top;\n        return value;\n    }\n    isPlaceHolderPresent(instance) {\n        return instance.placeHolderElement && !!closest(instance.placeHolderElement, `#${instance.element.id}`);\n    }\n    /**\n     * It is used to sort array of elements from source element to destination element.\n     * @param destination - Defines the destination element to which the sortable elements needs to be appended.\n     * If it is null, then the Sortable library element will be considered as destination.\n     * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.\n     * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.\n     * If it is null, elements will be appended as last child.\n     * @method moveTo\n     * @return {void}\n     */\n    moveTo(destination, targetIndexes, insertBefore) {\n        moveTo(this.element, destination, targetIndexes, insertBefore);\n    }\n    /**\n     * It is used to destroy the Sortable library.\n     */\n    destroy() {\n        if (this.itemClass === 'e-sort-item') {\n            this.itemClass = null;\n            this.dataBind();\n        }\n        getComponent(this.element, Draggable).destroy();\n        super.destroy();\n    }\n    getModuleName() {\n        return 'sortable';\n    }\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'itemClass':\n                    [].slice.call(this.element.children).forEach((element) => {\n                        if (element.classList.contains(oldProp.itemClass)) {\n                            element.classList.remove(oldProp.itemClass);\n                        }\n                        if (newProp.itemClass) {\n                            element.classList.add(newProp.itemClass);\n                        }\n                    });\n                    break;\n            }\n        }\n    }\n};\n__decorate$1([\n    Property(false)\n], Sortable.prototype, \"enableAnimation\", void 0);\n__decorate$1([\n    Property(null)\n], Sortable.prototype, \"itemClass\", void 0);\n__decorate$1([\n    Property(null)\n], Sortable.prototype, \"scope\", void 0);\n__decorate$1([\n    Property()\n], Sortable.prototype, \"helper\", void 0);\n__decorate$1([\n    Property()\n], Sortable.prototype, \"placeHolder\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"drag\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"beforeDragStart\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"dragStart\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"beforeDrop\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"drop\", void 0);\nSortable = Sortable_1 = __decorate$1([\n    NotifyPropertyChanges\n], Sortable);\n/**\n * It is used to sort array of elements from source element to destination element.\n * @private\n */\nfunction moveTo(from, to, targetIndexes, insertBefore) {\n    let targetElements = [];\n    if (!to) {\n        to = from;\n    }\n    if (targetIndexes && targetIndexes.length) {\n        targetIndexes.forEach((index) => {\n            targetElements.push(from.children[index]);\n        });\n    }\n    else {\n        targetElements = [].slice.call(from.children);\n    }\n    if (isNullOrUndefined(insertBefore)) {\n        targetElements.forEach((target) => {\n            to.appendChild(target);\n        });\n    }\n    else {\n        let insertElement = to.children[insertBefore];\n        targetElements.forEach((target) => {\n            to.insertBefore(target, insertElement);\n        });\n    }\n}\n\n/**\n * Sortable Module\n */\n\n/**\n * List Components\n */\n\nexport { classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo };\n//# sourceMappingURL=ej2-lists.es2015.js.map\n","import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Event, EventHandler, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getUniqueID, isBlazor, isNullOrUndefined, prepend, remove, removeClass, resetBlazorTemplate, setStyleAttribute, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n\n/**\n * Position library\n */\nlet elementRect;\nlet popupRect;\nlet element;\nlet parentDocument;\nlet fixedParent = false;\nfunction calculateRelativeBasedPosition(anchor, element) {\n    let fixedElement = false;\n    let anchorPos = { left: 0, top: 0 };\n    let tempAnchor = anchor;\n    if (!anchor || !element) {\n        return anchorPos;\n    }\n    if (isNullOrUndefined(element.offsetParent) && element.style.position === 'fixed') {\n        fixedElement = true;\n    }\n    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n        anchorPos.left += anchor.offsetLeft;\n        anchorPos.top += anchor.offsetTop;\n        anchor = anchor.offsetParent;\n    }\n    anchor = tempAnchor;\n    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n        anchorPos.left -= anchor.scrollLeft;\n        anchorPos.top -= anchor.scrollTop;\n        anchor = anchor.parentElement;\n    }\n    return anchorPos;\n}\nfunction calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {\n    (positionY + positionX === 'topright') ? popupRect = undefined : popupRect = targetValues;\n    popupRect = targetValues;\n    fixedParent = parentElement ? true : false;\n    if (!currentElement) {\n        return { left: 0, top: 0 };\n    }\n    if (!positionX) {\n        positionX = 'left';\n    }\n    if (!positionY) {\n        positionY = 'top';\n    }\n    parentDocument = currentElement.ownerDocument;\n    element = currentElement;\n    let pos = { left: 0, top: 0 };\n    return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);\n}\nfunction setPosx(value, pos) {\n    pos.left = value;\n}\nfunction setPosy(value, pos) {\n    pos.top = value;\n}\nfunction updatePosition(posX, posY, pos) {\n    elementRect = element.getBoundingClientRect();\n    switch (posY + posX) {\n        case 'topcenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n        case 'topright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n        case 'centercenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'centerright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'centerleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'bottomcenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        case 'bottomright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        case 'bottomleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        default:\n        case 'topleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n    }\n    return pos;\n}\nfunction getBodyScrollTop() {\n    return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;\n}\nfunction getBodyScrollLeft() {\n    return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;\n}\nfunction getElementBottom() {\n    return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();\n}\nfunction getElementVCenter() {\n    return getElementTop() + (elementRect.height / 2);\n}\nfunction getElementTop() {\n    return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();\n}\nfunction getElementLeft() {\n    return elementRect.left + getBodyScrollLeft();\n}\nfunction getElementRight() {\n    return elementRect.right + getBodyScrollLeft() - (popupRect ? popupRect.width : 0);\n}\nfunction getElementHCenter() {\n    return getElementLeft() + (elementRect.width / 2);\n}\n\n/**\n * Collision module.\n */\nlet parentDocument$1;\nlet targetContainer;\nfunction fit(element, viewPortElement = null, axis = { X: false, Y: false }, position) {\n    if (!axis.Y && !axis.X) {\n        return { left: 0, top: 0 };\n    }\n    let elemData = element.getBoundingClientRect();\n    targetContainer = viewPortElement;\n    parentDocument$1 = element.ownerDocument;\n    if (!position) {\n        position = calculatePosition(element, 'left', 'top');\n    }\n    if (axis.X) {\n        let containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();\n        let containerLeft = ContainerLeft();\n        let containerRight = ContainerRight();\n        let overLeft = containerLeft - position.left;\n        let overRight = position.left + elemData.width - containerRight;\n        if (elemData.width > containerWidth) {\n            if (overLeft > 0 && overRight <= 0) {\n                position.left = containerRight - elemData.width;\n            }\n            else if (overRight > 0 && overLeft <= 0) {\n                position.left = containerLeft;\n            }\n            else {\n                position.left = overLeft > overRight ? (containerRight - elemData.width) : containerLeft;\n            }\n        }\n        else if (overLeft > 0) {\n            position.left += overLeft;\n        }\n        else if (overRight > 0) {\n            position.left -= overRight;\n        }\n    }\n    if (axis.Y) {\n        let containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();\n        let containerTop = ContainerTop();\n        let containerBottom = ContainerBottom();\n        let overTop = containerTop - position.top;\n        let overBottom = position.top + elemData.height - containerBottom;\n        if (elemData.height > containerHeight) {\n            if (overTop > 0 && overBottom <= 0) {\n                position.top = containerBottom - elemData.height;\n            }\n            else if (overBottom > 0 && overTop <= 0) {\n                position.top = containerTop;\n            }\n            else {\n                position.top = overTop > overBottom ? (containerBottom - elemData.height) : containerTop;\n            }\n        }\n        else if (overTop > 0) {\n            position.top += overTop;\n        }\n        else if (overBottom > 0) {\n            position.top -= overBottom;\n        }\n    }\n    return position;\n}\nfunction isCollide(element, viewPortElement = null, x, y) {\n    let elemOffset = calculatePosition(element, 'left', 'top');\n    if (x) {\n        elemOffset.left = x;\n    }\n    if (y) {\n        elemOffset.top = y;\n    }\n    let data = [];\n    targetContainer = viewPortElement;\n    parentDocument$1 = element.ownerDocument;\n    let elementRect = element.getBoundingClientRect();\n    let top = elemOffset.top;\n    let left = elemOffset.left;\n    let right = elemOffset.left + elementRect.width;\n    let bottom = elemOffset.top + elementRect.height;\n    let yAxis = topCollideCheck(top, bottom);\n    let xAxis = leftCollideCheck(left, right);\n    if (yAxis.topSide) {\n        data.push('top');\n    }\n    if (xAxis.rightSide) {\n        data.push('right');\n    }\n    if (xAxis.leftSide) {\n        data.push('left');\n    }\n    if (yAxis.bottomSide) {\n        data.push('bottom');\n    }\n    return data;\n}\nfunction flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement = null, axis = { X: true, Y: true }, fixedParent) {\n    if (!target || !element || !positionX || !positionY || (!axis.X && !axis.Y)) {\n        return;\n    }\n    let tEdge = { TL: null,\n        TR: null,\n        BL: null,\n        BR: null };\n    let eEdge = {\n        TL: null,\n        TR: null,\n        BL: null,\n        BR: null\n    };\n    let elementRect = element.getBoundingClientRect();\n    let pos = {\n        posX: positionX, posY: positionY, offsetX: offsetX, offsetY: offsetY, position: { left: 0, top: 0 }\n    };\n    targetContainer = viewPortElement;\n    parentDocument$1 = target.ownerDocument;\n    updateElementData(target, tEdge, pos, fixedParent, elementRect);\n    setPosition(eEdge, pos, elementRect);\n    if (axis.X) {\n        leftFlip(target, eEdge, tEdge, pos, elementRect, true);\n    }\n    if (axis.Y && tEdge.TL.top > -1) {\n        topFlip(target, eEdge, tEdge, pos, elementRect, true);\n    }\n    setPopup(element, pos, elementRect);\n}\nfunction setPopup(element, pos, elementRect) {\n    let left = 0;\n    let top = 0;\n    if (element.offsetParent != null\n        && (getComputedStyle(element.offsetParent).position === 'absolute' ||\n            getComputedStyle(element.offsetParent).position === 'relative')) {\n        let data = calculatePosition(element.offsetParent, 'left', 'top', false, elementRect);\n        left = data.left;\n        top = data.top;\n    }\n    element.style.top = (pos.position.top + pos.offsetY - (top)) + 'px';\n    element.style.left = (pos.position.left + pos.offsetX - (left)) + 'px';\n}\nfunction updateElementData(target, edge, pos, fixedParent, elementRect) {\n    pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect);\n    edge.TL = calculatePosition(target, 'left', 'top', fixedParent, elementRect);\n    edge.TR = calculatePosition(target, 'right', 'top', fixedParent, elementRect);\n    edge.BR = calculatePosition(target, 'left', 'bottom', fixedParent, elementRect);\n    edge.BL = calculatePosition(target, 'right', 'bottom', fixedParent, elementRect);\n}\nfunction setPosition(eStatus, pos, elementRect) {\n    eStatus.TL = { top: pos.position.top + pos.offsetY, left: pos.position.left + pos.offsetX };\n    eStatus.TR = { top: eStatus.TL.top, left: eStatus.TL.left + elementRect.width };\n    eStatus.BL = { top: eStatus.TL.top + elementRect.height,\n        left: eStatus.TL.left };\n    eStatus.BR = { top: eStatus.TL.top + elementRect.height,\n        left: eStatus.TL.left + elementRect.width };\n}\nfunction leftCollideCheck(left, right) {\n    let leftSide = false;\n    let rightSide = false;\n    if (((left - getBodyScrollLeft$1()) < ContainerLeft())) {\n        leftSide = true;\n    }\n    if (right > ContainerRight()) {\n        rightSide = true;\n    }\n    return { leftSide: leftSide, rightSide: rightSide };\n}\nfunction leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n    let collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);\n    if ((tEdge.TL.left - getBodyScrollLeft$1()) <= ContainerLeft()) {\n        collideSide.leftSide = false;\n    }\n    if (tEdge.TR.left >= ContainerRight()) {\n        collideSide.rightSide = false;\n    }\n    if ((collideSide.leftSide && !collideSide.rightSide) || (!collideSide.leftSide && collideSide.rightSide)) {\n        if (pos.posX === 'right') {\n            pos.posX = 'left';\n        }\n        else {\n            pos.posX = 'right';\n        }\n        pos.offsetX = pos.offsetX + elementRect.width;\n        pos.offsetX = -1 * pos.offsetX;\n        pos.position = calculatePosition(target, pos.posX, pos.posY, false);\n        setPosition(edge, pos, elementRect);\n        if (deepCheck) {\n            leftFlip(target, edge, tEdge, pos, elementRect, false);\n        }\n    }\n}\nfunction topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n    let collideSide = topCollideCheck(edge.TL.top, edge.BL.top);\n    if ((tEdge.TL.top - getBodyScrollTop$1()) <= ContainerTop()) {\n        collideSide.topSide = false;\n    }\n    if (tEdge.BL.top >= ContainerBottom()) {\n        collideSide.bottomSide = false;\n    }\n    if ((collideSide.topSide && !collideSide.bottomSide) || (!collideSide.topSide && collideSide.bottomSide)) {\n        if (pos.posY === 'top') {\n            pos.posY = 'bottom';\n        }\n        else {\n            pos.posY = 'top';\n        }\n        pos.offsetY = pos.offsetY + elementRect.height;\n        pos.offsetY = -1 * pos.offsetY;\n        pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect);\n        setPosition(edge, pos, elementRect);\n        if (deepCheck) {\n            topFlip(target, edge, tEdge, pos, elementRect, false);\n        }\n    }\n}\nfunction topCollideCheck(top, bottom) {\n    let topSide = false;\n    let bottomSide = false;\n    if ((top - getBodyScrollTop$1()) < ContainerTop()) {\n        topSide = true;\n    }\n    if (bottom > ContainerBottom()) {\n        bottomSide = true;\n    }\n    return { topSide: topSide, bottomSide: bottomSide };\n}\nfunction getTargetContainerWidth() {\n    return targetContainer.getBoundingClientRect().width;\n}\nfunction getTargetContainerHeight() {\n    return targetContainer.getBoundingClientRect().height;\n}\nfunction getTargetContainerLeft() {\n    return targetContainer.getBoundingClientRect().left;\n}\nfunction getTargetContainerTop() {\n    return targetContainer.getBoundingClientRect().top;\n}\nfunction ContainerTop() {\n    if (targetContainer) {\n        return getTargetContainerTop();\n    }\n    return 0;\n}\nfunction ContainerLeft() {\n    if (targetContainer) {\n        return getTargetContainerLeft();\n    }\n    return 0;\n}\nfunction ContainerRight() {\n    if (targetContainer) {\n        return (getBodyScrollLeft$1() + getTargetContainerLeft() + getTargetContainerWidth());\n    }\n    return (getBodyScrollLeft$1() + getViewPortWidth());\n}\nfunction ContainerBottom() {\n    if (targetContainer) {\n        return (getBodyScrollTop$1() + getTargetContainerTop() + getTargetContainerHeight());\n    }\n    return (getBodyScrollTop$1() + getViewPortHeight());\n}\nfunction getBodyScrollTop$1() {\n    // if(targetContainer)\n    //     return targetContainer.scrollTop;\n    return parentDocument$1.documentElement.scrollTop || parentDocument$1.body.scrollTop;\n}\nfunction getBodyScrollLeft$1() {\n    // if(targetContainer)\n    //     return targetContainer.scrollLeft;\n    return parentDocument$1.documentElement.scrollLeft || parentDocument$1.body.scrollLeft;\n}\nfunction getViewPortHeight() {\n    return window.innerHeight;\n}\nfunction getViewPortWidth() {\n    let windowWidth = window.innerWidth;\n    let offsetWidth = (isNullOrUndefined(document.documentElement)) ? 0 : document.documentElement.offsetWidth;\n    return windowWidth - (windowWidth - offsetWidth);\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the offset position values.\n */\nclass PositionData extends ChildProperty {\n}\n__decorate([\n    Property('left')\n], PositionData.prototype, \"X\", void 0);\n__decorate([\n    Property('top')\n], PositionData.prototype, \"Y\", void 0);\n// don't use space in classNames\nconst CLASSNAMES = {\n    ROOT: 'e-popup',\n    RTL: 'e-rtl',\n    OPEN: 'e-popup-open',\n    CLOSE: 'e-popup-close'\n};\n/**\n * Represents the Popup Component\n * ```html\n * <div id=\"popup\" style=\"position:absolute;height:100px;width:100px;\">\n * <div style=\"margin:35px 25px;\">Popup Content</div></div>\n * ```\n * ```typescript\n * <script>\n *   var popupObj = new Popup();\n *   popupObj.appendTo(\"#popup\");\n * </script>\n * ```\n */\nlet Popup = class Popup extends Component {\n    constructor(element, options) {\n        super(options, element);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'zIndex':\n                    setStyleAttribute(this.element, { 'zIndex': newProp.zIndex });\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'position':\n                case 'relateTo':\n                    this.refreshPosition();\n                    break;\n                case 'offsetX':\n                    let x = newProp.offsetX - oldProp.offsetX;\n                    this.element.style.left = (parseInt(this.element.style.left, 10) + (x)).toString() + 'px';\n                    break;\n                case 'offsetY':\n                    let y = newProp.offsetY - oldProp.offsetY;\n                    this.element.style.top = (parseInt(this.element.style.top, 10) + (y)).toString() + 'px';\n                    break;\n                case 'content':\n                    this.setContent();\n                    break;\n                case 'actionOnScroll':\n                    if (newProp.actionOnScroll !== 'none') {\n                        this.wireScrollEvents();\n                    }\n                    else {\n                        this.unwireScrollEvents();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * gets the Component module name.\n     * @private\n     */\n    getModuleName() {\n        return 'popup';\n    }\n    /**\n     * To resolve if any collision occurs.\n     */\n    resolveCollision() {\n        this.checkCollision();\n    }\n    /**\n     * gets the persisted state properties of the Component.\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To destroy the control.\n     */\n    destroy() {\n        this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);\n        this.unwireEvents();\n        super.destroy();\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.element.classList.add(CLASSNAMES.ROOT);\n        let styles = {};\n        if (this.zIndex !== 1000) {\n            styles.zIndex = this.zIndex;\n        }\n        if (this.width !== 'auto') {\n            styles.width = formatUnit(this.width);\n        }\n        if (this.height !== 'auto') {\n            styles.height = formatUnit(this.height);\n        }\n        setStyleAttribute(this.element, styles);\n        this.fixedParent = false;\n        this.setEnableRtl();\n        this.setContent();\n    }\n    wireEvents() {\n        if (Browser.isDevice) {\n            EventHandler.add(window, 'orientationchange', this.orientationOnChange, this);\n        }\n        if (this.actionOnScroll !== 'none') {\n            this.wireScrollEvents();\n        }\n    }\n    wireScrollEvents() {\n        if (this.getRelateToElement()) {\n            for (let parent of this.getScrollableParent(this.getRelateToElement())) {\n                EventHandler.add(parent, 'scroll', this.scrollRefresh, this);\n            }\n        }\n    }\n    unwireEvents() {\n        if (Browser.isDevice) {\n            EventHandler.remove(window, 'orientationchange', this.orientationOnChange);\n        }\n        if (this.actionOnScroll !== 'none') {\n            this.unwireScrollEvents();\n        }\n    }\n    unwireScrollEvents() {\n        if (this.getRelateToElement()) {\n            for (let parent of this.getScrollableParent(this.getRelateToElement())) {\n                EventHandler.remove(parent, 'scroll', this.scrollRefresh);\n            }\n        }\n    }\n    getRelateToElement() {\n        let relateToElement = this.relateTo === '' || isNullOrUndefined(this.relateTo) ?\n            document.body : this.relateTo;\n        this.setProperties({ relateTo: relateToElement }, true);\n        return ((typeof this.relateTo) === 'string') ?\n            document.querySelector(this.relateTo) : this.relateTo;\n    }\n    scrollRefresh(e) {\n        if (this.actionOnScroll === 'reposition') {\n            if (!(this.element.offsetParent === e.target ||\n                (this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' &&\n                    e.target.parentElement == null))) {\n                this.refreshPosition();\n            }\n        }\n        else if (this.actionOnScroll === 'hide') {\n            this.hide();\n        }\n        if (this.actionOnScroll !== 'none') {\n            if (this.getRelateToElement()) {\n                let targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);\n                if (!targetVisible && !this.targetInvisibleStatus) {\n                    this.trigger('targetExitViewport');\n                    this.targetInvisibleStatus = true;\n                }\n                else if (targetVisible) {\n                    this.targetInvisibleStatus = false;\n                }\n            }\n        }\n    }\n    /**\n     * This method is to get the element visibility on viewport when scroll\n     * the page. This method will returns true even though 1 px of element\n     * part is in visible.\n     */\n    isElementOnViewport(relateToElement, scrollElement) {\n        let scrollParents = this.getScrollableParent(relateToElement);\n        for (let parent = 0; parent < scrollParents.length; parent++) {\n            if (this.isElementVisible(relateToElement, scrollParents[parent])) {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    isElementVisible(relateToElement, scrollElement) {\n        let rect = this.checkGetBoundingClientRect(relateToElement);\n        if (!rect.height || !rect.width) {\n            return false;\n        }\n        if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {\n            let parent = scrollElement.getBoundingClientRect();\n            return !(rect.bottom < parent.top) &&\n                (!(rect.bottom > parent.bottom) &&\n                    (!(rect.right > parent.right) &&\n                        !(rect.left < parent.left)));\n        }\n        else {\n            let win = window;\n            let windowView = {\n                top: win.scrollY,\n                left: win.scrollX,\n                right: win.scrollX + win.outerWidth,\n                bottom: win.scrollY + win.outerHeight\n            };\n            let off = calculatePosition(relateToElement);\n            let ele = {\n                top: off.top,\n                left: off.left,\n                right: off.left + rect.width,\n                bottom: off.top + rect.height\n            };\n            let elementView = {\n                top: windowView.bottom - ele.top,\n                left: windowView.right - ele.left,\n                bottom: ele.bottom - windowView.top,\n                right: ele.right - windowView.left\n            };\n            return elementView.top > 0\n                && elementView.left > 0\n                && elementView.right > 0\n                && elementView.bottom > 0;\n        }\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        //There is no event handler\n    }\n    setEnableRtl() {\n        this.reposition();\n        this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);\n    }\n    setContent() {\n        if (!isNullOrUndefined(this.content)) {\n            this.element.innerHTML = '';\n            if (typeof (this.content) === 'string') {\n                this.element.textContent = this.content;\n            }\n            else {\n                this.element.appendChild(this.content);\n            }\n        }\n    }\n    orientationOnChange() {\n        setTimeout(() => {\n            this.refreshPosition();\n        }, 200);\n    }\n    /**\n     * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.\n     */\n    refreshPosition(target, collision) {\n        if (!isNullOrUndefined(target)) {\n            this.checkFixedParent(target);\n        }\n        this.reposition();\n        if (!collision) {\n            this.checkCollision();\n        }\n    }\n    reposition() {\n        let pos;\n        let position;\n        let relateToElement = this.getRelateToElement();\n        if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {\n            pos = { left: this.position.X, top: this.position.Y };\n        }\n        else if ((typeof this.position.X === 'string' && typeof this.position.Y === 'number') ||\n            (typeof this.position.X === 'number' && typeof this.position.Y === 'string')) {\n            let display = this.element.style.display;\n            let parentDisplay;\n            this.element.style.display = 'block';\n            if (this.element.classList.contains('e-dlg-modal')) {\n                parentDisplay = this.element.parentElement.style.display;\n                this.element.parentElement.style.display = 'block';\n            }\n            position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n            if (typeof this.position.X === 'string') {\n                pos = { left: position.left, top: this.position.Y };\n            }\n            else {\n                pos = { left: this.position.X, top: position.top };\n            }\n            this.element.style.display = display;\n            if (this.element.classList.contains('e-dlg-modal')) {\n                this.element.parentElement.style.display = parentDisplay;\n            }\n        }\n        else if (relateToElement) {\n            let display = this.element.style.display;\n            this.element.style.display = 'block';\n            pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n            this.element.style.display = display;\n        }\n        else {\n            pos = { left: 0, top: 0 };\n        }\n        if (!isNullOrUndefined(pos)) {\n            this.element.style.left = pos.left + 'px';\n            this.element.style.top = pos.top + 'px';\n        }\n    }\n    checkGetBoundingClientRect(ele) {\n        let eleRect;\n        try {\n            eleRect = ele.getBoundingClientRect();\n            return eleRect;\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    getAnchorPosition(anchorEle, ele, position, offsetX, offsetY) {\n        let eleRect = this.checkGetBoundingClientRect(ele);\n        let anchorRect = this.checkGetBoundingClientRect(anchorEle);\n        if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {\n            return null;\n        }\n        let anchor = anchorEle;\n        let anchorPos = { left: 0, top: 0 };\n        if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {\n            anchorPos = calculatePosition(anchorEle);\n        }\n        else {\n            if ((ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY')) {\n                ele = ele.parentElement;\n            }\n            anchorPos = calculateRelativeBasedPosition(anchor, ele);\n        }\n        switch (position.X) {\n            default:\n            case 'left':\n                break;\n            case 'center':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.left += (window.innerWidth / 2 - eleRect.width / 2);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.left += (anchorRect.width / 2 - eleRect.width / 2);\n                }\n                else {\n                    anchorPos.left += (anchorRect.width / 2);\n                }\n                break;\n            case 'right':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.left += (window.innerWidth - eleRect.width);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.left += (anchorRect.width - eleRect.width);\n                }\n                else {\n                    anchorPos.left += (anchorRect.width);\n                }\n                break;\n        }\n        switch (position.Y) {\n            default:\n            case 'top':\n                break;\n            case 'center':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.top += (window.innerHeight / 2 - eleRect.height / 2);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.top += (anchorRect.height / 2 - eleRect.height / 2);\n                }\n                else {\n                    anchorPos.top += (anchorRect.height / 2);\n                }\n                break;\n            case 'bottom':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.top += (window.innerHeight - eleRect.height);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.top += (anchorRect.height - eleRect.height);\n                }\n                else {\n                    anchorPos.top += (anchorRect.height);\n                }\n                break;\n        }\n        anchorPos.left += offsetX;\n        anchorPos.top += offsetY;\n        return anchorPos;\n    }\n    callFlip(param) {\n        let relateToElement = this.getRelateToElement();\n        flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);\n    }\n    callFit(param) {\n        if (isCollide(this.element, this.viewPortElement).length !== 0) {\n            if (isNullOrUndefined(this.viewPortElement)) {\n                let data = fit(this.element, this.viewPortElement, param);\n                if (param.X) {\n                    this.element.style.left = data.left + 'px';\n                }\n                if (param.Y) {\n                    this.element.style.top = data.top + 'px';\n                }\n            }\n            else {\n                let elementRect = this.checkGetBoundingClientRect(this.element);\n                let viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);\n                if (isNullOrUndefined(elementRect) || isNullOrUndefined(viewPortRect)) {\n                    return null;\n                }\n                if (param && param.Y === true) {\n                    if (viewPortRect.top > elementRect.top) {\n                        this.element.style.top = '0px';\n                    }\n                    else if (viewPortRect.bottom < elementRect.bottom) {\n                        this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px';\n                    }\n                }\n                if (param && param.X === true) {\n                    if (viewPortRect.right < elementRect.right) {\n                        this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px';\n                    }\n                    else if (viewPortRect.left > elementRect.left) {\n                        this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px';\n                    }\n                }\n            }\n        }\n    }\n    checkCollision() {\n        let horz = this.collision.X;\n        let vert = this.collision.Y;\n        if (horz === 'none' && vert === 'none') {\n            return;\n        }\n        if (horz === 'flip' && vert === 'flip') {\n            this.callFlip({ X: true, Y: true });\n        }\n        else if (horz === 'fit' && vert === 'fit') {\n            this.callFit({ X: true, Y: true });\n        }\n        else {\n            if (horz === 'flip') {\n                this.callFlip({ X: true, Y: false });\n            }\n            else if (vert === 'flip') {\n                this.callFlip({ Y: true, X: false });\n            }\n            if (horz === 'fit') {\n                this.callFit({ X: true, Y: false });\n            }\n            else if (vert === 'fit') {\n                this.callFit({ X: false, Y: true });\n            }\n        }\n    }\n    /**\n     * Shows the popup element from screen.\n     * @param { AnimationModel | Function } collisionOrAnimationOptions? - To pass animation options or collision function.\n     * @param { Function } collision? - To pass the collision function.\n     * @param { HTMLElement } relativeElement? - To calculate the zIndex value dynamically.\n     */\n    show(animationOptions, relativeElement) {\n        this.wireEvents();\n        if (this.zIndex === 1000 || !isNullOrUndefined(relativeElement)) {\n            let zIndexElement = (isNullOrUndefined(relativeElement)) ? this.element : relativeElement;\n            this.zIndex = getZindexPartial(zIndexElement);\n            setStyleAttribute(this.element, { 'zIndex': this.zIndex });\n        }\n        animationOptions = (!isNullOrUndefined(animationOptions) && typeof animationOptions === 'object') ?\n            animationOptions : this.showAnimation;\n        if (this.collision.X !== 'none' || this.collision.Y !== 'none') {\n            removeClass([this.element], CLASSNAMES.CLOSE);\n            addClass([this.element], CLASSNAMES.OPEN);\n            this.checkCollision();\n            removeClass([this.element], CLASSNAMES.OPEN);\n            addClass([this.element], CLASSNAMES.CLOSE);\n        }\n        if (!isNullOrUndefined(animationOptions)) {\n            animationOptions.begin = () => {\n                if (!this.isDestroyed) {\n                    removeClass([this.element], CLASSNAMES.CLOSE);\n                    addClass([this.element], CLASSNAMES.OPEN);\n                }\n            };\n            animationOptions.end = () => {\n                if (!this.isDestroyed) {\n                    this.trigger('open');\n                }\n            };\n            new Animation(animationOptions).animate(this.element);\n        }\n        else {\n            removeClass([this.element], CLASSNAMES.CLOSE);\n            addClass([this.element], CLASSNAMES.OPEN);\n            this.trigger('open');\n        }\n    }\n    /**\n     * Hides the popup element from screen.\n     * @param { AnimationModel } animationOptions? - To give the animation options.\n     */\n    hide(animationOptions) {\n        animationOptions = (!isNullOrUndefined(animationOptions) && typeof animationOptions === 'object') ?\n            animationOptions : this.hideAnimation;\n        if (!isNullOrUndefined(animationOptions)) {\n            animationOptions.end = () => {\n                if (!this.isDestroyed) {\n                    removeClass([this.element], CLASSNAMES.OPEN);\n                    addClass([this.element], CLASSNAMES.CLOSE);\n                    this.trigger('close');\n                }\n            };\n            new Animation(animationOptions).animate(this.element);\n        }\n        else {\n            removeClass([this.element], CLASSNAMES.OPEN);\n            addClass([this.element], CLASSNAMES.CLOSE);\n            this.trigger('close');\n        }\n        this.unwireEvents();\n    }\n    /**\n     * Gets scrollable parent elements for the given element.\n     * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n     */\n    getScrollableParent(element) {\n        this.checkFixedParent(element);\n        return getScrollableParent(element, this.fixedParent);\n    }\n    checkFixedParent(element) {\n        let parent = element.parentElement;\n        while (parent && parent.tagName !== 'HTML') {\n            let parentStyle = getComputedStyle(parent);\n            if (parentStyle.position === 'fixed' && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY') {\n                this.element.style.position = 'fixed';\n                this.fixedParent = true;\n            }\n            parent = parent.parentElement;\n            if (isNullOrUndefined(this.element.offsetParent) && parentStyle.position === 'fixed'\n                && this.element.style.position === 'fixed') {\n                this.fixedParent = true;\n            }\n        }\n    }\n};\n__decorate([\n    Property('auto')\n], Popup.prototype, \"height\", void 0);\n__decorate([\n    Property('auto')\n], Popup.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"content\", void 0);\n__decorate([\n    Property('container')\n], Popup.prototype, \"targetType\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"viewPortElement\", void 0);\n__decorate([\n    Property({ X: 'none', Y: 'none' })\n], Popup.prototype, \"collision\", void 0);\n__decorate([\n    Property('')\n], Popup.prototype, \"relateTo\", void 0);\n__decorate([\n    Complex({}, PositionData)\n], Popup.prototype, \"position\", void 0);\n__decorate([\n    Property(0)\n], Popup.prototype, \"offsetX\", void 0);\n__decorate([\n    Property(0)\n], Popup.prototype, \"offsetY\", void 0);\n__decorate([\n    Property(1000)\n], Popup.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], Popup.prototype, \"enableRtl\", void 0);\n__decorate([\n    Property('reposition')\n], Popup.prototype, \"actionOnScroll\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"showAnimation\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"hideAnimation\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"open\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"close\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"targetExitViewport\", void 0);\nPopup = __decorate([\n    NotifyPropertyChanges\n], Popup);\n/**\n * Gets scrollable parent elements for the given element.\n * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n * @private\n */\nfunction getScrollableParent(element, fixedParent) {\n    let eleStyle = getComputedStyle(element);\n    let scrollParents = [];\n    let overflowRegex = /(auto|scroll)/;\n    let parent = element.parentElement;\n    while (parent && parent.tagName !== 'HTML') {\n        let parentStyle = getComputedStyle(parent);\n        if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static')\n            && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {\n            scrollParents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    if (!fixedParent) {\n        scrollParents.push(document);\n    }\n    return scrollParents;\n}\n/**\n * Gets the maximum z-index of the given element.\n * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.\n * @private\n */\nfunction getZindexPartial(element) {\n    // upto body traversal\n    let parent = element.parentElement;\n    let parentZindex = [];\n    while (parent) {\n        if (parent.tagName !== 'BODY') {\n            let index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                parentZindex.push(index);\n            }\n            parent = parent.parentElement;\n        }\n        else {\n            break;\n        }\n    }\n    //Body direct children element traversal\n    let childrenZindex = [];\n    for (let i = 0; i < document.body.children.length; i++) {\n        if (!element.isEqualNode(document.body.children[i])) {\n            let index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                childrenZindex.push(index);\n            }\n        }\n    }\n    childrenZindex.push('999');\n    let siblingsZindex = [];\n    if (!isNullOrUndefined(element.parentElement) && element.parentElement.tagName !== 'BODY') {\n        let childNodes = [].slice.call(element.parentElement.children);\n        for (let i = 0; i < childNodes.length; i++) {\n            let index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                siblingsZindex.push(index);\n            }\n        }\n    }\n    let finalValue = parentZindex.concat(childrenZindex, siblingsZindex);\n    let currentZindexValue = Math.max.apply(Math, finalValue) + 1;\n    // Checking the max-zindex value\n    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n/**\n * Gets the maximum z-index of the page.\n * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.\n * @private\n */\nfunction getMaxZindex(tagName = ['*']) {\n    let maxZindex = [];\n    for (let i = 0; i < tagName.length; i++) {\n        let elements = document.getElementsByTagName(tagName[i]);\n        for (let i = 0; i < elements.length; i++) {\n            let index = document.defaultView.getComputedStyle(elements[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(elements[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                maxZindex.push(index);\n            }\n        }\n    }\n    let currentZindexValue = Math.max.apply(Math, maxZindex) + 1;\n    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n\n/**\n * Popup Components\n */\n\n/**\n * Popup Components\n */\n\n/**\n * Resize library\n */\nlet elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];\nlet targetElement;\nlet selectedHandler;\nlet originalWidth = 0;\nlet originalHeight = 0;\nlet originalX = 0;\nlet originalY = 0;\nlet originalMouseX = 0;\nlet originalMouseY = 0;\nconst RESIZE_HANDLER = 'e-resize-handle';\nconst FOCUSED_HANDLER = 'e-focused-handle';\nlet RESTRICT_LEFT = ['e-restrict-left'];\nconst RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';\nlet minHeight;\nlet maxHeight;\nlet minWidth;\nlet maxWidth;\nlet containerElement;\nlet resizeStart = null;\nlet resize = null;\nlet resizeEnd = null;\nlet resizeWestWidth;\nlet setLeft = true;\nlet previousWidth = 0;\nlet setWidth = true;\n// tslint:disable-next-line\nlet proxy;\nfunction createResize(args) {\n    resizeStart = args.resizeBegin;\n    resize = args.resizing;\n    resizeEnd = args.resizeComplete;\n    targetElement = getDOMElement(args.element);\n    containerElement = getDOMElement(args.boundary);\n    let directions = args.direction.split(' ');\n    for (let i = 0; i < directions.length; i++) {\n        let resizeHandler = createElement('div', { className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i] });\n        targetElement.appendChild(resizeHandler);\n    }\n    minHeight = args.minHeight;\n    minWidth = args.minWidth;\n    maxWidth = args.maxWidth;\n    maxHeight = args.maxHeight;\n    if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {\n        wireEvents(args.proxy);\n    }\n    else {\n        wireEvents();\n    }\n}\nfunction getDOMElement(element) {\n    let domElement;\n    if (!isNullOrUndefined(element)) {\n        if (typeof (element) === 'string') {\n            domElement = document.querySelector(element);\n        }\n        else {\n            domElement = element;\n        }\n    }\n    return domElement;\n}\n// tslint:disable-next-line\nfunction wireEvents(args) {\n    if (isNullOrUndefined(args)) {\n        args = this;\n    }\n    let resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n    for (let i = 0; i < resizers.length; i++) {\n        selectedHandler = resizers[i];\n        EventHandler.add(selectedHandler, 'mousedown', onMouseDown, args);\n        let eventName = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n        EventHandler.add(selectedHandler, eventName, onTouchStart, args);\n    }\n}\n/* istanbul ignore next */\nfunction getEventType(e) {\n    return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';\n}\n/* istanbul ignore next */\nfunction onMouseDown(e) {\n    e.preventDefault();\n    targetElement = e.target.parentElement;\n    calculateValues();\n    originalMouseX = e.pageX;\n    originalMouseY = e.pageY;\n    e.target.classList.add(FOCUSED_HANDLER);\n    if (!isNullOrUndefined(resizeStart)) {\n        proxy = this;\n        if (resizeStart(e, proxy) === true) {\n            return;\n        }\n    }\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.add(target, 'mousemove', onMouseMove, this);\n    EventHandler.add(document, 'mouseup', onMouseUp, this);\n    for (let i = 0; i < RESTRICT_LEFT.length; i++) {\n        if (targetElement.classList.contains(RESTRICT_LEFT[i])) {\n            setLeft = false;\n        }\n        else {\n            setLeft = true;\n        }\n    }\n}\n/* istanbul ignore next */\nfunction onMouseUp(e) {\n    let touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n    let touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.remove(target, 'mousemove', onMouseMove);\n    EventHandler.remove(target, touchMoveEvent, onMouseMove);\n    let eventName = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n    EventHandler.remove(target, eventName, onMouseMove);\n    if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n        document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);\n    }\n    if (!isNullOrUndefined(resizeEnd)) {\n        proxy = this;\n        resizeEnd(e, proxy);\n    }\n    EventHandler.remove(document, 'mouseup', onMouseUp);\n    EventHandler.remove(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\nfunction calculateValues() {\n    originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));\n    originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));\n    originalX = targetElement.getBoundingClientRect().left;\n    originalY = targetElement.getBoundingClientRect().top;\n}\n/* istanbul ignore next */\nfunction onTouchStart(e) {\n    targetElement = e.target.parentElement;\n    calculateValues();\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    originalMouseX = coordinates.pageX;\n    originalMouseY = coordinates.pageY;\n    if (!isNullOrUndefined(resizeStart)) {\n        proxy = this;\n        if (resizeStart(e, proxy) === true) {\n            return;\n        }\n    }\n    let touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n    let touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.add(target, touchMoveEvent, onMouseMove, this);\n    EventHandler.add(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\nfunction onMouseMove(e) {\n    if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {\n        selectedHandler = e.target;\n    }\n    else if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n        selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);\n    }\n    if (!isNullOrUndefined(selectedHandler)) {\n        let resizeTowards = '';\n        for (let i = 0; i < elementClass.length; i++) {\n            if (selectedHandler.classList.contains('e-' + elementClass[i])) {\n                resizeTowards = elementClass[i];\n            }\n        }\n        if (!isNullOrUndefined(resize)) {\n            proxy = this;\n            resize(e, proxy);\n        }\n        switch (resizeTowards) {\n            case 'south':\n                resizeSouth(e);\n                break;\n            case 'north':\n                resizeNorth(e);\n                break;\n            case 'west':\n                resizeWest(e);\n                break;\n            case 'east':\n                resizeEast(e);\n                break;\n            case 'south-east':\n                resizeSouth(e);\n                resizeEast(e);\n                break;\n            case 'south-west':\n                resizeSouth(e);\n                resizeWest(e);\n                break;\n            case 'north-east':\n                resizeNorth(e);\n                resizeEast(e);\n                break;\n            case 'north-west':\n                resizeNorth(e);\n                resizeWest(e);\n                break;\n            default: break;\n        }\n    }\n}\n/* istanbul ignore next */\nfunction getClientRectValues(element) {\n    return element.getBoundingClientRect();\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeSouth(e) {\n    let documentHeight = document.documentElement.clientHeight;\n    let calculateValue = false;\n    let containerRectValues;\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    let currentpageY = coordinates.pageY;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement)) {\n        containerRectValues = getClientRectValues(containerElement);\n    }\n    if (!isNullOrUndefined(containerElement)) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && ((documentHeight - currentpageY) >= 0 || (targetRectValues.top < 0))) {\n        calculateValue = true;\n    }\n    let calculatedHeight = originalHeight + (currentpageY - originalMouseY);\n    calculatedHeight = (calculatedHeight > minHeight) ? calculatedHeight : minHeight;\n    let containerTop = 0;\n    if (!isNullOrUndefined(containerElement)) {\n        containerTop = containerRectValues.top;\n    }\n    let borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;\n    let topWithoutborder = (targetRectValues.top - containerTop) - (borderValue / 2);\n    topWithoutborder = (topWithoutborder < 0) ? 0 : topWithoutborder;\n    if (targetRectValues.top > 0 && (topWithoutborder + calculatedHeight) > maxHeight) {\n        calculateValue = false;\n        if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n            return;\n        }\n        targetElement.style.height = (maxHeight - parseInt(topWithoutborder.toString(), 10)) + 'px';\n        return;\n    }\n    let targetTop = 0;\n    if (calculateValue) {\n        if (targetRectValues.top < 0 && (documentHeight + (targetRectValues.height + targetRectValues.top) > 0)) {\n            targetTop = targetRectValues.top;\n            if ((calculatedHeight + targetTop) <= 30) {\n                calculatedHeight = (targetRectValues.height - (targetRectValues.height + targetRectValues.top)) + 30;\n            }\n        }\n        if (((calculatedHeight + targetRectValues.top) >= maxHeight)) {\n            targetElement.style.height = targetRectValues.height +\n                (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';\n        }\n        let calculatedTop = (isNullOrUndefined(containerElement)) ? targetTop : topWithoutborder;\n        if (calculatedHeight >= minHeight && ((calculatedHeight + calculatedTop) <= maxHeight)) {\n            targetElement.style.height = calculatedHeight + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeNorth(e) {\n    let calculateValue = false;\n    let boundaryRectValues;\n    let pageY = (getEventType(e.type) === 'mouse') ? e.pageY : e.touches[0].pageY;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement)) {\n        boundaryRectValues = getClientRectValues(containerElement);\n    }\n    if (!isNullOrUndefined(containerElement) && (targetRectValues.top - boundaryRectValues.top) > 0) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && pageY > 0) {\n        calculateValue = true;\n    }\n    let currentHeight = originalHeight - (pageY - originalMouseY);\n    if ((getClientRectValues(targetElement).bottom + currentHeight) > maxHeight) {\n        calculateValue = false;\n        targetElement.style.height = maxHeight - getClientRectValues(targetElement).bottom + 'px';\n    }\n    if (calculateValue) {\n        if (currentHeight >= minHeight && currentHeight <= maxHeight) {\n            let containerTop = 0;\n            if (!isNullOrUndefined(containerElement)) {\n                containerTop = boundaryRectValues.top;\n            }\n            let top = (originalY - containerTop) + (pageY - originalMouseY);\n            top = top > 0 ? top : 1;\n            targetElement.style.height = currentHeight + 'px';\n            targetElement.style.top = top + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeWest(e) {\n    let documentWidth = document.documentElement.clientWidth;\n    let calculateValue = false;\n    let rectValues;\n    if (!isNullOrUndefined(containerElement)) {\n        rectValues = getClientRectValues(containerElement);\n    }\n    let pageX = (getEventType(e.type) === 'mouse') ? e.pageX : e.touches[0].pageX;\n    let targetRectValues = getClientRectValues(targetElement);\n    let borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;\n    let left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;\n    let containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;\n    if (isNullOrUndefined(resizeWestWidth)) {\n        if (!isNullOrUndefined(containerElement)) {\n            resizeWestWidth = (((targetRectValues.left - left) - borderValue / 2)) + targetRectValues.width;\n            resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);\n        }\n        else {\n            resizeWestWidth = documentWidth;\n        }\n    }\n    if (!isNullOrUndefined(containerElement) &&\n        (((targetRectValues.left - rectValues.left) + targetRectValues.width +\n            (rectValues.right - targetRectValues.right)) - borderValue) <= maxWidth) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && pageX >= 0) {\n        calculateValue = true;\n    }\n    let calculatedWidth = originalWidth - (pageX - originalMouseX);\n    if (setLeft) {\n        calculatedWidth = (calculatedWidth > resizeWestWidth) ? resizeWestWidth : calculatedWidth;\n    }\n    if (calculateValue) {\n        if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n            let containerLeft = 0;\n            if (!isNullOrUndefined(containerElement)) {\n                containerLeft = rectValues.left;\n            }\n            let left = (originalX - containerLeft) + (pageX - originalMouseX);\n            left = (left > 0) ? left : 1;\n            if (calculatedWidth !== previousWidth && setWidth) {\n                targetElement.style.width = calculatedWidth + 'px';\n            }\n            if (setLeft) {\n                targetElement.style.left = left + 'px';\n                if (left === 1) {\n                    setWidth = false;\n                }\n                else {\n                    setWidth = true;\n                }\n            }\n        }\n    }\n    previousWidth = calculatedWidth;\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeEast(e) {\n    let documentWidth = document.documentElement.clientWidth;\n    let calculateValue = false;\n    let containerRectValues;\n    if (!isNullOrUndefined(containerElement)) {\n        containerRectValues = getClientRectValues(containerElement);\n    }\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    let pageX = coordinates.pageX;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement) && (((targetRectValues.left - containerRectValues.left) + targetRectValues.width) < maxWidth\n        || (targetRectValues.right - containerRectValues.left) > targetRectValues.width)) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && (documentWidth - pageX) > 0) {\n        calculateValue = true;\n    }\n    let calculatedWidth = originalWidth + (pageX - originalMouseX);\n    let containerLeft = 0;\n    if (!isNullOrUndefined(containerElement)) {\n        containerLeft = containerRectValues.left;\n    }\n    if (((targetRectValues.left - containerLeft) + calculatedWidth) > maxWidth) {\n        calculateValue = false;\n        if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n            return;\n        }\n        targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';\n    }\n    if (calculateValue) {\n        if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n            targetElement.style.width = calculatedWidth + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\nfunction setMinHeight(minimumHeight) {\n    minHeight = minimumHeight;\n}\nfunction removeResize() {\n    let handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n    for (let i = 0; i < handlers.length; i++) {\n        detach(handlers[i]);\n    }\n}\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ButtonProps extends ChildProperty {\n}\n__decorate$1([\n    Property()\n], ButtonProps.prototype, \"buttonModel\", void 0);\n__decorate$1([\n    Property('Button')\n], ButtonProps.prototype, \"type\", void 0);\n__decorate$1([\n    Event()\n], ButtonProps.prototype, \"click\", void 0);\n/**\n * Configures the animation properties for both open and close the dialog.\n */\nclass AnimationSettings extends ChildProperty {\n}\n__decorate$1([\n    Property('Fade')\n], AnimationSettings.prototype, \"effect\", void 0);\n__decorate$1([\n    Property(400)\n], AnimationSettings.prototype, \"duration\", void 0);\n__decorate$1([\n    Property(0)\n], AnimationSettings.prototype, \"delay\", void 0);\nconst ROOT = 'e-dialog';\nconst RTL = 'e-rtl';\nconst DLG_HEADER_CONTENT = 'e-dlg-header-content';\nconst DLG_HEADER = 'e-dlg-header';\nconst DLG_FOOTER_CONTENT = 'e-footer-content';\nconst MODAL_DLG = 'e-dlg-modal';\nconst DLG_CONTENT = 'e-dlg-content';\nconst DLG_CLOSE_ICON = 'e-icon-dlg-close';\nconst DLG_OVERLAY = 'e-dlg-overlay';\nconst DLG_TARGET = 'e-dlg-target';\nconst DLG_CONTAINER = 'e-dlg-container';\nconst SCROLL_DISABLED = 'e-scroll-disabled';\nconst DLG_PRIMARY_BUTTON = 'e-primary';\nconst ICON = 'e-icons';\nconst POPUP_ROOT = 'e-popup';\nconst DEVICE = 'e-device';\nconst FULLSCREEN = 'e-dlg-fullscreen';\nconst DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';\nconst DLG_HIDE = 'e-popup-close';\nconst DLG_SHOW = 'e-popup-open';\nconst DLG_UTIL_DEFAULT_TITLE = 'Information';\nconst DLG_UTIL_ROOT = 'e-scroll-disabled';\nconst DLG_UTIL_ALERT = 'e-alert-dialog';\nconst DLG_UTIL_CONFIRM = 'e-confirm-dialog';\nconst DLG_RESIZABLE = 'e-dlg-resizable';\nconst DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';\nconst DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';\nconst DLG_REF_ELEMENT = 'e-dlg-ref-element';\n/**\n * Represents the dialog component that displays the information and get input from the user.\n * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.\n * ```html\n * <div id=\"dialog\"></div>\n * ```\n * ```typescript\n * <script>\n *   var dialogObj = new Dialog({ header: 'Dialog' });\n *   dialogObj.appendTo(\"#dialog\");\n * </script>\n * ```\n */\nlet Dialog = class Dialog extends Component {\n    /**\n     * Constructor for creating the widget\n     * @hidden\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.initRender();\n        this.wireEvents();\n        if (this.width === '100%') {\n            this.element.style.width = '';\n        }\n        if (this.minHeight !== '') {\n            this.element.style.minHeight = this.minHeight.toString();\n        }\n        if (this.enableResize) {\n            this.setResize();\n            if (this.animationSettings.effect === 'None') {\n                this.getMinHeight();\n            }\n        }\n        this.renderComplete();\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        this.headerContent = null;\n        this.allowMaxHeight = true;\n        this.preventVisibility = true;\n        this.clonedEle = this.element.cloneNode(true);\n        this.closeIconClickEventHandler = (event) => {\n            this.hide(event);\n        };\n        this.dlgOverlayClickEventHandler = (event) => {\n            this.trigger('overlayClick', event);\n            this.focusContent();\n        };\n        let localeText = { close: 'Close' };\n        this.l10n = new L10n('dialog', localeText, this.locale);\n        this.checkPositionData();\n        if (isNullOrUndefined(this.target)) {\n            let prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.target = document.body;\n            this.isProtectedOnChange = prevOnChange;\n        }\n    }\n    ;\n    isNumberValue(value) {\n        let isNumber = /^[-+]?\\d*\\.?\\d+$/.test(value);\n        return isNumber;\n    }\n    checkPositionData() {\n        if (!isNullOrUndefined(this.position)) {\n            if (!isNullOrUndefined(this.position.X) && (typeof (this.position.X) !== 'number')) {\n                let isNumber = this.isNumberValue(this.position.X);\n                if (isNumber) {\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.position.X = parseFloat(this.position.X);\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            }\n            if (!isNullOrUndefined(this.position.Y) && (typeof (this.position.Y) !== 'number')) {\n                let isNumber = this.isNumberValue(this.position.Y);\n                if (isNumber) {\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.position.Y = parseFloat(this.position.Y);\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            }\n        }\n    }\n    getEle(list, selector) {\n        let element = undefined;\n        for (let i = 0; i < list.length; i++) {\n            if (list[i].classList.contains(selector)) {\n                element = list[i];\n                break;\n            }\n        }\n        return element;\n    }\n    /* istanbul ignore next */\n    getMinHeight() {\n        let computedHeaderHeight = '0px';\n        let computedFooterHeight = '0px';\n        if (!isNullOrUndefined(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {\n            computedHeaderHeight = getComputedStyle(this.headerContent).height;\n        }\n        let footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);\n        if (!isNullOrUndefined(footerEle)) {\n            computedFooterHeight = getComputedStyle(footerEle).height;\n        }\n        let headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);\n        let footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);\n        setMinHeight(headerHeight + 30 + footerHeight);\n        return (headerHeight + 30 + footerHeight);\n    }\n    onResizeStart(args, dialogObj) {\n        dialogObj.trigger('resizeStart', args);\n        return args.cancel;\n    }\n    onResizing(args, dialogObj) {\n        dialogObj.trigger('resizing', args);\n    }\n    onResizeComplete(args, dialogObj) {\n        dialogObj.trigger('resizeStop', args);\n    }\n    setResize() {\n        if (this.enableResize) {\n            if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector('.e-icons.e-resize-handle'))) {\n                return;\n            }\n            this.element.classList.add(DLG_RESIZABLE);\n            let computedHeight = getComputedStyle(this.element).minHeight;\n            let computedWidth = getComputedStyle(this.element).minWidth;\n            let direction = this.enableRtl ? 'south-west' : 'south-east';\n            if (this.isModal && this.enableRtl) {\n                this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);\n            }\n            else if (this.isModal && this.target === document.body) {\n                this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);\n            }\n            createResize({\n                element: this.element,\n                direction: direction,\n                minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),\n                maxHeight: this.targetEle.clientHeight,\n                minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),\n                maxWidth: this.targetEle.clientWidth,\n                boundary: this.target === document.body ? null : this.targetEle,\n                resizeBegin: this.onResizeStart.bind(this),\n                resizeComplete: this.onResizeComplete.bind(this),\n                resizing: this.onResizing.bind(this),\n                proxy: this\n            });\n        }\n        else {\n            removeResize();\n            if (this.isModal) {\n                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n            }\n            else {\n                this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);\n            }\n            this.element.classList.remove(DLG_RESIZABLE);\n        }\n    }\n    /* istanbul ignore next */\n    keyDown(event) {\n        if (event.keyCode === 9) {\n            if (this.isModal) {\n                let buttonObj;\n                if (!isNullOrUndefined(this.btnObj)) {\n                    buttonObj = this.btnObj[this.btnObj.length - 1];\n                }\n                if ((isNullOrUndefined(this.btnObj)) && (!isNullOrUndefined(this.ftrTemplateContent))) {\n                    let value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n                    let items = this.ftrTemplateContent.querySelectorAll(value);\n                    buttonObj = { element: items[items.length - 1] };\n                }\n                if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {\n                    event.preventDefault();\n                    this.focusableElements(this.element).focus();\n                }\n                if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {\n                    event.preventDefault();\n                    if (!isNullOrUndefined(buttonObj)) {\n                        buttonObj.element.focus();\n                    }\n                }\n            }\n        }\n        let element = document.activeElement;\n        let isTagName = (['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1);\n        let isContentEdit = false;\n        if (!isTagName) {\n            isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';\n        }\n        if (event.keyCode === 27 && this.closeOnEscape) {\n            this.hide(event);\n        }\n        if ((event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' &&\n            isTagName && !isNullOrUndefined(this.primaryButtonEle)) ||\n            (event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' ||\n                isContentEdit)) && !isNullOrUndefined(this.primaryButtonEle)) {\n            let buttonIndex;\n            let firstPrimary = this.buttons.some((data, index) => {\n                buttonIndex = index;\n                let buttonModel = data.buttonModel;\n                return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;\n            });\n            if (firstPrimary && typeof (this.buttons[buttonIndex].click) === 'function') {\n                setTimeout(() => {\n                    this.buttons[buttonIndex].click.call(this, event);\n                });\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    initialize() {\n        if (!isNullOrUndefined(this.target)) {\n            this.targetEle = ((typeof this.target) === 'string') ?\n                document.querySelector(this.target) : this.target;\n        }\n        if (!this.isBlazorServerRender()) {\n            addClass([this.element], ROOT);\n        }\n        if (Browser.isDevice) {\n            addClass([this.element], DEVICE);\n        }\n        if (!this.isBlazorServerRender()) {\n            this.setCSSClass();\n        }\n        this.setMaxHeight();\n    }\n    /**\n     * Initialize the rendering\n     * @private\n     */\n    initRender() {\n        this.initialRender = true;\n        if (!this.isBlazorServerRender()) {\n            attributes(this.element, { role: 'dialog' });\n        }\n        if (this.zIndex === 1000) {\n            this.setzIndex(this.element, false);\n            this.calculatezIndex = true;\n        }\n        else {\n            this.calculatezIndex = false;\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {\n            this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {\n            this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');\n        }\n        if (!this.isBlazorServerRender()) {\n            this.setTargetContent();\n            if (this.header !== '' && !isNullOrUndefined(this.header)) {\n                this.setHeader();\n            }\n            if (this.showCloseIcon) {\n                this.renderCloseIcon();\n            }\n            this.setContent();\n            if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n                this.setFooterTemplate();\n            }\n            else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {\n                this.setButton();\n            }\n        }\n        if (this.isBlazorServerRender()) {\n            if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n                this.setButton();\n            }\n        }\n        if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n            this.setAllowDragging();\n        }\n        if (!this.isBlazorServerRender()) {\n            attributes(this.element, { 'aria-modal': (this.isModal ? 'true' : 'false') });\n            if (this.isModal) {\n                this.setIsModal();\n            }\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {\n            this.dlgContainer = this.element.parentElement;\n            for (let i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {\n                if (childNodes[i].classList.contains('e-dlg-overlay')) {\n                    this.dlgOverlay = childNodes[i];\n                }\n            }\n        }\n        if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true\n            && !isNullOrUndefined(this.element.parentElement)) {\n            let parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;\n            this.refElement = this.createElement('div', { className: DLG_REF_ELEMENT });\n            parentEle.insertBefore(this.refElement, (this.isModal ? this.dlgContainer : this.element));\n        }\n        if (!isNullOrUndefined(this.targetEle)) {\n            this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);\n        }\n        this.popupObj = new Popup(this.element, {\n            height: this.height,\n            width: this.width,\n            zIndex: this.zIndex,\n            relateTo: this.target,\n            actionOnScroll: 'none',\n            enableRtl: this.enableRtl,\n            open: (event) => {\n                let eventArgs = {\n                    container: this.isModal ? this.dlgContainer : this.element,\n                    element: this.element,\n                    target: this.target,\n                    preventFocus: false\n                };\n                if (this.enableResize) {\n                    this.resetResizeIcon();\n                }\n                this.trigger('open', eventArgs, (openEventArgs) => {\n                    if (!openEventArgs.preventFocus) {\n                        this.focusContent();\n                    }\n                });\n            },\n            close: (event) => {\n                if (this.isModal) {\n                    addClass([this.dlgOverlay], 'e-fade');\n                }\n                this.unBindEvent(this.element);\n                if (this.isModal) {\n                    this.dlgContainer.style.display = 'none';\n                }\n                this.trigger('close', this.closeArgs);\n                let activeEle = document.activeElement;\n                if (!isNullOrUndefined(activeEle) && !isNullOrUndefined((activeEle).blur)) {\n                    activeEle.blur();\n                }\n                if (!isNullOrUndefined(this.storeActiveElement) && !isNullOrUndefined(this.storeActiveElement.focus)) {\n                    this.storeActiveElement.focus();\n                }\n            }\n        });\n        this.positionChange();\n        this.setEnableRTL();\n        if (!this.isBlazorServerRender()) {\n            addClass([this.element], DLG_HIDE);\n            if (this.isModal) {\n                this.setOverlayZindex();\n            }\n        }\n        if (this.visible) {\n            this.show();\n        }\n        else {\n            if (this.isModal) {\n                this.dlgOverlay.style.display = 'none';\n            }\n        }\n        this.initialRender = false;\n    }\n    resetResizeIcon() {\n        let dialogConHeight = this.getMinHeight();\n        if (this.targetEle.offsetHeight < dialogConHeight) {\n            let className = this.enableRtl ? 'e-south-west' : 'e-south-east';\n            let resizeIcon = this.element.querySelector('.' + className);\n            if (!isNullOrUndefined(resizeIcon)) {\n                resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';\n            }\n        }\n    }\n    setOverlayZindex(zIndexValue) {\n        let zIndex;\n        if (isNullOrUndefined(zIndexValue)) {\n            zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;\n        }\n        else {\n            zIndex = zIndexValue;\n        }\n        this.dlgOverlay.style.zIndex = (zIndex - 1).toString();\n        this.dlgContainer.style.zIndex = zIndex.toString();\n    }\n    positionChange() {\n        if (this.isModal) {\n            if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n                this.setPopupPosition();\n            }\n            else if ((!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)))\n                || (isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y)))) {\n                this.setPopupPosition();\n            }\n            else {\n                this.element.style.top = '0px';\n                this.element.style.left = '0px';\n                this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);\n            }\n        }\n        else {\n            this.setPopupPosition();\n        }\n    }\n    setPopupPosition() {\n        this.popupObj.setProperties({\n            position: {\n                X: this.position.X, Y: this.position.Y\n            }\n        });\n    }\n    setAllowDragging() {\n        let handleContent = '.' + DLG_HEADER_CONTENT;\n        this.dragObj = new Draggable(this.element, {\n            clone: false,\n            abort: '.e-dlg-closeicon-btn',\n            handle: handleContent,\n            dragStart: (event) => {\n                this.trigger('dragStart', event, (dragEventArgs) => {\n                    if (isBlazor()) {\n                        dragEventArgs.bindEvents(event.dragElement);\n                    }\n                });\n            },\n            dragStop: (event) => {\n                if (this.isModal) {\n                    if (!isNullOrUndefined(this.position)) {\n                        this.dlgContainer.classList.remove('e-dlg-' + this.position.X + '-' + this.position.Y);\n                    }\n                    // Reset the dialog position after drag completion.\n                    this.element.style.position = 'relative';\n                }\n                this.trigger('dragStop', event);\n                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n            },\n            drag: (event) => {\n                this.trigger('drag', event);\n            }\n        });\n        if (!isNullOrUndefined(this.targetEle)) {\n            this.dragObj.dragArea = this.targetEle;\n        }\n    }\n    setButton() {\n        if (!this.isBlazorServerRender()) {\n            this.buttonContent = [];\n            this.btnObj = [];\n            for (let i = 0; i < this.buttons.length; i++) {\n                let buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';\n                let btn = this.createElement('button', { attrs: { type: buttonType } });\n                this.buttonContent.push(btn.outerHTML);\n            }\n            this.setFooterTemplate();\n        }\n        let footerBtn;\n        for (let i = 0, childNodes = this.element.children; i < childNodes.length; i++) {\n            if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {\n                footerBtn = childNodes[i].querySelectorAll('button');\n            }\n        }\n        for (let i = 0; i < this.buttons.length; i++) {\n            if (!this.isBlazorServerRender()) {\n                this.btnObj[i] = new Button(this.buttons[i].buttonModel);\n            }\n            if (this.isBlazorServerRender()) {\n                this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);\n            }\n            if (!isNullOrUndefined(this.ftrTemplateContent) && typeof (this.buttons[i].click) === 'function' && footerBtn.length > 0) {\n                EventHandler.add(footerBtn[i], 'click', this.buttons[i].click, this);\n            }\n            if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {\n                this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);\n                this.btnObj[i].element.classList.add('e-flat');\n                this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n            }\n        }\n    }\n    setContent() {\n        attributes(this.element, { 'aria-describedby': this.element.id + '_dialog-content' });\n        this.contentEle = this.createElement('div', { className: DLG_CONTENT, id: this.element.id + '_dialog-content' });\n        if (this.innerContentElement) {\n            this.contentEle.appendChild(this.innerContentElement);\n        }\n        else if (!isNullOrUndefined(this.content) && this.content !== '' || !this.initialRender) {\n            if (typeof (this.content) === 'string' && !isBlazor()) {\n                this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n            }\n            else if (this.content instanceof HTMLElement) {\n                this.contentEle.appendChild(this.content);\n            }\n            else {\n                this.setTemplate(this.content, this.contentEle);\n            }\n        }\n        if (!isNullOrUndefined(this.headerContent)) {\n            this.element.insertBefore(this.contentEle, this.element.children[1]);\n        }\n        else {\n            this.element.insertBefore(this.contentEle, this.element.children[0]);\n        }\n        if (this.height === 'auto') {\n            if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === '' && !isNullOrUndefined(this.width)) {\n                this.element.style.width = formatUnit(this.width);\n            }\n            this.setMaxHeight();\n        }\n    }\n    setTemplate(template, toElement) {\n        let templateFn;\n        let templateProps;\n        if (toElement.classList.contains(DLG_HEADER)) {\n            templateProps = this.element.id + 'header';\n        }\n        else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {\n            templateProps = this.element.id + 'footerTemplate';\n        }\n        else {\n            templateProps = this.element.id + 'content';\n        }\n        let templateValue;\n        if (!isNullOrUndefined(template.outerHTML)) {\n            toElement.appendChild(template);\n        }\n        else if ((typeof template !== 'string') || (isBlazor() && !this.isStringTemplate)) {\n            templateFn = compile(template);\n            templateValue = template;\n        }\n        else {\n            toElement.innerHTML = this.sanitizeHelper(template);\n        }\n        let fromElements = [];\n        if (!isNullOrUndefined(templateFn)) {\n            let isString = (isBlazor() &&\n                !this.isStringTemplate && (templateValue).indexOf('<div>Blazor') === 0) ?\n                this.isStringTemplate : true;\n            for (let item of templateFn({}, null, null, templateProps, isString)) {\n                fromElements.push(item);\n            }\n            append([].slice.call(fromElements), toElement);\n        }\n    }\n    /**\n     * @hidden\n     */\n    sanitizeHelper(value) {\n        if (this.enableHtmlSanitizer) {\n            let dialogItem = SanitizeHtmlHelper.beforeSanitize();\n            let beforeEvent = {\n                cancel: false,\n                helper: null\n            };\n            extend(dialogItem, dialogItem, beforeEvent);\n            this.trigger('beforeSanitizeHtml', dialogItem);\n            if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {\n                value = dialogItem.helper(value);\n            }\n            else if (!dialogItem.cancel) {\n                value = SanitizeHtmlHelper.serializeValue(dialogItem, value);\n            }\n        }\n        return value;\n    }\n    setMaxHeight() {\n        if (!this.allowMaxHeight) {\n            return;\n        }\n        let display = this.element.style.display;\n        this.element.style.display = 'none';\n        this.element.style.maxHeight = (!isNullOrUndefined(this.target)) && (this.targetEle.offsetHeight < window.innerHeight) ?\n            (this.targetEle.offsetHeight - 20) + 'px' : (window.innerHeight - 20) + 'px';\n        this.element.style.display = display;\n        if (Browser.isIE && this.height === 'auto' && !isNullOrUndefined(this.contentEle)\n            && this.element.offsetHeight < this.contentEle.offsetHeight) {\n            this.element.style.height = 'inherit';\n        }\n    }\n    setEnableRTL() {\n        if (!this.isBlazorServerRender()) {\n            this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n        }\n        if (!isNullOrUndefined(this.element.querySelector('.e-resize-handle'))) {\n            removeResize();\n            this.setResize();\n        }\n    }\n    setTargetContent() {\n        if (isNullOrUndefined(this.content) || this.content === '') {\n            let isContent = this.element.innerHTML.replace(/\\s|<(\\/?|\\!?)(!--!--)>/g, '') !== '';\n            if (this.element.children.length > 0 || isContent) {\n                this.innerContentElement = document.createDocumentFragment();\n                [].slice.call(this.element.childNodes).forEach((el) => {\n                    if (el.nodeType !== 8) {\n                        this.innerContentElement.appendChild(el);\n                    }\n                });\n            }\n        }\n    }\n    setHeader() {\n        if (this.headerEle) {\n            this.headerEle.innerHTML = '';\n        }\n        else {\n            this.headerEle = this.createElement('div', { id: this.element.id + '_title', className: DLG_HEADER });\n        }\n        this.createHeaderContent();\n        this.headerContent.appendChild(this.headerEle);\n        this.setTemplate(this.header, this.headerEle);\n        attributes(this.element, { 'aria-labelledby': this.element.id + '_title' });\n        this.element.insertBefore(this.headerContent, this.element.children[0]);\n    }\n    setFooterTemplate() {\n        if (this.ftrTemplateContent) {\n            this.ftrTemplateContent.innerHTML = '';\n        }\n        else {\n            this.ftrTemplateContent = this.createElement('div', {\n                className: DLG_FOOTER_CONTENT\n            });\n        }\n        if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n            this.setTemplate(this.footerTemplate, this.ftrTemplateContent);\n        }\n        else {\n            this.ftrTemplateContent.innerHTML = this.buttonContent.join('');\n        }\n        this.element.appendChild(this.ftrTemplateContent);\n    }\n    createHeaderContent() {\n        if (isNullOrUndefined(this.headerContent)) {\n            this.headerContent = this.createElement('div', { id: this.element.id + '_dialog-header', className: DLG_HEADER_CONTENT });\n        }\n    }\n    renderCloseIcon() {\n        this.closeIcon = this.createElement('button', { className: DLG_CLOSE_ICON_BTN, attrs: { type: 'button' } });\n        this.closeIconBtnObj = new Button({ cssClass: 'e-flat', iconCss: DLG_CLOSE_ICON + ' ' + ICON });\n        this.closeIconTitle();\n        if (!isNullOrUndefined(this.headerContent)) {\n            prepend([this.closeIcon], this.headerContent);\n        }\n        else {\n            this.createHeaderContent();\n            prepend([this.closeIcon], this.headerContent);\n            this.element.insertBefore(this.headerContent, this.element.children[0]);\n        }\n        this.closeIconBtnObj.appendTo(this.closeIcon);\n    }\n    closeIconTitle() {\n        this.l10n.setLocale(this.locale);\n        let closeIconTitle = this.l10n.getConstant('close');\n        this.closeIcon.setAttribute('title', closeIconTitle);\n        this.closeIcon.setAttribute('aria-label', closeIconTitle);\n    }\n    setCSSClass(oldCSSClass) {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' '));\n        }\n    }\n    setIsModal() {\n        this.dlgContainer = this.createElement('div', { className: DLG_CONTAINER });\n        this.element.classList.remove(DLG_SHOW);\n        this.element.parentNode.insertBefore(this.dlgContainer, this.element);\n        this.dlgContainer.appendChild(this.element);\n        addClass([this.element], MODAL_DLG);\n        this.dlgOverlay = this.createElement('div', { className: DLG_OVERLAY });\n        this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();\n        this.dlgContainer.appendChild(this.dlgOverlay);\n    }\n    getValidFocusNode(items) {\n        let node;\n        for (let u = 0; u < items.length; u++) {\n            node = items[u];\n            if ((node.clientHeight > 0 || (node.tagName.toLowerCase() === 'a' && node.hasAttribute('href'))) && node.tabIndex > -1 &&\n                !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled=\"true\"],[type=\"hidden\"]')) {\n                return node;\n            }\n        }\n        return node;\n    }\n    focusableElements(content) {\n        if (!isNullOrUndefined(content)) {\n            let value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n            let items = content.querySelectorAll(value);\n            return this.getValidFocusNode(items);\n        }\n        return null;\n    }\n    getAutoFocusNode(container) {\n        let node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);\n        let value = '[autofocus]';\n        let items = container.querySelectorAll(value);\n        let validNode = this.getValidFocusNode(items);\n        if (isBlazor()) {\n            this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n        }\n        if (!isNullOrUndefined(validNode)) {\n            node = validNode;\n        }\n        else {\n            validNode = this.focusableElements(this.contentEle);\n            if (!isNullOrUndefined(validNode)) {\n                return node = validNode;\n            }\n            else if (!isNullOrUndefined(this.primaryButtonEle)) {\n                return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);\n            }\n        }\n        return node;\n    }\n    disableElement(element, t) {\n        let elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;\n        if (elementMatch) {\n            for (; element; element = element.parentNode) {\n                if (element instanceof Element && elementMatch.call(element, t)) {\n                    /* istanbul ignore next */\n                    return element;\n                }\n            }\n        }\n        return null;\n    }\n    focusContent() {\n        let element = this.getAutoFocusNode(this.element);\n        let node = !isNullOrUndefined(element) ? element : this.element;\n        node.focus();\n        this.bindEvent(this.element);\n    }\n    bindEvent(element) {\n        EventHandler.add(element, 'keydown', this.keyDown, this);\n    }\n    unBindEvent(element) {\n        EventHandler.remove(element, 'keydown', this.keyDown);\n    }\n    updateSanitizeContent() {\n        if (!this.isBlazorServerRender()) {\n            this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n        }\n    }\n    isBlazorServerRender() {\n        return isBlazor() && this.isServerRendered;\n    }\n    /**\n     * Module required function\n     * @private\n     */\n    getModuleName() {\n        return 'dialog';\n    }\n    /**\n     * Called internally if any of the property value changed\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'content':\n                    if (!isNullOrUndefined(this.content) && this.content !== '') {\n                        if (this.isBlazorServerRender()) {\n                            this.contentEle = this.element.querySelector('.e-dlg-content');\n                        }\n                        if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {\n                            if (!this.isBlazorServerRender()) {\n                                this.contentEle.innerHTML = '';\n                            }\n                            typeof (this.content) === 'string' ? (this.isBlazorServerRender()\n                                && (this.contentEle.innerText === '')) ?\n                                this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) :\n                                this.updateSanitizeContent() :\n                                this.contentEle.appendChild(this.content);\n                            this.setMaxHeight();\n                        }\n                        else {\n                            if (!this.isBlazorServerRender() ||\n                                isNullOrUndefined(this.element.querySelector('.e-dlg-content'))) {\n                                this.setContent();\n                            }\n                        }\n                    }\n                    else if (!isNullOrUndefined(this.contentEle)) {\n                        detach(this.contentEle);\n                        this.contentEle = null;\n                    }\n                    break;\n                case 'header':\n                    if (this.header === '' || isNullOrUndefined(this.header)) {\n                        if (this.headerEle) {\n                            detach(this.headerEle);\n                            this.headerEle = null;\n                        }\n                    }\n                    else {\n                        if (!this.isBlazorServerRender() ||\n                            isNullOrUndefined(this.element.querySelector('.e-dlg-header-content'))) {\n                            this.setHeader();\n                        }\n                    }\n                    break;\n                case 'footerTemplate':\n                    if (this.footerTemplate === '' || isNullOrUndefined(this.footerTemplate)) {\n                        if (!this.ftrTemplateContent) {\n                            return;\n                        }\n                        detach(this.ftrTemplateContent);\n                        this.ftrTemplateContent = null;\n                        this.buttons = [{}];\n                    }\n                    else {\n                        if (!this.isBlazorServerRender() ||\n                            isNullOrUndefined(this.element.querySelector('.e-footer-content'))) {\n                            this.setFooterTemplate();\n                        }\n                        this.buttons = [{}];\n                    }\n                    break;\n                case 'showCloseIcon':\n                    if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {\n                        if (!this.showCloseIcon && (this.header === '' || isNullOrUndefined(this.header))) {\n                            detach(this.headerContent);\n                            this.headerContent = null;\n                        }\n                        else if (!this.showCloseIcon) {\n                            detach(this.closeIcon);\n                        }\n                        else {\n                            if (this.isBlazorServerRender()) {\n                                this.wireEvents();\n                            }\n                        }\n                    }\n                    else {\n                        if (!this.isBlazorServerRender()) {\n                            this.renderCloseIcon();\n                        }\n                        this.wireEvents();\n                    }\n                    break;\n                case 'locale':\n                    if (this.showCloseIcon) {\n                        this.closeIconTitle();\n                    }\n                    break;\n                case 'visible':\n                    this.visible ? this.show() : this.hide();\n                    break;\n                case 'isModal':\n                    this.updateIsModal();\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'zIndex':\n                    this.popupObj.zIndex = this.zIndex;\n                    if (this.isModal) {\n                        this.setOverlayZindex(this.zIndex);\n                    }\n                    if (this.element.style.zIndex !== this.zIndex.toString()) {\n                        this.calculatezIndex = false;\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'buttons':\n                    let buttonCount = this.buttons.length;\n                    if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {\n                        detach(this.ftrTemplateContent);\n                        this.ftrTemplateContent = null;\n                    }\n                    for (let i = 0; i < buttonCount; i++) {\n                        if (!isNullOrUndefined(this.buttons[i].buttonModel)) {\n                            this.footerTemplate = '';\n                            this.setButton();\n                        }\n                    }\n                    break;\n                case 'allowDragging':\n                    if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n                        this.setAllowDragging();\n                    }\n                    else {\n                        this.dragObj.destroy();\n                    }\n                    break;\n                case 'target':\n                    this.setTarget(newProp.target);\n                    break;\n                case 'position':\n                    this.checkPositionData();\n                    if (this.isModal) {\n                        let positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X;\n                        let positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;\n                        if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {\n                            this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);\n                        }\n                    }\n                    this.positionChange();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n                case 'enableResize':\n                    this.setResize();\n                    break;\n            }\n        }\n    }\n    setTarget(target) {\n        this.popupObj.relateTo = target;\n        this.target = target;\n        this.targetEle = ((typeof this.target) === 'string') ?\n            document.querySelector(this.target) : this.target;\n        if (this.dragObj) {\n            this.dragObj.dragArea = this.targetEle;\n        }\n        this.setMaxHeight();\n        if (this.isModal) {\n            this.updateIsModal();\n        }\n        if (this.enableResize) {\n            this.setResize();\n        }\n    }\n    updateIsModal() {\n        this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');\n        if (this.isModal) {\n            this.setIsModal();\n            this.element.style.top = '0px';\n            this.element.style.left = '0px';\n            if (!isNullOrUndefined(this.targetEle)) {\n                this.targetEle.appendChild(this.dlgContainer);\n            }\n        }\n        else {\n            removeClass([this.element], MODAL_DLG);\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            detach(this.dlgOverlay);\n            while (this.dlgContainer.firstChild) {\n                this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);\n            }\n            this.dlgContainer.parentElement.removeChild(this.dlgContainer);\n        }\n        if (this.visible) {\n            this.show();\n        }\n        this.positionChange();\n        if (this.isModal && this.dlgOverlay) {\n            EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n        }\n    }\n    setzIndex(zIndexElement, setPopupZindex) {\n        let prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.zIndex = getZindexPartial(zIndexElement);\n        this.isProtectedOnChange = prevOnChange;\n        if (setPopupZindex) {\n            this.popupObj.zIndex = this.zIndex;\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To destroy the widget\n     * @method destroy\n     * @return {void}\n     * @memberof dialog\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n        let classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];\n        let attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];\n        removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n        if (this.element.classList.contains(FULLSCREEN)) {\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n        }\n        if (this.isModal) {\n            removeClass([(!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body)], SCROLL_DISABLED);\n        }\n        this.unWireEvents();\n        if (!isNullOrUndefined(this.btnObj)) {\n            for (let i = 0; i < this.btnObj.length; i++) {\n                this.btnObj[i].destroy();\n            }\n        }\n        if (!isNullOrUndefined(this.dragObj)) {\n            this.dragObj.destroy();\n        }\n        if (this.popupObj.element.classList.contains(POPUP_ROOT)) {\n            this.popupObj.destroy();\n        }\n        removeClass([this.element], classArray);\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            removeClass([this.element], this.cssClass.split(' '));\n        }\n        if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {\n            this.refElement.parentElement.insertBefore((this.isModal ? this.dlgContainer : this.element), this.refElement);\n            detach(this.refElement);\n            this.refElement = undefined;\n        }\n        if (this.isModal && !this.isBlazorServerRender()) {\n            detach(this.dlgOverlay);\n            this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);\n            detach(this.dlgContainer);\n        }\n        if (!this.isBlazorServerRender()) {\n            this.element.innerHTML = this.clonedEle.innerHTML;\n        }\n        if (this.isBlazorServerRender()) {\n            if (!isNullOrUndefined(this.element.children)) {\n                for (let i = 0; i <= this.element.children.length; i++) {\n                    i = i - i;\n                    detach(this.element.children[i]);\n                }\n            }\n        }\n        for (let i = 0; i < attrs.length; i++) {\n            this.element.removeAttribute(attrs[i]);\n        }\n        if (!this.isBlazorServerRender()) {\n            super.destroy();\n        }\n        else {\n            this.isDestroyed = true;\n        }\n    }\n    /**\n     * Binding event to the element while widget creation\n     * @hidden\n     */\n    wireEvents() {\n        if (this.isBlazorServerRender() && this.showCloseIcon) {\n            this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];\n        }\n        if (this.showCloseIcon) {\n            EventHandler.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);\n        }\n        if (this.isModal && this.dlgOverlay) {\n            EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n        }\n    }\n    /**\n     * Unbinding event to the element while widget destroy\n     * @hidden\n     */\n    unWireEvents() {\n        if (this.showCloseIcon) {\n            EventHandler.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);\n        }\n        if (this.isModal) {\n            EventHandler.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);\n        }\n        if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n            for (let i = 0; i < this.buttons.length; i++) {\n                if (typeof (this.buttons[i].click) === 'function') {\n                    EventHandler.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);\n                }\n            }\n        }\n    }\n    /**\n     * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.\n     * @return {void}\n     */\n    refreshPosition() {\n        this.popupObj.refreshPosition();\n    }\n    /**\n     * Opens the dialog if it is in hidden state.\n     * To open the dialog with full screen width, set the parameter to true.\n     * @param { boolean } isFullScreen - Enable the fullScreen Dialog.\n     * @return {void}\n     */\n    show(isFullScreen) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        if (!this.element.classList.contains(DLG_SHOW) || (!isNullOrUndefined(isFullScreen))) {\n            if (!isNullOrUndefined(isFullScreen)) {\n                this.fullScreen(isFullScreen);\n            }\n            let eventArgs = isBlazor() ? {\n                cancel: false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                maxHeight: this.element.style.maxHeight\n            } : {\n                cancel: false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                target: this.target,\n                maxHeight: this.element.style.maxHeight\n            };\n            this.trigger('beforeOpen', eventArgs, (beforeOpenArgs) => {\n                if (!beforeOpenArgs.cancel) {\n                    if (this.element.style.maxHeight !== eventArgs.maxHeight) {\n                        this.allowMaxHeight = false;\n                        this.element.style.maxHeight = eventArgs.maxHeight;\n                    }\n                    this.storeActiveElement = document.activeElement;\n                    this.element.tabIndex = -1;\n                    if (this.isModal && (!isNullOrUndefined(this.dlgOverlay))) {\n                        this.dlgOverlay.style.display = 'block';\n                        this.dlgContainer.style.display = 'flex';\n                        removeClass([this.dlgOverlay], 'e-fade');\n                        if (!isNullOrUndefined(this.targetEle)) {\n                            if (this.targetEle === document.body) {\n                                this.dlgContainer.style.position = 'fixed';\n                            }\n                            else {\n                                this.dlgContainer.style.position = 'absolute';\n                            }\n                            this.dlgOverlay.style.position = 'absolute';\n                            this.element.style.position = 'relative';\n                            addClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n                        }\n                        else {\n                            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n                        }\n                    }\n                    let openAnimation = {\n                        name: this.animationSettings.effect + 'In',\n                        duration: this.animationSettings.duration,\n                        delay: this.animationSettings.delay\n                    };\n                    let zIndexElement = (this.isModal) ? this.element.parentElement : this.element;\n                    if (this.calculatezIndex) {\n                        this.setzIndex(zIndexElement, true);\n                        setStyleAttribute(this.element, { 'zIndex': this.zIndex });\n                        if (this.isModal) {\n                            this.setOverlayZindex(this.zIndex);\n                        }\n                    }\n                    this.animationSettings.effect === 'None' ? this.popupObj.show() : this.popupObj.show(openAnimation);\n                    this.dialogOpen = true;\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.visible = true;\n                    this.preventVisibility = true;\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            });\n        }\n    }\n    /**\n     * Closes the dialog if it is in visible state.\n     * @return {void}\n     */\n    hide(event) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        if (this.preventVisibility) {\n            let eventArgs = isBlazor() ? {\n                cancel: false,\n                isInteracted: event ? true : false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                event: event\n            } : {\n                cancel: false,\n                isInteracted: event ? true : false,\n                element: this.element,\n                target: this.target,\n                container: this.isModal ? this.dlgContainer : this.element,\n                event: event\n            };\n            this.closeArgs = eventArgs;\n            this.trigger('beforeClose', eventArgs, (beforeCloseArgs) => {\n                if (!beforeCloseArgs.cancel) {\n                    if (this.isModal) {\n                        !isNullOrUndefined(this.targetEle) ? removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]) :\n                            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n                    }\n                    let closeAnimation = {\n                        name: this.animationSettings.effect + 'Out',\n                        duration: this.animationSettings.duration,\n                        delay: this.animationSettings.delay\n                    };\n                    this.animationSettings.effect === 'None' ? this.popupObj.hide() : this.popupObj.hide(closeAnimation);\n                    this.dialogOpen = false;\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.visible = false;\n                    this.preventVisibility = false;\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            });\n        }\n    }\n    /**\n     * Specifies to view the Full screen Dialog.\n     * @private\n     */\n    fullScreen(args) {\n        let top = this.element.offsetTop;\n        let left = this.element.offsetLeft;\n        if (args) {\n            addClass([this.element], FULLSCREEN);\n            let display = this.element.style.display;\n            this.element.style.display = 'none';\n            this.element.style.maxHeight = (!isNullOrUndefined(this.target)) ?\n                (this.targetEle.offsetHeight) + 'px' : (window.innerHeight) + 'px';\n            this.element.style.display = display;\n            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {\n                this.dragObj.destroy();\n            }\n        }\n        else {\n            removeClass([this.element], FULLSCREEN);\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n                this.setAllowDragging();\n            }\n        }\n        return args;\n    }\n    /**\n     * Returns the dialog button instances.\n     * Based on that, you can dynamically change the button states.\n     * @param { number } index - Index of the button.\n     * @return {Button}\n     */\n    getButtons(index) {\n        if (!isNullOrUndefined(index)) {\n            return this.btnObj[index];\n        }\n        return this.btnObj;\n    }\n};\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"content\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"showCloseIcon\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"isModal\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"header\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"visible\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"enableResize\", void 0);\n__decorate$1([\n    Property('auto')\n], Dialog.prototype, \"height\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"minHeight\", void 0);\n__decorate$1([\n    Property('100%')\n], Dialog.prototype, \"width\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(1000)\n], Dialog.prototype, \"zIndex\", void 0);\n__decorate$1([\n    Property(null)\n], Dialog.prototype, \"target\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"footerTemplate\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"allowDragging\", void 0);\n__decorate$1([\n    Collection([{}], ButtonProps)\n], Dialog.prototype, \"buttons\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"closeOnEscape\", void 0);\n__decorate$1([\n    Complex({}, AnimationSettings)\n], Dialog.prototype, \"animationSettings\", void 0);\n__decorate$1([\n    Complex({ X: 'center', Y: 'center' }, PositionData)\n], Dialog.prototype, \"position\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"created\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"open\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeSanitizeHtml\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeOpen\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"close\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeClose\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"dragStart\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"dragStop\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"drag\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"overlayClick\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizeStart\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizing\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizeStop\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"destroyed\", void 0);\nDialog = __decorate$1([\n    NotifyPropertyChanges\n], Dialog);\n/**\n * Base for creating Alert and Confirmation Dialog through util method.\n */\nvar DialogUtility;\n(function (DialogUtility) {\n    /**\n     * An alert dialog box is used to display warning like messages to the users.\n     * ```\n     * Eg : DialogUtility.alert('Alert message');\n     *\n     * ```\n     */\n    /* istanbul ignore next */\n    function alert(args) {\n        let dialogElement = createElement('div', { 'className': DLG_UTIL_ALERT });\n        document.body.appendChild(dialogElement);\n        let alertDialogObj;\n        let okButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (typeof (args) === 'string') {\n            alertDialogObj = createDialog({ content: args,\n                position: { X: 'center', Y: 'top' },\n                isModal: true, header: DLG_UTIL_DEFAULT_TITLE,\n                buttons: okButtonModel }, dialogElement);\n        }\n        else {\n            alertDialogObj = createDialog(alertOptions(args), dialogElement);\n        }\n        alertDialogObj.close = () => {\n            if (args && args.close) {\n                args.close.apply(alertDialogObj);\n            }\n            alertDialogObj.destroy();\n            if (alertDialogObj.element.classList.contains('e-dlg-modal')) {\n                alertDialogObj.element.parentElement.remove();\n                alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n            }\n            else {\n                alertDialogObj.element.remove();\n            }\n        };\n        return alertDialogObj;\n    }\n    DialogUtility.alert = alert;\n    /**\n     * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.\n     * ```\n     * Eg : DialogUtility.confirm('Confirm dialog message');\n     *\n     * ```\n     */\n    /* istanbul ignore next */\n    function confirm(args) {\n        let dialogElement = createElement('div', { 'className': DLG_UTIL_CONFIRM });\n        document.body.appendChild(dialogElement);\n        let confirmDialogObj;\n        let okCancelButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }, {\n                buttonModel: { content: 'Cancel' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (typeof (args) === 'string') {\n            confirmDialogObj = createDialog({ position: { X: 'center', Y: 'top' }, content: args, isModal: true,\n                header: DLG_UTIL_DEFAULT_TITLE, buttons: okCancelButtonModel\n            }, dialogElement);\n        }\n        else {\n            confirmDialogObj = createDialog(confirmOptions(args), dialogElement);\n        }\n        confirmDialogObj.close = () => {\n            if (args && args.close) {\n                args.close.apply(confirmDialogObj);\n            }\n            confirmDialogObj.destroy();\n            if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {\n                confirmDialogObj.element.parentElement.remove();\n                confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n            }\n            else {\n                confirmDialogObj.element.remove();\n            }\n        };\n        return confirmDialogObj;\n    }\n    DialogUtility.confirm = confirm;\n    function createDialog(options, element) {\n        let dialogObject = new Dialog(options);\n        dialogObject.appendTo(element);\n        return dialogObject;\n    }\n    function alertOptions(option) {\n        let options = {};\n        options.buttons = [];\n        options = formOptions(options, option);\n        options = setAlertButtonModel(options, option);\n        return options;\n    }\n    function confirmOptions(option) {\n        let options = {};\n        options.buttons = [];\n        options = formOptions(options, option);\n        options = setConfirmButtonModel(options, option);\n        return options;\n    }\n    function formOptions(options, option) {\n        options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;\n        options.content = !isNullOrUndefined(option.content) ? option.content : '';\n        options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;\n        options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;\n        options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;\n        options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;\n        options.position = !isNullOrUndefined(option.position) ? option.position : { X: 'center', Y: 'top' };\n        options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings :\n            { effect: 'Fade', duration: 400, delay: 0 };\n        options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : '';\n        options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1000;\n        options.open = !isNullOrUndefined(option.open) ? option.open : null;\n        return options;\n    }\n    function setAlertButtonModel(options, option) {\n        let alertButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (!isNullOrUndefined(option.okButton)) {\n            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);\n        }\n        else {\n            options.buttons = alertButtonModel;\n        }\n        return options;\n    }\n    function setConfirmButtonModel(options, option) {\n        let okButtonModel = {\n            buttonModel: { isPrimary: true, content: 'OK' },\n            click: function () {\n                this.hide();\n            }\n        };\n        let cancelButtonModel = {\n            buttonModel: { content: 'Cancel' },\n            click: function () {\n                this.hide();\n            }\n        };\n        if (!isNullOrUndefined(option.okButton)) {\n            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);\n        }\n        else {\n            options.buttons[0] = okButtonModel;\n        }\n        if (!isNullOrUndefined(option.cancelButton)) {\n            options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);\n        }\n        else {\n            options.buttons[1] = cancelButtonModel;\n        }\n        return options;\n    }\n    function formButtonModel(buttonModel, option, buttonPropModel) {\n        let buttonProps = buttonPropModel;\n        if (!isNullOrUndefined(option.text)) {\n            buttonProps.buttonModel.content = option.text;\n        }\n        if (!isNullOrUndefined(option.icon)) {\n            buttonProps.buttonModel.iconCss = option.icon;\n        }\n        if (!isNullOrUndefined(option.cssClass)) {\n            buttonProps.buttonModel.cssClass = option.cssClass;\n        }\n        if (!isNullOrUndefined(option.click)) {\n            buttonProps.click = option.click;\n        }\n        return buttonProps;\n    }\n})(DialogUtility || (DialogUtility = {}));\n\n/**\n * Dialog Component\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst TOUCHEND_HIDE_DELAY = 1500;\nconst TAPHOLD_THRESHOLD = 500;\nconst SHOW_POINTER_TIP_GAP = 0;\nconst HIDE_POINTER_TIP_GAP = 8;\nconst MOUSE_TRAIL_GAP = 2;\nconst POINTER_ADJUST = 2;\nconst ROOT$1 = 'e-tooltip';\nconst RTL$1 = 'e-rtl';\nconst DEVICE$1 = 'e-bigger';\nconst ICON$1 = 'e-icons';\nconst CLOSE = 'e-tooltip-close';\nconst TOOLTIP_WRAP = 'e-tooltip-wrap';\nconst CONTENT = 'e-tip-content';\nconst ARROW_TIP = 'e-arrow-tip';\nconst ARROW_TIP_OUTER = 'e-arrow-tip-outer';\nconst ARROW_TIP_INNER = 'e-arrow-tip-inner';\nconst TIP_BOTTOM = 'e-tip-bottom';\nconst TIP_TOP = 'e-tip-top';\nconst TIP_LEFT = 'e-tip-left';\nconst TIP_RIGHT = 'e-tip-right';\nconst POPUP_ROOT$1 = 'e-popup';\nconst POPUP_OPEN = 'e-popup-open';\nconst POPUP_CLOSE = 'e-popup-close';\nconst POPUP_LIB = 'e-lib';\nconst HIDE_POPUP = 'e-hidden';\nclass Animation$1 extends ChildProperty {\n}\n__decorate$2([\n    Property({ effect: 'FadeIn', duration: 150, delay: 0 })\n], Animation$1.prototype, \"open\", void 0);\n__decorate$2([\n    Property({ effect: 'FadeOut', duration: 150, delay: 0 })\n], Animation$1.prototype, \"close\", void 0);\n/**\n * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.\n * ```html\n * <div id=\"tooltip\">Show Tooltip</div>\n * ```\n * ```typescript\n * <script>\n *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });\n *   tooltipObj.appendTo(\"#tooltip\");\n * </script>\n * ```\n */\nlet Tooltip = class Tooltip extends Component {\n    /**\n     * Constructor for creating the Tooltip Component\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isBlazorTooltip = false;\n        this.contentTargetValue = null;\n        this.contentEvent = null;\n        this.contentAnimation = null;\n    }\n    initialize() {\n        this.formatPosition();\n        if (!(this.isServerRender())) {\n            addClass([this.element], ROOT$1);\n        }\n    }\n    isServerRender() {\n        return isBlazor() && this.isServerRendered;\n    }\n    formatPosition() {\n        if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {\n            [this.tooltipPositionY, this.tooltipPositionX] = this.position.split(/(?=[A-Z])/);\n        }\n        else {\n            [this.tooltipPositionX, this.tooltipPositionY] = this.position.split(/(?=[A-Z])/);\n        }\n    }\n    renderArrow() {\n        this.setTipClass(this.position);\n        if (!(this.isServerRender())) {\n            let tip = this.createElement('div', { className: ARROW_TIP + ' ' + this.tipClass });\n            tip.appendChild(this.createElement('div', { className: ARROW_TIP_OUTER + ' ' + this.tipClass }));\n            tip.appendChild(this.createElement('div', { className: ARROW_TIP_INNER + ' ' + this.tipClass }));\n            this.tooltipEle.appendChild(tip);\n        }\n        else {\n            let tip = this.tooltipEle.querySelector('.' + ARROW_TIP);\n            addClass([tip.querySelector('.' + ARROW_TIP_OUTER)], this.tipClass);\n            addClass([tip.querySelector('.' + ARROW_TIP_INNER)], this.tipClass);\n            this.tooltipEle.appendChild(tip);\n        }\n    }\n    setTipClass(position) {\n        if (position.indexOf('Right') === 0) {\n            this.tipClass = TIP_LEFT;\n        }\n        else if (position.indexOf('Bottom') === 0) {\n            this.tipClass = TIP_TOP;\n        }\n        else if (position.indexOf('Left') === 0) {\n            this.tipClass = TIP_RIGHT;\n        }\n        else {\n            this.tipClass = TIP_BOTTOM;\n        }\n    }\n    renderPopup(target) {\n        let elePos = this.mouseTrail ? { top: 0, left: 0 } : this.getTooltipPosition(target);\n        this.tooltipEle.classList.remove(POPUP_LIB);\n        this.popupObj = new Popup(this.tooltipEle, {\n            height: this.height,\n            width: this.width,\n            position: { X: elePos.left, Y: elePos.top },\n            enableRtl: this.enableRtl,\n            open: this.openPopupHandler.bind(this),\n            close: this.closePopupHandler.bind(this)\n        });\n    }\n    getTooltipPosition(target) {\n        this.tooltipEle.style.display = 'block';\n        let pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY);\n        let offsetPos = this.calculateTooltipOffset(this.position);\n        let elePos = this.collisionFlipFit(target, pos.left + offsetPos.left, pos.top + offsetPos.top);\n        this.tooltipEle.style.display = '';\n        return elePos;\n    }\n    reposition(target) {\n        let elePos = this.getTooltipPosition(target);\n        this.popupObj.position = { X: elePos.left, Y: elePos.top };\n        this.popupObj.dataBind();\n    }\n    openPopupHandler() {\n        if (!this.mouseTrail && this.needTemplateReposition()) {\n            this.reposition(this.findTarget());\n        }\n        this.trigger('afterOpen', this.tooltipEventArgs);\n    }\n    closePopupHandler() {\n        resetBlazorTemplate(this.element.id + 'content', 'Content');\n        this.clear();\n        this.trigger('afterClose', this.tooltipEventArgs);\n    }\n    calculateTooltipOffset(position) {\n        let pos = { top: 0, left: 0 };\n        let tooltipEleWidth = this.tooltipEle.offsetWidth;\n        let tooltipEleHeight = this.tooltipEle.offsetHeight;\n        let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n        let tipWidth = arrowEle ? arrowEle.offsetWidth : 0;\n        let tipHeight = arrowEle ? arrowEle.offsetHeight : 0;\n        let tipAdjust = (this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP);\n        let tipHeightAdjust = (tipHeight / 2) + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);\n        let tipWidthAdjust = (tipWidth / 2) + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);\n        if (this.mouseTrail) {\n            tipAdjust += MOUSE_TRAIL_GAP;\n        }\n        switch (position) {\n            case 'RightTop':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= tooltipEleHeight - tipHeightAdjust;\n                break;\n            case 'RightCenter':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'RightBottom':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'BottomRight':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            case 'BottomCenter':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n            case 'BottomLeft':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'LeftBottom':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'LeftCenter':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'LeftTop':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight - tipHeightAdjust);\n                break;\n            case 'TopLeft':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'TopRight':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            default:\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n        }\n        pos.left += this.offsetX;\n        pos.top += this.offsetY;\n        return pos;\n    }\n    updateTipPosition(position) {\n        let selEle = this.tooltipEle.querySelectorAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER);\n        let removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];\n        removeClass(selEle, removeList);\n        this.setTipClass(position);\n        addClass(selEle, this.tipClass);\n    }\n    adjustArrow(target, position, tooltipPositionX, tooltipPositionY) {\n        if (this.showTipPointer === false) {\n            return;\n        }\n        this.updateTipPosition(position);\n        let leftValue;\n        let topValue;\n        this.tooltipEle.style.display = 'block';\n        let tooltipWidth = this.tooltipEle.clientWidth;\n        let tooltipHeight = this.tooltipEle.clientHeight;\n        let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n        let arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);\n        let tipWidth = arrowEle.offsetWidth;\n        let tipHeight = arrowEle.offsetHeight;\n        this.tooltipEle.style.display = '';\n        if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {\n            if (this.tipClass === TIP_BOTTOM) {\n                topValue = '99.9%';\n                // Arrow icon aligned -2px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';\n            }\n            else {\n                topValue = -(tipHeight - 1) + 'px';\n                // Arrow icon aligned -6px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';\n            }\n            if (target) {\n                let tipPosExclude = tooltipPositionX !== 'Center' || (tooltipWidth > target.offsetWidth) || this.mouseTrail;\n                if ((tipPosExclude && tooltipPositionX === 'Left') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                    leftValue = (tooltipWidth - tipWidth - POINTER_ADJUST) + 'px';\n                }\n                else if ((tipPosExclude && tooltipPositionX === 'Right') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                    leftValue = POINTER_ADJUST + 'px';\n                }\n                else {\n                    leftValue = ((tooltipWidth / 2) - (tipWidth / 2)) + 'px';\n                }\n            }\n        }\n        else {\n            if (this.tipClass === TIP_RIGHT) {\n                leftValue = '99.9%';\n                // Arrow icon aligned -2px left from ArrowOuterTip div\n                arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';\n            }\n            else {\n                leftValue = -(tipWidth - 1) + 'px';\n                // Arrow icon aligned -2px from ArrowOuterTip width\n                arrowInnerELe.style.left = (-(tipWidth) + (tipWidth - 2)) + 'px';\n            }\n            let tipPosExclude = tooltipPositionY !== 'Center' || (tooltipHeight > target.offsetHeight) || this.mouseTrail;\n            if ((tipPosExclude && tooltipPositionY === 'Top') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                topValue = (tooltipHeight - tipHeight - POINTER_ADJUST) + 'px';\n            }\n            else if ((tipPosExclude && tooltipPositionY === 'Bottom') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                topValue = POINTER_ADJUST + 'px';\n            }\n            else {\n                topValue = ((tooltipHeight / 2) - (tipHeight / 2)) + 'px';\n            }\n        }\n        arrowEle.style.top = topValue;\n        arrowEle.style.left = leftValue;\n    }\n    renderContent(target) {\n        let tooltipContent = this.tooltipEle.querySelector('.' + CONTENT);\n        if (this.cssClass) {\n            addClass([this.tooltipEle], this.cssClass.split(' '));\n        }\n        if (target && !isNullOrUndefined(target.getAttribute('title'))) {\n            target.setAttribute('data-content', target.getAttribute('title'));\n            target.removeAttribute('title');\n        }\n        if (!isNullOrUndefined(this.content)) {\n            if (this.isBlazorTooltip || !(this.isServerRender())) {\n                tooltipContent.innerHTML = '';\n                if (this.content instanceof HTMLElement) {\n                    tooltipContent.appendChild(this.content);\n                }\n                else if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') < 0) {\n                    if (this.enableHtmlSanitizer) {\n                        this.setProperties({ content: SanitizeHtmlHelper.sanitize(this.content) }, true);\n                    }\n                    tooltipContent.innerHTML = this.content;\n                }\n                else {\n                    let templateFunction = compile(this.content);\n                    append(templateFunction({}, null, null, this.element.id + 'content'), tooltipContent);\n                    if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') >= 0) {\n                        this.isBlazorTemplate = true;\n                        updateBlazorTemplate(this.element.id + 'content', 'Content', this);\n                    }\n                }\n            }\n        }\n        else {\n            if (target && !isNullOrUndefined(target.getAttribute('data-content'))) {\n                tooltipContent.innerHTML = target.getAttribute('data-content');\n            }\n        }\n    }\n    renderCloseIcon() {\n        if (!this.isSticky) {\n            return;\n        }\n        let tipClose = this.createElement('div', { className: ICON$1 + ' ' + CLOSE });\n        this.tooltipEle.appendChild(tipClose);\n        EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);\n    }\n    addDescribedBy(target, id) {\n        let describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        if (describedby.indexOf(id) < 0) {\n            describedby.push(id);\n        }\n        attributes(target, { 'aria-describedby': describedby.join(' ').trim(), 'data-tooltip-id': id });\n    }\n    removeDescribedBy(target) {\n        let id = target.getAttribute('data-tooltip-id');\n        let describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        let index = describedby.indexOf(id);\n        if (index !== -1) {\n            describedby.splice(index, 1);\n        }\n        target.removeAttribute('data-tooltip-id');\n        let orgdescribedby = describedby.join(' ').trim();\n        if (orgdescribedby) {\n            target.setAttribute('aria-describedby', orgdescribedby);\n        }\n        else {\n            target.removeAttribute('aria-describedby');\n        }\n    }\n    tapHoldHandler(evt) {\n        clearTimeout(this.autoCloseTimer);\n        this.targetHover(evt.originalEvent);\n    }\n    touchEndHandler(e) {\n        if (this.isSticky) {\n            return;\n        }\n        let close = () => {\n            this.close();\n        };\n        this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);\n    }\n    targetClick(e) {\n        let target;\n        if (this.target) {\n            target = closest(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if (isNullOrUndefined(target)) {\n            return;\n        }\n        if (target.getAttribute('data-tooltip-id') === null) {\n            this.targetHover(e);\n        }\n        else if (!this.isSticky) {\n            this.hideTooltip(this.animation.close, e, target);\n        }\n    }\n    targetHover(e) {\n        let target;\n        if (this.target) {\n            target = closest(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if (isNullOrUndefined(target) || target.getAttribute('data-tooltip-id') !== null) {\n            return;\n        }\n        let targetList = [].slice.call(document.querySelectorAll('[data-tooltip-id= ' + this.ctrlId + '_content]'));\n        for (let target of targetList) {\n            this.restoreElement(target);\n        }\n        this.showTooltip(target, this.animation.open, e);\n    }\n    showTooltip(target, showAnimation, e) {\n        clearTimeout(this.showTimer);\n        clearTimeout(this.hideTimer);\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !isNullOrUndefined(e)\n        };\n        const observeCallback = (beforeRenderArgs) => {\n            this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);\n        };\n        this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));\n    }\n    beforeRenderCallback(beforeRenderArgs, target, e, showAnimation) {\n        let isBlazorTooltipRendered = false;\n        if (beforeRenderArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n        }\n        else {\n            this.isHidden = false;\n            if (isNullOrUndefined(this.tooltipEle)) {\n                if (this.isServerRender()) {\n                    this.contentTargetValue = target;\n                    this.contentEvent = e;\n                    this.contentAnimation = showAnimation;\n                    let args = { 'enableTooltip': 'true' };\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                    // tslint:enable\n                    isBlazorTooltipRendered = true;\n                }\n                else {\n                    this.ctrlId = this.element.getAttribute('id') ?\n                        getUniqueID(this.element.getAttribute('id')) : getUniqueID('tooltip');\n                    this.tooltipEle = this.createElement('div', {\n                        className: TOOLTIP_WRAP + ' ' + POPUP_ROOT$1 + ' ' + POPUP_LIB, attrs: {\n                            role: 'tooltip', 'aria-hidden': 'false', 'id': this.ctrlId + '_content'\n                        }, styles: 'width:' +\n                            formatUnit(this.width) + ';height:' + formatUnit(this.height) + ';position:absolute;'\n                    });\n                    this.beforeRenderBlazor(target, this);\n                }\n                if (!isBlazorTooltipRendered) {\n                    this.afterRenderBlazor(target, e, showAnimation, this);\n                }\n            }\n            else {\n                if (this.isServerRender()) {\n                    addClass([this.tooltipEle], POPUP_OPEN);\n                    document.body.appendChild(this.tooltipEle);\n                    this.renderCloseIcon();\n                    this.renderPopup(target);\n                }\n                if (target) {\n                    this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n                    this.addDescribedBy(target, this.ctrlId + '_content');\n                    this.renderContent(target);\n                    Animation.stop(this.tooltipEle);\n                    this.reposition(target);\n                    this.afterRenderBlazor(target, e, showAnimation, this);\n                }\n            }\n        }\n    }\n    ;\n    contentUpdated(args) {\n        if (isNullOrUndefined(this.tooltipEle)) {\n            if (this.isServerRender()) {\n                this.ctrlId = this.element.id;\n                this.tooltipEle = document.querySelector('#' + this.ctrlId + '_content');\n                if (this.tooltipEle) {\n                    this.tooltipEle.setAttribute('style', 'width:' + formatUnit(this.width) +\n                        ';height:' + formatUnit(this.height) + ';position:absolute;');\n                    this.beforeRenderBlazor(this.contentTargetValue, this);\n                    this.afterRenderBlazor(this.contentTargetValue, this.contentEvent, this.contentAnimation, this);\n                    this.contentTargetValue = this.contentEvent = this.contentAnimation = null;\n                }\n            }\n        }\n    }\n    ;\n    beforeRenderBlazor(target, ctrlObj) {\n        if (target) {\n            if (Browser.isDevice) {\n                addClass([ctrlObj.tooltipEle], DEVICE$1);\n            }\n            if (ctrlObj.width !== 'auto') {\n                ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);\n            }\n            if (!(this.isServerRender())) {\n                ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', { className: CONTENT }));\n            }\n            document.body.appendChild(ctrlObj.tooltipEle);\n            removeClass([ctrlObj.tooltipEle], HIDE_POPUP);\n            ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content');\n            ctrlObj.renderContent(target);\n            addClass([ctrlObj.tooltipEle], POPUP_OPEN);\n            if (ctrlObj.showTipPointer) {\n                ctrlObj.renderArrow();\n            }\n            ctrlObj.renderCloseIcon();\n            ctrlObj.renderPopup(target);\n            ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);\n            Animation.stop(ctrlObj.tooltipEle);\n            ctrlObj.reposition(target);\n        }\n    }\n    afterRenderBlazor(target, e, showAnimation, ctrlObj) {\n        if (target) {\n            removeClass([ctrlObj.tooltipEle], POPUP_OPEN);\n            addClass([ctrlObj.tooltipEle], POPUP_CLOSE);\n            ctrlObj.tooltipEventArgs = {\n                type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n                element: ctrlObj.tooltipEle, isInteracted: !isNullOrUndefined(e)\n            };\n            if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {\n                ctrlObj.tooltipEle.style.display = 'none';\n            }\n            const observeCallback = (observedArgs) => {\n                ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);\n            };\n            ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));\n        }\n    }\n    beforeOpenCallback(observedArgs, target, showAnimation, e) {\n        if (observedArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n            this.restoreElement(target);\n        }\n        else {\n            let openAnimation = {\n                name: showAnimation.effect,\n                duration: showAnimation.duration,\n                delay: showAnimation.delay,\n                timingFunction: 'easeOut'\n            };\n            if (showAnimation.effect === 'None') {\n                openAnimation = undefined;\n            }\n            if (this.openDelay > 0) {\n                let show = () => {\n                    if (this.popupObj) {\n                        this.popupObj.show(openAnimation, target);\n                    }\n                };\n                this.showTimer = setTimeout(show, this.openDelay);\n            }\n            else {\n                if (this.popupObj) {\n                    this.popupObj.show(openAnimation, target);\n                }\n            }\n        }\n        if (e) {\n            this.wireMouseEvents(e, target);\n        }\n    }\n    needTemplateReposition() {\n        // tslint:disable-next-line:no-any\n        const tooltip = this;\n        return !isNullOrUndefined(tooltip.viewContainerRef)\n            && typeof tooltip.viewContainerRef !== 'string'\n            || (this.isServerRender()) && this.isBlazorTemplate;\n    }\n    checkCollision(target, x, y) {\n        let elePos = {\n            left: x, top: y, position: this.position,\n            horizontal: this.tooltipPositionX, vertical: this.tooltipPositionY\n        };\n        let affectedPos = isCollide(this.tooltipEle, (this.target ? this.element : null), x, y);\n        if (affectedPos.length > 0) {\n            elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' :\n                this.tooltipPositionX;\n            elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' :\n                this.tooltipPositionY;\n        }\n        return elePos;\n    }\n    collisionFlipFit(target, x, y) {\n        let elePos = this.checkCollision(target, x, y);\n        let newpos = elePos.position;\n        if (this.tooltipPositionY !== elePos.vertical) {\n            newpos = ((this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical);\n        }\n        if (this.tooltipPositionX !== elePos.horizontal) {\n            if (newpos.indexOf('Left') === 0) {\n                elePos.vertical = (newpos === 'LeftTop' || newpos === 'LeftCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Left');\n            }\n            if (newpos.indexOf('Right') === 0) {\n                elePos.vertical = (newpos === 'RightTop' || newpos === 'RightCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Right');\n            }\n            elePos.horizontal = this.tooltipPositionX;\n        }\n        this.tooltipEventArgs = {\n            type: null, cancel: false, target: target, event: null,\n            element: this.tooltipEle, collidedPosition: newpos\n        };\n        this.trigger('beforeCollision', this.tooltipEventArgs);\n        if (elePos.position !== newpos) {\n            let pos = calculatePosition(target, elePos.horizontal, elePos.vertical);\n            this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);\n            let offsetPos = this.calculateTooltipOffset(newpos);\n            offsetPos.top -= (('TopBottom'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n                ('TopBottom'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * this.offsetY) : 0;\n            offsetPos.left -= (('RightLeft'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n                ('RightLeft'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * this.offsetX) : 0;\n            elePos.position = newpos;\n            elePos.left = pos.left + offsetPos.left;\n            elePos.top = pos.top + offsetPos.top;\n        }\n        else {\n            this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);\n        }\n        let eleOffset = { left: elePos.left, top: elePos.top };\n        let left = fit(this.tooltipEle, (this.target ? this.element : null), { X: true, Y: false }, eleOffset).left;\n        this.tooltipEle.style.display = 'block';\n        if (this.showTipPointer && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {\n            let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n            let arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);\n            if (arrowleft < 0) {\n                arrowleft = 0;\n            }\n            else if ((arrowleft + arrowEle.offsetWidth) > this.tooltipEle.clientWidth) {\n                arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;\n            }\n            arrowEle.style.left = arrowleft.toString() + 'px';\n        }\n        this.tooltipEle.style.display = '';\n        eleOffset.left = left;\n        return eleOffset;\n    }\n    hideTooltip(hideAnimation, e, targetElement) {\n        let target;\n        if (e) {\n            target = this.target ? (targetElement || e.target) : this.element;\n        }\n        else {\n            target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');\n        }\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !isNullOrUndefined(e)\n        };\n        // this line commented for close the tooltip popup element even the target element destroyed in a page.\n        //if (isNullOrUndefined(target)) { return; }\n        this.trigger('beforeClose', this.tooltipEventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                if (this.isServerRender()) {\n                    this.blazorHide(hideAnimation, target);\n                }\n                else {\n                    this.popupHide(hideAnimation, target);\n                }\n            }\n            else {\n                this.isHidden = false;\n            }\n        });\n    }\n    /* istanbul ignore next */\n    blazorHide(hideAnimation, target) {\n        let proxy = this;\n        let hide = () => {\n            proxy.popupHide(hideAnimation, target);\n        };\n        if (this.popupObj) {\n            this.popupHide(hideAnimation, target);\n        }\n        else {\n            setTimeout(hide, 200);\n        }\n    }\n    popupHide(hideAnimation, target) {\n        this.clearTemplate();\n        if (target) {\n            this.restoreElement(target);\n        }\n        this.isHidden = true;\n        let closeAnimation = {\n            name: hideAnimation.effect,\n            duration: hideAnimation.duration,\n            delay: hideAnimation.delay,\n            timingFunction: 'easeIn'\n        };\n        if (hideAnimation.effect === 'None') {\n            closeAnimation = undefined;\n        }\n        if (this.closeDelay > 0) {\n            let hide = () => {\n                if (this.popupObj) {\n                    this.popupObj.hide(closeAnimation);\n                }\n            };\n            this.hideTimer = setTimeout(hide, this.closeDelay);\n        }\n        else {\n            if (this.popupObj) {\n                this.popupObj.hide(closeAnimation);\n            }\n        }\n    }\n    restoreElement(target) {\n        this.unwireMouseEvents(target);\n        if (!isNullOrUndefined(target.getAttribute('data-content'))) {\n            target.setAttribute('title', target.getAttribute('data-content'));\n            target.removeAttribute('data-content');\n        }\n        this.removeDescribedBy(target);\n    }\n    clear() {\n        if (this.tooltipEle) {\n            removeClass([this.tooltipEle], POPUP_CLOSE);\n            addClass([this.tooltipEle], POPUP_OPEN);\n        }\n        if (this.isHidden) {\n            if (this.popupObj) {\n                this.popupObj.destroy();\n            }\n            if (this.isServerRender() && this.tooltipEle) {\n                this.tooltipEle.style.display = 'none';\n                let args = { 'enableTooltip': 'false' };\n                // tslint:disable\n                this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                // tslint:enable\n                remove(this.tooltipEle);\n            }\n            else if (this.tooltipEle) {\n                remove(this.tooltipEle);\n            }\n            this.tooltipEle = null;\n            this.popupObj = null;\n        }\n    }\n    onMouseOut(e) {\n        const enteredElement = e.relatedTarget;\n        // don't close the tooltip only if it is tooltip content element\n        if (enteredElement && !this.mouseTrail) {\n            const checkForTooltipElement = closest(enteredElement, `.${TOOLTIP_WRAP}.${POPUP_LIB}.${POPUP_ROOT$1}`);\n            if (checkForTooltipElement) {\n                EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);\n                this.unwireMouseEvents(e.target);\n            }\n            else {\n                this.hideTooltip(this.animation.close, e, this.findTarget());\n                if (this.closeDelay === 0) {\n                    this.clear();\n                }\n            }\n        }\n        else {\n            this.hideTooltip(this.animation.close, e, this.findTarget());\n            this.clear();\n        }\n    }\n    tooltipElementMouseOut(e) {\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n        EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);\n        this.clear();\n    }\n    onStickyClose(e) {\n        this.close();\n    }\n    onMouseMove(event) {\n        let eventPageX = 0;\n        let eventPageY = 0;\n        if (event.type.indexOf('touch') > -1) {\n            event.preventDefault();\n            eventPageX = event.touches[0].pageX;\n            eventPageY = event.touches[0].pageY;\n        }\n        else {\n            eventPageX = event.pageX;\n            eventPageY = event.pageY;\n        }\n        Animation.stop(this.tooltipEle);\n        removeClass([this.tooltipEle], POPUP_CLOSE);\n        addClass([this.tooltipEle], POPUP_OPEN);\n        this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n        let pos = this.calculateTooltipOffset(this.position);\n        let x = eventPageX + pos.left + this.offsetX;\n        let y = eventPageY + pos.top + this.offsetY;\n        let elePos = this.checkCollision(event.target, x, y);\n        if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {\n            let newpos = (this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;\n            elePos.position = newpos;\n            this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);\n            let colpos = this.calculateTooltipOffset(elePos.position);\n            elePos.left = eventPageX + colpos.left - this.offsetX;\n            elePos.top = eventPageY + colpos.top - this.offsetY;\n        }\n        this.tooltipEle.style.left = elePos.left + 'px';\n        this.tooltipEle.style.top = elePos.top + 'px';\n    }\n    keyDown(event) {\n        if (this.tooltipEle && event.keyCode === 27) {\n            this.close();\n        }\n    }\n    touchEnd(e) {\n        if (this.tooltipEle && closest(e.target, '.' + ROOT$1) === null) {\n            this.close();\n        }\n    }\n    scrollHandler(e) {\n        if (this.tooltipEle) {\n            if (!(closest(e.target, `.${TOOLTIP_WRAP}.${POPUP_LIB}.${POPUP_ROOT$1}`))) {\n                this.close();\n            }\n        }\n    }\n    /**\n     * Core method that initializes the control rendering.\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.wireEvents(this.opensOn);\n        this.renderComplete();\n    }\n    /**\n     * Initializes the values of private members.\n     * @private\n     */\n    preRender() {\n        this.tipClass = TIP_BOTTOM;\n        this.tooltipPositionX = 'Center';\n        this.tooltipPositionY = 'Top';\n        this.isHidden = true;\n    }\n    /**\n     * Binding events to the Tooltip element.\n     * @hidden\n     */\n    wireEvents(trigger) {\n        let triggerList = this.getTriggerList(trigger);\n        for (let opensOn of triggerList) {\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.wireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);\n            }\n            if (opensOn === 'Hover') {\n                if (Browser.isDevice) {\n                    this.touchModule = new Touch(this.element, {\n                        tapHoldThreshold: TAPHOLD_THRESHOLD,\n                        tapHold: this.tapHoldHandler.bind(this)\n                    });\n                    EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);\n                }\n                else {\n                    EventHandler.add(this.element, 'mouseover', this.targetHover, this);\n                    if (this.isServerRender() && !this.isSticky) {\n                        EventHandler.add(this.element, 'mouseleave', this.onMouseOut, this);\n                    }\n                }\n            }\n        }\n        EventHandler.add(document, 'touchend', this.touchEnd, this);\n        EventHandler.add(document, 'scroll wheel', this.scrollHandler, this);\n        EventHandler.add(document, 'keydown', this.keyDown, this);\n    }\n    getTriggerList(trigger) {\n        if (trigger === 'Auto') {\n            trigger = (Browser.isDevice) ? 'Hover' : 'Hover Focus';\n        }\n        return trigger.split(' ');\n    }\n    wireFocusEvents() {\n        if (!isNullOrUndefined(this.target)) {\n            let targetList = [].slice.call(this.element.querySelectorAll(this.target));\n            for (let target of targetList) {\n                EventHandler.add(target, 'focus', this.targetHover, this);\n            }\n        }\n        else {\n            EventHandler.add(this.element, 'focus', this.targetHover, this);\n        }\n    }\n    wireMouseEvents(e, target) {\n        if (this.tooltipEle) {\n            if (!this.isSticky) {\n                if (e.type === 'focus') {\n                    EventHandler.add(target, 'blur', this.onMouseOut, this);\n                }\n                if (e.type === 'mouseover') {\n                    if (!this.isServerRender()) {\n                        EventHandler.add(target, 'mouseleave', this.onMouseOut, this);\n                    }\n                }\n            }\n            if (this.mouseTrail) {\n                EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);\n            }\n        }\n    }\n    /**\n     * Unbinding events from the element on widget destroy.\n     * @hidden\n     */\n    unwireEvents(trigger) {\n        let triggerList = this.getTriggerList(trigger);\n        for (let opensOn of triggerList) {\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.unwireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);\n            }\n            if (opensOn === 'Hover') {\n                if (Browser.isDevice) {\n                    if (this.touchModule) {\n                        this.touchModule.destroy();\n                    }\n                    EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);\n                }\n                else {\n                    EventHandler.remove(this.element, 'mouseover', this.targetHover);\n                    if (this.isServerRender() && !this.isSticky) {\n                        EventHandler.remove(this.element, 'mouseleave', this.onMouseOut);\n                    }\n                }\n            }\n        }\n        EventHandler.remove(document, 'touchend', this.touchEnd);\n        EventHandler.remove(document, 'scroll wheel', this.scrollHandler);\n        EventHandler.remove(document, 'keydown', this.keyDown);\n    }\n    unwireFocusEvents() {\n        if (!isNullOrUndefined(this.target)) {\n            let targetList = [].slice.call(this.element.querySelectorAll(this.target));\n            for (let target of targetList) {\n                EventHandler.remove(target, 'focus', this.targetHover);\n            }\n        }\n        else {\n            EventHandler.remove(this.element, 'focus', this.targetHover);\n        }\n    }\n    unwireMouseEvents(target) {\n        if (!this.isSticky) {\n            let triggerList = this.getTriggerList(this.opensOn);\n            for (let opensOn of triggerList) {\n                if (opensOn === 'Focus') {\n                    EventHandler.remove(target, 'blur', this.onMouseOut);\n                }\n                if (opensOn === 'Hover' && !Browser.isDevice) {\n                    if (!this.isServerRender()) {\n                        EventHandler.remove(target, 'mouseleave', this.onMouseOut);\n                    }\n                }\n            }\n        }\n        if (this.mouseTrail) {\n            EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);\n        }\n    }\n    findTarget() {\n        let target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');\n        return target;\n    }\n    /**\n     * Core method to return the component name.\n     * @private\n     */\n    getModuleName() {\n        return 'tooltip';\n    }\n    /**\n     * Returns the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Called internally, if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let targetElement = this.findTarget();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'height':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.height = formatUnit(newProp.height);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'content':\n                    if (this.tooltipEle) {\n                        if (this.isServerRender()) {\n                            this.isBlazorTooltip = true;\n                        }\n                        this.renderContent();\n                    }\n                    else if (this.isServerRender()) {\n                        let args = { 'content': newProp.content };\n                        // tslint:disable\n                        this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                        // tslint:enable\n                    }\n                    break;\n                case 'opensOn':\n                    this.unwireEvents(oldProp.opensOn);\n                    this.wireEvents(newProp.opensOn);\n                    break;\n                case 'position':\n                    this.formatPosition();\n                    if (this.tooltipEle && targetElement) {\n                        let arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);\n                        arrowInnerELe.style.top = arrowInnerELe.style.left = null;\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'tipPointerPosition':\n                    if (this.tooltipEle && targetElement) {\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'offsetX':\n                    if (this.tooltipEle) {\n                        let x = newProp.offsetX - oldProp.offsetX;\n                        this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + (x)).toString() + 'px';\n                    }\n                    break;\n                case 'offsetY':\n                    if (this.tooltipEle) {\n                        let y = newProp.offsetY - oldProp.offsetY;\n                        this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + (y)).toString() + 'px';\n                    }\n                    break;\n                case 'cssClass':\n                    if (this.tooltipEle) {\n                        if (oldProp.cssClass) {\n                            removeClass([this.tooltipEle], oldProp.cssClass.split(' '));\n                        }\n                        if (newProp.cssClass) {\n                            addClass([this.tooltipEle], newProp.cssClass.split(' '));\n                        }\n                    }\n                    break;\n                case 'enableRtl':\n                    if (this.tooltipEle) {\n                        if (this.enableRtl) {\n                            addClass([this.tooltipEle], RTL$1);\n                        }\n                        else {\n                            removeClass([this.tooltipEle], RTL$1);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * It is used to show the Tooltip on the specified target with specific animation settings.\n     * @param element Target element where the Tooltip is to be displayed. (It is an optional parameter)\n     * @param animation Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)\n     * @return {void}\n     */\n    open(element, animation) {\n        if (isNullOrUndefined(animation)) {\n            animation = this.animation.open;\n        }\n        if (isNullOrUndefined(element)) {\n            element = this.element;\n        }\n        if (element.style.display === 'none') {\n            return;\n        }\n        this.showTooltip(element, animation);\n    }\n    /**\n     * It is used to hide the Tooltip with specific animation effect.\n     * @param animation Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)\n     * @return {void}\n     */\n    close(animation) {\n        if (!animation) {\n            animation = this.animation.close;\n        }\n        this.hideTooltip(animation);\n    }\n    /**\n     * It is used to refresh the Tooltip content and its position.\n     * @param target Target element where the Tooltip content or position needs to be refreshed.\n     * @return {void}\n     */\n    refresh(target) {\n        if (this.tooltipEle) {\n            this.renderContent(target);\n        }\n        if (this.popupObj && target) {\n            this.reposition(target);\n        }\n    }\n    /**\n     * It is used to destroy the Tooltip component.\n     * @method destroy\n     * @return {void}\n     * @memberof Tooltip\n     */\n    destroy() {\n        if (!this.isServerRender()) {\n            super.destroy();\n            if (this.tooltipEle) {\n                remove(this.tooltipEle);\n            }\n        }\n        if (this.isServerRender() && this.tooltipEle) {\n            let placeholder = document.querySelector('#' + this.ctrlId + '_content_placeholder');\n            if (placeholder) {\n                placeholder.appendChild(this.tooltipEle);\n            }\n        }\n        if (this.popupObj) {\n            this.popupObj.destroy();\n        }\n        removeClass([this.element], ROOT$1);\n        this.unwireEvents(this.opensOn);\n        this.unwireMouseEvents(this.element);\n        this.tooltipEle = null;\n        this.popupObj = null;\n    }\n};\n__decorate$2([\n    Property('auto')\n], Tooltip.prototype, \"width\", void 0);\n__decorate$2([\n    Property('auto')\n], Tooltip.prototype, \"height\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"content\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"target\", void 0);\n__decorate$2([\n    Property('TopCenter')\n], Tooltip.prototype, \"position\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"offsetX\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"offsetY\", void 0);\n__decorate$2([\n    Property(true)\n], Tooltip.prototype, \"showTipPointer\", void 0);\n__decorate$2([\n    Property('Auto')\n], Tooltip.prototype, \"tipPointerPosition\", void 0);\n__decorate$2([\n    Property('Auto')\n], Tooltip.prototype, \"opensOn\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"mouseTrail\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"isSticky\", void 0);\n__decorate$2([\n    Complex({}, Animation$1)\n], Tooltip.prototype, \"animation\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"openDelay\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"closeDelay\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeRender\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"afterOpen\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeClose\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"afterClose\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeCollision\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"destroyed\", void 0);\nTooltip = __decorate$2([\n    NotifyPropertyChanges\n], Tooltip);\n\n/**\n * Tooltip modules\n */\n\nlet globalTimeOut = {};\nlet spinTemplate = null;\nlet spinCSSClass = null;\nconst DEFT_MAT_WIDTH = 30;\nconst DEFT_FAB_WIDTH = 30;\nconst DEFT_BOOT_WIDTH = 30;\nconst DEFT_BOOT4_WIDTH = 36;\nconst CLS_SHOWSPIN = 'e-spin-show';\nconst CLS_HIDESPIN = 'e-spin-hide';\nconst CLS_MATERIALSPIN = 'e-spin-material';\nconst CLS_FABRICSPIN = 'e-spin-fabric';\nconst CLS_BOOTSPIN = 'e-spin-bootstrap';\nconst CLS_BOOT4SPIN = 'e-spin-bootstrap4';\nconst CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';\nconst CLS_SPINWRAP = 'e-spinner-pane';\nconst CLS_SPININWRAP = 'e-spinner-inner';\nconst CLS_SPINCIRCLE = 'e-path-circle';\nconst CLS_SPINARC = 'e-path-arc';\nconst CLS_SPINLABEL = 'e-spin-label';\nconst CLS_SPINTEMPLATE = 'e-spin-template';\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : blazorSpinner({ action: \"Create\", options: {target: targetElement}, type: \"\" });\n * ```\n * @param args\n * @private\n */\nfunction Spinner(action, options, target, type) {\n    switch (action) {\n        case 'Create':\n            let element = document.querySelector(options.target);\n            let args = { type: type, target: element, cssClass: options.cssClass,\n                label: options.label, width: options.width };\n            createSpinner(args);\n            break;\n        case 'Show':\n            showSpinner(document.querySelector(target));\n            break;\n        case 'Hide':\n            hideSpinner(document.querySelector(target));\n            break;\n        case 'Set':\n            let setArgs = { cssClass: options.cssClass, type: type };\n            setSpinner(setArgs);\n            break;\n    }\n}\n/**\n * Create a spinner for the specified target element.\n * ```\n * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });\n * ```\n * @param args\n * @private\n */\nfunction createSpinner(args, internalCreateElement) {\n    if (!args.target) {\n        return;\n    }\n    let radius;\n    let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    let container = create_spinner_container(args.target, makeElement);\n    if (!isNullOrUndefined(args.cssClass)) {\n        container.wrap.classList.add(args.cssClass);\n    }\n    if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {\n        let template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;\n        container.wrap.classList.add(CLS_SPINTEMPLATE);\n        replaceContent(container.wrap, template, spinCSSClass);\n    }\n    else {\n        let theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);\n        let width = !isNullOrUndefined(args.width) ? args.width : undefined;\n        radius = calculateRadius(width, theme);\n        setTheme(theme, container.wrap, radius, makeElement);\n        if (!isNullOrUndefined(args.label)) {\n            createLabel(container.inner_wrap, args.label, makeElement);\n        }\n    }\n    container.wrap.classList.add(CLS_HIDESPIN);\n    container = null;\n}\nfunction createLabel(container, label, makeElement) {\n    let labelEle = makeElement('div', {});\n    labelEle.classList.add(CLS_SPINLABEL);\n    labelEle.textContent = label;\n    container.appendChild(labelEle);\n    return labelEle;\n}\nfunction createMaterialSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Material', radius: radius };\n    create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);\n    mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);\n}\nfunction createBootstrap4Spinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Bootstrap4', radius: radius };\n    create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);\n    mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);\n}\nfunction startMatAnimate(container, uniqueID, radius) {\n    let globalObject = {};\n    let timeOutVar = 0;\n    globalTimeOut[uniqueID].timeOut = 0;\n    globalObject[uniqueID] = globalVariables(uniqueID, radius, 0, 0);\n    let spinnerInfo = { uniqueID: uniqueID, container: container, globalInfo: globalObject, timeOutVar: timeOutVar };\n    animateMaterial(spinnerInfo);\n}\nfunction createFabricSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Fabric', radius: radius };\n    create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);\n    fb_calculate_attributes(radius, container, CLS_FABRICSPIN);\n}\nfunction createHighContrastSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'HighContrast', radius: radius };\n    create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);\n    fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);\n}\nfunction getTheme(container) {\n    let theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n    return theme.replace(/['\"]+/g, '');\n}\nfunction setTheme(theme, container, radius, makeElement) {\n    let innerContainer = container.querySelector('.' + CLS_SPININWRAP);\n    let svg = innerContainer.querySelector('svg');\n    if (!isNullOrUndefined(svg)) {\n        innerContainer.removeChild(svg);\n    }\n    switch (theme) {\n        case 'Material':\n            createMaterialSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Fabric':\n            createFabricSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap':\n            createBootstrapSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'HighContrast':\n            createHighContrastSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap4':\n            createBootstrap4Spinner(innerContainer, radius, makeElement);\n            break;\n    }\n}\nfunction createBootstrapSpinner(innerContainer, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Bootstrap', radius: radius };\n    create_bootstrap_element(innerContainer, uniqueID, makeElement);\n    boot_calculate_attributes(innerContainer, radius);\n}\nfunction create_bootstrap_element(innerContainer, uniqueID, makeElement) {\n    let svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let viewBoxValue = 64;\n    let trans = 32;\n    let defaultRadius = 2;\n    svgBoot.setAttribute('id', uniqueID);\n    svgBoot.setAttribute('class', CLS_BOOTSPIN);\n    svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);\n    innerContainer.insertBefore(svgBoot, innerContainer.firstChild);\n    for (let item = 0; item <= 7; item++) {\n        let bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);\n        bootCircle.setAttribute('r', defaultRadius + '');\n        bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');\n        svgBoot.appendChild(bootCircle);\n    }\n}\nfunction boot_calculate_attributes(innerContainer, radius) {\n    let svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    svg.style.width = svg.style.height = radius + 'px';\n    let x = 0;\n    let y = 0;\n    let rad = 24;\n    let startArc = 90;\n    for (let item = 0; item <= 7; item++) {\n        let start = defineArcPoints(x, y, rad, startArc);\n        let circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);\n        circleEle.setAttribute('cx', start.x + '');\n        circleEle.setAttribute('cy', start.y + '');\n        startArc = startArc >= 360 ? 0 : startArc;\n        startArc = startArc + 45;\n    }\n}\nfunction generateSeries(begin, stop) {\n    let series = [];\n    let start = begin;\n    let end = stop;\n    let increment = false;\n    let count = 1;\n    formSeries(start);\n    function formSeries(i) {\n        series.push(i);\n        if (i !== end || count === 1) {\n            if (i <= start && i > 1 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            else if (i === 1) {\n                i = 7;\n                i = parseFloat((i + 0.2).toFixed(2));\n                increment = true;\n            }\n            else if (i < 8 && increment) {\n                i = parseFloat((i + 0.2).toFixed(2));\n                if (i === 8) {\n                    increment = false;\n                }\n            }\n            else if (i <= 8 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            ++count;\n            formSeries(i);\n        }\n    }\n    return series;\n}\nfunction animateBootstrap(innerContainer) {\n    let svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    let id = svg.getAttribute('id');\n    for (let i = 1; i <= 8; i++) {\n        let circleEle = (innerContainer.getElementsByClassName('e-path-circle_' +\n            (i === 8 ? 0 : i))[0]);\n        rotation(circleEle, i, i, generateSeries(i, i), id);\n    }\n    function rotation(circle, start, end, series, id) {\n        let count = 0;\n        boot_animate(start);\n        function boot_animate(radius) {\n            if (globalTimeOut[id].isAnimate) {\n                ++count;\n                circle.setAttribute('r', radius + '');\n                if (count >= series.length) {\n                    count = 0;\n                }\n                globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);\n            }\n        }\n    }\n}\nfunction replaceContent(container, template, cssClass) {\n    if (!isNullOrUndefined(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    let inner = container.querySelector('.e-spinner-inner');\n    inner.innerHTML = template;\n}\nfunction calculateRadius(width, theme) {\n    let defaultSize;\n    switch (theme) {\n        case 'Material':\n            defaultSize = DEFT_MAT_WIDTH;\n            break;\n        case 'Fabric':\n            defaultSize = DEFT_FAB_WIDTH;\n            break;\n        case 'Bootstrap4':\n            defaultSize = DEFT_BOOT4_WIDTH;\n            break;\n        default:\n            defaultSize = DEFT_BOOT_WIDTH;\n    }\n    width = width ? parseFloat(width + '') : defaultSize;\n    return theme === 'Bootstrap' ? width : width / 2;\n}\nfunction globalVariables(id, radius, count, previousId) {\n    return {\n        radius: radius,\n        count: count,\n        previousId: previousId\n    };\n}\nfunction random_generator() {\n    let random = '';\n    let combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 5; i++) {\n        random += combine.charAt(Math.floor(Math.random() * combine.length));\n    }\n    return random;\n}\nfunction create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {\n    let svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgFabric.setAttribute('id', uniqueID);\n    svgFabric.setAttribute('class', themeClass);\n    let fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    let fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCircleArc.setAttribute('class', CLS_SPINARC);\n    innerCon.insertBefore(svgFabric, innerCon.firstChild);\n    svgFabric.appendChild(fabricCirclePath);\n    svgFabric.appendChild(fabricCircleArc);\n}\nfunction create_material_element(innerContainer, uniqueID, makeElement, cls) {\n    let svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgMaterial.setAttribute('class', cls);\n    svgMaterial.setAttribute('id', uniqueID);\n    let matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    matCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);\n    svgMaterial.appendChild(matCirclePath);\n}\nfunction create_spinner_container(target, makeElement) {\n    let spinnerContainer = makeElement('div', {});\n    spinnerContainer.classList.add(CLS_SPINWRAP);\n    let spinnerInnerContainer = makeElement('div', {});\n    spinnerInnerContainer.classList.add(CLS_SPININWRAP);\n    target.appendChild(spinnerContainer);\n    spinnerContainer.appendChild(spinnerInnerContainer);\n    return { wrap: spinnerContainer, inner_wrap: spinnerInnerContainer };\n}\nfunction animateMaterial(spinnerInfo) {\n    let start = 1;\n    let end = 149;\n    let duration = 1333;\n    let max = 75;\n    createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);\n    spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;\n}\nfunction createCircle(start, end, easing, duration, count, max, spinnerInfo) {\n    let id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;\n    let startTime = new Date().getTime();\n    let change = end - start;\n    let diameter = getSize((spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2) + '');\n    let strokeSize = getStrokeSize(diameter);\n    let rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);\n    mat_animation(spinnerInfo);\n    function mat_animation(spinnerInfo) {\n        let currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));\n        updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);\n        if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {\n            globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);\n        }\n        else {\n            animateMaterial(spinnerInfo);\n        }\n    }\n    function updatePath(value, container) {\n        if ((!isNullOrUndefined(container.querySelector('svg.e-spin-material')))\n            && (!isNullOrUndefined(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle')))) {\n            let svg = container.querySelector('svg.e-spin-material');\n            let path = svg.querySelector('path.e-path-circle');\n            path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');\n            path.setAttribute('transform', 'rotate(' + (rotate) + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');\n        }\n    }\n}\nfunction mat_calculate_attributes(radius, container, type, cls) {\n    let diameter = radius * 2;\n    let svg = container.querySelector('svg.' + cls);\n    let path = svg.querySelector('path.e-path-circle');\n    let strokeSize = getStrokeSize(diameter);\n    let transformOrigin = (diameter / 2) + 'px';\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.width = svg.style.height = diameter + 'px';\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    path.setAttribute('d', drawArc(diameter, strokeSize));\n    if (type === 'Material') {\n        path.setAttribute('stroke-width', strokeSize + '');\n        path.setAttribute('stroke-dasharray', ((diameter - strokeSize) * Math.PI * 0.75) + '');\n        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');\n    }\n}\nfunction getSize(value) {\n    let parsed = parseFloat(value);\n    return parsed;\n}\nfunction drawArc(diameter, strokeSize) {\n    let radius = diameter / 2;\n    let offset = strokeSize / 2;\n    return 'M' + radius + ',' + offset\n        + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;\n}\nfunction getStrokeSize(diameter) {\n    return 10 / 100 * diameter;\n}\nfunction getDashOffset(diameter, strokeSize, value, max) {\n    return (diameter - strokeSize) * Math.PI * ((3 * (max) / 100) - (value / 100));\n}\nfunction easeAnimation(current, start, change, duration) {\n    let timestamp = (current /= duration) * current;\n    let timecount = timestamp * current;\n    return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);\n}\nfunction fb_calculate_attributes(radius, innerConainer, trgClass) {\n    let centerX = radius;\n    let centerY = radius;\n    let diameter = radius * 2;\n    let startArc = 315;\n    let endArc = 45;\n    let svg = innerConainer.querySelector('.' + trgClass);\n    let circle = svg.querySelector('.e-path-circle');\n    let path = svg.querySelector('.e-path-arc');\n    let transformOrigin = (diameter / 2) + 'px';\n    circle.setAttribute('d', defineCircle(centerX, centerY, radius));\n    path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    svg.style.width = svg.style.height = diameter + 'px';\n}\nfunction defineArcPoints(centerX, centerY, radius, angle) {\n    let radians = (angle - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + (radius * Math.cos(radians)),\n        y: centerY + (radius * Math.sin(radians))\n    };\n}\nfunction defineArc(x, y, radius, startArc, endArc) {\n    let start = defineArcPoints(x, y, radius, endArc);\n    let end = defineArcPoints(x, y, radius, startArc);\n    let d = [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, 0, 0, end.x, end.y\n    ].join(' ');\n    return d;\n}\nfunction defineCircle(x, y, radius) {\n    let d = [\n        'M', x, y,\n        'm', -radius, 0,\n        'a', radius, radius, 0, 1, 0, radius * 2, 0,\n        'a', radius, radius, 0, 1, 0, -radius * 2, 0,\n    ].join(' ');\n    return d;\n}\n/**\n * Function to show the Spinner.\n * @param container - Specify the target of the Spinner.\n * @private\n */\nfunction showSpinner(container) {\n    showHideSpinner(container, false);\n    container = null;\n}\nfunction showHideSpinner(container, isHide) {\n    let spinnerWrap;\n    if (container) {\n        spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container :\n            container.querySelector('.' + CLS_SPINWRAP);\n    }\n    if (container && spinnerWrap) {\n        let inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);\n        let spinCheck;\n        spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) :\n            !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);\n        if (spinCheck) {\n            let svgEle = spinnerWrap.querySelector('svg');\n            if (isNullOrUndefined(svgEle)) {\n                return;\n            }\n            let id = svgEle.getAttribute('id');\n            globalTimeOut[id].isAnimate = !isHide;\n            switch (globalTimeOut[id].type) {\n                case 'Material':\n                    isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);\n                    break;\n                case 'Bootstrap':\n                    isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);\n                    break;\n            }\n        }\n        isHide ? classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);\n        container = null;\n    }\n}\n/**\n * Function to hide the Spinner.\n * @param container - Specify the target of the Spinner.\n * @private\n */\nfunction hideSpinner(container) {\n    showHideSpinner(container, true);\n    container = null;\n}\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });\n * ```\n * @param args\n * @private\n */\nfunction setSpinner(args, internalCreateElement) {\n    let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    if (args.template !== undefined) {\n        spinTemplate = args.template;\n        if (args.template !== undefined) {\n            spinCSSClass = args.cssClass;\n        }\n    }\n    let container = document.querySelectorAll('.' + CLS_SPINWRAP);\n    for (let index = 0; index < container.length; index++) {\n        ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);\n    }\n}\nfunction ensureTemplate(template, container, theme, cssClass, makeEle) {\n    if (isNullOrUndefined(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {\n        replaceTheme(container, theme, cssClass, makeEle);\n        if (container.classList.contains(CLS_SHOWSPIN)) {\n            container.classList.remove(CLS_SHOWSPIN);\n            showSpinner(container);\n        }\n        else {\n            container.classList.remove(CLS_HIDESPIN);\n            hideSpinner(container);\n        }\n    }\n    else {\n        spinTemplate = template;\n        if (!isNullOrUndefined(cssClass)) {\n            spinCSSClass = cssClass;\n        }\n    }\n}\nfunction replaceTheme(container, theme, cssClass, makeEle) {\n    if (!isNullOrUndefined(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    let svgElement = container.querySelector('svg');\n    let radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;\n    let classNames = svgElement.getAttribute('class');\n    let svgClassList = classNames.split(/\\s/);\n    if (svgClassList.indexOf('e-spin-material') >= 0) {\n        let id = svgElement.getAttribute('id');\n        clearTimeout(globalTimeOut[id].timeOut);\n    }\n    setTheme(theme, container, radius, makeEle);\n}\n\n/**\n * spinner modules\n */\n\n/**\n * Popup Components\n */\n\nexport { PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation$1 as Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner };\n//# sourceMappingURL=ej2-popups.es2015.js.map\n","import { Ajax, Animation, Base, Browser, ChildProperty, Collection, Complex, Component, Event, EventHandler, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getInstance, getNumericObject, getUniqueID, getValue, isBlazor, isNullOrUndefined, merge, onIntlChange, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Popup, Tooltip, createSpinner, getZindexPartial, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { Deferred, SplitButton, getModel } from '@syncfusion/ej2-splitbuttons';\n\nconst CLASSNAMES = {\n    RTL: 'e-rtl',\n    DISABLE: 'e-disabled',\n    INPUT: 'e-input',\n    TEXTAREA: 'e-multi-line-input',\n    INPUTGROUP: 'e-input-group',\n    FLOATINPUT: 'e-float-input',\n    FLOATLINE: 'e-float-line',\n    FLOATTEXT: 'e-float-text',\n    CLEARICON: 'e-clear-icon',\n    CLEARICONHIDE: 'e-clear-icon-hide',\n    LABELTOP: 'e-label-top',\n    LABELBOTTOM: 'e-label-bottom',\n    NOFLOATLABEL: 'e-no-float-label',\n    INPUTCUSTOMTAG: 'e-input-custom-tag',\n    FLOATCUSTOMTAG: 'e-float-custom-tag'\n};\n/**\n * Base for Input creation through util methods.\n */\nvar Input;\n(function (Input) {\n    let floatType;\n    /**\n     * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.\n     * ```\n     * E.g : Input.createInput({ element: element, floatLabelType : \"Auto\", properties: { placeholder: 'Search' } });\n     * ```\n     * @param args\n     */\n    function createInput(args, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let inputObject = { container: null, buttons: [], clearButton: null };\n        floatType = args.floatLabelType;\n        if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === 'Never') {\n            inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n            addClass([args.element], CLASSNAMES.INPUT);\n            inputObject.container.appendChild(args.element);\n        }\n        else {\n            createFloatingInput(args, inputObject, makeElement);\n        }\n        bindInitialEvent(args);\n        if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) &&\n            args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {\n            setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);\n            inputObject.clearButton.setAttribute('role', 'button');\n            if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                addClass([inputObject.container], CLASSNAMES.INPUTGROUP);\n            }\n        }\n        if (!isNullOrUndefined(args.buttons) && args.element.tagName !== 'TEXTAREA') {\n            for (let i = 0; i < args.buttons.length; i++) {\n                inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));\n            }\n        }\n        if (!isNullOrUndefined(args.element) && args.element.tagName === 'TEXTAREA') {\n            addClass([inputObject.container], CLASSNAMES.TEXTAREA);\n        }\n        inputObject = setPropertyValue(args, inputObject);\n        return inputObject;\n    }\n    Input.createInput = createInput;\n    function bindInitialEvent(args) {\n        checkInputValue(args.floatLabelType, args.element);\n        args.element.addEventListener('focus', function () {\n            let parent = getParentNode(this);\n            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline')\n                || parent.classList.contains('e-filled')) {\n                parent.classList.add('e-input-focus');\n            }\n        });\n        args.element.addEventListener('blur', function () {\n            let parent = getParentNode(this);\n            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline')\n                || parent.classList.contains('e-filled')) {\n                parent.classList.remove('e-input-focus');\n            }\n        });\n        args.element.addEventListener('input', () => {\n            checkInputValue(floatType, args.element);\n        });\n    }\n    Input.bindInitialEvent = bindInitialEvent;\n    function checkInputValue(floatLabelType, inputElement) {\n        let inputValue = inputElement.value;\n        if (inputValue !== '' && !isNullOrUndefined(inputValue)) {\n            inputElement.parentElement.classList.add('e-valid-input');\n        }\n        else if (floatLabelType !== 'Always' && inputElement.parentElement) {\n            inputElement.parentElement.classList.remove('e-valid-input');\n        }\n    }\n    function _focusFn() {\n        let label = getParentNode(this).getElementsByClassName('e-float-text')[0];\n        if (!isNullOrUndefined(label)) {\n            addClass([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function _blurFn() {\n        let parent = getParentNode(this);\n        if ((parent.getElementsByTagName('textarea')[0]) ? parent.getElementsByTagName('textarea')[0].value === '' :\n            parent.getElementsByTagName('input')[0].value === '') {\n            let label = parent.getElementsByClassName('e-float-text')[0];\n            if (!isNullOrUndefined(label)) {\n                if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                    removeClass([label], CLASSNAMES.LABELTOP);\n                }\n                addClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function wireFloatingEvents(element) {\n        element.addEventListener('focus', _focusFn);\n        element.addEventListener('blur', _blurFn);\n    }\n    Input.wireFloatingEvents = wireFloatingEvents;\n    function unwireFloatingEvents(element) {\n        element.removeEventListener('focus', _focusFn);\n        element.removeEventListener('blur', _blurFn);\n    }\n    function createFloatingInput(args, inputObject, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let floatLinelement;\n        let floatLabelElement;\n        if (args.floatLabelType === 'Auto') {\n            wireFloatingEvents(args.element);\n        }\n        if (isNullOrUndefined(inputObject.container)) {\n            inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n        }\n        else {\n            if (!isNullOrUndefined(args.customTag)) {\n                inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);\n            }\n            inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);\n        }\n        floatLinelement = makeElement('span', { className: CLASSNAMES.FLOATLINE });\n        floatLabelElement = makeElement('label', { className: CLASSNAMES.FLOATTEXT });\n        if (!isNullOrUndefined(args.element.id) && args.element.id !== '') {\n            floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');\n            attributes(args.element, { 'aria-labelledby': floatLabelElement.id });\n        }\n        if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);\n            args.element.removeAttribute('placeholder');\n        }\n        if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) &&\n            args.properties.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);\n        }\n        if (!floatLabelElement.innerText) {\n            inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);\n        }\n        if (inputObject.container.classList.contains('e-float-icon-left')) {\n            let inputWrap = inputObject.container.querySelector('.e-input-in-wrap');\n            inputWrap.appendChild(args.element);\n            inputWrap.appendChild(floatLinelement);\n            inputWrap.appendChild(floatLabelElement);\n        }\n        else {\n            inputObject.container.appendChild(args.element);\n            inputObject.container.appendChild(floatLinelement);\n            inputObject.container.appendChild(floatLabelElement);\n        }\n        updateLabelState(args.element.value, floatLabelElement);\n        if (args.floatLabelType === 'Always') {\n            if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([floatLabelElement], CLASSNAMES.LABELBOTTOM);\n            }\n            addClass([floatLabelElement], CLASSNAMES.LABELTOP);\n        }\n        if (args.floatLabelType === 'Auto') {\n            args.element.addEventListener('input', (event) => {\n                updateLabelState(args.element.value, floatLabelElement);\n            });\n            args.element.addEventListener('blur', (event) => {\n                updateLabelState(args.element.value, floatLabelElement);\n            });\n        }\n        if (!isNullOrUndefined(args.element.getAttribute('id'))) {\n            floatLabelElement.setAttribute('for', args.element.getAttribute('id'));\n        }\n    }\n    function checkFloatLabelType(type, container) {\n        if (type === 'Always' && container.classList.contains('e-outline')) {\n            container.classList.add('e-valid-input');\n        }\n    }\n    function setPropertyValue(args, inputObject) {\n        if (!isNullOrUndefined(args.properties)) {\n            for (let prop of Object.keys(args.properties)) {\n                switch (prop) {\n                    case 'cssClass':\n                        setCssClass(args.properties.cssClass, [inputObject.container]);\n                        checkFloatLabelType(args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enabled':\n                        setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enableRtl':\n                        setEnableRtl(args.properties.enableRtl, [inputObject.container]);\n                        break;\n                    case 'placeholder':\n                        setPlaceholder(args.properties.placeholder, args.element);\n                        break;\n                    case 'readonly':\n                        setReadonly(args.properties.readonly, args.element);\n                        break;\n                }\n            }\n        }\n        return inputObject;\n    }\n    function updateIconState(value, button) {\n        if (value) {\n            removeClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n        else {\n            addClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n    }\n    function updateLabelState(value, label) {\n        if (value) {\n            addClass([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n        else {\n            if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                removeClass([label], CLASSNAMES.LABELTOP);\n            }\n            addClass([label], CLASSNAMES.LABELBOTTOM);\n        }\n    }\n    function getParentNode(element) {\n        let parentNode = isNullOrUndefined(element.parentNode) ? element\n            : element.parentNode;\n        if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {\n            parentNode = parentNode.parentNode;\n        }\n        return parentNode;\n    }\n    /**\n     * To create clear button.\n     */\n    function createClearButton(element, inputObject, initial, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = makeElement('span', { className: CLASSNAMES.CLEARICON });\n        let container = inputObject.container;\n        if (!isNullOrUndefined(initial)) {\n            container.appendChild(button);\n        }\n        else {\n            let baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ?\n                inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;\n            baseElement.insertAdjacentElement('afterend', button);\n        }\n        if (!isNullOrUndefined(container) &&\n            container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            addClass([container], CLASSNAMES.INPUTGROUP);\n        }\n        addClass([button], CLASSNAMES.CLEARICONHIDE);\n        wireClearBtnEvents(element, button, container);\n        button.setAttribute('aria-label', 'close');\n        return button;\n    }\n    function wireClearBtnEvents(element, button, container) {\n        button.addEventListener('click', (event) => {\n            if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {\n                event.preventDefault();\n                if (element !== document.activeElement) {\n                    element.focus();\n                }\n                element.value = '';\n                addClass([button], CLASSNAMES.CLEARICONHIDE);\n            }\n        });\n        element.addEventListener('input', (event) => {\n            updateIconState(element.value, button);\n        });\n        element.addEventListener('focus', (event) => {\n            updateIconState(element.value, button);\n        });\n        element.addEventListener('blur', (event) => {\n            setTimeout(() => { addClass([button], CLASSNAMES.CLEARICONHIDE); }, 200);\n        });\n    }\n    Input.wireClearBtnEvents = wireClearBtnEvents;\n    function validateLabel(element, floatLabelType) {\n        let parent = getParentNode(element);\n        if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {\n            let label = getParentNode(element).getElementsByClassName('e-float-text')[0];\n            updateLabelState(element.value, label);\n        }\n    }\n    /**\n     * To create input box contianer.\n     */\n    function createInputContainer(args, className, tagClass, tag, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let container;\n        if (!isNullOrUndefined(args.customTag)) {\n            container = makeElement(args.customTag, { className: className });\n            container.classList.add(tagClass);\n        }\n        else {\n            container = makeElement(tag, { className: className });\n        }\n        container.classList.add('e-control-wrapper');\n        return container;\n    }\n    function encodePlaceHolder(placeholder) {\n        let result = '';\n        if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n            let spanEle = document.createElement('span');\n            spanEle.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n            let hiddenInput = (spanEle.children[0]);\n            result = hiddenInput.placeholder;\n        }\n        return result;\n    }\n    /**\n     * Sets the value to the input element.\n     * ```\n     * E.g : Input.setValue('content', element, \"Auto\", true );\n     * ```\n     * @param value - Specify the value of the input element.\n     * @param element - The element on which the specified value is updated.\n     * @param floatLabelType - Specify the float label type of the input element.\n     * @param clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.\n     */\n    function setValue$$1(value, element, floatLabelType, clearButton) {\n        element.value = value;\n        if ((!isNullOrUndefined(floatLabelType)) && floatLabelType === 'Auto') {\n            validateLabel(element, floatLabelType);\n        }\n        if (!isNullOrUndefined(clearButton) && clearButton) {\n            let parentElement = getParentNode(element);\n            if (!isNullOrUndefined(parentElement)) {\n                let button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];\n                if (element.value && parentElement.classList.contains('e-input-focus')) {\n                    removeClass([button], CLASSNAMES.CLEARICONHIDE);\n                }\n                else {\n                    addClass([button], CLASSNAMES.CLEARICONHIDE);\n                }\n            }\n        }\n        checkInputValue(floatLabelType, element);\n    }\n    Input.setValue = setValue$$1;\n    /**\n     * Sets the single or multiple cssClass to wrapper of input element.\n     * ```\n     * E.g : Input.setCssClass('e-custom-class', [element]);\n     * ```\n     * @param cssClass - Css class names which are needed to add.\n     * @param elements - The elements which are needed to add / remove classes.\n     * @param oldClass - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.\n     */\n    function setCssClass(cssClass, elements, oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(cssClass) && cssClass !== '') {\n            addClass(elements, cssClass.split(' '));\n        }\n    }\n    Input.setCssClass = setCssClass;\n    /**\n     * Set the width to the wrapper of input element.\n     * ```\n     * E.g : Input.setWidth('200px', container);\n     * ```\n     * @param width - Width value which is need to add.\n     * @param container - The element on which the width is need to add.\n     */\n    function setWidth(width, container) {\n        if (typeof width === 'number') {\n            container.style.width = formatUnit(width);\n        }\n        else if (typeof width === 'string') {\n            container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n        }\n    }\n    Input.setWidth = setWidth;\n    /**\n     * Set the placeholder attribute to the input element.\n     * ```\n     * E.g : Input.setPlaceholder('Search here', element);\n     * ```\n     * @param placeholder - Placeholder value which is need to add.\n     * @param element - The element on which the placeholder is need to add.\n     */\n    function setPlaceholder(placeholder, element) {\n        let parentElement;\n        placeholder = encodePlaceHolder(placeholder);\n        parentElement = getParentNode(element);\n        if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;\n                parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);\n                element.removeAttribute('placeholder');\n            }\n            else {\n                parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n        }\n        else {\n            if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n                attributes(element, { 'placeholder': placeholder, 'aria-placeholder': placeholder });\n            }\n            else {\n                element.removeAttribute('placeholder');\n                element.removeAttribute('aria-placeholder');\n            }\n        }\n    }\n    Input.setPlaceholder = setPlaceholder;\n    /**\n     * Set the read only attribute to the input element\n     * ```\n     * E.g : Input.setReadonly(true, element);\n     * ```\n     * @param isReadonly\n     * - Boolean value to specify whether to set read only. Setting \"True\" value enables read only.\n     * @param element\n     * - The element which is need to enable read only.\n     */\n    function setReadonly(isReadonly, element, floatLabelType) {\n        if (isReadonly) {\n            attributes(element, { readonly: '' });\n        }\n        else {\n            element.removeAttribute('readonly');\n        }\n        if (!isNullOrUndefined(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setReadonly = setReadonly;\n    /**\n     * Displays the element direction from right to left when its enabled.\n     * ```\n     * E.g : Input.setEnableRtl(true, [inputObj.container]);\n     * ```\n     * @param isRtl\n     * - Boolean value to specify whether to set RTL. Setting \"True\" value enables the RTL mode.\n     * @param elements\n     * - The elements that are needed to enable/disable RTL.\n     */\n    function setEnableRtl(isRtl, elements) {\n        if (isRtl) {\n            addClass(elements, CLASSNAMES.RTL);\n        }\n        else {\n            removeClass(elements, CLASSNAMES.RTL);\n        }\n    }\n    Input.setEnableRtl = setEnableRtl;\n    /**\n     * Enables or disables the given input element.\n     * ```\n     * E.g : Input.setEnabled(false, element);\n     * ```\n     * @param isEnable\n     * - Boolean value to specify whether to enable or disable.\n     * @param element\n     * - Element to be enabled or disabled.\n     */\n    function setEnabled(isEnable, element, floatLabelType, inputContainer) {\n        let disabledAttrs = { 'disabled': 'disabled', 'aria-disabled': 'true' };\n        let considerWrapper = isNullOrUndefined(inputContainer) ? false : true;\n        if (isEnable) {\n            element.classList.remove(CLASSNAMES.DISABLE);\n            removeAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                removeClass([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        else {\n            element.classList.add(CLASSNAMES.DISABLE);\n            addAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                addClass([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        if (!isNullOrUndefined(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setEnabled = setEnabled;\n    function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        if (isClear) {\n            inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);\n        }\n        else {\n            inputObject.clearButton.remove();\n            inputObject.clearButton = null;\n        }\n    }\n    Input.setClearButton = setClearButton;\n    /**\n     * Removing the multiple attributes from the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);\n     * ```\n     * @param attrs\n     *  - Array of attributes which are need to removed from the element.\n     * @param element\n     *  - Element on which the attributes are needed to be removed.\n     */\n    function removeAttributes(attrs, element) {\n        for (let key of Object.keys(attrs)) {\n            let parentElement;\n            parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n            else {\n                element.removeAttribute(key);\n            }\n        }\n    }\n    Input.removeAttributes = removeAttributes;\n    /**\n     * Adding the multiple attributes to the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);\n     * ```\n     * @param attrs\n     * - Array of attributes which is added to element.\n     * @param element\n     * - Element on which the attributes are needed to be added.\n     */\n    function addAttributes(attrs, element) {\n        for (let key of Object.keys(attrs)) {\n            let parentElement;\n            parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];\n            }\n            else {\n                element.setAttribute(key, attrs[key]);\n            }\n        }\n    }\n    Input.addAttributes = addAttributes;\n    function removeFloating(input) {\n        let container = input.container;\n        if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            let inputEle = container.querySelector('textarea') ? container.querySelector('textarea') :\n                container.querySelector('input');\n            let placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;\n            let clearButton = container.querySelector('.e-clear-icon') !== null;\n            detach(container.querySelector('.' + CLASSNAMES.FLOATLINE));\n            detach(container.querySelector('.' + CLASSNAMES.FLOATTEXT));\n            classList(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);\n            unwireFloatingEvents(inputEle);\n            attributes(inputEle, { 'placeholder': placeholder });\n            inputEle.classList.add(CLASSNAMES.INPUT);\n            if (!clearButton && inputEle.tagName === 'INPUT') {\n                inputEle.removeAttribute('required');\n            }\n        }\n    }\n    Input.removeFloating = removeFloating;\n    function addFloating(input, type, placeholder, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let container = closest(input, '.' + CLASSNAMES.INPUTGROUP);\n        floatType = type;\n        if (type !== 'Never') {\n            let customTag = container.tagName;\n            customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;\n            let args = { element: input, floatLabelType: type, customTag: customTag, properties: { placeholder: placeholder } };\n            let iconEle = container.querySelector('.e-clear-icon');\n            let inputObj = { container: container };\n            input.classList.remove(CLASSNAMES.INPUT);\n            createFloatingInput(args, inputObj, makeElement);\n            let isPrependIcon = container.classList.contains('e-float-icon-left');\n            if (isNullOrUndefined(iconEle)) {\n                if (isPrependIcon) {\n                    let inputWrap = container.querySelector('.e-input-in-wrap');\n                    iconEle = inputWrap.querySelector('.e-input-group-icon');\n                }\n                else {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n            }\n            if (isNullOrUndefined(iconEle)) {\n                if (isPrependIcon) {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n                if (isNullOrUndefined(iconEle)) {\n                    container.classList.remove(CLASSNAMES.INPUTGROUP);\n                }\n            }\n            else {\n                let floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);\n                let floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);\n                let wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;\n                wrapper.insertBefore(input, iconEle);\n                wrapper.insertBefore(floatLine, iconEle);\n                wrapper.insertBefore(floatText, iconEle);\n            }\n        }\n        checkFloatLabelType(type, input.parentElement);\n    }\n    Input.addFloating = addFloating;\n    /**\n     * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.\n     * ```\n     * E.g : Input.setRipple(true, [inputObjects]);\n     * ```\n     * @param isRipple\n     * - Boolean value to specify whether to enable the ripple effect.\n     * @param inputObject\n     * - Specify the collection of input objects.\n     */\n    function setRipple(isRipple, inputObj) {\n        for (let i = 0; i < inputObj.length; i++) {\n            _internalRipple(isRipple, inputObj[i].container);\n        }\n    }\n    Input.setRipple = setRipple;\n    function _internalRipple(isRipple, container, button) {\n        let argsButton = [];\n        argsButton.push(button);\n        let buttons = isNullOrUndefined(button) ?\n            container.querySelectorAll('.e-input-group-icon') : argsButton;\n        if (isRipple && buttons.length > 0) {\n            for (let index = 0; index < buttons.length; index++) {\n                buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);\n                buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);\n            }\n        }\n        else if (buttons.length > 0) {\n            for (let index = 0; index < buttons.length; index++) {\n                buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this);\n                buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);\n            }\n        }\n    }\n    function _onMouseRipple(container, button) {\n        if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {\n            button.classList.add('e-input-btn-ripple');\n        }\n    }\n    function _onMouseDownRipple() {\n        let ele = this;\n        let parentEle = this.parentElement;\n        while (!parentEle.classList.contains('e-input-group')) {\n            parentEle = parentEle.parentElement;\n        }\n        _onMouseRipple(parentEle, ele);\n    }\n    function _onMouseUpRipple() {\n        let ele = this;\n        setTimeout(() => { ele.classList.remove('e-input-btn-ripple'); }, 500);\n    }\n    function createIconEle(iconClass, makeElement) {\n        let button = makeElement('span', { className: iconClass });\n        button.classList.add('e-input-group-icon');\n        return button;\n    }\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);\n     * ```\n     * @param position - Specify the icon placement on the input.Possible values are append and prepend.\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     * @param inputElement - The inputElement on which created span element is going to prepend.\n     */\n    // tslint:disable\n    function addIcon(position, icons, container, input, internalCreate) {\n        // tslint:enable\n        let result = typeof (icons) === 'string' ? icons.split(',')\n            : icons;\n        if (position.toLowerCase() === 'append') {\n            for (let icon of result) {\n                appendSpan(icon, container, internalCreate);\n            }\n        }\n        else {\n            for (let icon of result) {\n                prependSpan(icon, container, input, internalCreate);\n            }\n        }\n    }\n    Input.addIcon = addIcon;\n    /**\n     * Creates a new span element with the given icons added and prepend it in input element.\n     * ```\n     * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);\n     * ```\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     * @param inputElement - The inputElement on which created span element is going to prepend.\n     */\n    // tslint:disable\n    function prependSpan(iconClass, container, inputElement, internalCreateElement) {\n        // tslint:enable\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = createIconEle(iconClass, makeElement);\n        container.classList.add('e-float-icon-left');\n        let innerWrapper = container.querySelector('.e-input-in-wrap');\n        if (isNullOrUndefined(innerWrapper)) {\n            innerWrapper = makeElement('span', { className: 'e-input-in-wrap' });\n            inputElement.parentNode.insertBefore(innerWrapper, inputElement);\n            let result = container.querySelectorAll(inputElement.tagName + ' ~ *');\n            innerWrapper.appendChild(inputElement);\n            for (let i = 0; i < result.length; i++) {\n                innerWrapper.appendChild(result[i]);\n            }\n        }\n        innerWrapper.parentNode.insertBefore(button, innerWrapper);\n        if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n            container.classList.add(CLASSNAMES.INPUTGROUP);\n        }\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.prependSpan = prependSpan;\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.appendSpan('e-icon-spin', inputObj.container);\n     * ```\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     */\n    function appendSpan(iconClass, container, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = createIconEle(iconClass, makeElement);\n        if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n            container.classList.add(CLASSNAMES.INPUTGROUP);\n        }\n        let wrap = (container.classList.contains('e-float-icon-left')) ? container.querySelector('.e-input-in-wrap') :\n            container;\n        wrap.appendChild(button);\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.appendSpan = appendSpan;\n})(Input || (Input = {}));\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ROOT = 'e-control-wrapper e-numeric';\nconst SPINICON = 'e-input-group-icon';\nconst SPINUP = 'e-spin-up';\nconst SPINDOWN = 'e-spin-down';\nconst ERROR = 'e-error';\nconst INCREMENT = 'increment';\nconst DECREMENT = 'decrement';\nconst INTREGEXP = new RegExp('^(-)?(\\\\d*)$');\nconst DECIMALSEPARATOR = '.';\nconst COMPONENT = 'e-numerictextbox';\nconst CONTROL = 'e-control';\nconst NUMERIC_FOCUS = 'e-input-focus';\nconst HIDDENELEMENT = 'e-numeric-hidden';\nconst wrapperAttributes = ['title', 'style', 'class'];\n/**\n * Represents the NumericTextBox component that allows the user to enter only numeric values.\n * ```html\n * <input type='text' id=\"numeric\"/>\n * ```\n * ```typescript\n * <script>\n *   var numericObj = new NumericTextBox({ value: 10 });\n *   numericObj.appendTo(\"#numeric\");\n * </script>\n * ```\n */\nlet NumericTextBox = class NumericTextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.isVue = false;\n        this.preventChange = false;\n        this.numericOptions = options;\n    }\n    preRender() {\n        this.isPrevFocused = false;\n        this.decimalSeparator = '.';\n        this.intRegExp = new RegExp('/^(-)?(\\d*)$/');\n        this.isCalled = false;\n        let ejInstance = getValue('ej2_instances', this.element);\n        this.cloneElement = this.element.cloneNode(true);\n        removeClass([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);\n        this.angularTagName = null;\n        this.formEle = closest(this.element, 'form');\n        if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n            this.angularTagName = this.element.tagName;\n            let input = this.createElement('input');\n            let index = 0;\n            for (index; index < this.element.attributes.length; index++) {\n                let attributeName = this.element.attributes[index].nodeName;\n                if (attributeName !== 'id') {\n                    input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                    input.innerHTML = this.element.innerHTML;\n                }\n            }\n            if (this.element.hasAttribute('name')) {\n                this.element.removeAttribute('name');\n            }\n            this.element.classList.remove('e-control', 'e-numerictextbox');\n            this.element.appendChild(input);\n            this.element = input;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            attributes(this.element, { 'role': 'spinbutton', 'tabindex': '0', 'autocomplete': 'off', 'aria-live': 'assertive' });\n            let localeText = {\n                incrementTitle: 'Increment value', decrementTitle: 'Decrement value', placeholder: this.placeholder\n            };\n            this.l10n = new L10n('numerictextbox', localeText, this.locale);\n            if (this.l10n.getConstant('placeholder') !== '') {\n                this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n            }\n        }\n        this.isValidState = true;\n        this.inputStyle = null;\n        this.inputName = null;\n        this.cultureInfo = {};\n        this.initCultureInfo();\n        this.initCultureFunc();\n        this.prevValue = this.value;\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.updateHTMLAttrToElement();\n            this.checkAttributes(false);\n            if (this.formEle) {\n                this.inputEleValue = this.value;\n            }\n        }\n        this.validateMinMax();\n        this.validateStep();\n        if (this.placeholder === null && !(isBlazor() && this.isServerRendered)) {\n            this.updatePlaceholder();\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (this.element.tagName.toLowerCase() === 'input') {\n            if (!(isBlazor() && this.isServerRendered)) {\n                this.createWrapper();\n                if (this.showSpinButton) {\n                    this.spinBtnCreation();\n                }\n                this.setElementWidth(this.width);\n                if (!this.container.classList.contains('e-input-group')) {\n                    this.container.classList.add('e-input-group');\n                }\n                this.changeValue(this.value === null || isNaN(this.value) ?\n                    null : this.strictMode ? this.trimValue(this.value) : this.value);\n            }\n            else {\n                this.container = this.element.parentElement;\n                this.inputWrapper = { container: this.container };\n                this.hiddenInput = this.container.querySelector('input[type=\"hidden\"]');\n                if (this.showClearButton) {\n                    this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n                    Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n                }\n                if (this.showSpinButton) {\n                    this.spinDown = this.container.querySelector('.' + SPINDOWN);\n                    this.spinUp = this.container.querySelector('.' + SPINUP);\n                    this.wireSpinBtnEvents();\n                }\n                Input.bindInitialEvent({\n                    element: this.element, buttons: null, customTag: null, floatLabelType: this.floatLabelType, properties: this.properties\n                });\n            }\n            this.wireEvents();\n            if (!(isBlazor() && this.isServerRendered)) {\n                if (this.value !== null && !isNaN(this.value)) {\n                    if (this.decimals) {\n                        this.setProperties({ value: this.roundNumber(this.value, this.decimals) }, true);\n                    }\n                }\n                if (this.element.getAttribute('value') || this.value) {\n                    this.element.setAttribute('value', this.element.value);\n                    this.hiddenInput.setAttribute('value', this.hiddenInput.value);\n                }\n            }\n            this.elementPrevValue = this.element.value;\n            this.renderComplete();\n        }\n    }\n    checkAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];\n        for (let prop of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n                switch (prop) {\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === ''\n                                || this.element.getAttribute(prop) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === ''\n                                || this.element.getAttribute(prop) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['value'] === undefined)) || isDynamic) {\n                            let setNumber = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            this.setProperties(setValue(prop, setNumber, {}), !isDynamic);\n                        }\n                        break;\n                    case 'min':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['min'] === undefined)) || isDynamic) {\n                            let minValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (minValue !== null && !isNaN(minValue)) {\n                                this.setProperties(setValue(prop, minValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'max':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['max'] === undefined)) || isDynamic) {\n                            let maxValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (maxValue !== null && !isNaN(maxValue)) {\n                                this.setProperties(setValue(prop, maxValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'step':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['step'] === undefined)) || isDynamic) {\n                            let stepValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (stepValue !== null && !isNaN(stepValue)) {\n                                this.setProperties(setValue(prop, stepValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'style':\n                        this.inputStyle = this.element.getAttribute(prop);\n                        break;\n                    case 'name':\n                        this.inputName = this.element.getAttribute(prop);\n                        break;\n                    default:\n                        let value = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                        if ((value !== null && !isNaN(value)) || (prop === 'value')) {\n                            this.setProperties(setValue(prop, value, {}), true);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    updatePlaceholder() {\n        this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n    }\n    initCultureFunc() {\n        this.instance = new Internationalization(this.locale);\n    }\n    initCultureInfo() {\n        this.cultureInfo.format = this.format;\n        if (getValue('currency', this) !== null) {\n            setValue('currency', this.currency, this.cultureInfo);\n            this.setProperties({ currencyCode: this.currency }, true);\n        }\n    }\n    /* Wrapper creation */\n    createWrapper() {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = this.getNumericValidClassList(this.cssClass);\n        }\n        let inputObj = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                cssClass: updatedCssClassValue,\n                enableRtl: this.enableRtl,\n                showClearButton: this.showClearButton,\n                enabled: this.enabled\n            }\n        }, this.createElement);\n        this.inputWrapper = inputObj;\n        this.container = inputObj.container;\n        this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));\n        this.updateHTMLAttrToWrapper();\n        if (this.readonly) {\n            attributes(this.element, { 'aria-readonly': 'true' });\n        }\n        this.hiddenInput = (this.createElement('input', { attrs: { type: 'text',\n                'validateHidden': 'true', 'class': HIDDENELEMENT } }));\n        this.inputName = this.inputName !== null ? this.inputName : this.element.id;\n        this.element.removeAttribute('name');\n        attributes(this.hiddenInput, { 'name': this.inputName });\n        this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);\n        this.updateDataAttribute(false);\n        if (this.inputStyle !== null) {\n            attributes(this.container, { 'style': this.inputStyle });\n        }\n    }\n    updateDataAttribute(isDynamic) {\n        let attr = {};\n        if (!isDynamic) {\n            for (let a = 0; a < this.element.attributes.length; a++) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        else {\n            attr = this.htmlAttributes;\n        }\n        for (let key of Object.keys(attr)) {\n            if (key.indexOf('data') === 0) {\n                this.hiddenInput.setAttribute(key, attr[key]);\n            }\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttributes.indexOf(pro) < 0) {\n                    this.element.setAttribute(pro, this.htmlAttributes[pro]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));\n    }\n    getNumericValidClassList(numericClassName) {\n        let result = numericClassName;\n        if (!isNullOrUndefined(numericClassName) && numericClassName !== '') {\n            result = (numericClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttributes.indexOf(pro) > -1) {\n                    if (pro === 'class') {\n                        let updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);\n                        if (updatedClassValue !== '') {\n                            addClass([this.container], updatedClassValue.split(' '));\n                        }\n                    }\n                    else if (pro === 'style') {\n                        let numericStyle = this.container.getAttribute(pro);\n                        numericStyle = !isNullOrUndefined(numericStyle) ? (numericStyle + this.htmlAttributes[pro]) :\n                            this.htmlAttributes[pro];\n                        this.container.setAttribute(pro, numericStyle);\n                    }\n                    else {\n                        this.container.setAttribute(pro, this.htmlAttributes[pro]);\n                    }\n                }\n            }\n        }\n    }\n    setElementWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.container.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    /* Spinner creation */\n    spinBtnCreation() {\n        this.spinDown = Input.appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);\n        attributes(this.spinDown, {\n            'title': this.l10n.getConstant('decrementTitle'),\n            'aria-label': this.l10n.getConstant('decrementTitle')\n        });\n        this.spinUp = Input.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);\n        attributes(this.spinUp, {\n            'title': this.l10n.getConstant('incrementTitle'),\n            'aria-label': this.l10n.getConstant('incrementTitle')\n        });\n        this.wireSpinBtnEvents();\n    }\n    validateMinMax() {\n        if (!(typeof (this.min) === 'number' && !isNaN(this.min))) {\n            this.setProperties({ min: -(Number.MAX_VALUE) }, true);\n        }\n        if (!(typeof (this.max) === 'number' && !isNaN(this.max))) {\n            this.setProperties({ max: Number.MAX_VALUE }, true);\n        }\n        if (this.decimals !== null) {\n            if (this.min !== -(Number.MAX_VALUE)) {\n                this.setProperties({ min: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.min)) }, true);\n            }\n            if (this.max !== (Number.MAX_VALUE)) {\n                this.setProperties({ max: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.max)) }, true);\n            }\n        }\n        this.setProperties({ min: this.min > this.max ? this.max : this.min }, true);\n        attributes(this.element, { 'aria-valuemin': this.min.toString(), 'aria-valuemax': this.max.toString() });\n    }\n    formattedValue(decimals, value) {\n        return this.instance.getNumberFormat({\n            maximumFractionDigits: decimals,\n            minimumFractionDigits: decimals, useGrouping: false\n        })(value);\n    }\n    validateStep() {\n        if (this.decimals !== null) {\n            this.setProperties({ step: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.step)) }, true);\n        }\n    }\n    action(operation, event) {\n        this.isInteract = true;\n        let value = this.isFocused ? this.instance.getNumberParser({ format: 'n' })(this.element.value) : this.value;\n        this.changeValue(this.performAction(value, this.step, operation));\n        this.raiseChangeEvent(event);\n    }\n    checkErrorClass() {\n        if (this.isValidState) {\n            removeClass([this.container], ERROR);\n        }\n        else {\n            addClass([this.container], ERROR);\n        }\n        attributes(this.element, { 'aria-invalid': this.isValidState ? 'false' : 'true' });\n    }\n    bindClearEvent() {\n        if (this.showClearButton) {\n            EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n        }\n    }\n    resetHandler(e) {\n        e.preventDefault();\n        if (!(this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide'))) {\n            this.clear(e);\n        }\n        this.isInteract = true;\n        this.raiseChangeEvent(e);\n    }\n    clear(event) {\n        this.setProperties({ value: null }, true);\n        this.setElementValue('');\n        this.hiddenInput.value = '';\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    resetFormHandler() {\n        if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n            this.updateValue(null);\n        }\n        else {\n            this.updateValue(this.inputEleValue);\n        }\n    }\n    setSpinButton() {\n        if (!isNullOrUndefined(this.spinDown)) {\n            attributes(this.spinDown, {\n                'title': this.l10n.getConstant('decrementTitle'),\n                'aria-label': this.l10n.getConstant('decrementTitle')\n            });\n        }\n        if (!isNullOrUndefined(this.spinUp)) {\n            attributes(this.spinUp, {\n                'title': this.l10n.getConstant('incrementTitle'),\n                'aria-label': this.l10n.getConstant('incrementTitle')\n            });\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'input', this.inputHandler, this);\n        EventHandler.add(this.element, 'keypress', this.keyPressHandler, this);\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        EventHandler.add(this.element, 'paste', this.pasteHandler, this);\n        if (this.enabled) {\n            this.bindClearEvent();\n            if (this.formEle) {\n                EventHandler.add(this.formEle, 'reset', this.resetFormHandler, this);\n            }\n        }\n    }\n    wireSpinBtnEvents() {\n        /* bind spin button events */\n        EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n        EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n        EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        EventHandler.remove(this.element, 'input', this.inputHandler);\n        EventHandler.remove(this.element, 'keydown', this.keyDownHandler);\n        EventHandler.remove(this.element, 'keypress', this.keyPressHandler);\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n        EventHandler.remove(this.element, 'paste', this.pasteHandler);\n        if (this.formEle) {\n            EventHandler.remove(this.formEle, 'reset', this.resetFormHandler);\n        }\n    }\n    unwireSpinBtnEvents() {\n        /* unbind spin button events */\n        EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner);\n        EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner);\n        EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n    }\n    changeHandler(event) {\n        event.stopPropagation();\n        if (!this.element.value.length) {\n            this.setProperties({ value: null }, true);\n        }\n        let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n        this.updateValue(parsedInput, event);\n    }\n    raiseChangeEvent(event) {\n        if (this.prevValue !== this.value) {\n            let eventArgs = {};\n            this.changeEventArgs = { value: this.value, previousValue: this.prevValue, isInteracted: this.isInteract,\n                isInteraction: this.isInteract, event: event };\n            if (event) {\n                this.changeEventArgs.event = event;\n            }\n            if (this.changeEventArgs.event === undefined) {\n                this.changeEventArgs.isInteracted = false;\n                this.changeEventArgs.isInteraction = false;\n            }\n            merge(eventArgs, this.changeEventArgs);\n            this.prevValue = this.value;\n            this.isInteract = false;\n            this.elementPrevValue = this.element.value;\n            this.preventChange = false;\n            this.trigger('change', eventArgs);\n        }\n    }\n    pasteHandler() {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let beforeUpdate = this.element.value;\n        setTimeout(() => {\n            if (!this.numericRegex().test(this.element.value)) {\n                this.setElementValue(beforeUpdate);\n            }\n        });\n    }\n    preventHandler() {\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        setTimeout(() => {\n            if (this.element.selectionStart > 0) {\n                let currentPos = this.element.selectionStart;\n                let prevPos = this.element.selectionStart - 1;\n                let start = 0;\n                let ignoreKeyCode;\n                let valArray = this.element.value.split('');\n                let numericObject = getNumericObject(this.locale);\n                let decimalSeparator = getValue('decimal', numericObject);\n                ignoreKeyCode = decimalSeparator.charCodeAt(0);\n                if (this.element.value[prevPos] === ' ' && this.element.selectionStart > 0 && !iOS) {\n                    if (isNullOrUndefined(this.prevVal)) {\n                        this.element.value = this.element.value.trim();\n                    }\n                    else if (prevPos !== 0) {\n                        this.element.value = this.prevVal;\n                    }\n                    else if (prevPos === 0) {\n                        this.element.value = this.element.value.trim();\n                    }\n                    this.element.setSelectionRange(prevPos, prevPos);\n                }\n                else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) &&\n                    this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== 45) {\n                    if ((valArray.indexOf(this.element.value[this.element.selectionStart - 1]) !==\n                        valArray.lastIndexOf(this.element.value[this.element.selectionStart - 1]) &&\n                        this.element.value[this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode) ||\n                        this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {\n                        this.element.value = this.element.value.substring(0, prevPos) +\n                            this.element.value.substring(currentPos, this.element.value.length);\n                        this.element.setSelectionRange(prevPos, prevPos);\n                        if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) && this.element.selectionStart > 0\n                            && this.element.value.length) {\n                            this.preventHandler();\n                        }\n                    }\n                }\n                else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 2])) && this.element.selectionStart > 1 &&\n                    this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== 45) {\n                    if ((valArray.indexOf(this.element.value[this.element.selectionStart - 2]) !==\n                        valArray.lastIndexOf(this.element.value[this.element.selectionStart - 2]) &&\n                        this.element.value[this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode) ||\n                        this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {\n                        this.element.setSelectionRange(prevPos, prevPos);\n                        this.nextEle = this.element.value[this.element.selectionStart];\n                        this.cursorPosChanged = true;\n                        this.preventHandler();\n                    }\n                }\n                if (this.cursorPosChanged === true && this.element.value[this.element.selectionStart] === this.nextEle &&\n                    isNaN(parseFloat(this.element.value[this.element.selectionStart - 1]))) {\n                    this.element.setSelectionRange(this.element.selectionStart + 1, this.element.selectionStart + 1);\n                    this.cursorPosChanged = false;\n                    this.nextEle = null;\n                }\n                if (this.element.value.trim() === '') {\n                    this.element.setSelectionRange(start, start);\n                }\n                if (this.element.selectionStart > 0) {\n                    if ((this.element.value[this.element.selectionStart - 1].charCodeAt(0) === 45) && this.element.selectionStart > 1) {\n                        if (isNullOrUndefined(this.prevVal)) {\n                            this.element.value = this.element.value;\n                        }\n                        else {\n                            this.element.value = this.prevVal;\n                        }\n                        this.element.setSelectionRange(this.element.selectionStart, this.element.selectionStart);\n                    }\n                }\n                this.prevVal = this.element.value;\n            }\n        });\n    }\n    keyUpHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        if (!iOS && Browser.isDevice) {\n            this.preventHandler();\n        }\n        let parseValue = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n        parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;\n        this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    ;\n    inputHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        let fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n        if ((fireFox || iOS) && Browser.isDevice) {\n            this.preventHandler();\n        }\n        if (this.isVue) {\n            let current = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            let previous = this.instance.getNumberParser({ format: 'n' })(this.elementPrevValue);\n            let eventArgs = {\n                event: event,\n                value: (current === null || isNaN(current) ? null : current),\n                previousValue: (previous === null || isNaN(previous) ? null : previous)\n            };\n            this.preventChange = true;\n            this.elementPrevValue = this.element.value;\n            this.trigger('input', eventArgs);\n        }\n    }\n    ;\n    keyDownHandler(event) {\n        if (!this.readonly) {\n            switch (event.keyCode) {\n                case 38:\n                    event.preventDefault();\n                    this.action(INCREMENT, event);\n                    break;\n                case 40:\n                    event.preventDefault();\n                    this.action(DECREMENT, event);\n                    break;\n                default: break;\n            }\n        }\n    }\n    ;\n    performAction(value, step, operation) {\n        if (value === null || isNaN(value)) {\n            value = 0;\n        }\n        let updatedValue = operation === INCREMENT ? value + step : value - step;\n        updatedValue = this.correctRounding(value, step, updatedValue);\n        return this.strictMode ? this.trimValue(updatedValue) : updatedValue;\n    }\n    ;\n    correctRounding(value, step, result) {\n        let floatExp = new RegExp('[,.](.*)');\n        let valueText = value.toString();\n        let stepText = step.toString();\n        let floatValue = floatExp.test(value.toString());\n        let floatStep = floatExp.test(step.toString());\n        if (floatValue || floatStep) {\n            let valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;\n            let stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;\n            let max = Math.max(valueCount, stepCount);\n            return value = this.roundValue(result, max);\n        }\n        return result;\n    }\n    ;\n    roundValue(result, precision) {\n        precision = precision || 0;\n        let divide = Math.pow(10, precision);\n        return result *= divide, result = Math.round(result) / divide;\n    }\n    ;\n    updateValue(value, event) {\n        if (event) {\n            this.isInteract = true;\n        }\n        if (value !== null && !isNaN(value)) {\n            if (this.decimals) {\n                value = this.roundNumber(value, this.decimals);\n            }\n        }\n        this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);\n        if ((!this.isVue) || (this.isVue && !this.preventChange)) {\n            this.raiseChangeEvent(event);\n        }\n    }\n    updateCurrency(prop, propVal) {\n        setValue(prop, propVal, this.cultureInfo);\n        this.updateValue(this.value);\n    }\n    changeValue(value) {\n        if (!(value || value === 0)) {\n            value = null;\n            this.setProperties({ value: value }, true);\n        }\n        else {\n            let numberOfDecimals;\n            numberOfDecimals = this.getNumberOfDecimals(value);\n            this.setProperties({ value: this.roundNumber(value, numberOfDecimals) }, true);\n        }\n        this.modifyText();\n        if (!this.strictMode) {\n            this.validateState();\n        }\n    }\n    ;\n    modifyText() {\n        if (this.value || this.value === 0) {\n            let value = this.formatNumber();\n            let elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);\n            this.setElementValue(elementValue);\n            attributes(this.element, { 'aria-valuenow': value });\n            this.hiddenInput.value = this.value.toString();\n            if (this.value !== null && this.serverDecimalSeparator) {\n                this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);\n            }\n        }\n        else {\n            this.setElementValue('');\n            this.element.removeAttribute('aria-valuenow');\n            this.hiddenInput.value = null;\n        }\n    }\n    ;\n    setElementValue(val, element) {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\n    }\n    validateState() {\n        this.isValidState = true;\n        if (this.value || this.value === 0) {\n            this.isValidState = !(this.value > this.max || this.value < this.min);\n        }\n        this.checkErrorClass();\n    }\n    getNumberOfDecimals(value) {\n        let numberOfDecimals;\n        let EXPREGEXP = new RegExp('[eE][\\-+]?([0-9]+)');\n        let valueString = value.toString();\n        if (EXPREGEXP.test(valueString)) {\n            let result = EXPREGEXP.exec(valueString);\n            if (!isNullOrUndefined(result)) {\n                valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));\n            }\n        }\n        let decimalPart = valueString.split('.')[1];\n        numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n        if (this.decimals !== null) {\n            numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;\n        }\n        return numberOfDecimals;\n    }\n    formatNumber() {\n        let numberOfDecimals;\n        numberOfDecimals = this.getNumberOfDecimals(this.value);\n        return this.instance.getNumberFormat({\n            maximumFractionDigits: numberOfDecimals,\n            minimumFractionDigits: numberOfDecimals, useGrouping: false\n        })(this.value);\n    }\n    ;\n    trimValue(value) {\n        if (value > this.max) {\n            return this.max;\n        }\n        if (value < this.min) {\n            return this.min;\n        }\n        return value;\n    }\n    ;\n    roundNumber(value, precision) {\n        let result = value;\n        let decimals = precision || 0;\n        let result1 = result.toString().split('e');\n        result = Math.round(Number(result1[0] + 'e' + (result1[1] ? (Number(result1[1]) + decimals) : decimals)));\n        let result2 = result.toString().split('e');\n        result = Number(result2[0] + 'e' + (result2[1] ? (Number(result2[1]) - decimals) : -decimals));\n        return Number(result.toFixed(decimals));\n    }\n    ;\n    cancelEvent(event) {\n        event.preventDefault();\n        return false;\n    }\n    keyPressHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return true;\n        }\n        if (!Browser.isDevice && Browser.info.version === '11.0' && event.keyCode === 13) {\n            let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            this.updateValue(parsedInput, event);\n            return true;\n        }\n        if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {\n            return true;\n        }\n        let currentChar = String.fromCharCode(event.which);\n        let text = this.element.value;\n        text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);\n        if (!this.numericRegex().test(text)) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    ;\n    numericRegex() {\n        let numericObject = getNumericObject(this.locale);\n        let decimalSeparator = getValue('decimal', numericObject);\n        let fractionRule = '*';\n        if (decimalSeparator === DECIMALSEPARATOR) {\n            decimalSeparator = '\\\\' + decimalSeparator;\n        }\n        if (this.decimals === 0 && this.validateDecimalOnType) {\n            return INTREGEXP;\n        }\n        if (this.decimals && this.validateDecimalOnType) {\n            fractionRule = '{0,' + this.decimals + '}';\n        }\n        return new RegExp('^(-)?(((\\\\d+(' + decimalSeparator + '\\\\d' + fractionRule +\n            ')?)|(' + decimalSeparator + '\\\\d' + fractionRule + ')))?$');\n    }\n    ;\n    mouseWheel(event) {\n        event.preventDefault();\n        let delta;\n        let rawEvent = event;\n        if (rawEvent.wheelDelta) {\n            delta = rawEvent.wheelDelta / 120;\n        }\n        else if (rawEvent.detail) {\n            delta = -rawEvent.detail / 3;\n        }\n        if (delta > 0) {\n            this.action(INCREMENT, event);\n        }\n        else if (delta < 0) {\n            this.action(DECREMENT, event);\n        }\n        this.cancelEvent(event);\n    }\n    focusHandler(event) {\n        this.focusEventArgs = { event: event, value: this.value, container: this.container };\n        this.trigger('focus', this.focusEventArgs);\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        this.isFocused = true;\n        removeClass([this.container], ERROR);\n        this.prevValue = this.value;\n        if ((this.value || this.value === 0)) {\n            let formatValue = this.formatNumber();\n            this.setElementValue(formatValue);\n            if (!this.isPrevFocused) {\n                if (!Browser.isDevice && Browser.info.version === '11.0') {\n                    this.element.setSelectionRange(0, formatValue.length);\n                }\n                else {\n                    let delay = (Browser.isDevice && Browser.isIos) ? 600 : 0;\n                    setTimeout(() => {\n                        this.element.setSelectionRange(0, formatValue.length);\n                    }, delay);\n                }\n            }\n        }\n        if (!Browser.isDevice) {\n            EventHandler.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);\n        }\n    }\n    ;\n    focusOutHandler(event) {\n        this.blurEventArgs = { event: event, value: this.value, container: this.container };\n        this.trigger('blur', this.blurEventArgs);\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.isPrevFocused) {\n            event.preventDefault();\n            if (Browser.isDevice) {\n                let value = this.element.value;\n                this.element.focus();\n                this.isPrevFocused = false;\n                let ele = this.element;\n                setTimeout(() => {\n                    this.setElementValue(value, ele);\n                }, 200);\n            }\n        }\n        else {\n            this.isFocused = false;\n            if (!this.element.value.length) {\n                this.setProperties({ value: null }, true);\n            }\n            let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            this.updateValue(parsedInput);\n            if (!Browser.isDevice) {\n                EventHandler.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);\n            }\n        }\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let focusEvent = document.createEvent('FocusEvent');\n            focusEvent.initEvent('focusout', false, true);\n            element.dispatchEvent(focusEvent);\n        }\n    }\n    ;\n    mouseDownOnSpinner(event) {\n        if (this.isFocused) {\n            this.isPrevFocused = true;\n            event.preventDefault();\n        }\n        if (!this.getElementData(event)) {\n            return;\n        }\n        let result = this.getElementData(event);\n        let target = event.currentTarget;\n        let action = (target.classList.contains(SPINUP)) ? INCREMENT : DECREMENT;\n        EventHandler.add(target, 'mouseleave', this.mouseUpClick, this);\n        this.timeOut = setInterval(() => { this.isCalled = true; this.action(action, event); }, 150);\n        EventHandler.add(document, 'mouseup', this.mouseUpClick, this);\n    }\n    touchMoveOnSpinner(event) {\n        let target = document.elementFromPoint(event.clientX, event.clientY);\n        if (!(target.classList.contains(SPINICON))) {\n            clearInterval(this.timeOut);\n        }\n    }\n    mouseUpOnSpinner(event) {\n        if (this.isPrevFocused) {\n            this.element.focus();\n            if (!Browser.isDevice) {\n                this.isPrevFocused = false;\n            }\n        }\n        if (!Browser.isDevice) {\n            event.preventDefault();\n        }\n        if (!this.getElementData(event)) {\n            return;\n        }\n        let target = event.currentTarget;\n        let action = (target.classList.contains(SPINUP)) ? INCREMENT : DECREMENT;\n        EventHandler.remove(target, 'mouseleave', this.mouseUpClick);\n        if (!this.isCalled) {\n            this.action(action, event);\n        }\n        this.isCalled = false;\n        EventHandler.remove(document, 'mouseup', this.mouseUpClick);\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    getElementData(event) {\n        if ((event.which && event.which === 3) || (event.button && event.button === 2)\n            || !this.enabled || this.readonly) {\n            return false;\n        }\n        clearInterval(this.timeOut);\n        return true;\n    }\n    floatLabelTypeUpdate() {\n        Input.removeFloating(this.inputWrapper);\n        let hiddenInput = this.hiddenInput;\n        this.hiddenInput.remove();\n        Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n        this.container.insertBefore(hiddenInput, this.container.childNodes[1]);\n    }\n    mouseUpClick(event) {\n        event.stopPropagation();\n        clearInterval(this.timeOut);\n        this.isCalled = false;\n        EventHandler.remove(this.spinUp, 'mouseleave', this.mouseUpClick);\n        EventHandler.remove(this.spinDown, 'mouseleave', this.mouseUpClick);\n    }\n    /**\n     * Increments the NumericTextBox value with the specified step value.\n     * @param  {number} step - Specifies the value used to increment the NumericTextBox value.\n     * if its not given then numeric value will be incremented based on the step property value.\n     */\n    increment(step = this.step) {\n        this.isInteract = false;\n        this.changeValue(this.performAction(this.value, step, INCREMENT));\n        this.raiseChangeEvent();\n    }\n    /**\n     * Decrements the NumericTextBox value with specified step value.\n     * @param  {number} step - Specifies the value used to decrement the NumericTextBox value.\n     * if its not given then numeric value will be decremented based on the step property value.\n     */\n    decrement(step = this.step) {\n        this.isInteract = false;\n        this.changeValue(this.performAction(this.value, step, DECREMENT));\n        this.raiseChangeEvent();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        if (!(isBlazor() && this.isServerRendered)) {\n            detach(this.hiddenInput);\n            if (this.showSpinButton) {\n                this.unwireSpinBtnEvents();\n                detach(this.spinUp);\n                detach(this.spinDown);\n            }\n            let attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly',\n                'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize',\n                'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin',\n                'aria-valuemax', 'aria-live', 'aria-valuenow', 'aria-invalid'];\n            for (let i = 0; i < attrArray.length; i++) {\n                this.element.removeAttribute(attrArray[i]);\n            }\n            this.element.classList.remove('e-input');\n            this.container.insertAdjacentElement('afterend', this.element);\n            detach(this.container);\n            super.destroy();\n        }\n    }\n    /**\n     * Returns the value of NumericTextBox with the format applied to the NumericTextBox.\n     */\n    getText() {\n        return this.element.value;\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.element && this.enabled) {\n            this.element.focus();\n            addClass([this.container], [NUMERIC_FOCUS]);\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.element && this.enabled) {\n            this.element.blur();\n            removeClass([this.container], [NUMERIC_FOCUS]);\n        }\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(newProp.enabled, this.element);\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(newProp.enableRtl, [this.container]);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.element);\n                    if (this.readonly) {\n                        attributes(this.element, { 'aria-readonly': 'true' });\n                    }\n                    else {\n                        this.element.removeAttribute('aria-readonly');\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.updateDataAttribute(true);\n                    this.checkAttributes(true);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.element);\n                    break;\n                case 'step':\n                    this.step = newProp.step;\n                    this.validateStep();\n                    break;\n                case 'showSpinButton':\n                    this.updateSpinButton(newProp);\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp);\n                    break;\n                case 'floatLabelType':\n                    this.floatLabelType = newProp.floatLabelType;\n                    this.floatLabelTypeUpdate();\n                    break;\n                case 'value':\n                    this.updateValue(newProp.value);\n                    if (this.isVue && this.preventChange) {\n                        this.preventChange = false;\n                    }\n                    break;\n                case 'min':\n                case 'max':\n                    setValue(prop, getValue(prop, newProp), this);\n                    this.validateMinMax();\n                    this.updateValue(this.value);\n                    break;\n                case 'strictMode':\n                    this.strictMode = newProp.strictMode;\n                    this.updateValue(this.value);\n                    this.validateState();\n                    break;\n                case 'locale':\n                    this.initCultureFunc();\n                    this.l10n.setLocale(this.locale);\n                    this.setSpinButton();\n                    this.updatePlaceholder();\n                    Input.setPlaceholder(this.placeholder, this.element);\n                    this.updateValue(this.value);\n                    break;\n                case 'currency':\n                    let propVal = getValue(prop, newProp);\n                    this.setProperties({ currencyCode: propVal }, true);\n                    this.updateCurrency(prop, propVal);\n                    break;\n                case 'currencyCode':\n                    let propValue = getValue(prop, newProp);\n                    this.setProperties({ currency: propValue }, true);\n                    this.updateCurrency('currency', propValue);\n                    break;\n                case 'format':\n                    setValue(prop, getValue(prop, newProp), this);\n                    this.initCultureInfo();\n                    this.updateValue(this.value);\n                    break;\n                case 'decimals':\n                    this.decimals = newProp.decimals;\n                    this.updateValue(this.value);\n            }\n        }\n    }\n    updateClearButton(newProp) {\n        if (isBlazor()) {\n            if (this.showClearButton) {\n                this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n            }\n        }\n        else {\n            Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);\n            this.bindClearEvent();\n        }\n    }\n    updateSpinButton(newProp) {\n        if (isBlazor()) {\n            if (this.showSpinButton) {\n                this.spinDown = this.container.querySelector('.' + SPINDOWN);\n                this.spinUp = this.container.querySelector('.' + SPINUP);\n                this.wireSpinBtnEvents();\n            }\n        }\n        else {\n            if (newProp.showSpinButton) {\n                this.spinBtnCreation();\n            }\n            else {\n                detach(this.spinUp);\n                detach(this.spinDown);\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'numerictextbox';\n    }\n};\n__decorate([\n    Property('')\n], NumericTextBox.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"value\", void 0);\n__decorate([\n    Property(-(Number.MAX_VALUE))\n], NumericTextBox.prototype, \"min\", void 0);\n__decorate([\n    Property(Number.MAX_VALUE)\n], NumericTextBox.prototype, \"max\", void 0);\n__decorate([\n    Property(1)\n], NumericTextBox.prototype, \"step\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"placeholder\", void 0);\n__decorate([\n    Property({})\n], NumericTextBox.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"showSpinButton\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"readonly\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"enabled\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"showClearButton\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property('n2')\n], NumericTextBox.prototype, \"format\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"decimals\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"currency\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"currencyCode\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"strictMode\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"validateDecimalOnType\", void 0);\n__decorate([\n    Property('Never')\n], NumericTextBox.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"destroyed\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"focus\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"blur\", void 0);\nNumericTextBox = __decorate([\n    NotifyPropertyChanges\n], NumericTextBox);\n\n/**\n * NumericTextBox modules\n */\n\n/**\n * MaskedTextBox base module\n */\nconst ERROR$1 = 'e-error';\nconst INPUTGROUP = 'e-input-group';\nconst FLOATINPUT = 'e-float-input';\nconst UTILMASK = 'e-utility-mask';\nconst TOPLABEL = 'e-label-top';\nconst BOTTOMLABEL = 'e-label-bottom';\n/**\n * @hidden\n * Built-in masking elements collection.\n */\nlet regularExpressions = {\n    '0': '[0-9]',\n    '9': '[0-9 ]',\n    '#': '[0-9 +-]',\n    'L': '[A-Za-z]',\n    '?': '[A-Za-z ]',\n    '&': '[^\\x7f ]+',\n    'C': '[^\\x7f]+',\n    'A': '[A-Za-z0-9]',\n    'a': '[A-Za-z0-9 ]',\n};\n/**\n * @hidden\n * Generate required masking elements to the MaskedTextBox from user mask input.\n */\nfunction createMask() {\n    attributes(this.element, {\n        'role': 'textbox', 'autocomplete': 'off', 'autocorrect': 'off', 'autocapitalize': 'off',\n        'spellcheck': 'false', 'aria-live': 'assertive', 'aria-valuenow': ''\n    });\n    if (this.mask) {\n        let splitMask = this.mask.split(']');\n        for (let i = 0; i < splitMask.length; i++) {\n            if (splitMask[i][splitMask[i].length - 1] === '\\\\') {\n                splitMask[i] = splitMask[i] + ']';\n                let splitInnerMask = splitMask[i].split('[');\n                for (let j = 0; j < splitInnerMask.length; j++) {\n                    if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\\\') {\n                        splitInnerMask[j] = splitInnerMask[j] + '[';\n                    }\n                    pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n                }\n            }\n            else {\n                let splitInnerMask = splitMask[i].split('[');\n                if (splitInnerMask.length > 1) {\n                    let chkSpace = false;\n                    for (let j = 0; j < splitInnerMask.length; j++) {\n                        if (splitInnerMask[j] === '\\\\') {\n                            this.customRegExpCollec.push('[');\n                            this.hiddenMask += splitInnerMask[j] + '[';\n                        }\n                        else if (splitInnerMask[j] === '') {\n                            chkSpace = true;\n                        }\n                        else if ((splitInnerMask[j] !== '' && chkSpace) || j === splitInnerMask.length - 1) {\n                            this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');\n                            this.hiddenMask += this.promptChar;\n                            chkSpace = false;\n                        }\n                        else {\n                            pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n                        }\n                    }\n                }\n                else {\n                    pushIntoRegExpCollec.call(this, splitInnerMask[0]);\n                }\n            }\n        }\n        this.escapeMaskValue = this.hiddenMask;\n        this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);\n        if (!isNullOrUndefined(this.customCharacters)) {\n            for (let i = 0; i < this.promptMask.length; i++) {\n                if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {\n                    this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);\n                }\n            }\n        }\n        let escapeNumber = 0;\n        if (this.hiddenMask.match(new RegExp(/\\\\/))) {\n            for (let i = 0; i < this.hiddenMask.length; i++) {\n                let j = 0;\n                if (i >= 1) {\n                    j = i;\n                }\n                escapeNumber = this.hiddenMask.length - this.promptMask.length;\n                j = j - escapeNumber;\n                if ((i > 0 && this.hiddenMask[i - 1] !== '\\\\') && (this.hiddenMask[i] === '>' ||\n                    this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {\n                    this.promptMask = this.promptMask.substring(0, j) +\n                        this.promptMask.substring((i + 1) - escapeNumber, this.promptMask.length);\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) +\n                        this.escapeMaskValue.substring((i + 1) - escapeNumber, this.escapeMaskValue.length);\n                }\n                if (this.hiddenMask[i] === '\\\\') {\n                    this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] +\n                        this.promptMask.substring((i + 2) - escapeNumber, this.promptMask.length);\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] +\n                        this.escapeMaskValue.substring((i + 2) - escapeNumber, this.escapeMaskValue.length);\n                }\n            }\n        }\n        else {\n            this.promptMask = this.promptMask.replace(/[>|<]/g, '');\n            this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');\n        }\n        attributes(this.element, { 'aria-invalid': 'false' });\n    }\n}\n/**\n * @hidden\n * Apply mask ability with masking elements to the MaskedTextBox.\n */\nfunction applyMask() {\n    setElementValue.call(this, this.promptMask);\n    setMaskValue.call(this, this.value);\n}\n/**\n * @hidden\n * To wire required events to the MaskedTextBox.\n */\nfunction wireEvents() {\n    EventHandler.add(this.element, 'keydown', maskInputKeyDownHandler, this);\n    EventHandler.add(this.element, 'keypress', maskInputKeyPressHandler, this);\n    EventHandler.add(this.element, 'keyup', maskInputKeyUpHandler, this);\n    EventHandler.add(this.element, 'input', maskInputHandler, this);\n    EventHandler.add(this.element, 'focus', maskInputFocusHandler, this);\n    EventHandler.add(this.element, 'blur', maskInputBlurHandler, this);\n    EventHandler.add(this.element, 'paste', maskInputPasteHandler, this);\n    EventHandler.add(this.element, 'cut', maskInputCutHandler, this);\n    EventHandler.add(this.element, 'drop', maskInputDropHandler, this);\n    if (this.enabled) {\n        bindClearEvent.call(this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', resetFormHandler, this);\n        }\n    }\n}\n/**\n * @hidden\n * To unwire events attached to the MaskedTextBox.\n */\nfunction unwireEvents() {\n    EventHandler.remove(this.element, 'keydown', maskInputKeyDownHandler);\n    EventHandler.remove(this.element, 'keypress', maskInputKeyPressHandler);\n    EventHandler.remove(this.element, 'keyup', maskInputKeyUpHandler);\n    EventHandler.remove(this.element, 'input', maskInputHandler);\n    EventHandler.remove(this.element, 'focus', maskInputFocusHandler);\n    EventHandler.remove(this.element, 'blur', maskInputBlurHandler);\n    EventHandler.remove(this.element, 'paste', maskInputPasteHandler);\n    EventHandler.remove(this.element, 'cut', maskInputCutHandler);\n    if (this.formElement) {\n        EventHandler.remove(this.formElement, 'reset', resetFormHandler);\n    }\n}\n/**\n * @hidden\n * To bind required events to the MaskedTextBox clearButton.\n */\nfunction bindClearEvent() {\n    if (this.showClearButton) {\n        EventHandler.add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);\n    }\n}\nfunction resetHandler(e) {\n    e.preventDefault();\n    if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {\n        clear.call(this, e);\n        this.value = '';\n    }\n}\nfunction clear(event) {\n    let value = this.element.value;\n    setElementValue.call(this, this.promptMask);\n    this.redoCollec.unshift({\n        value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n    });\n    triggerMaskChangeEvent.call(this, event, value);\n    this.element.setSelectionRange(0, 0);\n}\nfunction resetFormHandler() {\n    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n        setElementValue.call(this, this.promptMask);\n    }\n    else {\n        this.value = this.initInputValue;\n    }\n}\n/**\n * @hidden\n * To get masked value from the MaskedTextBox.\n */\nfunction unstrippedValue(element) {\n    return element.value;\n}\n/**\n * @hidden\n * To extract raw value from the MaskedTextBox.\n */\nfunction strippedValue(element, maskValues) {\n    let value = '';\n    let k = 0;\n    let checkMask = false;\n    let maskValue = (!isNullOrUndefined(maskValues)) ? maskValues : (!isNullOrUndefined(element) &&\n        !isNullOrUndefined(this)) ? element.value : maskValues;\n    if (maskValue !== this.promptMask) {\n        for (let i = 0; i < this.customRegExpCollec.length; i++) {\n            if (checkMask) {\n                checkMask = false;\n            }\n            if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' ||\n                this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\\\') {\n                --i;\n                checkMask = true;\n            }\n            if (!checkMask) {\n                if ((maskValue[i] !== this.promptChar) && (!isNullOrUndefined(this.customRegExpCollec[k]) &&\n                    ((this._callPasteHandler || !isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]])) ||\n                        (this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' &&\n                            this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']') ||\n                        (!isNullOrUndefined(this.customCharacters) &&\n                            (!isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]]))))) && (maskValue !== '')) {\n                    value += maskValue[i];\n                }\n            }\n            ++k;\n        }\n    }\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n        value = maskValue;\n    }\n    return value;\n}\nfunction pushIntoRegExpCollec(value) {\n    for (let k = 0; k < value.length; k++) {\n        this.hiddenMask += value[k];\n        if (value[k] !== '\\\\') {\n            this.customRegExpCollec.push(value[k]);\n        }\n    }\n}\nfunction maskInputFocusHandler(event) {\n    let eventArgs = {\n        selectionStart: 0,\n        event: event,\n        value: this.value,\n        maskedValue: this.element.value,\n        container: this.inputObj.container,\n        selectionEnd: (this.promptMask.length > 0) ? this.promptMask.length : this.element.value.length,\n    };\n    this.trigger('focus', eventArgs, (eventArgs) => {\n        if (this.mask) {\n            this.isFocus = true;\n            if (this.element.value === '') {\n                setElementValue.call(this, this.promptMask);\n            }\n            else {\n                setElementValue.call(this, this.element.value);\n            }\n            if (!Browser.isDevice && Browser.info.version === '11.0') {\n                this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);\n            }\n            else {\n                let delay = (Browser.isDevice && Browser.isIos) ? 450 : 0;\n                setTimeout(() => {\n                    this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);\n                }, delay);\n            }\n        }\n    });\n}\nfunction maskInputBlurHandler(event) {\n    this.blurEventArgs = {\n        event: event,\n        value: this.value,\n        maskedValue: this.element.value,\n        container: this.inputObj.container\n    };\n    this.trigger('blur', this.blurEventArgs);\n    if (this.mask) {\n        this.isFocus = false;\n        if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {\n            setElementValue.call(this, '');\n            let labelElement = this.element.parentNode.querySelector('.e-float-text');\n            if (this.floatLabelType === 'Auto' && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {\n                removeClass([labelElement], TOPLABEL);\n            }\n        }\n    }\n}\nfunction maskInputPasteHandler(event) {\n    if (this.mask && !this.readonly) {\n        let sIndex = this.element.selectionStart;\n        let eIndex = this.element.selectionEnd;\n        let oldValue = this.element.value;\n        setElementValue.call(this, '');\n        this._callPasteHandler = true;\n        setTimeout(() => {\n            let value = this.element.value.replace(/ /g, '');\n            if (this.redoCollec.length > 0 && this.redoCollec[0].value === this.element.value) {\n                value = strippedValue.call(this, this.element);\n            }\n            setElementValue.call(this, oldValue);\n            this.element.selectionStart = sIndex;\n            this.element.selectionEnd = eIndex;\n            let i = 0;\n            this.maskKeyPress = true;\n            do {\n                validateValue.call(this, value[i], false, null);\n                ++i;\n            } while (i < value.length);\n            this.maskKeyPress = false;\n            this._callPasteHandler = false;\n            if (this.element.value === oldValue) {\n                let i = 0;\n                this.maskKeyPress = true;\n                do {\n                    validateValue.call(this, value[i], false, null);\n                    ++i;\n                } while (i < value.length);\n                this.maskKeyPress = false;\n            }\n            else {\n                triggerMaskChangeEvent.call(this, event, oldValue);\n            }\n        }, 1);\n    }\n}\nfunction maskInputCutHandler(event) {\n    if (this.mask && !this.readonly) {\n        let preValue = this.element.value;\n        let sIndex = this.element.selectionStart;\n        let eIndex = this.element.selectionEnd;\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd });\n        let value = this.element.value.substring(0, sIndex) + this.promptMask.substring(sIndex, eIndex) +\n            this.element.value.substring(eIndex);\n        setTimeout(() => {\n            setElementValue.call(this, value);\n            this.element.selectionStart = this.element.selectionEnd = sIndex;\n            if (this.element.value !== preValue) {\n                triggerMaskChangeEvent.call(this, event, null);\n            }\n        }, 0);\n    }\n}\nfunction maskInputDropHandler(event) {\n    event.preventDefault();\n}\nfunction maskInputHandler(event) {\n    if (Browser.isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {\n        return;\n    }\n    let eventArgs = { ctrlKey: false, keyCode: 229 };\n    // tslint:disable-next-line\n    extend(event, eventArgs);\n    if (this.mask) {\n        if (this.element.value === '') {\n            this.redoCollec.unshift({\n                value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n            });\n        }\n        if (this.element.value.length === 1) {\n            this.element.value = this.element.value + this.promptMask;\n            this.element.setSelectionRange(1, 1);\n        }\n        if (!this._callPasteHandler) {\n            removeMaskInputValues.call(this, event);\n        }\n        if (this.element.value.length > this.promptMask.length) {\n            let startIndex = this.element.selectionStart;\n            let addedValues = this.element.value.length - this.promptMask.length;\n            let value = this.element.value.substring(startIndex - addedValues, startIndex);\n            this.maskKeyPress = false;\n            let i = 0;\n            do {\n                validateValue.call(this, value[i], event.ctrlKey, event);\n                ++i;\n            } while (i < value.length);\n            if (this.element.value !== this.preEleVal) {\n                triggerMaskChangeEvent.call(this, event, null);\n            }\n        }\n        let val = strippedValue.call(this, this.element);\n        this.prevValue = val;\n        this.value = val;\n        if (val === '') {\n            setElementValue.call(this, this.promptMask);\n            this.element.setSelectionRange(0, 0);\n        }\n    }\n}\nfunction maskInputKeyDownHandler(event) {\n    if (this.mask && !this.readonly) {\n        if (event.keyCode !== 229) {\n            if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n                event.preventDefault();\n            }\n            removeMaskInputValues.call(this, event);\n        }\n        let startValue = this.element.value;\n        if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n            let collec;\n            if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {\n                collec = this.undoCollec[this.undoCollec.length - 1];\n                this.redoCollec.unshift({\n                    value: this.element.value, startIndex: this.element.selectionStart,\n                    endIndex: this.element.selectionEnd\n                });\n                setElementValue.call(this, collec.value);\n                this.element.selectionStart = collec.startIndex;\n                this.element.selectionEnd = collec.endIndex;\n                this.undoCollec.splice(this.undoCollec.length - 1, 1);\n            }\n            else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {\n                collec = this.redoCollec[0];\n                this.undoCollec.push({\n                    value: this.element.value, startIndex: this.element.selectionStart,\n                    endIndex: this.element.selectionEnd\n                });\n                setElementValue.call(this, collec.value);\n                this.element.selectionStart = collec.startIndex;\n                this.element.selectionEnd = collec.endIndex;\n                this.redoCollec.splice(0, 1);\n            }\n        }\n    }\n}\nfunction mobileRemoveFunction() {\n    let collec;\n    let sIndex = this.element.selectionStart;\n    let eIndex = this.element.selectionEnd;\n    if (this.redoCollec.length > 0) {\n        collec = this.redoCollec[0];\n        setElementValue.call(this, collec.value);\n        if ((collec.startIndex - sIndex) === 1) {\n            this.element.selectionStart = collec.startIndex;\n            this.element.selectionEnd = collec.endIndex;\n        }\n        else {\n            this.element.selectionStart = sIndex + 1;\n            this.element.selectionEnd = eIndex + 1;\n        }\n    }\n    else {\n        setElementValue.call(this, this.promptMask);\n        this.element.selectionStart = this.element.selectionEnd = sIndex;\n    }\n}\nfunction autoFillMaskInputValues(isRemove, oldEventVal, event) {\n    if (event.type === 'input') {\n        isRemove = false;\n        oldEventVal = this.element.value;\n        setElementValue.call(this, this.promptMask);\n        setMaskValue.call(this, oldEventVal);\n    }\n    return isRemove;\n}\nfunction removeMaskInputValues(event) {\n    let isRemove = false;\n    let oldEventVal;\n    let isDeleted = false;\n    if (this.element.value.length < this.promptMask.length) {\n        isRemove = true;\n        oldEventVal = this.element.value;\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n        mobileRemoveFunction.call(this);\n    }\n    if (this.element.value.length >= this.promptMask.length && event.type === 'input') {\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n    }\n    let initStartIndex = this.element.selectionStart;\n    let initEndIndex = this.element.selectionEnd;\n    let startIndex = this.element.selectionStart;\n    let endIndex = this.element.selectionEnd;\n    let maskValue = this.hiddenMask.replace(/[>|\\\\<]/g, '');\n    let curMask = maskValue[startIndex - 1];\n    let parentElement = this.element.parentNode;\n    if (isRemove || event.keyCode === 8 || event.keyCode === 46) {\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: endIndex });\n        let multipleDel = false;\n        let preValue = this.element.value;\n        if (startIndex > 0 || ((event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length\n            && ((this.element.selectionEnd - startIndex) !== this.element.value.length))) {\n            let index = startIndex;\n            if (startIndex !== endIndex) {\n                startIndex = endIndex;\n                if (event.keyCode === 46) {\n                    multipleDel = true;\n                }\n            }\n            else if (event.keyCode === 46) {\n                ++index;\n            }\n            else {\n                --index;\n            }\n            for (let k = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? k > index : k < index; (event.keyCode === 8 || isRemove || multipleDel) ? k-- : k++) {\n                for (let i = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? i > 0 : i < this.element.value.length; (event.keyCode === 8 || isRemove || multipleDel) ? i-- : i++) {\n                    let sIndex;\n                    if (((event.keyCode === 8 || multipleDel) && ((initStartIndex !== initEndIndex && initStartIndex !== startIndex) ||\n                        (initStartIndex === initEndIndex))) || isRemove) {\n                        curMask = maskValue[i - 1];\n                        sIndex = startIndex - 1;\n                    }\n                    else {\n                        curMask = maskValue[i];\n                        sIndex = startIndex;\n                        ++startIndex;\n                    }\n                    let oldValue = this.element.value[sIndex];\n                    if ((isNullOrUndefined(this.regExpCollec[curMask]) && (!isNullOrUndefined(this.customCharacters)\n                        && isNullOrUndefined(this.customCharacters[curMask]))\n                        && ((this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '['\n                            && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']')))\n                        || (this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters))) {\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\n                        event.preventDefault();\n                        if (event.keyCode === 46 && !multipleDel) {\n                            ++this.element.selectionStart;\n                        }\n                    }\n                    else {\n                        let value = this.element.value;\n                        let prompt = this.promptChar;\n                        let elementValue = value.substring(0, sIndex) + prompt + value.substring(startIndex, value.length);\n                        setElementValue.call(this, elementValue);\n                        event.preventDefault();\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\n                        isDeleted = true;\n                    }\n                    startIndex = this.element.selectionStart;\n                    if ((!isDeleted && event.keyCode === 8) || multipleDel || (!isDeleted && !(event.keyCode === 46))) {\n                        sIndex = startIndex - 1;\n                    }\n                    else {\n                        sIndex = startIndex;\n                        isDeleted = false;\n                    }\n                    oldValue = this.element.value[sIndex];\n                    if (((initStartIndex !== initEndIndex) && (this.element.selectionStart === initStartIndex))\n                        || (this.promptMask[sIndex] === this.promptChar) || ((oldValue !== this.promptMask[sIndex]) &&\n                        (this.promptMask[sIndex] !== this.promptChar) && !isNullOrUndefined(this.customCharacters))) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.element.selectionStart === 0 && (this.element.selectionEnd === this.element.value.length)) {\n            setElementValue.call(this, this.promptMask);\n            event.preventDefault();\n            this.element.selectionStart = this.element.selectionEnd = startIndex;\n        }\n        this.redoCollec.unshift({\n            value: this.element.value, startIndex: this.element.selectionStart,\n            endIndex: this.element.selectionEnd\n        });\n        if (this.element.value !== preValue) {\n            triggerMaskChangeEvent.call(this, event, oldEventVal);\n        }\n    }\n}\nfunction maskInputKeyPressHandler(event) {\n    if (this.mask && !this.readonly) {\n        let oldValue = this.element.value;\n        if ((!event.ctrlKey) || (event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY'\n            && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV')) {\n            this.maskKeyPress = true;\n            let key = event.key;\n            if (key === 'Spacebar') {\n                key = String.fromCharCode(event.keyCode);\n            }\n            if (!key) {\n                this.isIosInvalid = true;\n                validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);\n                event.preventDefault();\n                this.isIosInvalid = false;\n            }\n            else if (key && key.length === 1) {\n                validateValue.call(this, key, event.ctrlKey, event);\n                event.preventDefault();\n            }\n            if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {\n                this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;\n            }\n        }\n        if (this.element.value !== oldValue) {\n            triggerMaskChangeEvent.call(this, event, oldValue);\n        }\n    }\n}\nfunction triggerMaskChangeEvent(event, oldValue) {\n    let prevOnChange = this.isProtectedOnChange;\n    if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {\n        let eventArgs = {};\n        this.changeEventArgs = { value: this.element.value, maskedValue: this.element.value, isInteraction: false, isInteracted: false };\n        if (this.mask) {\n            this.changeEventArgs.value = strippedValue.call(this, this.element);\n        }\n        if (!isNullOrUndefined(event)) {\n            this.changeEventArgs.isInteracted = true;\n            this.changeEventArgs.isInteraction = true;\n            this.changeEventArgs.event = event;\n        }\n        this.isProtectedOnChange = true;\n        this.value = this.changeEventArgs.value;\n        this.isProtectedOnChange = prevOnChange;\n        merge(eventArgs, this.changeEventArgs);\n        this.trigger('change', eventArgs);\n    }\n    this.preEleVal = this.element.value;\n    this.prevValue = strippedValue.call(this, this.element);\n    attributes(this.element, { 'aria-valuenow': this.element.value });\n}\nfunction maskInputKeyUpHandler(event) {\n    if (this.mask && !this.readonly) {\n        let collec;\n        if (!this.maskKeyPress && event.keyCode === 229) {\n            let oldEventVal;\n            if (this.element.value.length === 1) {\n                this.element.value = this.element.value + this.promptMask;\n                this.element.setSelectionRange(1, 1);\n            }\n            if (this.element.value.length > this.promptMask.length) {\n                let startIndex = this.element.selectionStart;\n                let addedValues = this.element.value.length - this.promptMask.length;\n                let val = this.element.value.substring(startIndex - addedValues, startIndex);\n                if (this.undoCollec.length > 0) {\n                    collec = this.undoCollec[this.undoCollec.length - 1];\n                    let startIndex = this.element.selectionStart;\n                    oldEventVal = collec.value;\n                    let oldVal = collec.value.substring(startIndex - addedValues, startIndex);\n                    collec = this.redoCollec[0];\n                    val = val.trim();\n                    let isSpace = Browser.isAndroid && val === '';\n                    if (!isSpace && oldVal !== val && collec.value.substring(startIndex - addedValues, startIndex) !== val) {\n                        validateValue.call(this, val, event.ctrlKey, event);\n                    }\n                    else if (isSpace) {\n                        preventUnsupportedValues.call(this, event, startIndex - 1, this.element.selectionEnd - 1, val, event.ctrlKey, false);\n                    }\n                }\n                else {\n                    oldEventVal = this.promptMask;\n                    validateValue.call(this, val, event.ctrlKey, event);\n                }\n                this.maskKeyPress = false;\n                triggerMaskChangeEvent.call(this, event, oldEventVal);\n            }\n        }\n        else {\n            removeMaskError.call(this);\n        }\n        let val = strippedValue.call(this, this.element);\n        if (!((this.element.selectionStart === 0) && (this.promptMask === this.element.value) && val === '')\n            || (val === '' && this.value !== val)) {\n            this.prevValue = val;\n            this.value = val;\n        }\n    }\n    else {\n        triggerMaskChangeEvent.call(this, event);\n    }\n    if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {\n        // tslint:disable-next-line\n        let temp = this.element;\n        setTimeout(() => {\n            temp.setSelectionRange(0, 0);\n        }, 0);\n    }\n}\nfunction mobileSwipeCheck(key) {\n    if (key.length > 1 && ((this.promptMask.length + key.length) < this.element.value.length)) {\n        let elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key +\n            this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);\n        setElementValue.call(this, elementValue);\n        this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;\n    }\n    this.element.selectionStart = this.element.selectionStart - key.length;\n    this.element.selectionEnd = this.element.selectionEnd - key.length;\n}\nfunction mobileValidation(key) {\n    if (!this.maskKeyPress) {\n        mobileSwipeCheck.call(this, key);\n    }\n}\nfunction validateValue(key, isCtrlKey, event) {\n    mobileValidation.call(this, key);\n    if (isNullOrUndefined(this) || isNullOrUndefined(key)) {\n        return;\n    }\n    let startIndex = this.element.selectionStart;\n    let initStartIndex = startIndex;\n    let endIndex = this.element.selectionEnd;\n    let curMask;\n    let allowText = false;\n    let value = this.element.value;\n    let eventOldVal;\n    let prevSupport = false;\n    let isEqualVal = false;\n    for (let k = 0; k < key.length; k++) {\n        let keyValue = key[k];\n        startIndex = this.element.selectionStart;\n        endIndex = this.element.selectionEnd;\n        if (!this.maskKeyPress && initStartIndex === startIndex) {\n            startIndex = startIndex + k;\n        }\n        if ((!this.maskKeyPress || startIndex < this.promptMask.length)) {\n            for (let i = startIndex; i < this.promptMask.length; i++) {\n                let maskValue = this.escapeMaskValue;\n                curMask = maskValue[startIndex];\n                if (this.hiddenMask[startIndex] === '\\\\' && this.hiddenMask[startIndex + 1] === key) {\n                    isEqualVal = true;\n                }\n                if ((isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters)\n                    || (!isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])))\n                    && ((this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '['\n                        && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']')))\n                    || ((this.promptMask[startIndex] !== this.promptChar) && isNullOrUndefined(this.customCharacters))\n                    || (this.promptChar === curMask && this.escapeMaskValue === this.mask)) {\n                    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n                    startIndex = this.element.selectionStart;\n                    curMask = this.hiddenMask[startIndex];\n                }\n            }\n            if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[curMask])) {\n                let customValStr = this.customCharacters[curMask];\n                let customValArr = customValStr.split(',');\n                for (let i = 0; i < customValArr.length; i++) {\n                    if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {\n                        allowText = true;\n                        break;\n                    }\n                }\n            }\n            else if (!isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask]))\n                && this.promptMask[startIndex] === this.promptChar) {\n                allowText = true;\n            }\n            else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '['\n                && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']'\n                && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {\n                allowText = true;\n            }\n            if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {\n                if (k === 0) {\n                    if (this.maskKeyPress) {\n                        this.undoCollec.push({ value: value, startIndex: startIndex, endIndex: startIndex });\n                    }\n                    else {\n                        let sIndex = this.element.selectionStart;\n                        let eIndex = this.element.selectionEnd;\n                        if (this.redoCollec.length > 0) {\n                            eventOldVal = this.redoCollec[0].value;\n                            setElementValue.call(this, eventOldVal);\n                            this.undoCollec.push(this.redoCollec[0]);\n                        }\n                        else {\n                            this.undoCollec.push({ value: this.promptMask, startIndex: startIndex, endIndex: startIndex });\n                            eventOldVal = this.promptMask;\n                            setElementValue.call(this, eventOldVal);\n                        }\n                        this.element.selectionStart = sIndex;\n                        this.element.selectionEnd = eIndex;\n                    }\n                }\n                startIndex = this.element.selectionStart;\n                applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);\n                prevSupport = true;\n                if (k === key.length - 1) {\n                    this.redoCollec.unshift({\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n                    });\n                }\n                allowText = false;\n            }\n            else {\n                startIndex = this.element.selectionStart;\n                preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);\n            }\n            if (k === key.length - 1 && !allowText) {\n                if (!Browser.isAndroid || (Browser.isAndroid && startIndex < this.promptMask.length)) {\n                    this.redoCollec.unshift({\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n                    });\n                }\n            }\n        }\n        else {\n            if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event)) {\n                addMaskErrorClass.call(this);\n            }\n        }\n    }\n}\nfunction applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {\n    if (this.hiddenMask.length > this.promptMask.length) {\n        keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);\n    }\n    if (!isEqualVal) {\n        let value = this.element.value;\n        let elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);\n        setElementValue.call(this, elementValue);\n        this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n    }\n}\nfunction preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {\n    if (!this.maskKeyPress) {\n        let eventOldVal;\n        let value = this.element.value;\n        if (sIdx >= this.promptMask.length) {\n            setElementValue.call(this, value.substring(0, sIdx));\n        }\n        else {\n            if (idx === sIdx) {\n                setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));\n            }\n            else {\n                if (this.promptMask.length === this.element.value.length) {\n                    setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));\n                }\n                else {\n                    setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));\n                }\n            }\n            this.element.selectionStart = this.element.selectionEnd = (chkSupport ||\n                this.element.value[idx] !== this.promptChar) ? sIdx : idx;\n        }\n        eventOldVal = this.element.value;\n        addMaskErrorClass.call(this);\n    }\n    if (key.length === 1 && !ctrl && !isNullOrUndefined(event)) {\n        addMaskErrorClass.call(this);\n    }\n}\nfunction addMaskErrorClass() {\n    let parentElement = this.element.parentNode;\n    let timer = 200;\n    if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {\n        addClass([parentElement], ERROR$1);\n    }\n    else {\n        addClass([this.element], ERROR$1);\n    }\n    if (this.isIosInvalid === true) {\n        timer = 400;\n    }\n    attributes(this.element, { 'aria-invalid': 'true' });\n    setTimeout(() => {\n        if (!this.maskKeyPress) {\n            removeMaskError.call(this);\n        }\n    }, timer);\n}\nfunction removeMaskError() {\n    let parentElement = this.element.parentNode;\n    if (!isNullOrUndefined(parentElement)) {\n        removeClass([parentElement], ERROR$1);\n    }\n    removeClass([this.element], ERROR$1);\n    attributes(this.element, { 'aria-invalid': 'false' });\n}\n/**\n * @hidden\n * Validates user input using masking elements '<' , '>' and '|'.\n */\nfunction changeToLowerUpperCase(key, value) {\n    let promptMask;\n    let i;\n    let curVal = value;\n    let caseCount = 0;\n    for (i = 0; i < this.hiddenMask.length; i++) {\n        if (this.hiddenMask[i] === '\\\\') {\n            promptMask = curVal.substring(0, i) + '\\\\' + curVal.substring(i, curVal.length);\n        }\n        if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {\n            if (this.hiddenMask[i] !== curVal[i]) {\n                promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);\n            }\n            ++caseCount;\n        }\n        if (promptMask) {\n            if (((promptMask[i] === this.promptChar) && (i > this.element.selectionStart)) ||\n                (this.element.value.indexOf(this.promptChar) < 0 && (this.element.selectionStart + caseCount) === i)) {\n                caseCount = 0;\n                break;\n            }\n            curVal = promptMask;\n        }\n    }\n    while (i >= 0 && promptMask) {\n        if (i === 0 || promptMask[i - 1] !== '\\\\') {\n            let val = this.element.value;\n            if (promptMask[i] === '>') {\n                key = key.toUpperCase();\n                break;\n            }\n            else if (promptMask[i] === '<') {\n                key = key.toLowerCase();\n                break;\n            }\n            else if (promptMask[i] === '|') {\n                break;\n            }\n        }\n        --i;\n    }\n    return key;\n}\n/**\n * @hidden\n * To set updated values in the MaskedTextBox.\n */\nfunction setMaskValue(val) {\n    if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {\n        this.maskKeyPress = true;\n        setElementValue.call(this, this.promptMask);\n        if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {\n            this.element.selectionStart = 0;\n            this.element.selectionEnd = 0;\n        }\n        if (val !== null) {\n            for (let i = 0; i < val.length; i++) {\n                validateValue.call(this, val[i], false, null);\n            }\n        }\n        let newVal = strippedValue.call(this, this.element);\n        this.prevValue = newVal;\n        this.value = newVal;\n        triggerMaskChangeEvent.call(this, null, null);\n        this.maskKeyPress = false;\n        let labelElement = this.element.parentNode.querySelector('.e-float-text');\n        if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder &&\n            !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {\n            removeClass([labelElement], TOPLABEL);\n            addClass([labelElement], BOTTOMLABEL);\n            setElementValue.call(this, '');\n        }\n    }\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n        setElementValue.call(this, this.value);\n    }\n}\n/**\n * @hidden\n * To set updated values in the input element.\n */\nfunction setElementValue(val, element) {\n    if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && isNullOrUndefined(this.value)) {\n        val = '';\n    }\n    let value = strippedValue.call(this, (element ? element : this.element), val);\n    if (value === null || value === '') {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, false);\n        if (this.showClearButton) {\n            this.inputObj.clearButton.classList.add('e-clear-icon-hide');\n        }\n    }\n    else {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\n    }\n}\n/**\n * @hidden\n * Provide mask support to input textbox through utility method.\n */\nfunction maskInput(args) {\n    let inputEle = getMaskInput(args);\n    applyMask.call(inputEle);\n    let val = strippedValue.call(this, this.element);\n    this.prevValue = val;\n    this.value = val;\n    if (args.mask) {\n        unwireEvents.call(inputEle);\n        wireEvents.call(inputEle);\n    }\n}\nfunction getMaskInput(args) {\n    addClass([args.element], UTILMASK);\n    let inputEle = {\n        element: args.element,\n        mask: args.mask,\n        promptMask: '',\n        hiddenMask: '',\n        escapeMaskValue: '',\n        promptChar: args.promptChar ? (args.promptChar.length > 1) ? args.promptChar = args.promptChar[0]\n            : args.promptChar : '_',\n        value: args.value ? args.value : null,\n        regExpCollec: regularExpressions,\n        customRegExpCollec: [],\n        customCharacters: args.customCharacters,\n        undoCollec: [],\n        redoCollec: [],\n        maskKeyPress: false,\n        prevValue: ''\n    };\n    createMask.call(inputEle);\n    return inputEle;\n}\n/**\n * @hidden\n * Gets raw value of the textbox which has been masked through utility method.\n */\nfunction getVal(args) {\n    return strippedValue.call(getUtilMaskEle(args), args.element);\n}\n/**\n * @hidden\n * Gets masked value of the textbox which has been masked through utility method.\n */\nfunction getMaskedVal(args) {\n    return unstrippedValue.call(getUtilMaskEle(args), args.element);\n}\nfunction getUtilMaskEle(args) {\n    let inputEle;\n    if (!isNullOrUndefined(args) && args.element.classList.contains(UTILMASK)) {\n        inputEle = getMaskInput(args);\n    }\n    return inputEle;\n}\n/**\n * @hidden\n * Arguments to perform undo and redo functionalities.\n */\nclass MaskUndo {\n}\n\n/**\n * MaskedTextbox base modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ROOT$1 = 'e-control-wrapper e-mask';\nconst INPUT = 'e-input';\nconst COMPONENT$1 = 'e-maskedtextbox';\nconst CONTROL$1 = 'e-control';\nconst MASKINPUT_FOCUS = 'e-input-focus';\nconst wrapperAttr = ['title', 'style', 'class'];\n/**\n * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.\n * ```html\n * <input id=\"mask\" type=\"text\" />\n * ```\n * ```typescript\n * <script>\n * var maskObj = new MaskedTextBox({ mask: \"(999) 9999-999\" });\n * maskObj.appendTo('#mask');\n * </script>\n * ```\n */\nlet MaskedTextBox = class MaskedTextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.initInputValue = '';\n        this.maskOptions = options;\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'maskedtextbox';\n    }\n    /**\n     * Initializes the event handler\n     * @private\n     */\n    preRender() {\n        this.promptMask = '';\n        this.hiddenMask = '';\n        this.escapeMaskValue = '';\n        this.regExpCollec = regularExpressions;\n        this.customRegExpCollec = [];\n        this.undoCollec = [];\n        this.redoCollec = [];\n        this.changeEventArgs = {};\n        this.focusEventArgs = {};\n        this.blurEventArgs = {};\n        this.maskKeyPress = false;\n        this.isFocus = false;\n        this.isInitial = false;\n        this.isIosInvalid = false;\n        let ejInstance = getValue('ej2_instances', this.element);\n        this.cloneElement = this.element.cloneNode(true);\n        removeClass([this.cloneElement], [CONTROL$1, COMPONENT$1, 'e-lib']);\n        this.angularTagName = null;\n        this.formElement = closest(this.element, 'form');\n        if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n            this.angularTagName = this.element.tagName;\n            let input = this.createElement('input');\n            for (let i = 0; i < this.element.attributes.length; i++) {\n                input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);\n                input.innerHTML = this.element.innerHTML;\n            }\n            if (this.element.hasAttribute('id')) {\n                this.element.removeAttribute('id');\n            }\n            this.element.classList.remove('e-control', 'e-maskedtextbox');\n            this.element.classList.add('e-mask-container');\n            this.element.appendChild(input);\n            this.element = input;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        this.updateHTMLAttrToElement();\n        this.checkHtmlAttributes(false);\n        if (this.formElement) {\n            this.initInputValue = this.value;\n        }\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Initializes the component rendering.\n     * @private\n     */\n    render() {\n        if (this.element.tagName.toLowerCase() === 'input') {\n            if (this.floatLabelType === 'Never') {\n                addClass([this.element], INPUT);\n            }\n            this.createWrapper();\n            this.updateHTMLAttrToWrapper();\n            if (this.element.name === '') {\n                this.element.setAttribute('name', this.element.id);\n            }\n            this.isInitial = true;\n            this.resetMaskedTextBox();\n            this.isInitial = false;\n            this.setMaskPlaceholder(true, false);\n            this.setWidth(this.width);\n            this.preEleVal = this.element.value;\n            if (!Browser.isDevice && (Browser.info.version === '11.0' || Browser.info.name === 'edge')) {\n                this.element.blur();\n            }\n            if (Browser.isDevice && Browser.isIos) {\n                this.element.blur();\n            }\n            if (this.element.getAttribute('value') || this.value) {\n                this.element.setAttribute('value', this.element.value);\n            }\n            this.renderComplete();\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr.indexOf(key) < 0) {\n                    this.element.setAttribute(key, this.htmlAttributes[key]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));\n    }\n    getValidClassList(maskClassName) {\n        let result = maskClassName;\n        if (!isNullOrUndefined(maskClassName) && maskClassName !== '') {\n            result = (maskClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        let updatedClassValues = (this.htmlAttributes[key].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValues !== '') {\n                            addClass([this.inputObj.container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        let maskStyle = this.inputObj.container.getAttribute(key);\n                        maskStyle = !isNullOrUndefined(maskStyle) ? (maskStyle + this.htmlAttributes[key]) :\n                            this.htmlAttributes[key];\n                        this.inputObj.container.setAttribute(key, maskStyle);\n                    }\n                    else {\n                        this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    resetMaskedTextBox() {\n        this.promptMask = '';\n        this.hiddenMask = '';\n        this.escapeMaskValue = '';\n        this.customRegExpCollec = [];\n        this.undoCollec = [];\n        this.redoCollec = [];\n        if (this.promptChar.length > 1) {\n            this.promptChar = this.promptChar[0];\n        }\n        createMask.call(this);\n        applyMask.call(this);\n        if (this.mask === null || this.mask === '' && this.value !== undefined) {\n            setElementValue.call(this, this.value);\n        }\n        let val = strippedValue.call(this, this.element);\n        this.prevValue = val;\n        this.value = val;\n        if (!this.isInitial) {\n            unwireEvents.call(this);\n        }\n        wireEvents.call(this);\n    }\n    setMaskPlaceholder(setVal, dynamicPlaceholder) {\n        if (dynamicPlaceholder || this.placeholder) {\n            Input.setPlaceholder(this.placeholder, this.element);\n            if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always') {\n                setElementValue.call(this, '');\n            }\n            if (this.floatLabelType === 'Never') {\n                maskInputBlurHandler.call(this);\n            }\n        }\n    }\n    setWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.inputObj.container.style.width = formatUnit(width);\n                this.element.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                let elementWidth = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n                this.inputObj.container.style.width = elementWidth;\n                this.element.style.width = elementWidth;\n            }\n        }\n    }\n    checkHtmlAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes)\n            : ['placeholder', 'disabled', 'value', 'readonly'];\n        for (let key of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(key))) {\n                switch (key) {\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' ||\n                                this.element.getAttribute(key) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['value'] === undefined)) || isDynamic) {\n                            this.setProperties({ value: this.element.value }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === ''\n                                || this.element.getAttribute(key) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    createWrapper() {\n        let updatedCssClassValues = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValues = this.getValidClassList(this.cssClass);\n        }\n        this.inputObj = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                enableRtl: this.enableRtl,\n                cssClass: updatedCssClassValues,\n                enabled: this.enabled,\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                showClearButton: this.showClearButton\n            }\n        }, this.createElement);\n        this.inputObj.container.setAttribute('class', ROOT$1 + ' ' + this.inputObj.container.getAttribute('class'));\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @hidden\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'value':\n                    setMaskValue.call(this, this.value);\n                    if (this.placeholder) {\n                        this.setMaskPlaceholder(false, false);\n                    }\n                    break;\n                case 'placeholder':\n                    this.setMaskPlaceholder(true, true);\n                    break;\n                case 'width':\n                    this.setWidth(newProp.width);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.element);\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);\n                    break;\n                case 'customCharacters':\n                    this.customCharacters = newProp.customCharacters;\n                    this.resetMaskedTextBox();\n                    break;\n                case 'showClearButton':\n                    Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);\n                    bindClearEvent.call(this);\n                    break;\n                case 'floatLabelType':\n                    this.floatLabelType = newProp.floatLabelType;\n                    Input.removeFloating(this.inputObj);\n                    Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.checkHtmlAttributes(true);\n                    break;\n                case 'mask':\n                    let strippedValue$$1 = this.value;\n                    this.mask = newProp.mask;\n                    this.updateValue(strippedValue$$1);\n                    break;\n                case 'promptChar':\n                    if (newProp.promptChar.length > 1) {\n                        newProp.promptChar = newProp.promptChar[0];\n                    }\n                    if (newProp.promptChar) {\n                        this.promptChar = newProp.promptChar;\n                    }\n                    else {\n                        this.promptChar = '_';\n                    }\n                    let value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    if (this.promptMask === this.element.value) {\n                        value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    }\n                    this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    this.undoCollec = this.redoCollec = [];\n                    setElementValue.call(this, value);\n                    break;\n            }\n        }\n    }\n    updateValue(strippedVal) {\n        this.resetMaskedTextBox();\n        setMaskValue.call(this, strippedVal);\n    }\n    /**\n     * Gets the value of the MaskedTextBox with the masked format.\n     * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.\n     * @return {string}\n     */\n    getMaskedValue() {\n        return unstrippedValue.call(this, this.element);\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.element && this.enabled) {\n            this.element.focus();\n            addClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.element && this.enabled) {\n            this.element.blur();\n            removeClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        unwireEvents.call(this);\n        let attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly',\n            'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize',\n            'spellcheck', 'aria-autocomplete',\n            'aria-live', 'aria-valuenow', 'aria-invalid'];\n        for (let i = 0; i < attrArray.length; i++) {\n            this.element.removeAttribute(attrArray[i]);\n        }\n        this.element.classList.remove('e-input');\n        this.inputObj.container.insertAdjacentElement('afterend', this.element);\n        detach(this.inputObj.container);\n        super.destroy();\n    }\n};\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"width\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"placeholder\", void 0);\n__decorate$1([\n    Property('Never')\n], MaskedTextBox.prototype, \"floatLabelType\", void 0);\n__decorate$1([\n    Property({})\n], MaskedTextBox.prototype, \"htmlAttributes\", void 0);\n__decorate$1([\n    Property(true)\n], MaskedTextBox.prototype, \"enabled\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"readonly\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"showClearButton\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"enablePersistence\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"mask\", void 0);\n__decorate$1([\n    Property('_')\n], MaskedTextBox.prototype, \"promptChar\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"value\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"customCharacters\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"created\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"destroyed\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"focus\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"blur\", void 0);\nMaskedTextBox = __decorate$1([\n    NotifyPropertyChanges\n], MaskedTextBox);\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * Input box Component\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Configures the ticks data of the Slider.\n */\nclass TicksData extends ChildProperty {\n}\n__decorate$2([\n    Property('None')\n], TicksData.prototype, \"placement\", void 0);\n__decorate$2([\n    Property(10)\n], TicksData.prototype, \"largeStep\", void 0);\n__decorate$2([\n    Property(1)\n], TicksData.prototype, \"smallStep\", void 0);\n__decorate$2([\n    Property(false)\n], TicksData.prototype, \"showSmallTicks\", void 0);\n__decorate$2([\n    Property(null)\n], TicksData.prototype, \"format\", void 0);\n/**\n * It illustrates the color track data in slider.\n * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}\n */\nclass ColorRangeData extends ChildProperty {\n}\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"color\", void 0);\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"start\", void 0);\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"end\", void 0);\n/**\n * It illustrates the limit data in slider.\n * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}\n */\nclass LimitData extends ChildProperty {\n}\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"enabled\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"minStart\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"minEnd\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"maxStart\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"maxEnd\", void 0);\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"startHandleFixed\", void 0);\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"endHandleFixed\", void 0);\n/**\n * It illustrates the tooltip data in slider.\n */\nclass TooltipData extends ChildProperty {\n}\n__decorate$2([\n    Property('')\n], TooltipData.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property('Before')\n], TooltipData.prototype, \"placement\", void 0);\n__decorate$2([\n    Property('Focus')\n], TooltipData.prototype, \"showOn\", void 0);\n__decorate$2([\n    Property(false)\n], TooltipData.prototype, \"isVisible\", void 0);\n__decorate$2([\n    Property(null)\n], TooltipData.prototype, \"format\", void 0);\nconst bootstrapTooltipOffset = 6;\nconst bootstrap4TooltipOffset = 3;\nconst classNames = {\n    root: 'e-slider',\n    rtl: 'e-rtl',\n    sliderHiddenInput: 'e-slider-input',\n    controlWrapper: 'e-control-wrapper',\n    sliderHandle: 'e-handle',\n    rangeBar: 'e-range',\n    sliderButton: 'e-slider-button',\n    firstButton: 'e-first-button',\n    secondButton: 'e-second-button',\n    scale: 'e-scale',\n    tick: 'e-tick',\n    large: 'e-large',\n    tickValue: 'e-tick-value',\n    sliderTooltip: 'e-slider-tooltip',\n    sliderHover: 'e-slider-hover',\n    sliderFirstHandle: 'e-handle-first',\n    sliderSecondHandle: 'e-handle-second',\n    sliderDisabled: 'e-disabled',\n    sliderContainer: 'e-slider-container',\n    horizontalTooltipBefore: 'e-slider-horizontal-before',\n    horizontalTooltipAfter: 'e-slider-horizontal-after',\n    verticalTooltipBefore: 'e-slider-vertical-before',\n    verticalTooltipAfter: 'e-slider-vertical-after',\n    materialTooltip: 'e-material-tooltip',\n    materialTooltipOpen: 'e-material-tooltip-open',\n    materialTooltipActive: 'e-tooltip-active',\n    materialSlider: 'e-material-slider',\n    sliderTrack: 'e-slider-track',\n    sliderHorizantalColor: 'e-slider-horizantal-color',\n    sliderVerticalColor: 'e-slider-vertical-color',\n    sliderHandleFocused: 'e-handle-focused',\n    verticalSlider: 'e-vertical',\n    horizontalSlider: 'e-horizontal',\n    sliderHandleStart: 'e-handle-start',\n    sliderTooltipStart: 'e-material-tooltip-start',\n    sliderTabHandle: 'e-tab-handle',\n    sliderButtonIcon: 'e-button-icon',\n    sliderSmallSize: 'e-small-size',\n    sliderTickPosition: 'e-tick-pos',\n    sliderFirstTick: 'e-first-tick',\n    sliderLastTick: 'e-last-tick',\n    sliderButtonClass: 'e-slider-btn',\n    sliderTooltipWrapper: 'e-tooltip-wrap',\n    sliderTabTrack: 'e-tab-track',\n    sliderTabRange: 'e-tab-range',\n    sliderActiveHandle: 'e-handle-active',\n    sliderMaterialHandle: 'e-material-handle',\n    sliderMaterialRange: 'e-material-range',\n    sliderMaterialDefault: 'e-material-default',\n    materialTooltipShow: 'e-material-tooltip-show',\n    materialTooltipHide: 'e-material-tooltip-hide',\n    readonly: 'e-read-only',\n    limits: 'e-limits',\n    limitBarDefault: 'e-limit-bar',\n    limitBarFirst: 'e-limit-first',\n    limitBarSecond: 'e-limit-second',\n    dragHorizontal: 'e-drag-horizontal',\n    dragVertical: 'e-drag-vertical'\n};\n/**\n * The Slider component allows the user to select a value or range\n * of values in-between a min and max range, by dragging the handle over the slider bar.\n * ```html\n * <div id='slider'></div>\n * ```\n * ```typescript\n * <script>\n *   var sliderObj = new Slider({ value: 10 });\n *   sliderObj.appendTo('#slider');\n * </script>\n * ```\n */\nlet Slider = class Slider extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.horDir = 'left';\n        this.verDir = 'bottom';\n        this.transition = {\n            handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' +\n                'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',\n            rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'\n        };\n        this.transitionOnMaterialTooltip = {\n            handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',\n            rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'\n        };\n        this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';\n        this.customAriaText = null;\n        this.drag = true;\n    }\n    preRender() {\n        let localeText = { incrementTitle: 'Increase', decrementTitle: 'Decrease' };\n        this.l10n = new L10n('slider', localeText, this.locale);\n        this.isElementFocused = false;\n        this.tickElementCollection = [];\n        this.tooltipFormatInfo = {};\n        this.ticksFormatInfo = {};\n        this.initCultureInfo();\n        this.initCultureFunc();\n        this.formChecker();\n    }\n    formChecker() {\n        const formElement = closest(this.element, 'form');\n        if (formElement) {\n            this.isForm = true;\n            // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`\n            // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value\n            if (!isNullOrUndefined(this.formResetValue)) {\n                this.setProperties({ 'value': this.formResetValue }, true);\n            }\n            this.formResetValue = this.value;\n            if (this.type === 'Range' &&\n                (isNullOrUndefined(this.formResetValue) || typeof (this.formResetValue) !== 'object')) {\n                this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n            }\n            else if (isNullOrUndefined(this.formResetValue)) {\n                this.formResetValue = parseFloat(formatUnit(this.min));\n            }\n            this.formElement = formElement;\n        }\n        else {\n            this.isForm = false;\n        }\n    }\n    initCultureFunc() {\n        this.internationalization = new Internationalization(this.locale);\n    }\n    initCultureInfo() {\n        this.tooltipFormatInfo.format = (!isNullOrUndefined(this.tooltip.format)) ? this.tooltip.format : null;\n        this.ticksFormatInfo.format = (!isNullOrUndefined(this.ticks.format)) ? this.ticks.format : null;\n    }\n    formatString(value, formatInfo) {\n        let formatValue = null;\n        let formatString = null;\n        if ((value || value === 0)) {\n            formatValue = this.formatNumber(value);\n            let numberOfDecimals = this.numberOfDecimals(value);\n            formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));\n        }\n        return { elementVal: formatValue, formatString: formatString };\n    }\n    ;\n    formatNumber(value) {\n        let numberOfDecimals = this.numberOfDecimals(value);\n        return this.internationalization.getNumberFormat({\n            maximumFractionDigits: numberOfDecimals,\n            minimumFractionDigits: numberOfDecimals, useGrouping: false\n        })(value);\n    }\n    ;\n    numberOfDecimals(value) {\n        let decimalPart = value.toString().split('.')[1];\n        let numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n        return numberOfDecimals;\n    }\n    makeRoundNumber(value, precision) {\n        let decimals = precision || 0;\n        return Number(value.toFixed(decimals));\n    }\n    ;\n    fractionalToInteger(value) {\n        value = (this.numberOfDecimals(value) === 0) ? Number(value).toFixed(this.noOfDecimals) : value;\n        let tens = 1;\n        for (let i = 0; i < this.noOfDecimals; i++) {\n            tens *= 10;\n        }\n        value = Number((value * tens).toFixed(0));\n        return value;\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.initialize();\n        }\n        this.initRender();\n        this.wireEvents();\n        this.setZindex();\n        this.renderComplete();\n    }\n    initialize() {\n        addClass([this.element], classNames.root);\n        this.setCSSClass();\n    }\n    setElementWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.sliderContainer.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.sliderContainer.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' '));\n        }\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n    }\n    setEnabled() {\n        if (!this.enabled) {\n            addClass([this.sliderContainer], [classNames.sliderDisabled]);\n            if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n                this.tooltipElement.classList.add(classNames.sliderDisabled);\n            }\n            this.unwireEvents();\n        }\n        else {\n            removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n            if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n                this.tooltipElement.classList.remove(classNames.sliderDisabled);\n            }\n            this.wireEvents();\n        }\n    }\n    getTheme(container) {\n        let theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n        return theme.replace(/['\"]+/g, '');\n    }\n    /**\n     * Initialize the rendering\n     * @private\n     */\n    initRender() {\n        if (isBlazor() && this.isServerRendered) {\n            this.sliderContainer = this.element.parentElement;\n            this.sliderTrack = this.element.querySelector('.e-slider-track');\n            this.hiddenInput = this.element.parentElement.querySelector('.e-slider-input');\n        }\n        else {\n            this.sliderContainer = this.createElement('div', { className: classNames.sliderContainer + ' ' + classNames.controlWrapper });\n            this.element.parentNode.insertBefore(this.sliderContainer, this.element);\n            this.sliderContainer.appendChild(this.element);\n            this.sliderTrack = this.createElement('div', { className: classNames.sliderTrack });\n            this.element.appendChild(this.sliderTrack);\n        }\n        this.setElementWidth(this.width);\n        this.element.tabIndex = -1;\n        this.getThemeInitialization();\n        this.setHandler();\n        this.createRangeBar();\n        if (this.limits.enabled) {\n            this.createLimitBar();\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            this.setOrientClass();\n            this.hiddenInput = (this.createElement('input', {\n                attrs: {\n                    type: 'hidden', value: (isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString()),\n                    name: this.element.getAttribute('name') || this.element.getAttribute('id') ||\n                        '_' + (Math.random() * 1000).toFixed(0) + 'slider', class: classNames.sliderHiddenInput\n                }\n            }));\n            this.hiddenInput.tabIndex = -1;\n            this.sliderContainer.appendChild(this.hiddenInput);\n        }\n        if (this.showButtons) {\n            this.setButtons();\n        }\n        this.setEnableRTL();\n        if (this.type === 'Range') {\n            this.rangeValueUpdate();\n        }\n        else {\n            this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value;\n        }\n        this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) :\n            [this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))),\n                this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))];\n        this.previousChanged = this.previousVal;\n        if (!isNullOrUndefined(this.element.hasAttribute('name'))) {\n            this.element.removeAttribute('name');\n        }\n        this.setValue();\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n        if (this.ticks.placement !== 'None') {\n            this.renderScale();\n        }\n        if (this.tooltip.isVisible) {\n            this.renderTooltip();\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            if (!this.enabled) {\n                addClass([this.sliderContainer], [classNames.sliderDisabled]);\n            }\n            else {\n                removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n            }\n            if (this.readonly) {\n                addClass([this.sliderContainer], [classNames.readonly]);\n            }\n            else {\n                removeClass([this.sliderContainer], [classNames.readonly]);\n            }\n        }\n    }\n    getThemeInitialization() {\n        this.isMaterial = this.getTheme(this.sliderContainer) === 'material'\n            || this.getTheme(this.sliderContainer) === 'material-dark';\n        this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap'\n            || this.getTheme(this.sliderContainer) === 'bootstrap-dark';\n        this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';\n        this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;\n    }\n    createRangeBar() {\n        if (this.type !== 'Default') {\n            this.rangeBar = (this.createElement('div', { attrs: { class: classNames.rangeBar } }));\n            this.element.appendChild(this.rangeBar);\n            if (this.drag && this.type === 'Range') {\n                if (this.orientation === 'Horizontal') {\n                    this.rangeBar.classList.add(classNames.dragHorizontal);\n                }\n                else {\n                    this.rangeBar.classList.add(classNames.dragVertical);\n                }\n            }\n        }\n    }\n    createLimitBar() {\n        if (isBlazor() && this.isServerRendered) {\n            this.limitBarFirst = this.element.querySelectorAll('.e-limits')[0];\n            if (this.type === 'Range') {\n                this.limitBarSecond = this.element.querySelectorAll('.e-limit-second')[0];\n            }\n        }\n        else {\n            let firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault :\n                classNames.limitBarFirst;\n            firstElementClassName += ' ' + classNames.limits;\n            this.limitBarFirst = (this.createElement('div', {\n                attrs: { class: firstElementClassName }\n            }));\n            this.element.appendChild(this.limitBarFirst);\n            if (this.type === 'Range') {\n                this.limitBarSecond = (this.createElement('div', {\n                    attrs: {\n                        class: classNames.limitBarSecond + ' ' + classNames.limits\n                    }\n                }));\n                this.element.appendChild(this.limitBarSecond);\n            }\n        }\n    }\n    setOrientClass() {\n        if (this.orientation !== 'Vertical') {\n            this.sliderContainer.classList.remove(classNames.verticalSlider);\n            this.sliderContainer.classList.add(classNames.horizontalSlider);\n            this.firstHandle.setAttribute('aria-orientation', 'horizontal');\n            if (this.type === 'Range') {\n                this.secondHandle.setAttribute('aria-orientation', 'horizontal');\n            }\n        }\n        else {\n            this.sliderContainer.classList.remove(classNames.horizontalSlider);\n            this.sliderContainer.classList.add(classNames.verticalSlider);\n            this.firstHandle.setAttribute('aria-orientation', 'vertical');\n            if (this.type === 'Range') {\n                this.secondHandle.setAttribute('aria-orientation', 'vertical');\n            }\n        }\n    }\n    setAriaAttributes(element) {\n        let min = this.min;\n        let max = this.max;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            min = this.customValues[0];\n            max = this.customValues[this.customValues.length - 1];\n        }\n        if (this.type !== 'Range') {\n            attributes(element, {\n                'aria-valuemin': min.toString(), 'aria-valuemax': max.toString()\n            });\n        }\n        else {\n            let range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n                [[min.toString(), (this.customValues[this.value[1]]).toString()],\n                    [(this.customValues[this.value[0]]).toString(), max.toString()]] :\n                [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];\n            range.forEach((range, index) => {\n                let element = index === 0 ? this.firstHandle : this.secondHandle;\n                if (element) {\n                    attributes(element, {\n                        'aria-valuemin': range[0], 'aria-valuemax': range[1]\n                    });\n                }\n            });\n        }\n    }\n    createSecondHandle() {\n        if (isBlazor() && this.isServerRendered) {\n            this.secondHandle = this.element.querySelector('.e-handle-second');\n        }\n        else {\n            this.secondHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle, 'role': 'slider', tabIndex: '0'\n                }\n            });\n            this.secondHandle.classList.add(classNames.sliderSecondHandle);\n            this.element.appendChild(this.secondHandle);\n        }\n    }\n    createFirstHandle() {\n        if (isBlazor() && this.isServerRendered) {\n            this.firstHandle = this.element.querySelector('.e-handle-first');\n        }\n        else {\n            this.firstHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle, 'role': 'slider', tabIndex: '0'\n                }\n            });\n            this.firstHandle.classList.add(classNames.sliderFirstHandle);\n            this.element.appendChild(this.firstHandle);\n        }\n        if (this.isMaterialTooltip) {\n            this.materialHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle + ' ' +\n                        classNames.sliderMaterialHandle\n                }\n            });\n            this.element.appendChild(this.materialHandle);\n        }\n    }\n    wireFirstHandleEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);\n            EventHandler.add(this.firstHandle, 'transitionend', this.transitionEnd, this);\n            EventHandler.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);\n            EventHandler.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);\n        }\n        else {\n            EventHandler.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);\n            EventHandler.remove(this.firstHandle, 'transitionend', this.transitionEnd);\n            EventHandler.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);\n            EventHandler.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);\n        }\n    }\n    wireSecondHandleEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);\n            EventHandler.add(this.secondHandle, 'transitionend', this.transitionEnd, this);\n            EventHandler.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);\n            EventHandler.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);\n        }\n        else {\n            EventHandler.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);\n            EventHandler.remove(this.secondHandle, 'transitionend', this.transitionEnd);\n            EventHandler.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);\n            EventHandler.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);\n        }\n    }\n    handleStart() {\n        if (this.type !== 'Range') {\n            this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n            if (this.isMaterialTooltip) {\n                this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n                if (this.tooltipElement) {\n                    this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);\n                }\n            }\n        }\n    }\n    transitionEnd(e) {\n        if (e.propertyName !== 'transform') {\n            this.handleStart();\n            this.getHandle().style.transition = 'none';\n            if (this.type !== 'Default') {\n                this.rangeBar.style.transition = 'none';\n            }\n            if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {\n                this.tooltipElement.style.transition = this.transition.handle;\n            }\n            this.tooltipToggle(this.getHandle());\n            this.closeTooltip();\n        }\n    }\n    handleFocusOut() {\n        if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {\n            this.firstHandle.classList.remove(classNames.sliderHandleFocused);\n        }\n        if (this.type === 'Range') {\n            if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {\n                this.secondHandle.classList.remove(classNames.sliderHandleFocused);\n            }\n        }\n    }\n    handleFocus(e) {\n        this.focusSliderElement();\n        this.sliderBarClick(e);\n        if (e.currentTarget === this.firstHandle) {\n            this.firstHandle.classList.add(classNames.sliderHandleFocused);\n        }\n        else {\n            this.secondHandle.classList.add(classNames.sliderHandleFocused);\n        }\n        EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n    }\n    handleOver(e) {\n        if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {\n            this.tooltipToggle(e.currentTarget);\n        }\n    }\n    handleLeave(e) {\n        if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' &&\n            !e.currentTarget.classList.contains(classNames.sliderHandleFocused) &&\n            !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {\n            this.closeTooltip();\n        }\n    }\n    setHandler() {\n        if (this.min > this.max) {\n            this.min = this.max;\n        }\n        this.createFirstHandle();\n        if (this.type === 'Range') {\n            this.createSecondHandle();\n        }\n    }\n    setEnableRTL() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.enableRtl && this.orientation !== 'Vertical' ? addClass([this.sliderContainer], classNames.rtl) :\n                removeClass([this.sliderContainer], classNames.rtl);\n            let preDir = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;\n            if (this.enableRtl) {\n                this.horDir = 'right';\n                this.verDir = 'bottom';\n            }\n            else {\n                this.horDir = 'left';\n                this.verDir = 'bottom';\n            }\n            let currDir = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;\n            if (preDir !== currDir) {\n                if (this.orientation === 'Horizontal') {\n                    setStyleAttribute(this.firstHandle, { 'right': '', 'left': 'auto' });\n                    if (this.type === 'Range') {\n                        setStyleAttribute(this.secondHandle, { 'top': '', 'left': 'auto' });\n                    }\n                }\n            }\n        }\n        this.setBarColor();\n    }\n    tooltipValue() {\n        let text;\n        let args = {\n            value: this.value,\n            text: ''\n        };\n        if (isBlazor() && this.isServerRendered) {\n            args.text = this.formatContent(this.tooltipFormatInfo, false);\n        }\n        else {\n            this.setTooltipContent();\n            args.text = text = this.tooltipObj.content;\n        }\n        this.trigger('tooltipChange', args, (observedArgs) => {\n            this.addTooltipClass(observedArgs.text);\n            if (text !== observedArgs.text) {\n                this.customAriaText = observedArgs.text;\n                this.tooltipObj.content = observedArgs.text;\n                this.setAriaAttrValue(this.firstHandle);\n                if (this.type === 'Range') {\n                    this.setAriaAttrValue(this.secondHandle);\n                }\n            }\n        });\n    }\n    setTooltipContent() {\n        let content;\n        content = this.formatContent(this.tooltipFormatInfo, false);\n        this.tooltipObj.content = content;\n    }\n    formatContent(formatInfo, ariaContent) {\n        let content = '';\n        let handle1 = this.handleVal1;\n        let handle2 = this.handleVal2;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            handle1 = this.customValues[this.handleVal1];\n            handle2 = this.customValues[this.handleVal2];\n        }\n        if (!ariaContent) {\n            if (this.type === 'Range') {\n                if (this.enableRtl && this.orientation !== 'Vertical') {\n                    content = (!isNullOrUndefined(formatInfo.format)) ? (this.formatString(handle2, formatInfo)\n                        .formatString + ' - ' + this.formatString(handle1, formatInfo).formatString) :\n                        (handle2.toString() + ' - ' + handle1.toString());\n                }\n                else {\n                    content = (!isNullOrUndefined(formatInfo.format)) ? (this.formatString(handle1, formatInfo)\n                        .formatString + ' - ' + this.formatString(handle2, formatInfo).formatString) :\n                        (handle1.toString() + ' - ' + handle2.toString());\n                }\n            }\n            else {\n                if (!isNullOrUndefined(handle1)) {\n                    content = (!isNullOrUndefined(formatInfo.format)) ?\n                        this.formatString(handle1, formatInfo).formatString : handle1.toString();\n                }\n            }\n            return content;\n        }\n        else {\n            if (this.type === 'Range') {\n                if (this.enableRtl && this.orientation !== 'Vertical') {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        (this.formatString(handle2, formatInfo).elementVal + ' - ' +\n                            this.formatString(handle1, formatInfo).elementVal) :\n                        (handle2.toString() + ' - ' + handle1.toString());\n                }\n                else {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        (this.formatString(handle1, formatInfo).elementVal + ' - ' +\n                            this.formatString(handle2, formatInfo).elementVal) :\n                        (handle1.toString() + ' - ' + handle2.toString());\n                }\n            }\n            else {\n                if (!isNullOrUndefined(handle1)) {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        this.formatString(handle1, formatInfo).elementVal : handle1.toString();\n                }\n            }\n            return content;\n        }\n    }\n    addTooltipClass(content) {\n        if (this.isMaterialTooltip) {\n            let count = content.toString().length;\n            if (!this.tooltipElement) {\n                let cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;\n                this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;\n            }\n            else {\n                let cssClass = count > 4 ?\n                    { oldCss: classNames.sliderMaterialDefault, newCss: classNames.sliderMaterialRange } :\n                    { oldCss: classNames.sliderMaterialRange, newCss: classNames.sliderMaterialDefault };\n                this.tooltipElement.classList.remove(cssClass.oldCss);\n                if (!this.tooltipElement.classList.contains(cssClass.newCss)) {\n                    this.tooltipElement.classList.add(cssClass.newCss);\n                    this.tooltipElement.style.transform = count > 4 ? 'scale(1)' :\n                        this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n                }\n            }\n        }\n    }\n    tooltipPlacement() {\n        return this.orientation === 'Horizontal' ? (this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter') :\n            (this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter');\n    }\n    tooltipBeforeOpen(args) {\n        this.tooltipElement = args.element;\n        if (this.tooltip.cssClass) {\n            addClass([this.tooltipElement], this.tooltip.cssClass.split(' ').filter((css) => css));\n        }\n        args.target.removeAttribute('aria-describedby');\n        if (this.isMaterialTooltip) {\n            this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);\n            this.handleStart();\n            this.setTooltipTransform();\n        }\n    }\n    tooltipCollision(position) {\n        if (this.isBootstrap || this.isBootstrap4 || (this.isMaterial && !this.isMaterialTooltip)) {\n            const tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;\n            switch (position) {\n                case 'TopCenter':\n                    this.tooltipObj.setProperties({ 'offsetY': -(tooltipOffsetValue) }, false);\n                    break;\n                case 'BottomCenter':\n                    this.tooltipObj.setProperties({ 'offsetY': tooltipOffsetValue }, false);\n                    break;\n                case 'LeftCenter':\n                    this.tooltipObj.setProperties({ 'offsetX': -(tooltipOffsetValue) }, false);\n                    break;\n                case 'RightCenter':\n                    this.tooltipObj.setProperties({ 'offsetX': tooltipOffsetValue }, false);\n                    break;\n            }\n        }\n    }\n    materialTooltipEventCallBack(event) {\n        this.sliderBarClick(event);\n        EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n    }\n    wireMaterialTooltipEvent(destroy) {\n        if (this.isMaterialTooltip) {\n            if (!destroy) {\n                EventHandler.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);\n            }\n            else {\n                EventHandler.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);\n            }\n        }\n    }\n    tooltipPositionCalculation(position) {\n        let cssClass;\n        switch (position) {\n            case 'TopCenter':\n                cssClass = classNames.horizontalTooltipBefore;\n                break;\n            case 'BottomCenter':\n                cssClass = classNames.horizontalTooltipAfter;\n                break;\n            case 'LeftCenter':\n                cssClass = classNames.verticalTooltipBefore;\n                break;\n            case 'RightCenter':\n                cssClass = classNames.verticalTooltipAfter;\n                break;\n        }\n        return cssClass;\n    }\n    getTooltipTransformProperties(className) {\n        let transformProperties;\n        if (this.tooltipElement) {\n            let position = this.orientation === 'Horizontal' ?\n                ((this.tooltipElement.clientHeight + 14) - (this.tooltipElement.clientHeight / 2)) :\n                ((this.tooltipElement.clientWidth + 14) - (this.tooltipElement.clientWidth / 2));\n            transformProperties = this.orientation === 'Horizontal' ?\n                (className === classNames.horizontalTooltipBefore ? { rotate: 'rotate(45deg)', translate: `translateY(${position}px)` } :\n                    { rotate: 'rotate(225deg)', translate: `translateY(${-(position)}px)` }) :\n                (className === classNames.verticalTooltipBefore ? { rotate: 'rotate(-45deg)', translate: `translateX(${position}px)` } :\n                    { rotate: 'rotate(-225deg)', translate: `translateX(${(-position)}px)` });\n        }\n        return transformProperties;\n    }\n    openMaterialTooltip() {\n        if (this.isMaterialTooltip) {\n            this.refreshTooltip(this.firstHandle);\n            let tooltipContentElement = this.tooltipElement.firstElementChild;\n            tooltipContentElement.classList.remove(classNames.materialTooltipHide);\n            tooltipContentElement.classList.add(classNames.materialTooltipShow);\n            this.firstHandle.style.cursor = 'default';\n            this.tooltipElement.style.transition = this.scaleTransform;\n            this.tooltipElement.classList.add(classNames.materialTooltipOpen);\n            this.materialHandle.style.transform = 'scale(0)';\n            if (tooltipContentElement.innerText.length > 4) {\n                this.tooltipElement.style.transform = 'scale(1)';\n            }\n            else {\n                this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n            }\n            if (this.type === 'Default') {\n                setTimeout(() => { this.tooltipElement.style.transition = this.transition.handle; }, 2500);\n            }\n            else {\n                setTimeout(() => { this.tooltipElement.style.transition = 'none'; }, 2500);\n            }\n        }\n    }\n    closeMaterialTooltip() {\n        if (this.isMaterialTooltip) {\n            let tooltipContentElement = this.tooltipElement.firstElementChild;\n            this.tooltipElement.style.transition = this.scaleTransform;\n            tooltipContentElement.classList.remove(classNames.materialTooltipShow);\n            tooltipContentElement.classList.add(classNames.materialTooltipHide);\n            this.firstHandle.style.cursor = '-webkit-grab';\n            this.firstHandle.style.cursor = 'grab';\n            if (this.materialHandle) {\n                this.materialHandle.style.transform = 'scale(1)';\n            }\n            this.tooltipElement.classList.remove(classNames.materialTooltipOpen);\n            this.setTooltipTransform();\n            this.tooltipTarget = undefined;\n            setTimeout(() => { this.tooltipElement.style.transition = 'none'; }, 2500);\n        }\n    }\n    checkTooltipPosition(args) {\n        if (this.tooltipCollidedPosition === undefined ||\n            this.tooltipCollidedPosition !== args.collidedPosition) {\n            if (this.isMaterialTooltip) {\n                let tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);\n                if (tooltipClass !== undefined) {\n                    args.element.classList.remove(this.previousTooltipClass);\n                    args.element.classList.add(tooltipClass);\n                    this.previousTooltipClass = tooltipClass;\n                }\n                if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) &&\n                    args.element.firstElementChild.innerText.length <= 4) {\n                    args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n                }\n            }\n            this.tooltipCollidedPosition = args.collidedPosition;\n        }\n        if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {\n            this.setTooltipTransform();\n        }\n    }\n    setTooltipTransform() {\n        let transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);\n        if (this.tooltipElement.firstElementChild.innerText.length > 4) {\n            this.tooltipElement.style.transform = `${transformProperties.translate} scale(0.01)`;\n        }\n        else {\n            this.tooltipElement.style.transform = `${transformProperties.translate} ${transformProperties.rotate} scale(0.01)`;\n        }\n    }\n    renderTooltip() {\n        this.tooltipObj = new Tooltip({\n            showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4,\n            cssClass: classNames.sliderTooltip,\n            height: this.isMaterial ? 30 : 'auto',\n            animation: { open: { effect: 'None' }, close: { effect: 'FadeOut', duration: 500 } },\n            opensOn: 'Custom',\n            beforeOpen: this.tooltipBeforeOpen.bind(this),\n            beforeCollision: this.checkTooltipPosition.bind(this),\n            beforeClose: this.tooltipBeforeClose.bind(this),\n            enableHtmlSanitizer: this.enableHtmlSanitizer\n        });\n        this.tooltipObj.appendTo(this.firstHandle);\n        this.initializeTooltipProps();\n    }\n    initializeTooltipProps() {\n        let tooltipShowOn = this.isMaterialTooltip ? 'Always' : (this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn);\n        this.setProperties({ tooltip: { showOn: tooltipShowOn } }, true);\n        this.tooltipObj.position = this.tooltipPlacement();\n        this.tooltipCollision(this.tooltipObj.position);\n        [this.firstHandle, this.rangeBar, this.secondHandle].forEach((handle) => {\n            if (!isNullOrUndefined(handle)) {\n                handle.style.transition = 'none';\n            }\n        });\n        if (this.isMaterialTooltip) {\n            this.sliderContainer.classList.add(classNames.materialSlider);\n            if (!isBlazor()) {\n                this.tooltipValue();\n            }\n            this.tooltipObj.animation.close.effect = 'None';\n            this.tooltipObj.open(this.firstHandle);\n        }\n    }\n    tooltipBeforeClose() {\n        this.tooltipElement = undefined;\n        this.tooltipCollidedPosition = undefined;\n    }\n    setButtons() {\n        if (isBlazor() && this.isServerRendered) {\n            this.firstBtn = this.element.parentElement.querySelector('.e-slider-button.e-first-button');\n            this.secondBtn = this.element.parentElement.querySelector('.e-slider-button.e-second-button');\n        }\n        else {\n            this.firstBtn = this.createElement('div', { className: classNames.sliderButton + ' ' + classNames.firstButton });\n            this.firstBtn.appendChild(this.createElement('span', { className: classNames.sliderButtonIcon }));\n            this.firstBtn.tabIndex = -1;\n            this.secondBtn = this.createElement('div', { className: classNames.sliderButton + ' ' + classNames.secondButton });\n            this.secondBtn.appendChild(this.createElement('span', { className: classNames.sliderButtonIcon }));\n            this.secondBtn.tabIndex = -1;\n            this.sliderContainer.classList.add(classNames.sliderButtonClass);\n            this.sliderContainer.appendChild(this.firstBtn);\n            this.sliderContainer.appendChild(this.secondBtn);\n            this.sliderContainer.appendChild(this.element);\n            this.buttonTitle();\n        }\n    }\n    buttonTitle() {\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        this.l10n.setLocale(this.locale);\n        let decrementTitle = this.l10n.getConstant('decrementTitle');\n        let incrementTitle = this.l10n.getConstant('incrementTitle');\n        attributes(enabledRTL ? this.secondBtn : this.firstBtn, { 'aria-label': decrementTitle, title: decrementTitle });\n        attributes(enabledRTL ? this.firstBtn : this.secondBtn, { 'aria-label': incrementTitle, title: incrementTitle });\n    }\n    buttonFocusOut() {\n        if (this.isMaterial) {\n            this.getHandle().classList.remove('e-large-thumb-size');\n        }\n    }\n    repeatButton(args) {\n        let hVal = this.handleValueUpdate();\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        let value;\n        if (args.target.parentElement.classList.contains(classNames.firstButton)\n            || args.target.classList.contains(classNames.firstButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), false));\n        }\n        else if (args.target.parentElement.classList.contains(classNames.secondButton)\n            || (args.target.classList.contains(classNames.secondButton))) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), true));\n        }\n        if (this.limits.enabled) {\n            value = this.getLimitCorrectedValues(value);\n        }\n        if (value >= this.min && value <= this.max) {\n            this.changeHandleValue(value);\n            this.tooltipToggle(this.getHandle());\n        }\n    }\n    repeatHandlerMouse(args) {\n        args.preventDefault();\n        if (args.type === ('mousedown') || args.type === ('touchstart')) {\n            this.buttonClick(args);\n            this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);\n        }\n    }\n    materialChange() {\n        if (!this.getHandle().classList.contains('e-large-thumb-size')) {\n            this.getHandle().classList.add('e-large-thumb-size');\n        }\n    }\n    repeatHandlerUp(e) {\n        this.changeEvent('changed', e);\n        this.closeTooltip();\n        clearInterval(this.repeatInterval);\n        this.getHandle().focus();\n    }\n    customTickCounter(bigNum) {\n        let tickCount = 4;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            if (bigNum > 4) {\n                tickCount = 3;\n            }\n            if (bigNum > 7) {\n                tickCount = 2;\n            }\n            if (bigNum > 14) {\n                tickCount = 1;\n            }\n            if (bigNum > 28) {\n                tickCount = 0;\n            }\n        }\n        return tickCount;\n    }\n    // tslint:disable-next-line:max-func-body-length\n    renderScale() {\n        let liElementPosition = 0;\n        let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n        this.noOfDecimals = this.numberOfDecimals(this.step);\n        if (isBlazor() && this.isServerRendered) {\n            this.ul = this.element.querySelector('ul');\n        }\n        else {\n            this.ul = this.createElement('ul', {\n                className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n                attrs: { role: 'presentation', tabIndex: '-1', 'aria-hidden': 'true' }\n            });\n        }\n        this.ul.style.zIndex = '-1';\n        if (Browser.isAndroid && orien === 'h') {\n            this.ul.classList.add(classNames.sliderTickPosition);\n        }\n        let smallStep = this.ticks.smallStep;\n        if (!this.ticks.showSmallTicks) {\n            this.ticks.largeStep > 0 ? (smallStep = this.ticks.largeStep) :\n                (smallStep = (parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min))));\n        }\n        else if (smallStep <= 0) {\n            smallStep = parseFloat(formatUnit(this.step));\n        }\n        let min = this.fractionalToInteger(this.min);\n        let max = this.fractionalToInteger(this.max);\n        let steps = this.fractionalToInteger(smallStep);\n        let bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;\n        let customStep = this.customTickCounter(bigNum);\n        let count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n            (bigNum * customStep) + bigNum : Math.abs((max - min) / steps);\n        if (!isBlazor() || !this.isServerRendered) {\n            this.element.appendChild(this.ul);\n        }\n        let li;\n        let start = parseFloat(this.min.toString());\n        if (orien === 'v') {\n            start = parseFloat(this.max.toString());\n        }\n        let left = 0;\n        let islargeTick;\n        let tickWidth = 100 / count;\n        if (tickWidth === Infinity) {\n            tickWidth = 5;\n        }\n        for (let i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n            this.customValues.length - 1 : 0, k = 0; i <= count; i++) {\n            li = (this.createElement('li', {\n                attrs: {\n                    class: classNames.tick, role: 'presentation', tabIndex: '-1',\n                    'aria-hidden': 'true'\n                }\n            }));\n            if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n                islargeTick = i % (customStep + 1) === 0;\n                if (islargeTick) {\n                    if (orien === 'h') {\n                        start = this.customValues[k];\n                        k++;\n                    }\n                    else {\n                        start = this.customValues[y];\n                        y--;\n                    }\n                    li.setAttribute('title', start.toString());\n                }\n            }\n            else {\n                li.setAttribute('title', start.toString());\n                if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 &&\n                    this.numberOfDecimals(this.step) === 0) {\n                    if (orien === 'h') {\n                        islargeTick = ((start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0) ? true : false;\n                    }\n                    else {\n                        islargeTick = (Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0) ? true : false;\n                    }\n                }\n                else {\n                    let largestep = this.fractionalToInteger(this.ticks.largeStep);\n                    let startValue = this.fractionalToInteger(start);\n                    if (orien === 'h') {\n                        islargeTick = ((startValue - min) % largestep === 0) ? true : false;\n                    }\n                    else {\n                        islargeTick = (Math.abs(startValue - parseFloat(max.toString())) % largestep === 0) ? true : false;\n                    }\n                }\n            }\n            if (islargeTick) {\n                li.classList.add(classNames.large);\n            }\n            (orien === 'h') ? (li.style.width = tickWidth + '%') : (li.style.height = tickWidth + '%');\n            let repeat = islargeTick ? (this.ticks.placement === 'Both' ? 2 : 1) : 0;\n            if (islargeTick) {\n                for (let j = 0; j < repeat; j++) {\n                    this.createTick(li, start, tickWidth);\n                }\n                if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n                    this.updateTicksValues(start, this.ul.children[liElementPosition]);\n                    liElementPosition++;\n                }\n            }\n            else if (isNullOrUndefined(this.customValues)) {\n                this.formatTicksValue(li, start);\n                if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n                    this.updateTicksValues(start, this.ul.children[liElementPosition]);\n                    liElementPosition++;\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered) {\n                this.ul.appendChild(li);\n            }\n            this.tickElementCollection.push(li);\n            let decimalPoints;\n            if (isNullOrUndefined(this.customValues)) {\n                if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {\n                    decimalPoints = this.numberOfDecimals(smallStep);\n                }\n                else {\n                    decimalPoints = this.numberOfDecimals(start);\n                }\n                if (orien === 'h') {\n                    start = this.makeRoundNumber(start + smallStep, decimalPoints);\n                }\n                else {\n                    start = this.makeRoundNumber(start - smallStep, decimalPoints);\n                }\n                left = this.makeRoundNumber(left + smallStep, decimalPoints);\n            }\n        }\n        this.ticksAlignment(orien, tickWidth);\n    }\n    updateTicksValues(start, liElement) {\n        if (liElement.childElementCount > 0) {\n            for (let i = 0; i < liElement.childElementCount; i++) {\n                this.blazortTicksValue(liElement, start, liElement.children[i]);\n            }\n        }\n        else {\n            this.blazortTicksValue(liElement, start, null);\n        }\n    }\n    blazortTicksValue(li, start, span) {\n        const tickText = this.formatNumber(start);\n        const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ?\n            this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n        let eventArgs = { value: start, text: text, tickElement: li };\n        this.trigger('renderingTicks', eventArgs, (observedArgs) => {\n            li.setAttribute('title', observedArgs.text.toString());\n            if (span) {\n                if (this.enableHtmlSanitizer) {\n                    span.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n                }\n                else {\n                    span.innerHTML = observedArgs.text.toString();\n                }\n            }\n        });\n    }\n    ticksAlignment(orien, tickWidth, triggerEvent = true) {\n        this.firstChild = this.ul.firstElementChild;\n        this.lastChild = this.ul.lastElementChild;\n        this.firstChild.classList.add(classNames.sliderFirstTick);\n        this.lastChild.classList.add(classNames.sliderLastTick);\n        this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());\n        if (orien === 'h') {\n            this.firstChild.style.width = tickWidth / 2 + '%';\n            this.lastChild.style.width = tickWidth / 2 + '%';\n        }\n        else {\n            this.firstChild.style.height = tickWidth / 2 + '%';\n            this.lastChild.style.height = tickWidth / 2 + '%';\n        }\n        let eventArgs = { ticksWrapper: this.ul, tickElements: this.tickElementCollection };\n        if (triggerEvent) {\n            this.trigger('renderedTicks', eventArgs);\n        }\n        this.scaleAlignment();\n    }\n    createTick(li, start, tickWidth) {\n        let span = this.createElement('span', {\n            className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n            attrs: { role: 'presentation', tabIndex: '-1', 'aria-hidden': 'true' }\n        });\n        li.appendChild(span);\n        if (isNullOrUndefined(this.customValues)) {\n            this.formatTicksValue(li, start, span, tickWidth);\n        }\n        else {\n            if (this.enableHtmlSanitizer) {\n                span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());\n            }\n            else {\n                span.innerHTML = start.toString();\n            }\n        }\n    }\n    formatTicksValue(li, start, spanElement, tickWidth) {\n        const tickText = this.formatNumber(start);\n        const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ?\n            this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n        const eventArgs = { value: start, text: text, tickElement: li };\n        this.trigger('renderingTicks', eventArgs, (observedArgs) => {\n            li.setAttribute('title', observedArgs.text.toString());\n            if (spanElement) {\n                if (this.enableHtmlSanitizer) {\n                    spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n                }\n                else {\n                    spanElement.innerHTML = observedArgs.text.toString();\n                }\n            }\n            if (!isNullOrUndefined(this.renderingTicks) && isBlazor()) {\n                const orien = this.orientation === 'Horizontal' ? 'h' : 'v';\n                this.ticksAlignment(orien, tickWidth, false);\n            }\n        });\n    }\n    scaleAlignment() {\n        this.tickValuePosition();\n        let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n        if (this.orientation === 'Vertical') {\n            (this.element.getBoundingClientRect().width <= 15) ?\n                this.sliderContainer.classList.add(classNames.sliderSmallSize) :\n                this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n        }\n        else {\n            (this.element.getBoundingClientRect().height <= 15) ?\n                this.sliderContainer.classList.add(classNames.sliderSmallSize) :\n                this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n        }\n    }\n    tickValuePosition() {\n        this.firstChild = this.element.querySelector('ul').children[0];\n        let first = this.firstChild.getBoundingClientRect();\n        let firstChild;\n        let otherChild;\n        let smallStep = this.ticks.smallStep;\n        let count = Math.abs((parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min)))) / smallStep;\n        if (this.firstChild.children.length > 0) {\n            firstChild = this.firstChild.children[0].getBoundingClientRect();\n        }\n        let tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' +\n                classNames.large + ' .' + classNames.tickValue)];\n        let other;\n        if (this.ticks.placement === 'Both') {\n            other = [].slice.call(tickElements[0], 2);\n        }\n        else {\n            other = [].slice.call(tickElements[0], 1);\n        }\n        let tickWidth = this.orientation === 'Vertical' ?\n            (first.height * 2) : (first.width * 2);\n        for (let i = 0; i < this.firstChild.children.length; i++) {\n            if (this.orientation === 'Vertical') {\n                if (!isBlazor() || !this.isServerRendered) {\n                    this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';\n                }\n            }\n            else {\n                if (!this.enableRtl) {\n                    this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';\n                }\n                else {\n                    this.firstChild.children[i].style.left = (tickWidth -\n                        this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';\n                }\n            }\n        }\n        for (let i = 0; i < other.length; i++) {\n            otherChild = other[i].getBoundingClientRect();\n            if (this.orientation === 'Vertical') {\n                if (!isBlazor() || !this.isServerRendered) {\n                    setStyleAttribute(other[i], { top: (tickWidth - otherChild.height) / 2 + 'px' });\n                }\n            }\n            else {\n                setStyleAttribute(other[i], { left: (tickWidth - otherChild.width) / 2 + 'px' });\n            }\n        }\n        if (this.enableRtl && this.lastChild.children.length && count !== 0) {\n            this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n            if (this.ticks.placement === 'Both') {\n                if (!isBlazor()) {\n                    this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n                }\n            }\n        }\n        if (count === 0) {\n            if (this.orientation === 'Horizontal') {\n                if (!this.enableRtl) {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                    if (!isBlazor()) {\n                        this.firstChild.style.left = this.firstHandle.style.left;\n                    }\n                }\n                else {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                    this.firstChild.style.right = this.firstHandle.style.right;\n                    if (!isBlazor()) {\n                        this.firstChild.children[0].style.left =\n                            (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';\n                        if (this.ticks.placement === 'Both') {\n                            this.firstChild.children[1].style.left =\n                                (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';\n                        }\n                    }\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered) {\n                if (this.orientation === 'Vertical') {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                }\n            }\n        }\n        if (isBlazor() && this.isServerRendered) {\n            let args;\n            if (this.firstChild != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = { firstTickPostion: this.firstChild.children[0].style.left };\n                }\n                else {\n                    args = { firstTickPostion: -(firstChild.height / 2) + 'px' };\n                }\n            }\n            if (other[0] != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = { otherTicksPosition: other[0].style.left };\n                }\n                else {\n                    args = { otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px' };\n                }\n            }\n            if (this.firstChild != null && other[0] != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = {\n                        firstTickPostion: this.firstChild.children[0].style.left,\n                        otherTicksPosition: other[0].style.left\n                    };\n                }\n                else {\n                    args = {\n                        firstTickPostion: -(firstChild.height / 2) + 'px',\n                        otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'\n                    };\n                }\n            }\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('SliderTicksData', args);\n            // tslint:enable\n        }\n    }\n    setAriaAttrValue(element) {\n        let ariaValueText;\n        let isTickFormatted = ((!isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format))) ? true : false;\n        let text = !isTickFormatted ?\n            this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);\n        let valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) :\n            this.formatContent(this.tooltipFormatInfo, true);\n        text = (!this.customAriaText) ? (text) : (this.customAriaText);\n        if (text.split(' - ').length === 2) {\n            ariaValueText = text.split(' - ');\n        }\n        else {\n            ariaValueText = [text, text];\n        }\n        this.setAriaAttributes(element);\n        if (this.type !== 'Range') {\n            attributes(element, { 'aria-valuenow': valuenow, 'aria-valuetext': text });\n        }\n        else {\n            (!this.enableRtl) ? ((element === this.firstHandle) ?\n                attributes(element, { 'aria-valuenow': valuenow.split(' - ')[0], 'aria-valuetext': ariaValueText[0] }) :\n                attributes(element, { 'aria-valuenow': valuenow.split(' - ')[1], 'aria-valuetext': ariaValueText[1] })) :\n                ((element === this.firstHandle) ?\n                    attributes(element, { 'aria-valuenow': valuenow.split(' - ')[1], 'aria-valuetext': ariaValueText[1] }) :\n                    attributes(element, { 'aria-valuenow': valuenow.split(' - ')[0], 'aria-valuetext': ariaValueText[0] }));\n        }\n    }\n    handleValueUpdate() {\n        let hVal;\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                hVal = this.handleVal1;\n            }\n            else {\n                hVal = this.handleVal2;\n            }\n        }\n        else {\n            hVal = this.handleVal1;\n        }\n        return hVal;\n    }\n    getLimitCorrectedValues(value) {\n        if (this.type === 'MinRange' || this.type === 'Default') {\n            value = (this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd))[0];\n        }\n        else {\n            if (this.activeHandle === 1) {\n                value = (this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd))[0];\n            }\n            else {\n                value = (this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd))[0];\n            }\n        }\n        return value;\n    }\n    focusSliderElement() {\n        if (!this.isElementFocused) {\n            this.element.focus();\n            this.isElementFocused = true;\n        }\n    }\n    buttonClick(args) {\n        this.focusSliderElement();\n        let value;\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        let hVal = this.handleValueUpdate();\n        if ((args.keyCode === 40) || (args.keyCode === 37)\n            || args.currentTarget.classList.contains(classNames.firstButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), false));\n        }\n        else if ((args.keyCode === 38) || (args.keyCode === 39) ||\n            args.currentTarget.classList.contains(classNames.secondButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), true));\n        }\n        else if ((args.keyCode === 33\n            || args.currentTarget.classList.contains(classNames.firstButton))) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true));\n        }\n        else if ((args.keyCode === 34) ||\n            args.currentTarget.classList.contains(classNames.secondButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false));\n        }\n        else if ((args.keyCode === 36)) {\n            value = parseFloat(this.min.toString());\n        }\n        else if ((args.keyCode === 35)) {\n            value = parseFloat(this.max.toString());\n        }\n        if (this.limits.enabled) {\n            value = this.getLimitCorrectedValues(value);\n        }\n        this.changeHandleValue(value);\n        if (this.isMaterial && !this.tooltip.isVisible &&\n            !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n            this.materialChange();\n        }\n        this.tooltipToggle(this.getHandle());\n        this.getHandle().focus();\n        if (args.currentTarget.classList.contains(classNames.firstButton)) {\n            EventHandler.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);\n        }\n        if (args.currentTarget.classList.contains(classNames.secondButton)) {\n            EventHandler.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);\n        }\n    }\n    tooltipToggle(target) {\n        if (this.isMaterialTooltip) {\n            !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ?\n                this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);\n        }\n        else {\n            !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);\n        }\n    }\n    buttonUp(args) {\n        if (args.currentTarget.classList.contains(classNames.firstButton)) {\n            EventHandler.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);\n        }\n        if (args.currentTarget.classList.contains(classNames.secondButton)) {\n            EventHandler.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);\n        }\n    }\n    setRangeBar() {\n        if (this.orientation === 'Horizontal') {\n            if (this.type === 'MinRange') {\n                this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');\n                setStyleAttribute(this.rangeBar, { 'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else {\n                this.enableRtl ? (this.rangeBar.style.right =\n                    this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');\n                setStyleAttribute(this.rangeBar, { 'width': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        else {\n            if (this.type === 'MinRange') {\n                this.rangeBar.style.bottom = '0px';\n                setStyleAttribute(this.rangeBar, { 'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else {\n                this.rangeBar.style.bottom = this.handlePos1 + 'px';\n                setStyleAttribute(this.rangeBar, { 'height': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n    }\n    checkValidValueAndPos(value) {\n        value = this.checkHandleValue(value);\n        value = this.checkHandlePosition(value);\n        return value;\n    }\n    setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {\n        if (this.orientation === 'Horizontal') {\n            if (!this.enableRtl) {\n                this.limitBarFirst.style.left = fromMinPostion + 'px';\n                this.limitBarFirst.style.width = (fromMaxpostion - fromMinPostion) + 'px';\n            }\n            else {\n                this.limitBarFirst.style.right = fromMinPostion + 'px';\n                this.limitBarFirst.style.width = (fromMaxpostion - fromMinPostion) + 'px';\n            }\n        }\n        else {\n            this.limitBarFirst.style.bottom = fromMinPostion + 'px';\n            this.limitBarFirst.style.height = (fromMaxpostion - fromMinPostion) + 'px';\n        }\n        if (this.type === 'Range') {\n            if (this.orientation === 'Horizontal') {\n                if (!this.enableRtl) {\n                    this.limitBarSecond.style.left = toMinPostion + 'px';\n                    this.limitBarSecond.style.width = (toMaxpostion - toMinPostion) + 'px';\n                }\n                else {\n                    this.limitBarSecond.style.right = toMinPostion + 'px';\n                    this.limitBarSecond.style.width = (toMaxpostion - toMinPostion) + 'px';\n                }\n            }\n            else {\n                this.limitBarSecond.style.bottom = toMinPostion + 'px';\n                this.limitBarSecond.style.height = (toMaxpostion - toMinPostion) + 'px';\n            }\n        }\n    }\n    setLimitBar() {\n        if (this.type === 'Default' || this.type === 'MinRange') {\n            let fromPosition = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromPosition = this.checkValidValueAndPos(fromPosition);\n            let toPosition = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];\n            toPosition = this.checkValidValueAndPos(toPosition);\n            this.setLimitBarPositions(fromPosition, toPosition);\n        }\n        else if (this.type === 'Range') {\n            let fromMinPostion = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromMinPostion = this.checkValidValueAndPos(fromMinPostion);\n            let fromMaxpostion = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);\n            let toMinPostion = (this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true))[0];\n            toMinPostion = this.checkValidValueAndPos(toMinPostion);\n            let toMaxpostion = (this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true))[0];\n            toMaxpostion = this.checkValidValueAndPos(toMaxpostion);\n            this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);\n        }\n    }\n    getLimitValueAndPosition(currentValue, minValue, maxValue, limitBar) {\n        if (isNullOrUndefined(minValue)) {\n            minValue = this.min;\n            if (isNullOrUndefined(currentValue) && limitBar) {\n                currentValue = minValue;\n            }\n        }\n        if (isNullOrUndefined(maxValue)) {\n            maxValue = this.max;\n            if (isNullOrUndefined(currentValue) && limitBar) {\n                currentValue = maxValue;\n            }\n        }\n        if (currentValue < minValue) {\n            currentValue = minValue;\n        }\n        if (currentValue > maxValue) {\n            currentValue = maxValue;\n        }\n        return [currentValue, this.checkHandlePosition(currentValue)];\n    }\n    setValue() {\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            this.min = 0;\n            this.max = this.customValues.length - 1;\n            this.setBarColor();\n        }\n        this.setAriaAttributes(this.firstHandle);\n        this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) :\n            this.checkHandleValue(parseFloat(this.value.toString()));\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.preHandlePos1 = this.handlePos1;\n        isNullOrUndefined(this.activeHandle) ? (this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1) :\n            this.activeHandle = this.activeHandle;\n        if (this.type === 'Default' || this.type === 'MinRange') {\n            if (this.limits.enabled) {\n                let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n                this.handleVal1 = values[0];\n                this.handlePos1 = values[1];\n                this.preHandlePos1 = this.handlePos1;\n            }\n            this.setHandlePosition(null);\n            this.handleStart();\n            this.value = this.handleVal1;\n            this.setAriaAttrValue(this.firstHandle);\n            this.changeEvent('changed', null);\n        }\n        else {\n            this.validateRangeValue();\n        }\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n    }\n    rangeValueUpdate() {\n        if (this.value === null || typeof (this.value) !== 'object') {\n            this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n        }\n    }\n    validateRangeValue() {\n        this.rangeValueUpdate();\n        this.setRangeValue();\n    }\n    modifyZindex() {\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                this.firstHandle.style.zIndex = (this.zIndex + 4) + '';\n                this.secondHandle.style.zIndex = (this.zIndex + 3) + '';\n            }\n            else {\n                this.firstHandle.style.zIndex = (this.zIndex + 3) + '';\n                this.secondHandle.style.zIndex = (this.zIndex + 4) + '';\n            }\n        }\n        else if (this.isMaterialTooltip && this.tooltipElement) {\n            this.tooltipElement.style.zIndex = getZindexPartial(this.element) + '';\n        }\n    }\n    setHandlePosition(event) {\n        let handle;\n        let pos = (this.activeHandle === 1) ? this.handlePos1 : this.handlePos2;\n        if (this.isMaterialTooltip) {\n            handle = [this.firstHandle, this.materialHandle];\n        }\n        else {\n            handle = [this.getHandle()];\n        }\n        this.handleStart();\n        handle.forEach((handle) => {\n            if (this.orientation === 'Horizontal') {\n                this.enableRtl ? (handle.style.right =\n                    `${pos}px`) : (handle.style.left = `${pos}px`);\n            }\n            else {\n                handle.style.bottom = `${pos}px`;\n            }\n            if (isBlazor() && this.isServerRendered) {\n                handle.style.removeProperty('visibility');\n            }\n        });\n        this.changeEvent('change', event);\n    }\n    getHandle() {\n        return (this.activeHandle === 1) ? this.firstHandle : this.secondHandle;\n    }\n    setRangeValue() {\n        this.updateRangeValue();\n        this.activeHandle = 1;\n        this.setHandlePosition(null);\n        this.activeHandle = 2;\n        this.setHandlePosition(null);\n        this.activeHandle = 1;\n    }\n    changeEvent(eventName, e) {\n        let previous = eventName === 'change' ? this.previousVal : this.previousChanged;\n        if (this.type !== 'Range') {\n            this.setProperties({ 'value': this.handleVal1 }, true);\n            if (previous !== this.value) {\n                this.trigger(eventName, this.changeEventArgs(eventName, e));\n                this.setPreviousVal(eventName, this.value);\n            }\n            this.setAriaAttrValue(this.firstHandle);\n        }\n        else {\n            let value = this.value = [this.handleVal1, this.handleVal2];\n            this.setProperties({ 'value': value }, true);\n            if (previous.length === this.value.length\n                && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {\n                this.trigger(eventName, this.changeEventArgs(eventName, e));\n                this.setPreviousVal(eventName, this.value);\n            }\n            this.setAriaAttrValue(this.getHandle());\n        }\n        this.hiddenInput.value = this.value.toString();\n    }\n    changeEventArgs(eventName, e) {\n        let eventArgs;\n        if (this.tooltip.isVisible && this.tooltipObj) {\n            if (!isBlazor() || !this.isServerRendered) {\n                this.tooltipValue();\n            }\n            eventArgs = {\n                value: this.value,\n                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n                action: eventName, text: this.tooltipObj.content, isInteracted: isNullOrUndefined(e) ? false : true\n            };\n        }\n        else {\n            eventArgs = {\n                value: this.value,\n                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n                action: eventName, text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() :\n                    (this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString :\n                        (this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' +\n                            this.formatString(this.value[1], this.ticksFormatInfo).formatString)),\n                isInteracted: isNullOrUndefined(e) ? false : true\n            };\n        }\n        return eventArgs;\n    }\n    setPreviousVal(eventName, value) {\n        if (eventName === 'change') {\n            this.previousVal = value;\n        }\n        else {\n            this.previousChanged = value;\n        }\n    }\n    updateRangeValue() {\n        let values = this.value.toString().split(',').map(Number);\n        if ((this.enableRtl && this.orientation !== 'Vertical') || this.rtl) {\n            this.value = [values[1], values[0]];\n        }\n        else {\n            this.value = [values[0], values[1]];\n        }\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n            this.handleVal1 = this.checkHandleValue(this.value[1]);\n            this.handleVal2 = this.checkHandleValue(this.value[0]);\n        }\n        else {\n            this.handleVal1 = this.checkHandleValue(this.value[0]);\n            this.handleVal2 = this.checkHandleValue(this.value[1]);\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n        if (this.handlePos1 > this.handlePos2) {\n            this.handlePos1 = this.handlePos2;\n            this.handleVal1 = this.handleVal2;\n        }\n        this.preHandlePos1 = this.handlePos1;\n        this.preHandlePos2 = this.handlePos2;\n        if (this.limits.enabled) {\n            this.activeHandle = 1;\n            let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n            this.handleVal1 = values[0];\n            this.handlePos1 = values[1];\n            this.preHandlePos1 = this.handlePos1;\n            this.activeHandle = 2;\n            values = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n            this.handleVal2 = values[0];\n            this.handlePos2 = values[1];\n            this.preHandlePos2 = this.handlePos2;\n        }\n    }\n    checkHandlePosition(value) {\n        let pos;\n        value = (100 *\n            (value - (parseFloat(formatUnit(this.min))))) / ((parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min))));\n        if (this.orientation === 'Horizontal') {\n            pos = this.element.getBoundingClientRect().width * (value / 100);\n        }\n        else {\n            pos = this.element.getBoundingClientRect().height * (value / 100);\n        }\n        if (((parseFloat(formatUnit(this.max))) === (parseFloat(formatUnit(this.min))))) {\n            if (this.orientation === 'Horizontal') {\n                pos = this.element.getBoundingClientRect().width;\n            }\n            else {\n                pos = this.element.getBoundingClientRect().height;\n            }\n        }\n        return pos;\n    }\n    checkHandleValue(value) {\n        if (this.min > this.max) {\n            this.min = this.max;\n        }\n        if (this.min === this.max) {\n            return (parseFloat(formatUnit(this.max)));\n        }\n        let handle = this.tempStartEnd();\n        if (value < handle.start) {\n            value = handle.start;\n        }\n        else if (value > handle.end) {\n            value = handle.end;\n        }\n        return value;\n    }\n    /**\n     * It is used to reposition slider.\n     * @returns void\n     */\n    reposition() {\n        this.firstHandle.style.transition = 'none';\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = 'none';\n        }\n        if (this.type === 'Range') {\n            this.secondHandle.style.transition = 'none';\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        if (this.handleVal2) {\n            this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n        }\n        if (this.orientation === 'Horizontal') {\n            this.enableRtl ? this.firstHandle.style.right =\n                `${this.handlePos1}px` : this.firstHandle.style.left = `${this.handlePos1}px`;\n            if (this.isMaterialTooltip) {\n                this.enableRtl ? this.materialHandle.style.right =\n                    `${this.handlePos1}px` : this.materialHandle.style.left = `${this.handlePos1}px`;\n            }\n            if (this.type === 'MinRange') {\n                this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');\n                setStyleAttribute(this.rangeBar, { 'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else if (this.type === 'Range') {\n                this.enableRtl ? this.secondHandle.style.right =\n                    `${this.handlePos2}px` : this.secondHandle.style.left = `${this.handlePos2}px`;\n                this.enableRtl ? (this.rangeBar.style.right =\n                    this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');\n                setStyleAttribute(this.rangeBar, { 'width': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        else {\n            this.firstHandle.style.bottom = `${this.handlePos1}px`;\n            if (this.isMaterialTooltip) {\n                this.materialHandle.style.bottom = `${this.handlePos1}px`;\n            }\n            if (this.type === 'MinRange') {\n                this.rangeBar.style.bottom = '0px';\n                setStyleAttribute(this.rangeBar, { 'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else if (this.type === 'Range') {\n                this.secondHandle.style.bottom = `${this.handlePos2}px`;\n                this.rangeBar.style.bottom = this.handlePos1 + 'px';\n                setStyleAttribute(this.rangeBar, { 'height': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n        if (this.ticks.placement !== 'None' && this.ul) {\n            if (!isBlazor()) {\n                this.removeElement(this.ul);\n                this.ul = undefined;\n            }\n            this.renderScale();\n            if (isBlazor()) {\n                this.tickValuePosition();\n            }\n        }\n        this.handleStart();\n        if (!this.tooltip.isVisible) {\n            setTimeout(() => {\n                this.firstHandle.style.transition = this.scaleTransform;\n                if (this.type === 'Range') {\n                    this.secondHandle.style.transition = this.scaleTransform;\n                }\n            });\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            this.refreshTooltip(this.tooltipTarget);\n        }\n        this.setBarColor();\n    }\n    changeHandleValue(value) {\n        let position = null;\n        if (this.activeHandle === 1) {\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                this.handleVal1 = this.checkHandleValue(value);\n                this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n                if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {\n                    this.handlePos1 = this.handlePos2;\n                    this.handleVal1 = this.handleVal2;\n                }\n                if (this.handlePos1 !== this.preHandlePos1) {\n                    position = this.preHandlePos1 = this.handlePos1;\n                }\n            }\n            this.modifyZindex();\n        }\n        else {\n            if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                this.handleVal2 = this.checkHandleValue(value);\n                this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n                if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {\n                    this.handlePos2 = this.handlePos1;\n                    this.handleVal2 = this.handleVal1;\n                }\n                if (this.handlePos2 !== this.preHandlePos2) {\n                    position = this.preHandlePos2 = this.handlePos2;\n                }\n            }\n            this.modifyZindex();\n        }\n        if (position !== null) {\n            if (this.type !== 'Default') {\n                this.setRangeBar();\n            }\n            this.setHandlePosition(null);\n        }\n    }\n    tempStartEnd() {\n        if (this.min > this.max) {\n            return {\n                start: this.max,\n                end: this.min\n            };\n        }\n        else {\n            return {\n                start: this.min,\n                end: this.max\n            };\n        }\n    }\n    xyToPosition(position) {\n        let pos;\n        if (this.min === this.max) {\n            return 100;\n        }\n        if (this.orientation === 'Horizontal') {\n            let left = position.x - this.element.getBoundingClientRect().left;\n            let num = this.element.offsetWidth / 100;\n            this.val = (left / num);\n        }\n        else {\n            let top = position.y - this.element.getBoundingClientRect().top;\n            let num = this.element.offsetHeight / 100;\n            this.val = 100 - (top / num);\n        }\n        let val = this.stepValueCalculation(this.val);\n        if (val < 0) {\n            val = 0;\n        }\n        else if (val > 100) {\n            val = 100;\n        }\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n            val = 100 - val;\n        }\n        if (this.orientation === 'Horizontal') {\n            pos = this.element.getBoundingClientRect().width * (val / 100);\n        }\n        else {\n            pos = this.element.getBoundingClientRect().height * (val / 100);\n        }\n        return pos;\n    }\n    stepValueCalculation(value) {\n        if (this.step === 0) {\n            this.step = 1;\n        }\n        let percentStep = (parseFloat(formatUnit(this.step))) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);\n        let remain = value % Math.abs(percentStep);\n        if (remain !== 0) {\n            if ((percentStep / 2) > remain) {\n                value -= remain;\n            }\n            else {\n                value += Math.abs(percentStep) - remain;\n            }\n        }\n        return value;\n    }\n    add(a, b, addition) {\n        let precision;\n        let x = Math.pow(10, precision || 3);\n        let val;\n        if (addition) {\n            val = (Math.round(a * x) + Math.round(b * x)) / x;\n        }\n        else {\n            val = (Math.round(a * x) - Math.round(b * x)) / x;\n        }\n        return val;\n    }\n    positionToValue(pos) {\n        let val;\n        let diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n        if (this.orientation === 'Horizontal') {\n            val = (pos / this.element.getBoundingClientRect().width) * diff;\n        }\n        else {\n            val = (pos / this.element.getBoundingClientRect().height) * diff;\n        }\n        let total = this.add(val, parseFloat(this.min.toString()), true);\n        return (total);\n    }\n    sliderBarClick(evt) {\n        evt.preventDefault();\n        let pos;\n        if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {\n            pos = { x: evt.clientX, y: evt.clientY };\n        }\n        else if (evt.type === 'touchend' || evt.type === 'touchstart') {\n            pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };\n        }\n        let handlepos = this.xyToPosition(pos);\n        let handleVal = this.positionToValue(handlepos);\n        if (this.type === 'Range' && (this.handlePos2 - handlepos) < (handlepos - this.handlePos1)) {\n            this.activeHandle = 2;\n            if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                if (this.limits.enabled) {\n                    let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n                    handleVal = value[0];\n                    handlepos = value[1];\n                }\n                this.secondHandle.classList.add(classNames.sliderActiveHandle);\n                this.handlePos2 = this.preHandlePos2 = handlepos;\n                this.handleVal2 = handleVal;\n            }\n            this.modifyZindex();\n            this.secondHandle.focus();\n        }\n        else {\n            this.activeHandle = 1;\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                if (this.limits.enabled) {\n                    let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                    handleVal = value[0];\n                    handlepos = value[1];\n                }\n                this.firstHandle.classList.add(classNames.sliderActiveHandle);\n                this.handlePos1 = this.preHandlePos1 = handlepos;\n                this.handleVal1 = handleVal;\n            }\n            this.modifyZindex();\n            this.firstHandle.focus();\n        }\n        if (this.isMaterialTooltip) {\n            this.tooltipElement.classList.add(classNames.materialTooltipActive);\n        }\n        let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n        if (focusedElement && this.getHandle() !== focusedElement) {\n            focusedElement.classList.remove(classNames.sliderTabHandle);\n        }\n        let handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n        if (evt.target === handle) {\n            if (this.isMaterial && !this.tooltip.isVisible &&\n                !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n                this.materialChange();\n            }\n            this.tooltipToggle(this.getHandle());\n            return;\n        }\n        if (!this.checkRepeatedValue(handleVal)) {\n            return;\n        }\n        let transition = this.isMaterial && this.tooltip.isVisible ?\n            this.transitionOnMaterialTooltip : this.transition;\n        this.getHandle().style.transition = transition.handle;\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = transition.rangeBar;\n        }\n        this.setHandlePosition(evt);\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n    }\n    handleValueAdjust(handleValue, assignValue, handleNumber) {\n        if (handleNumber === 1) {\n            this.handleVal1 = assignValue;\n            this.handleVal2 = this.handleVal1 + this.minDiff;\n        }\n        else if (handleNumber === 2) {\n            this.handleVal2 = assignValue;\n            this.handleVal1 = this.handleVal2 - this.minDiff;\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n    }\n    dragRangeBarMove(event) {\n        if (event.type !== 'touchmove') {\n            event.preventDefault();\n        }\n        this.rangeBarDragged = true;\n        let pos;\n        this.rangeBar.style.transition = 'none';\n        this.firstHandle.style.transition = 'none';\n        this.secondHandle.style.transition = 'none';\n        let xPostion;\n        let yPostion;\n        if (event.type === 'mousemove') {\n            [xPostion, yPostion] = [event.clientX, event.clientY];\n        }\n        else {\n            [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n        }\n        if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {\n            if (!this.enableRtl) {\n                pos = { x: xPostion - this.firstPartRemain, y: yPostion + this.secondPartRemain };\n            }\n            else {\n                pos = { x: xPostion + this.secondPartRemain, y: yPostion + this.secondPartRemain };\n            }\n            this.handlePos1 = this.xyToPosition(pos);\n            this.handleVal1 = this.positionToValue(this.handlePos1);\n            if (!this.enableRtl) {\n                pos = { x: xPostion + this.secondPartRemain, y: yPostion - this.firstPartRemain };\n            }\n            else {\n                pos = { x: xPostion - this.firstPartRemain, y: yPostion - this.firstPartRemain };\n            }\n            this.handlePos2 = this.xyToPosition(pos);\n            this.handleVal2 = this.positionToValue(this.handlePos2);\n            if (this.limits.enabled) {\n                let value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n                this.handleVal1 = value[0];\n                this.handlePos1 = value[1];\n                if (this.handleVal1 === this.limits.minEnd) {\n                    this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);\n                }\n                if (this.handleVal1 === this.limits.minStart) {\n                    this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);\n                }\n                value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n                this.handleVal2 = value[0];\n                this.handlePos2 = value[1];\n                if (this.handleVal2 === this.limits.maxStart) {\n                    this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);\n                }\n                if (this.handleVal2 === this.limits.maxEnd) {\n                    this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);\n                }\n            }\n            if (this.handleVal2 === this.max) {\n                this.handleValueAdjust(this.handleVal2, this.max, 2);\n            }\n            if (this.handleVal1 === this.min) {\n                this.handleValueAdjust(this.handleVal1, this.min, 1);\n            }\n        }\n        this.activeHandle = 1;\n        this.setHandlePosition(event);\n        this.activeHandle = 2;\n        this.setHandlePosition(event);\n        this.tooltipToggle(this.rangeBar);\n        this.setRangeBar();\n    }\n    sliderBarUp(event) {\n        this.changeEvent('changed', event);\n        this.handleFocusOut();\n        this.firstHandle.classList.remove(classNames.sliderActiveHandle);\n        if (this.type === 'Range') {\n            this.secondHandle.classList.remove(classNames.sliderActiveHandle);\n        }\n        this.closeTooltip();\n        if (this.isMaterial) {\n            this.getHandle().classList.remove('e-large-thumb-size');\n            if (this.isMaterialTooltip) {\n                this.tooltipElement.classList.remove(classNames.materialTooltipActive);\n            }\n        }\n        EventHandler.remove(document, 'mousemove touchmove', this.sliderBarMove);\n        EventHandler.remove(document, 'mouseup touchend', this.sliderBarUp);\n    }\n    sliderBarMove(evt) {\n        if (evt.type !== 'touchmove') {\n            evt.preventDefault();\n        }\n        let pos;\n        if (evt.type === 'mousemove') {\n            pos = { x: evt.clientX, y: evt.clientY };\n        }\n        else {\n            pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };\n        }\n        let handlepos = this.xyToPosition(pos);\n        let handleVal = this.positionToValue(handlepos);\n        handlepos = Math.round(handlepos);\n        if (this.type !== 'Range' && this.activeHandle === 1) {\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                if (this.limits.enabled) {\n                    let valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                    handlepos = valueAndPostion[1];\n                    handleVal = valueAndPostion[0];\n                }\n                this.handlePos1 = handlepos;\n                this.handleVal1 = handleVal;\n            }\n            this.firstHandle.classList.add(classNames.sliderActiveHandle);\n        }\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                this.firstHandle.classList.add(classNames.sliderActiveHandle);\n                if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                    if (handlepos > this.handlePos2) {\n                        handlepos = this.handlePos2;\n                        handleVal = this.handleVal2;\n                    }\n                    if (handlepos !== this.preHandlePos1) {\n                        if (this.limits.enabled) {\n                            let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                            handleVal = value[0];\n                            handlepos = value[1];\n                        }\n                        this.handlePos1 = this.preHandlePos1 = handlepos;\n                        this.handleVal1 = handleVal;\n                        this.activeHandle = 1;\n                    }\n                }\n            }\n            else if (this.activeHandle === 2) {\n                this.secondHandle.classList.add(classNames.sliderActiveHandle);\n                if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                    if (handlepos < this.handlePos1) {\n                        handlepos = this.handlePos1;\n                        handleVal = this.handleVal1;\n                    }\n                    if (handlepos !== this.preHandlePos2) {\n                        if (this.limits.enabled) {\n                            let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n                            handleVal = value[0];\n                            handlepos = value[1];\n                        }\n                        this.handlePos2 = this.preHandlePos2 = handlepos;\n                        this.handleVal2 = handleVal;\n                        this.activeHandle = 2;\n                    }\n                }\n            }\n        }\n        if (!this.checkRepeatedValue(handleVal)) {\n            return;\n        }\n        this.getHandle().style.transition = this.scaleTransform;\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = 'none';\n        }\n        this.setHandlePosition(evt);\n        if (this.isMaterial && !this.tooltip.isVisible &&\n            !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n            this.materialChange();\n        }\n        this.tooltipToggle(this.getHandle());\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n    }\n    dragRangeBarUp(event) {\n        if (!this.rangeBarDragged) {\n            this.focusSliderElement();\n            this.sliderBarClick(event);\n        }\n        this.changeEvent('changed', event);\n        this.closeTooltip();\n        EventHandler.remove(document, 'mousemove touchmove', this.dragRangeBarMove);\n        EventHandler.remove(document, 'mouseup touchend', this.dragRangeBarUp);\n        this.rangeBarDragged = false;\n    }\n    checkRepeatedValue(currentValue) {\n        if (this.type === 'Range') {\n            let previousVal = this.enableRtl && this.orientation !== 'Vertical' ? (this.activeHandle === 1 ?\n                this.previousVal[1] : this.previousVal[0]) :\n                (this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1]);\n            if (currentValue === previousVal) {\n                return 0;\n            }\n        }\n        else {\n            if (currentValue === this.previousVal) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    refreshTooltip(target) {\n        if (this.tooltip.isVisible && this.tooltipObj) {\n            this.tooltipValue();\n            if (target) {\n                this.tooltipObj.refresh(target);\n                this.tooltipTarget = target;\n            }\n        }\n    }\n    openTooltip(target) {\n        if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {\n            this.tooltipValue();\n            this.tooltipObj.open(target);\n            this.tooltipTarget = target;\n        }\n    }\n    closeTooltip() {\n        if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {\n            this.tooltipValue();\n            this.tooltipObj.close();\n            this.tooltipTarget = undefined;\n        }\n    }\n    keyDown(event) {\n        switch (event.keyCode) {\n            case 37:\n            case 38:\n            case 39:\n            case 40:\n            case 33:\n            case 34:\n            case 36:\n            case 35:\n                event.preventDefault();\n                this.buttonClick(event);\n                break;\n        }\n    }\n    wireButtonEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n            EventHandler.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n            EventHandler.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n            EventHandler.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n            EventHandler.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n            EventHandler.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n            EventHandler.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);\n            EventHandler.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);\n        }\n        else {\n            EventHandler.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);\n            EventHandler.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);\n            EventHandler.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n            EventHandler.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n            EventHandler.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n            EventHandler.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n            EventHandler.remove(this.firstBtn, 'focusout', this.sliderFocusOut);\n            EventHandler.remove(this.secondBtn, 'focusout', this.sliderFocusOut);\n        }\n    }\n    rangeBarMousedown(event) {\n        event.preventDefault();\n        this.focusSliderElement();\n        if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {\n            let xPostion;\n            let yPostion;\n            if (event.type === 'mousedown') {\n                [xPostion, yPostion] = [event.clientX, event.clientY];\n            }\n            else if (event.type === 'touchstart') {\n                [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n            }\n            if (this.orientation === 'Horizontal') {\n                this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;\n                this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;\n            }\n            else {\n                this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;\n                this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;\n            }\n            this.minDiff = this.handleVal2 - this.handleVal1;\n            this.tooltipToggle(this.rangeBar);\n            let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.sliderTabHandle);\n            }\n            EventHandler.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);\n            EventHandler.add(document, 'mouseup touchend', this.dragRangeBarUp, this);\n        }\n    }\n    elementClick(event) {\n        event.preventDefault();\n        this.focusSliderElement();\n        this.sliderBarClick(event);\n    }\n    wireEvents() {\n        this.onresize = this.reposition.bind(this);\n        window.addEventListener('resize', this.onresize);\n        if (this.enabled && !this.readonly) {\n            EventHandler.add(this.element, 'click', this.elementClick, this);\n            if (this.type === 'Range' && this.drag) {\n                EventHandler.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);\n            }\n            EventHandler.add(this.sliderContainer, 'keydown', this.keyDown, this);\n            EventHandler.add(this.sliderContainer, 'keyup', this.keyUp, this);\n            EventHandler.add(this.element, 'focusout', this.sliderFocusOut, this);\n            EventHandler.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);\n            this.wireFirstHandleEvt(false);\n            if (this.type === 'Range') {\n                this.wireSecondHandleEvt(false);\n            }\n            if (this.showButtons) {\n                this.wireButtonEvt(false);\n            }\n            this.wireMaterialTooltipEvent(false);\n            if (this.isForm) {\n                EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n            }\n        }\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'click', this.elementClick);\n        if (this.type === 'Range' && this.drag) {\n            EventHandler.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);\n        }\n        EventHandler.remove(this.sliderContainer, 'keydown', this.keyDown);\n        EventHandler.remove(this.sliderContainer, 'keyup', this.keyUp);\n        EventHandler.remove(this.element, 'focusout', this.sliderFocusOut);\n        EventHandler.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);\n        this.wireFirstHandleEvt(true);\n        if (this.type === 'Range') {\n            this.wireSecondHandleEvt(true);\n        }\n        if (this.showButtons) {\n            this.wireButtonEvt(true);\n        }\n        this.wireMaterialTooltipEvent(true);\n        EventHandler.remove(this.element, 'reset', this.formResetHandler);\n    }\n    formResetHandler() {\n        this.setProperties({ 'value': this.formResetValue }, true);\n        this.setValue();\n    }\n    keyUp(event) {\n        if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {\n            this.focusSliderElement();\n            if (!event.target.classList.contains(classNames.sliderTabHandle)) {\n                if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n                    this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n                }\n                event.target.classList.add(classNames.sliderTabHandle);\n                let parentElement = event.target.parentElement;\n                if (parentElement === this.element) {\n                    parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);\n                    if (this.type === 'Range' || this.type === 'MinRange') {\n                        parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);\n                    }\n                }\n                if (this.type === 'Range') {\n                    (event.target.previousSibling).classList.contains(classNames.sliderHandle) ?\n                        this.activeHandle = 2 : this.activeHandle = 1;\n                }\n                this.getHandle().focus();\n                this.tooltipToggle(this.getHandle());\n            }\n        }\n        this.closeTooltip();\n        this.changeEvent('changed', event);\n    }\n    hover(event) {\n        if (!isNullOrUndefined(event)) {\n            if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' ||\n                event.type === 'pointermove' || event.type === 'touchstart') {\n                this.sliderContainer.classList.add(classNames.sliderHover);\n            }\n            else {\n                this.sliderContainer.classList.remove(classNames.sliderHover);\n            }\n        }\n    }\n    sliderFocusOut(event) {\n        if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle &&\n            event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {\n            this.closeMaterialTooltip();\n            if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n                this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n            }\n            if (this.element.querySelector('.' + classNames.sliderTabTrack)) {\n                this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);\n                if ((this.type === 'Range' || this.type === 'MinRange') &&\n                    this.element.querySelector('.' + classNames.sliderTabRange)) {\n                    this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);\n                }\n            }\n            this.hiddenInput.focus();\n            this.hiddenInput.blur();\n            this.isElementFocused = false;\n        }\n    }\n    removeElement(element) {\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    changeSliderType(type, args) {\n        if (this.isMaterialTooltip && this.materialHandle) {\n            this.sliderContainer.classList.remove(classNames.materialSlider);\n            this.removeElement(this.materialHandle);\n            this.materialHandle = undefined;\n        }\n        this.removeElement(this.firstHandle);\n        this.firstHandle = undefined;\n        if (type !== 'Default') {\n            if (type === 'Range') {\n                this.removeElement(this.secondHandle);\n                this.secondHandle = undefined;\n            }\n            this.removeElement(this.rangeBar);\n            this.rangeBar = undefined;\n        }\n        if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {\n            this.tooltipObj.destroy();\n            this.tooltipElement = undefined;\n            this.tooltipCollidedPosition = undefined;\n        }\n        if (this.limits.enabled) {\n            if (type === 'MinRange' || type === 'Default') {\n                if (!isNullOrUndefined(this.limitBarFirst)) {\n                    this.removeElement(this.limitBarFirst);\n                    this.limitBarFirst = undefined;\n                }\n            }\n            else {\n                if (!isNullOrUndefined(this.limitBarSecond)) {\n                    this.removeElement(this.limitBarSecond);\n                    this.limitBarSecond = undefined;\n                }\n            }\n        }\n        this.activeHandle = 1;\n        this.getThemeInitialization();\n        if (this.type === 'Range') {\n            this.rangeValueUpdate();\n        }\n        this.createRangeBar();\n        if (this.limits.enabled) {\n            this.createLimitBar();\n        }\n        this.setHandler();\n        this.setOrientClass();\n        this.wireFirstHandleEvt(false);\n        if (this.type === 'Range') {\n            this.wireSecondHandleEvt(false);\n        }\n        this.setValue();\n        if (this.tooltip.isVisible) {\n            this.renderTooltip();\n            this.wireMaterialTooltipEvent(false);\n        }\n        this.setBarColor();\n        if ((!isBlazor() && !this.isServerRendered) || args !== 'tooltip') {\n            this.updateConfig();\n        }\n    }\n    changeRtl() {\n        if (!this.enableRtl && this.type === 'Range') {\n            this.value = [this.handleVal2, this.handleVal1];\n        }\n        this.updateConfig();\n        if (this.tooltip.isVisible) {\n            this.tooltipObj.refresh(this.firstHandle);\n        }\n        if (this.showButtons) {\n            let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n            attributes(enabledRTL ? this.secondBtn : this.firstBtn, { 'aria-label': 'Decrease', title: 'Decrease' });\n            attributes(enabledRTL ? this.firstBtn : this.secondBtn, { 'aria-label': 'Increase', title: 'Increase' });\n        }\n    }\n    changeOrientation() {\n        this.changeSliderType(this.type, 'null');\n    }\n    updateConfig() {\n        this.setEnableRTL();\n        this.setValue();\n        if (this.tooltip.isVisible) {\n            if (!isBlazor()) {\n                this.refreshTooltip(this.tooltipTarget);\n            }\n        }\n        if (this.ticks.placement !== 'None') {\n            if (this.ul) {\n                this.removeElement(this.ul);\n                this.ul = undefined;\n                this.renderScale();\n            }\n        }\n        this.limitsPropertyChange();\n    }\n    limitsPropertyChange() {\n        if (this.limits.enabled) {\n            if (isNullOrUndefined(this.limitBarFirst) && this.type !== 'Range') {\n                this.createLimitBar();\n            }\n            if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === 'Range') {\n                this.createLimitBar();\n            }\n            this.setLimitBar();\n            this.setValue();\n        }\n        else {\n            if (!isNullOrUndefined(this.limitBarFirst)) {\n                detach(this.limitBarFirst);\n            }\n            if (!isNullOrUndefined(this.limitBarSecond)) {\n                detach(this.limitBarSecond);\n            }\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n        this.unwireEvents();\n        window.removeEventListener('resize', this.onresize);\n        removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n        this.firstHandle.removeAttribute('aria-orientation');\n        if (this.type === 'Range') {\n            this.secondHandle.removeAttribute('aria-orientation');\n        }\n        if (!isBlazor() && !this.isServerRendered) {\n            this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);\n            detach(this.sliderContainer);\n        }\n        if (this.tooltip.isVisible) {\n            this.tooltipObj.destroy();\n        }\n        if (!isBlazor() && !this.isServerRendered) {\n            this.element.innerHTML = '';\n        }\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    // tslint:disable-next-line\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'value':\n                    if (newProp && oldProp) {\n                        let value = isNullOrUndefined(newProp.value) ?\n                            (this.type === 'Range' ? [this.min, this.max] : this.min) : newProp.value;\n                        this.setProperties({ 'value': value }, true);\n                        if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {\n                            this.setValue();\n                            if (!isBlazor() || !this.isServerRendered) {\n                                this.refreshTooltip(this.tooltipTarget);\n                            }\n                            if (this.type === 'Range') {\n                                if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {\n                                    this.activeHandle = 1;\n                                }\n                                else {\n                                    this.activeHandle = 2;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'min':\n                case 'step':\n                case 'max':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.setMinMaxValue();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'tooltip':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {\n                        this.setTooltip(prop);\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'type':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length\n                        && !isNullOrUndefined(oldProp.type)) {\n                        this.changeSliderType(oldProp.type, prop);\n                        this.setZindex();\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'enableRtl':\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                        this.isServerRendered = false;\n                    }\n                    if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {\n                        this.rtl = oldProp.enableRtl;\n                        this.changeRtl();\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'limits':\n                    this.limitsPropertyChange();\n                    break;\n                case 'orientation':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.changeOrientation();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'ticks':\n                    if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n                        if (!isBlazor() || !this.isServerRendered) {\n                            detach(this.ul);\n                        }\n                        Array.prototype.forEach.call(this.sliderContainer.classList, (className) => {\n                            if (className.match(/e-scale-/)) {\n                                this.sliderContainer.classList.remove(className);\n                            }\n                        });\n                    }\n                    if (this.ticks.placement !== 'None') {\n                        this.renderScale();\n                        this.setZindex();\n                    }\n                    break;\n                case 'locale':\n                    if (this.showButtons) {\n                        this.buttonTitle();\n                    }\n                    break;\n                case 'showButtons':\n                    if (newProp.showButtons) {\n                        this.setButtons();\n                        this.reposition();\n                        if (this.enabled && !this.readonly) {\n                            this.wireButtonEvt(false);\n                        }\n                    }\n                    else {\n                        if (!isBlazor() || !this.isServerRendered) {\n                            if (this.firstBtn && this.secondBtn) {\n                                this.sliderContainer.removeChild(this.firstBtn);\n                                this.sliderContainer.removeChild(this.secondBtn);\n                                this.sliderContainer.classList.remove(classNames.sliderButtonClass);\n                                this.firstBtn = undefined;\n                                this.secondBtn = undefined;\n                                this.reposition();\n                            }\n                        }\n                    }\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'enabled':\n                    this.setEnabled();\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'readonly':\n                    this.setReadOnly();\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'customValues':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.setValue();\n                    this.reposition();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'colorRange':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.reposition();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    this.setMinMaxValue();\n                    if (this.limits) {\n                        this.limitsPropertyChange();\n                    }\n                    break;\n            }\n        }\n    }\n    setReadOnly() {\n        if (this.readonly) {\n            this.unwireEvents();\n            this.sliderContainer.classList.add(classNames.readonly);\n        }\n        else {\n            this.wireEvents();\n            this.sliderContainer.classList.remove(classNames.readonly);\n        }\n    }\n    setMinMaxValue() {\n        this.setValue();\n        if (!isBlazor()) {\n            this.refreshTooltip(this.tooltipTarget);\n        }\n        if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n            if (this.ul) {\n                detach(this.ul);\n                Array.prototype.forEach.call(this.sliderContainer.classList, (className) => {\n                    if (className.match(/e-scale-/)) {\n                        this.sliderContainer.classList.remove(className);\n                    }\n                });\n            }\n        }\n        if (this.ticks.placement !== 'None') {\n            this.renderScale();\n            this.setZindex();\n        }\n    }\n    setZindex() {\n        this.zIndex = 6;\n        if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== 'None') {\n            this.ul.style.zIndex = (this.zIndex + -7) + '';\n            this.element.style.zIndex = (this.zIndex + 2) + '';\n        }\n        if (!this.isMaterial && !isNullOrUndefined(this.ticks) && this.ticks.placement === 'Both') {\n            this.element.style.zIndex = (this.zIndex + 2) + '';\n        }\n        this.firstHandle.style.zIndex = (this.zIndex + 3) + '';\n        if (this.type === 'Range') {\n            this.secondHandle.style.zIndex = (this.zIndex + 4) + '';\n        }\n    }\n    setTooltip(args) {\n        this.changeSliderType(this.type, args);\n    }\n    setBarColor() {\n        let trackPosition;\n        let trackClassName;\n        let child = this.sliderTrack.lastElementChild;\n        while (child) {\n            this.sliderTrack.removeChild(child);\n            child = this.sliderTrack.lastElementChild;\n        }\n        for (let i = 0; i < this.colorRange.length; i++) {\n            if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {\n                if (this.colorRange[i].end > this.colorRange[i].start) {\n                    if (this.colorRange[i].start < this.min) {\n                        this.colorRange[i].start = this.min;\n                    }\n                    if (this.colorRange[i].end > this.max) {\n                        this.colorRange[i].end = this.max;\n                    }\n                    let startingPosition = this.checkHandlePosition(this.colorRange[i].start);\n                    let endPosition = this.checkHandlePosition(this.colorRange[i].end);\n                    let trackContainer = this.createElement('div');\n                    trackContainer.style.backgroundColor = this.colorRange[i].color;\n                    trackContainer.style.border = '1px solid ' + this.colorRange[i].color;\n                    if (this.orientation === 'Horizontal') {\n                        trackClassName = classNames.sliderHorizantalColor;\n                        if (this.enableRtl) {\n                            if (isNullOrUndefined(this.customValues)) {\n                                trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);\n                            }\n                            else {\n                                trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);\n                            }\n                        }\n                        else {\n                            trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n                        }\n                        trackContainer.style.width = endPosition - startingPosition + 'px';\n                        trackContainer.style.left = trackPosition + 'px';\n                    }\n                    else {\n                        trackClassName = classNames.sliderVerticalColor;\n                        trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n                        trackContainer.style.height = endPosition - startingPosition + 'px';\n                        trackContainer.style.bottom = trackPosition + 'px';\n                    }\n                    trackContainer.classList.add(trackClassName);\n                    this.sliderTrack.appendChild(trackContainer);\n                }\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'slider';\n    }\n};\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"value\", void 0);\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"customValues\", void 0);\n__decorate$2([\n    Property(1)\n], Slider.prototype, \"step\", void 0);\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"width\", void 0);\n__decorate$2([\n    Property(0)\n], Slider.prototype, \"min\", void 0);\n__decorate$2([\n    Property(100)\n], Slider.prototype, \"max\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"readonly\", void 0);\n__decorate$2([\n    Property('Default')\n], Slider.prototype, \"type\", void 0);\n__decorate$2([\n    Collection([{}], ColorRangeData)\n], Slider.prototype, \"colorRange\", void 0);\n__decorate$2([\n    Complex({}, TicksData)\n], Slider.prototype, \"ticks\", void 0);\n__decorate$2([\n    Complex({}, LimitData)\n], Slider.prototype, \"limits\", void 0);\n__decorate$2([\n    Property(true)\n], Slider.prototype, \"enabled\", void 0);\n__decorate$2([\n    Complex({}, TooltipData)\n], Slider.prototype, \"tooltip\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"showButtons\", void 0);\n__decorate$2([\n    Property(true)\n], Slider.prototype, \"enableAnimation\", void 0);\n__decorate$2([\n    Property('Horizontal')\n], Slider.prototype, \"orientation\", void 0);\n__decorate$2([\n    Property('')\n], Slider.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"changed\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"renderingTicks\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"renderedTicks\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"tooltipChange\", void 0);\nSlider = __decorate$2([\n    NotifyPropertyChanges\n], Slider);\n\n/**\n * Slider modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar FormValidator_1;\n/**\n * global declarations\n */\n// tslint:disable-next-line:no-any\nlet regex = {\n    EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' +\n        '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),\n    URL: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/m,\n    DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),\n    DIGITS: new RegExp('^[0-9]*$'),\n    PHONE: new RegExp('^[+]?[0-9]{9,13}$'),\n    CREDITCARD: new RegExp('^\\\\d{13,16}$')\n};\n/**\n * ErrorOption values\n * @private\n */\nvar ErrorOption;\n(function (ErrorOption) {\n    /**\n     * Defines the error message.\n     */\n    ErrorOption[ErrorOption[\"Message\"] = 0] = \"Message\";\n    /**\n     * Defines the error element type.\n     */\n    ErrorOption[ErrorOption[\"Label\"] = 1] = \"Label\";\n})(ErrorOption || (ErrorOption = {}));\n/**\n * FormValidator class enables you to validate the form fields based on your defined rules\n * ```html\n * <form id='formId'>\n *  <input type='text' name='Name' />\n *  <input type='text' name='Age' />\n * </form>\n * <script>\n *   let formObject = new FormValidator('#formId', {\n *      rules: { Name: { required: true }, Age: { range: [18, 30] } };\n *   });\n *   formObject.validate();\n * </script>\n * ```\n */\nlet FormValidator = FormValidator_1 = class FormValidator extends Base {\n    // Initializes the FormValidator \n    constructor(element, options) {\n        super(options, element);\n        this.validated = [];\n        this.errorRules = [];\n        this.allowSubmit = false;\n        this.required = 'required';\n        this.infoElement = null;\n        this.inputElement = null;\n        this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea';\n        // tslint:disable-next-line:no-any\n        this.localyMessage = {};\n        /**\n         * Specifies the default messages for validation rules.\n         * @default { List of validation message }\n         */\n        this.defaultMessages = {\n            required: 'This field is required.',\n            email: 'Please enter a valid email address.',\n            url: 'Please enter a valid URL.',\n            date: 'Please enter a valid date.',\n            dateIso: 'Please enter a valid date ( ISO ).',\n            creditcard: 'Please enter valid card number',\n            number: 'Please enter a valid number.',\n            digits: 'Please enter only digits.',\n            maxLength: 'Please enter no more than {0} characters.',\n            minLength: 'Please enter at least {0} characters.',\n            rangeLength: 'Please enter a value between {0} and {1} characters long.',\n            range: 'Please enter a value between {0} and {1}.',\n            max: 'Please enter a value less than or equal to {0}.',\n            min: 'Please enter a value greater than or equal to {0}.',\n            regex: 'Please enter a correct value.',\n            tel: 'Please enter a valid phone number.',\n            pattern: 'Please enter a correct pattern value.',\n            equalTo: 'Please enter the valid match text',\n        };\n        if (typeof this.rules === 'undefined') {\n            this.rules = {};\n        }\n        this.l10n = new L10n('formValidator', this.defaultMessages, this.locale);\n        if (this.locale) {\n            this.localeFunc();\n        }\n        onIntlChange.on('notifyExternalChange', this.afterLocalization, this);\n        element = typeof element === 'string' ? select(element, document) : element;\n        // Set novalidate to prevent default HTML5 form validation\n        if (this.element != null) {\n            this.element.setAttribute('novalidate', '');\n            this.inputElements = selectAll(this.selectQuery, this.element);\n            this.createHTML5Rules();\n            this.wireEvents();\n        }\n        else {\n            return undefined;\n        }\n    }\n    // tslint:enable\n    /**\n     * Add validation rules to the corresponding input element based on `name` attribute.\n     * @param {string} name `name` of form field.\n     * @param {Object} rules Validation rules for the corresponding element.\n     * @return {void}\n     */\n    addRules(name, rules) {\n        if (name) {\n            if (this.rules.hasOwnProperty(name)) {\n                extend(this.rules[name], rules, {});\n            }\n            else {\n                this.rules[name] = rules;\n            }\n        }\n    }\n    /**\n     * Remove validation to the corresponding field based on name attribute.\n     * When no parameter is passed, remove all the validations in the form.\n     * @param {string} name Input name attribute value.\n     * @param {string[]} rules List of validation rules need to be remove from the corresponding element.\n     * @return {void}\n     */\n    removeRules(name, rules) {\n        if (!name && !rules) {\n            this.rules = {};\n        }\n        else if (this.rules[name] && !rules) {\n            delete this.rules[name];\n        }\n        else if (!isNullOrUndefined(this.rules[name] && rules)) {\n            for (let i = 0; i < rules.length; i++) {\n                delete this.rules[name][rules[i]];\n            }\n        }\n        else {\n            return;\n        }\n    }\n    /**\n     * Validate the current form values using defined rules.\n     * Returns `true` when the form is valid otherwise `false`\n     * @param {string} selected - Optional parameter to validate specified element.\n     * @return {boolean}\n     */\n    validate(selected) {\n        let rules = Object.keys(this.rules);\n        if (selected && rules.length) {\n            this.validateRules(selected);\n            //filter the selected element it don't have any valid input element\n            return rules.indexOf(selected) !== -1 && this.errorRules.filter((data) => {\n                return data.name === selected;\n            }).length === 0;\n        }\n        else {\n            this.errorRules = [];\n            for (let name of rules) {\n                this.validateRules(name);\n            }\n            return this.errorRules.length === 0;\n        }\n    }\n    /**\n     * Reset the value of all the fields in form.\n     * @return {void}\n     */\n    reset() {\n        this.element.reset();\n        this.clearForm();\n    }\n    /**\n     * Get input element by name.\n     * @param {string} name - Input element name attribute value.\n     * @return {HTMLInputElement}\n     */\n    getInputElement(name) {\n        this.inputElement = (select('[name=\"' + name + '\"]', this.element));\n        return this.inputElement;\n    }\n    /**\n     * Destroy the form validator object and error elements.\n     * @return {void}\n     */\n    destroy() {\n        this.reset();\n        this.unwireEvents();\n        this.rules = {};\n        let elements = selectAll('.' + this.errorClass + ', .' + this.validClass, this.element);\n        for (let element of elements) {\n            detach(element);\n        }\n        super.destroy();\n        onIntlChange.off('notifyExternalChange', this.afterLocalization);\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'locale':\n                    this.localeFunc();\n                    break;\n            }\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    localeFunc() {\n        for (let key of Object.keys(this.defaultMessages)) {\n            this.l10n.setLocale(this.locale);\n            let value = this.l10n.getConstant(key);\n            this.localyMessage[key] = value;\n        }\n    }\n    /**\n     * @private\n     */\n    getModuleName() {\n        return 'formValidator';\n    }\n    /**\n     * @private\n     */\n    // tslint:disable-next-line:no-any\n    afterLocalization(args) {\n        this.locale = args.locale;\n        this.localeFunc();\n    }\n    /**\n     * Allows you to refresh the form validator base events to the elements inside the form.\n     * @return {void}\n     */\n    refresh() {\n        this.unwireEvents();\n        this.inputElements = selectAll(this.selectQuery, this.element);\n        this.wireEvents();\n    }\n    clearForm() {\n        this.errorRules = [];\n        this.validated = [];\n        let elements = selectAll(this.selectQuery, this.element);\n        for (let element of elements) {\n            let input = element;\n            input.removeAttribute('aria-invalid');\n            input.classList.remove(this.errorClass);\n            if (input.name.length > 0) {\n                this.getInputElement(input.name);\n                this.getErrorElement(input.name);\n                this.hideMessage(input.name);\n            }\n            input.classList.remove(this.validClass);\n        }\n    }\n    createHTML5Rules() {\n        let defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits',\n            'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min',\n            'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max',\n            'data-val-creditcard', 'data-val-phone'];\n        let acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];\n        for (let input of (this.inputElements)) {\n            // Default attribute rules \n            let allRule = {};\n            for (let rule of defRules) {\n                if (input.getAttribute(rule) !== null) {\n                    switch (rule) {\n                        case 'required':\n                            this.defRule(input, allRule, rule, input.required);\n                            break;\n                        case 'data-validation':\n                            rule = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, true);\n                            break;\n                        case 'type':\n                            if (acceptedTypes.indexOf(input.type) !== -1) {\n                                this.defRule(input, allRule, input.type, true);\n                            }\n                            break;\n                        case 'rangeLength':\n                        case 'range':\n                            this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));\n                            break;\n                        case 'equalTo':\n                            let id = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, id);\n                            break;\n                        default:\n                            if (input.getAttribute('data-val') === 'true') {\n                                this.annotationRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                            else {\n                                this.defRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                    }\n                }\n            }\n            //adding pattern type validation\n            if (Object.keys(allRule).length !== 0) {\n                this.addRules(input.name, allRule);\n            }\n        }\n    }\n    annotationRule(input, ruleCon, ruleName, value) {\n        let annotationRule = ruleName.split('-');\n        let rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];\n        let ruleFirstName = annotationRule[annotationRule.length - 1];\n        let ruleSecondName = annotationRule[annotationRule.length - 2];\n        if (rulesList.indexOf(ruleFirstName) !== -1) {\n            switch (ruleFirstName) {\n                case 'required':\n                    this.defRule(input, ruleCon, 'required', value);\n                    break;\n                case 'creditcard':\n                    this.defRule(input, ruleCon, 'creditcard', value);\n                    break;\n                case 'phone':\n                    this.defRule(input, ruleCon, 'tel', value);\n                    break;\n            }\n        }\n        else if (rulesList.indexOf(ruleSecondName) !== -1) {\n            switch (ruleSecondName) {\n                case 'maxlength':\n                    this.defRule(input, ruleCon, 'maxLength', value);\n                    break;\n                case 'minlength':\n                    this.defRule(input, ruleCon, 'minLength', value);\n                    break;\n                case 'range':\n                    let minvalue = input.getAttribute('data-val-range-min');\n                    let maxvalue = input.getAttribute('data-val-range-max');\n                    this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);\n                    break;\n                case 'equalto':\n                    let id = input.getAttribute(ruleName).split('.');\n                    this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);\n                    break;\n                case 'regex':\n                    this.defRule(input, ruleCon, 'regex', value);\n                    break;\n            }\n        }\n    }\n    defRule(input, ruleCon, ruleName, value) {\n        let message = input.getAttribute('data-' + ruleName + '-message');\n        let annotationMessage = input.getAttribute('data-val-' + ruleName);\n        let customMessage;\n        if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {\n            this.getInputElement(input.name);\n            customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);\n        }\n        if (message) {\n            value = [value, message];\n        }\n        else if (annotationMessage) {\n            value = [value, annotationMessage];\n        }\n        else if (customMessage) {\n            value = [value, customMessage];\n        }\n        ruleCon[ruleName] = value;\n    }\n    // Wire events to the form elements\n    wireEvents() {\n        for (let input of (this.inputElements)) {\n            if (FormValidator_1.isCheckable(input)) {\n                EventHandler.add(input, 'click', this.clickHandler, this);\n            }\n            else if (input.tagName === 'SELECT') {\n                EventHandler.add(input, 'change', this.changeHandler, this);\n            }\n            else {\n                EventHandler.add(input, 'focusout', this.focusOutHandler, this);\n                EventHandler.add(input, 'keyup', this.keyUpHandler, this);\n            }\n        }\n        EventHandler.add(this.element, 'submit', this.submitHandler, this);\n        EventHandler.add(this.element, 'reset', this.resetHandler, this);\n    }\n    // UnWire events to the form elements\n    unwireEvents() {\n        for (let input of (this.inputElements)) {\n            EventHandler.clearEvents(input);\n        }\n        EventHandler.remove(this.element, 'submit', this.submitHandler);\n        EventHandler.remove(this.element, 'reset', this.resetHandler);\n    }\n    // Handle input element focusout event\n    focusOutHandler(e) {\n        this.trigger('focusout', e);\n        //FormValidator.triggerCallback(this.focusout, e);\n        let element = e.target;\n        if (this.rules[element.name]) {\n            if (this.rules[element.name][this.required] || element.value.length > 0) {\n                this.validate(element.name);\n            }\n            else if (this.validated.indexOf(element.name) === -1) {\n                this.validated.push(element.name);\n            }\n        }\n    }\n    // Handle input element keyup event\n    keyUpHandler(e) {\n        this.trigger('keyup', e);\n        let element = e.target;\n        // List of keys need to prevent while validation\n        let excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];\n        if (e.which === 9 && (!this.rules[element.name] || (this.rules[element.name] && !this.rules[element.name][this.required]))) {\n            return;\n        }\n        if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {\n            this.validate(element.name);\n        }\n    }\n    // Handle input click event\n    clickHandler(e) {\n        this.trigger('click', e);\n        let element = e.target;\n        // If element type is not submit allow validation\n        if (element.type !== 'submit') {\n            this.validate(element.name);\n        }\n        else if (element.getAttribute('formnovalidate') !== null) {\n            // Prevent form validation, if submit button has formnovalidate attribute\n            this.allowSubmit = true;\n        }\n    }\n    // Handle input change event\n    changeHandler(e) {\n        this.trigger('change', e);\n        let element = e.target;\n        this.validate(element.name);\n    }\n    // Handle form submit event\n    submitHandler(e) {\n        this.trigger('submit', e);\n        //FormValidator.triggerCallback(this.submit, e);\n        // Prevent form submit if validation failed\n        if (!this.allowSubmit && !this.validate()) {\n            e.preventDefault();\n        }\n        else {\n            this.allowSubmit = false;\n        }\n    }\n    // Handle form reset\n    resetHandler() {\n        this.clearForm();\n    }\n    // Validate each rule based on input element name\n    validateRules(name) {\n        if (!this.rules[name]) {\n            return;\n        }\n        let rules = Object.keys(this.rules[name]);\n        let hiddenType = false;\n        let validateHiddenType = false;\n        let vhPos = rules.indexOf('validateHidden');\n        let hPos = rules.indexOf('hidden');\n        this.getInputElement(name);\n        if (hPos !== -1) {\n            hiddenType = true;\n        }\n        if (vhPos !== -1) {\n            validateHiddenType = true;\n        }\n        if (!hiddenType || (hiddenType && validateHiddenType)) {\n            if (vhPos !== -1) {\n                rules.splice(vhPos, 1);\n            }\n            if (hPos !== -1) {\n                rules.splice((hPos - 1), 1);\n            }\n            this.getErrorElement(name);\n            for (let rule of rules) {\n                let errorMessage = this.getErrorMessage(this.rules[name][rule], rule);\n                let errorRule = { name: name, message: errorMessage };\n                let eventArgs = {\n                    inputName: name,\n                    element: this.inputElement,\n                    message: errorMessage\n                };\n                if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {\n                    this.removeErrorRules(name);\n                    this.errorRules.push(errorRule);\n                    // Set aria attributes to invalid elements\n                    this.inputElement.setAttribute('aria-invalid', 'true');\n                    this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    if (!this.infoElement) {\n                        this.createErrorElement(name, errorRule.message, this.inputElement);\n                    }\n                    else {\n                        this.showMessage(errorRule);\n                    }\n                    eventArgs.errorElement = this.infoElement;\n                    eventArgs.status = 'failure';\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    this.optionalValidationStatus(name, eventArgs);\n                    this.trigger('validationComplete', eventArgs);\n                    // Set aria-required to required rule elements\n                    if (rule === 'required') {\n                        this.inputElement.setAttribute('aria-required', 'true');\n                    }\n                    break;\n                }\n                else {\n                    this.hideMessage(name);\n                    eventArgs.status = 'success';\n                    this.trigger('validationComplete', eventArgs);\n                }\n            }\n        }\n        else {\n            return;\n        }\n    }\n    // Update the optional validation status\n    optionalValidationStatus(name, refer) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            refer.status = '';\n            this.hideMessage(name);\n        }\n    }\n    // Check the input element whether it's value satisfy the validation rule or not\n    isValid(name, rule) {\n        let params = this.rules[name][rule];\n        let param = (params instanceof Array && typeof params[1] === 'string') ? params[0] : params;\n        let currentRule = this.rules[name][rule];\n        let args = { value: this.inputElement.value, param: param, element: this.inputElement, formElement: this.element };\n        this.trigger('validationBegin', args);\n        if (currentRule && typeof currentRule[0] === 'function') {\n            let fn = currentRule[0];\n            return fn.call(this, { element: this.inputElement, value: this.inputElement.value });\n        }\n        else if (FormValidator_1.isCheckable(this.inputElement)) {\n            if (rule !== 'required') {\n                return true;\n            }\n            return selectAll('input[name=' + name + ']:checked', this.element).length > 0;\n        }\n        else {\n            return FormValidator_1.checkValidator[rule](args);\n        }\n    }\n    // Return default error message or custom error message \n    getErrorMessage(ruleValue, rule) {\n        let message = this.inputElement.getAttribute('data-' + rule + '-message') ?\n            this.inputElement.getAttribute('data-' + rule + '-message') :\n            (ruleValue instanceof Array && typeof ruleValue[1] === 'string') ? ruleValue[1] :\n                (Object.keys(this.localyMessage).length !== 0) ? this.localyMessage[rule] : this.defaultMessages[rule];\n        let formats = message.match(/{(\\d)}/g);\n        if (!isNullOrUndefined(formats)) {\n            for (let i = 0; i < formats.length; i++) {\n                let value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;\n                message = message.replace(formats[i], value);\n            }\n        }\n        return message;\n    }\n    // Create error element based on name and error message\n    createErrorElement(name, message, input) {\n        let errorElement = createElement(this.errorElement, {\n            className: this.errorClass,\n            innerHTML: message,\n            attrs: { for: name }\n        });\n        // Create message design if errorOption is message\n        if (this.errorOption === ErrorOption.Message) {\n            errorElement.classList.remove(this.errorClass);\n            errorElement.classList.add('e-message');\n            errorElement = createElement(this.errorContainer, { className: this.errorClass, innerHTML: errorElement.outerHTML });\n        }\n        errorElement.id = this.inputElement.name + '-info';\n        // Append error message into MVC error message element\n        if (this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]')) {\n            this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]').appendChild(errorElement);\n        }\n        else if (input.hasAttribute('data-msg-containerid') === true) {\n            // Append error message into custom div element\n            let containerId = input.getAttribute('data-msg-containerid');\n            let divElement = this.element.querySelector('#' + containerId);\n            divElement.appendChild(errorElement);\n        }\n        else if (this.customPlacement != null) {\n            // Call custom placement function if customPlacement is not null\n            this.customPlacement.call(this, this.inputElement, errorElement);\n        }\n        else {\n            this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);\n        }\n        errorElement.style.display = 'block';\n        this.getErrorElement(name);\n        this.validated.push(name);\n        this.checkRequired(name);\n    }\n    // Get error element by name\n    getErrorElement(name) {\n        this.infoElement = select(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);\n        if (!this.infoElement) {\n            this.infoElement = select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]', this.element);\n        }\n        return this.infoElement;\n    }\n    // Remove existing rule from errorRules object\n    removeErrorRules(name) {\n        for (let i = 0; i < this.errorRules.length; i++) {\n            let rule = this.errorRules[i];\n            if (rule.name === name) {\n                this.errorRules.splice(i, 1);\n            }\n        }\n    }\n    // Show error message to the input element\n    showMessage(errorRule) {\n        this.infoElement.style.display = 'block';\n        this.infoElement.innerHTML = errorRule.message;\n        this.checkRequired(errorRule.name);\n    }\n    // Hide error message based on input name\n    hideMessage(name) {\n        if (this.infoElement) {\n            this.infoElement.style.display = 'none';\n            this.removeErrorRules(name);\n            this.inputElement.classList.add(this.validClass);\n            this.inputElement.classList.remove(this.errorClass);\n            this.inputElement.setAttribute('aria-invalid', 'false');\n        }\n    }\n    // Check whether the input element have required rule and its value is not empty\n    checkRequired(name) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            this.hideMessage(name);\n        }\n    }\n    // Return boolean result if the input have chekcable or submit types\n    static isCheckable(input) {\n        let inputType = input.getAttribute('type');\n        return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');\n    }\n};\n// List of function to validate the rules\nFormValidator.checkValidator = {\n    required: (option) => {\n        return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;\n    },\n    email: (option) => {\n        return regex.EMAIL.test(option.value);\n    },\n    url: (option) => {\n        return regex.URL.test(option.value);\n    },\n    dateIso: (option) => {\n        return regex.DATE_ISO.test(option.value);\n    },\n    tel: (option) => {\n        return regex.PHONE.test(option.value);\n    },\n    creditcard: (option) => {\n        return regex.CREDITCARD.test(option.value);\n    },\n    number: (option) => {\n        return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;\n    },\n    digits: (option) => {\n        return regex.DIGITS.test(option.value);\n    },\n    maxLength: (option) => {\n        return option.value.length <= option.param;\n    },\n    minLength: (option) => {\n        return option.value.length >= option.param;\n    },\n    rangeLength: (option) => {\n        let param = option.param;\n        return option.value.length >= param[0] && option.value.length <= param[1];\n    },\n    range: (option) => {\n        let param = option.param;\n        return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];\n    },\n    date: (option) => {\n        return !isNaN(new Date(option.value).getTime());\n    },\n    max: (option) => {\n        if (!isNaN(Number(option.value))) {\n            // Maximum rule validation for number\n            return +option.value <= option.param;\n        }\n        // Maximum rule validation for date\n        return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n    },\n    min: (option) => {\n        if (!isNaN(Number(option.value))) {\n            // Minimum rule validation for number\n            return +option.value >= option.param;\n        }\n        else if ((option.value).indexOf(',') !== -1) {\n            let uNum = (option.value).replace(/,/g, '');\n            return parseFloat(uNum) >= option.param;\n        }\n        else {\n            // Minimum rule validation for date\n            return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n        }\n    },\n    regex: (option) => {\n        return new RegExp(option.param).test(option.value);\n    },\n    equalTo: (option) => {\n        let compareTo = option.formElement.querySelector('#' + option.param);\n        option.param = compareTo.value;\n        return option.param === option.value;\n    },\n};\n__decorate$3([\n    Property('')\n], FormValidator.prototype, \"locale\", void 0);\n__decorate$3([\n    Property('e-hidden')\n], FormValidator.prototype, \"ignore\", void 0);\n__decorate$3([\n    Property()\n], FormValidator.prototype, \"rules\", void 0);\n__decorate$3([\n    Property('e-error')\n], FormValidator.prototype, \"errorClass\", void 0);\n__decorate$3([\n    Property('e-valid')\n], FormValidator.prototype, \"validClass\", void 0);\n__decorate$3([\n    Property('label')\n], FormValidator.prototype, \"errorElement\", void 0);\n__decorate$3([\n    Property('div')\n], FormValidator.prototype, \"errorContainer\", void 0);\n__decorate$3([\n    Property(ErrorOption.Label)\n], FormValidator.prototype, \"errorOption\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"focusout\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"keyup\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"click\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"change\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"submit\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"validationBegin\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"validationComplete\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"customPlacement\", void 0);\nFormValidator = FormValidator_1 = __decorate$3([\n    NotifyPropertyChanges\n], FormValidator);\n\n/**\n * Input box Component\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CONTROL_WRAPPER = 'e-upload e-control-wrapper';\nconst INPUT_WRAPPER = 'e-file-select';\nconst DROP_AREA = 'e-file-drop';\nconst DROP_WRAPPER = 'e-file-select-wrap';\nconst LIST_PARENT = 'e-upload-files';\nconst FILE = 'e-upload-file-list';\nconst STATUS = 'e-file-status';\nconst ACTION_BUTTONS = 'e-upload-actions';\nconst UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';\nconst CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';\nconst FILE_NAME = 'e-file-name';\nconst FILE_TYPE = 'e-file-type';\nconst FILE_SIZE = 'e-file-size';\nconst REMOVE_ICON = 'e-file-remove-btn';\nconst DELETE_ICON = 'e-file-delete-btn';\nconst SPINNER_PANE = 'e-spinner-pane';\nconst ABORT_ICON = 'e-file-abort-btn';\nconst RETRY_ICON = 'e-file-reload-btn';\nconst DRAG_HOVER = 'e-upload-drag-hover';\nconst PROGRESS_WRAPPER = 'e-upload-progress-wrap';\nconst PROGRESSBAR = 'e-upload-progress-bar';\nconst PROGRESSBAR_TEXT = 'e-progress-bar-text';\nconst UPLOAD_INPROGRESS = 'e-upload-progress';\nconst UPLOAD_SUCCESS = 'e-upload-success';\nconst UPLOAD_FAILED = 'e-upload-fails';\nconst TEXT_CONTAINER = 'e-file-container';\nconst VALIDATION_FAILS = 'e-validation-fails';\nconst RTL = 'e-rtl';\nconst DISABLED = 'e-disabled';\nconst RTL_CONTAINER = 'e-rtl-container';\nconst ICON_FOCUSED = 'e-clear-icon-focus';\nconst PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';\nconst PAUSE_UPLOAD = 'e-file-pause-btn';\nconst RESUME_UPLOAD = 'e-file-play-btn';\nconst RESTRICT_RETRY = 'e-restrict-retry';\nconst wrapperAttr$1 = ['title', 'style', 'class'];\nconst FORM_UPLOAD = 'e-form-upload';\nconst HIDDEN_INPUT = 'e-hidden-file-input';\nconst INVALID_FILE = 'e-file-invalid';\nconst INFORMATION = 'e-file-information';\nclass FilesProp extends ChildProperty {\n}\n__decorate$4([\n    Property('')\n], FilesProp.prototype, \"name\", void 0);\n__decorate$4([\n    Property(null)\n], FilesProp.prototype, \"size\", void 0);\n__decorate$4([\n    Property('')\n], FilesProp.prototype, \"type\", void 0);\nclass ButtonsProps extends ChildProperty {\n}\n__decorate$4([\n    Property('Browse...')\n], ButtonsProps.prototype, \"browse\", void 0);\n__decorate$4([\n    Property('Upload')\n], ButtonsProps.prototype, \"upload\", void 0);\n__decorate$4([\n    Property('Clear')\n], ButtonsProps.prototype, \"clear\", void 0);\nclass AsyncSettings extends ChildProperty {\n}\n__decorate$4([\n    Property('')\n], AsyncSettings.prototype, \"saveUrl\", void 0);\n__decorate$4([\n    Property('')\n], AsyncSettings.prototype, \"removeUrl\", void 0);\n__decorate$4([\n    Property(0)\n], AsyncSettings.prototype, \"chunkSize\", void 0);\n__decorate$4([\n    Property(3)\n], AsyncSettings.prototype, \"retryCount\", void 0);\n__decorate$4([\n    Property(500)\n], AsyncSettings.prototype, \"retryAfterDelay\", void 0);\n/**\n * The uploader component allows to upload images, documents, and other files from local to server.\n * ```html\n * <input type='file' name='images[]' id='upload'/>\n * ```\n * ```typescript\n * <script>\n *   var uploadObj = new Uploader();\n *   uploadObj.appendTo('#upload');\n * </script>\n * ```\n */\nlet Uploader = class Uploader extends Component {\n    /**\n     * Triggers when change the Uploader value.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.initialAttr = { accept: null, multiple: false, disabled: false };\n        this.uploadedFilesData = [];\n        this.base64String = [];\n        this.isForm = false;\n        this.allTypes = false;\n        this.pausedData = [];\n        this.uploadMetaData = [];\n        this.tabIndex = '0';\n        this.btnTabIndex = '0';\n        this.disableKeyboardNavigation = false;\n        this.count = -1;\n        this.actionCompleteCount = 0;\n        this.flag = true;\n        this.selectedFiles = [];\n        this.uploaderName = 'UploadFiles';\n        this.fileStreams = [];\n        this.newFileRef = 0;\n        this.isFirstFileOnSelection = false;\n        /**\n         * Get the file item(li) which are shown in file list.\n         * @private\n         */\n        this.fileList = [];\n        /**\n         * Get the data of files which are shown in file list.\n         * @private\n         */\n        this.filesData = [];\n        this.uploaderOptions = options;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'allowedExtensions':\n                    this.setExtensions(this.allowedExtensions);\n                    this.clearAll();\n                    break;\n                case 'enabled':\n                    this.setControlStatus();\n                    break;\n                case 'multiple':\n                    this.setMultipleSelection();\n                    break;\n                case 'enableRtl':\n                    this.setRTL();\n                    this.reRenderFileList();\n                    break;\n                case 'buttons':\n                    this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? '' : this.buttons.browse;\n                    this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? '' : this.buttons.clear;\n                    this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? '' : this.buttons.upload;\n                    this.renderButtonTemplates();\n                    break;\n                case 'dropArea':\n                    this.unBindDropEvents();\n                    this.updateDropArea();\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.checkHTMLAttributes(true);\n                    break;\n                case 'files':\n                    this.renderPreLoadFiles();\n                    break;\n                case 'directoryUpload':\n                    this.updateDirectoryAttributes();\n                    break;\n                case 'template':\n                    if (!this.isServerBlazor) {\n                        this.clearAll();\n                    }\n                    break;\n                case 'minFileSize':\n                case 'maxFileSize':\n                case 'autoUpload':\n                    this.clearAll();\n                    break;\n                case 'sequentialUpload':\n                    this.clearAll();\n                    break;\n                case 'locale':\n                    this.l10n.setLocale(this.locale);\n                    this.setLocalizedTexts();\n                    this.preLocaleObj = getValue('currentLocale', this.l10n);\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n            }\n        }\n    }\n    setLocalizedTexts() {\n        if (isNullOrUndefined(this.template)) {\n            if (typeof (this.buttons.browse) === 'string') {\n                this.browseButton.innerText = (this.buttons.browse === 'Browse...') ?\n                    this.localizedTexts('Browse') : this.buttons.browse;\n                this.browseButton.setAttribute('title', this.browseButton.innerText);\n                if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + DROP_AREA))) {\n                    this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');\n                }\n            }\n            this.updateFileList();\n        }\n    }\n    getKeyValue(val) {\n        let keyValue;\n        for (let key of Object.keys(this.preLocaleObj)) {\n            if (this.preLocaleObj[key] === val) {\n                keyValue = key;\n            }\n        }\n        return keyValue;\n    }\n    updateFileList() {\n        let element;\n        /* istanbul ignore next */\n        if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {\n            for (let i = 0; i < this.fileList.length; i++) {\n                element = this.fileList[i].querySelector('.e-file-status');\n                element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n                this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n                if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));\n                }\n                if (this.fileList[i].querySelector('.e-file-play-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));\n                }\n                if (this.fileList[i].querySelector('.e-file-remove-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));\n                }\n                if (this.fileList[i].querySelector('.e-file-reload-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));\n                }\n                if (!this.autoUpload) {\n                    this.uploadButton.innerText = (this.buttons.upload === 'Upload') ?\n                        this.localizedTexts('Upload') : this.buttons.upload;\n                    this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));\n                    this.clearButton.innerText = (this.buttons.clear === 'Clear') ?\n                        this.localizedTexts('Clear') : this.buttons.clear;\n                    this.clearButton.setAttribute('title', this.localizedTexts('Clear'));\n                }\n            }\n        }\n    }\n    reRenderFileList() {\n        if (this.listParent) {\n            detach(this.listParent);\n            this.listParent = null;\n            this.fileList = [];\n            this.createFileList(this.filesData);\n            if (this.actionButtons) {\n                this.removeActionButtons();\n                this.renderActionButtons();\n                this.checkActionButtonStatus();\n            }\n        }\n    }\n    preRender() {\n        this.localeText = { Browse: 'Browse...', Clear: 'Clear', Upload: 'Upload',\n            dropFilesHint: 'Or drop files here', invalidMaxFileSize: 'File size is too large',\n            invalidMinFileSize: 'File size is too small', invalidFileType: 'File type is not allowed',\n            uploadFailedMessage: 'File failed to upload', uploadSuccessMessage: 'File uploaded successfully',\n            removedSuccessMessage: 'File removed successfully', removedFailedMessage: 'Unable to remove file', inProgress: 'Uploading',\n            readyToUploadMessage: 'Ready to upload', abort: 'Abort', remove: 'Remove', cancel: 'Cancel', delete: 'Delete file',\n            pauseUpload: 'File upload paused', pause: 'Pause', resume: 'Resume', retry: 'Retry',\n            fileUploadCancel: 'File upload canceled', invalidFileSelection: 'Invalid files selected', totalFiles: 'Total files',\n            size: 'Size'\n        };\n        this.l10n = new L10n('uploader', this.localeText, this.locale);\n        this.preLocaleObj = getValue('currentLocale', this.l10n);\n        this.isServerBlazor = (isBlazor() && this.isServerRendered) ? true : false;\n        this.isBlazorTemplate = this.isServerBlazor && this.template !== '' && !isNullOrUndefined(this.template) ? true : false;\n        this.isBlazorSaveUrl = (this.isServerRendered &&\n            (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl))) ? true : false;\n        if (this.isBlazorSaveUrl && this.sequentialUpload) {\n            this.sequentialUpload = false;\n        }\n        if (!this.isBlazorSaveUrl) {\n            this.formRendered();\n        }\n        if (!this.isServerBlazor) {\n            this.updateHTMLAttrToElement();\n            this.checkHTMLAttributes(false);\n            // tslint:disable-next-line\n            let ejInstance = getValue('ej2_instances', this.element);\n            /* istanbul ignore next */\n            if (this.element.tagName === 'EJS-UPLOADER') {\n                let inputElement = this.createElement('input', { attrs: { type: 'file' } });\n                let index = 0;\n                for (index; index < this.element.attributes.length; index++) {\n                    inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                    inputElement.innerHTML = this.element.innerHTML;\n                }\n                if (!inputElement.hasAttribute('name')) {\n                    inputElement.setAttribute('name', 'UploadFiles');\n                }\n                this.element.appendChild(inputElement);\n                this.element = inputElement;\n                setValue('ej2_instances', ejInstance, this.element);\n            }\n            /* istanbul ignore next */\n            if (ejInstance[0].isPureReactComponent) {\n                if (!isNullOrUndefined(ejInstance[0].props.name)) {\n                    this.element.setAttribute('name', ejInstance[0].props.name);\n                }\n                else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {\n                    this.element.setAttribute('name', ejInstance[0].props.id);\n                }\n                else {\n                    this.element.setAttribute('name', 'UploadFiles');\n                }\n            }\n            if (isNullOrUndefined(this.element.getAttribute('name'))) {\n                this.element.setAttribute('name', this.element.getAttribute('id'));\n            }\n            if (!this.element.hasAttribute('type')) {\n                this.element.setAttribute('type', 'file');\n            }\n            this.updateDirectoryAttributes();\n        }\n        this.keyConfigs = {\n            enter: 'enter'\n        };\n        if (this.element.hasAttribute('tabindex')) {\n            this.tabIndex = this.element.getAttribute('tabindex');\n        }\n        this.browserName = Browser.info.name;\n        this.uploaderName = this.element.getAttribute('name');\n    }\n    formRendered() {\n        let parentEle = closest(this.element, 'form');\n        if (!isNullOrUndefined(parentEle)) {\n            for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {\n                if (parentEle.tagName === 'FORM') {\n                    this.isForm = true;\n                    this.formElement = parentEle;\n                    parentEle.setAttribute('enctype', 'multipart/form-data');\n                    parentEle.setAttribute('encoding', 'multipart/form-data');\n                }\n            }\n        }\n    }\n    getPersistData() {\n        return this.addOnPersist(['filesData']);\n    }\n    /**\n     * Return the module name of the component.\n     */\n    getModuleName() {\n        return 'uploader';\n    }\n    updateDirectoryAttributes() {\n        if (this.directoryUpload) {\n            this.element.setAttribute('directory', 'true');\n            this.element.setAttribute('webkitdirectory', 'true');\n        }\n        else {\n            this.element.removeAttribute('directory');\n            this.element.removeAttribute('webkitdirectory');\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!this.isServerBlazor) {\n            this.renderBrowseButton();\n            this.initializeUpload();\n            this.updateHTMLAttrToWrapper();\n            this.wireEvents();\n            this.setMultipleSelection();\n            this.setExtensions(this.allowedExtensions);\n            this.setRTL();\n            this.renderPreLoadFiles();\n            this.setControlStatus();\n            this.setCSSClass();\n        }\n        else {\n            this.dropAreaWrapper = closest(this.element, '.' + DROP_WRAPPER);\n            this.uploadWrapper = closest(this.element, '.e-upload.e-control-wrapper');\n            this.browseButton = this.dropAreaWrapper.querySelector('button.e-upload-browse-btn');\n            this.setDropArea();\n            this.renderPreLoadFiles();\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    renderBrowseButton() {\n        this.browseButton = this.createElement('button', { className: 'e-css e-btn', attrs: { 'type': 'button' } });\n        this.browseButton.setAttribute('tabindex', this.tabIndex);\n        if (typeof (this.buttons.browse) === 'string') {\n            this.browseButton.textContent = (this.buttons.browse === 'Browse...') ?\n                this.localizedTexts('Browse') : this.buttons.browse;\n            this.browseButton.setAttribute('title', this.browseButton.innerText);\n        }\n        else {\n            this.browseButton.appendChild(this.buttons.browse);\n        }\n        this.element.setAttribute('aria-label', 'Uploader');\n    }\n    renderActionButtons() {\n        this.element.setAttribute('tabindex', '-1');\n        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.actionButtons = this.createElement('div', { className: ACTION_BUTTONS });\n            this.uploadButton = this.createElement('button', { className: UPLOAD_BUTTONS,\n                attrs: { 'type': 'button', 'tabindex': this.btnTabIndex } });\n            this.clearButton = this.createElement('button', { className: CLEAR_BUTTONS,\n                attrs: { 'type': 'button', 'tabindex': this.btnTabIndex } });\n            this.actionButtons.appendChild(this.clearButton);\n            this.actionButtons.appendChild(this.uploadButton);\n            this.renderButtonTemplates();\n            this.uploadWrapper.appendChild(this.actionButtons);\n            this.browseButton.blur();\n            this.uploadButton.focus();\n            this.wireActionButtonEvents();\n        }\n    }\n    /* istanbul ignore next */\n    serverActionButtonsEventBind(element) {\n        if (element && !this.isForm) {\n            this.browseButton.blur();\n            this.actionButtons = element;\n            this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');\n            this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');\n            this.uploadButton.focus();\n            this.unwireActionButtonEvents();\n            this.wireActionButtonEvents();\n            this.checkActionButtonStatus();\n        }\n    }\n    /* istanbul ignore next */\n    serverUlElement(element) {\n        if (element) {\n            if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n                this.listParent = element;\n                this.fileList = [].slice.call(this.listParent.querySelectorAll('li'));\n                this.serverRemoveIconBindEvent();\n                if (!this.isForm) {\n                    this.checkAutoUpload(this.filesData);\n                }\n            }\n        }\n    }\n    wireActionButtonEvents() {\n        EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);\n        EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);\n    }\n    unwireActionButtonEvents() {\n        EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);\n        EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);\n    }\n    removeActionButtons() {\n        if (this.actionButtons) {\n            this.unwireActionButtonEvents();\n            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                detach(this.actionButtons);\n            }\n            this.actionButtons = null;\n        }\n    }\n    renderButtonTemplates() {\n        if (typeof (this.buttons.browse) === 'string') {\n            this.browseButton.textContent = (this.buttons.browse === 'Browse...') ?\n                this.localizedTexts('Browse') : this.buttons.browse;\n            this.browseButton.setAttribute('title', this.browseButton.textContent);\n        }\n        else {\n            this.browseButton.innerHTML = '';\n            this.browseButton.appendChild(this.buttons.browse);\n        }\n        if (this.uploadButton) {\n            let uploadText;\n            uploadText = isNullOrUndefined(this.buttons.upload) ? 'Upload' : this.buttons.upload;\n            this.buttons.upload = uploadText;\n            if (typeof (this.buttons.upload) === 'string') {\n                this.uploadButton.textContent = (this.buttons.upload === 'Upload') ?\n                    this.localizedTexts('Upload') : this.buttons.upload;\n                this.uploadButton.setAttribute('title', this.uploadButton.textContent);\n            }\n            else {\n                this.uploadButton.innerHTML = '';\n                this.uploadButton.appendChild(this.buttons.upload);\n            }\n        }\n        if (this.clearButton) {\n            let clearText;\n            clearText = isNullOrUndefined(this.buttons.clear) ? 'Clear' : this.buttons.clear;\n            this.buttons.clear = clearText;\n            if (typeof (this.buttons.clear) === 'string') {\n                this.clearButton.textContent = (this.buttons.clear === 'Clear') ?\n                    this.localizedTexts('Clear') : this.buttons.clear;\n                this.clearButton.setAttribute('title', this.clearButton.textContent);\n            }\n            else {\n                this.clearButton.innerHTML = '';\n                this.clearButton.appendChild(this.buttons.clear);\n            }\n        }\n    }\n    initializeUpload() {\n        this.element.setAttribute('tabindex', '-1');\n        let inputWrapper = this.createElement('span', { className: INPUT_WRAPPER });\n        this.element.parentElement.insertBefore(inputWrapper, this.element);\n        this.dropAreaWrapper = this.createElement('div', { className: DROP_WRAPPER });\n        this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);\n        inputWrapper.appendChild(this.element);\n        this.dropAreaWrapper.appendChild(this.browseButton);\n        this.dropAreaWrapper.appendChild(inputWrapper);\n        this.uploadWrapper = this.createElement('div', { className: CONTROL_WRAPPER });\n        this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);\n        this.uploadWrapper.appendChild(this.dropAreaWrapper);\n        this.setDropArea();\n    }\n    renderPreLoadFiles() {\n        if (this.files.length) {\n            if (this.enablePersistence && this.filesData.length) {\n                this.createFileList(this.filesData);\n                return;\n            }\n            if (isNullOrUndefined(this.files[0].size)) {\n                return;\n            }\n            let files = [].slice.call(this.files);\n            let filesData = [];\n            if (!this.multiple) {\n                this.clearData();\n                files = [files[0]];\n            }\n            for (let data of files) {\n                let fileData = {\n                    name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],\n                    rawFile: '',\n                    size: data.size,\n                    status: this.localizedTexts('uploadSuccessMessage'),\n                    type: data.type,\n                    validationMessages: { minSize: '', maxSize: '' },\n                    statusCode: '2'\n                };\n                filesData.push(fileData);\n                this.filesData.push(fileData);\n            }\n            this.createFileList(filesData);\n            if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {\n                this.renderActionButtons();\n            }\n            this.checkActionButtonStatus();\n            if (this.sequentialUpload) {\n                this.count = this.filesData.length - 1;\n            }\n        }\n    }\n    checkActionButtonStatus() {\n        if (this.actionButtons) {\n            let length = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length +\n                this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length +\n                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length +\n                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;\n            if (length > 0 && length === this.uploadWrapper.querySelectorAll('li').length) {\n                this.uploadButton.setAttribute('disabled', 'disabled');\n            }\n            else {\n                this.uploadButton.removeAttribute('disabled');\n            }\n        }\n    }\n    setDropArea() {\n        let dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n        if (this.dropArea) {\n            this.dropZoneElement = (typeof (this.dropArea) !== 'string') ? this.dropArea :\n                document.querySelector(this.dropArea);\n            let element = this.element;\n            let enableDropText = false;\n            while (element.parentNode) {\n                element = element.parentNode;\n                if (element === this.dropZoneElement) {\n                    enableDropText = true;\n                    if (!dropTextArea) {\n                        this.createDropTextHint();\n                    }\n                    else if (!this.isServerBlazor) {\n                        dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');\n                    }\n                }\n            }\n            if (!enableDropText && dropTextArea) {\n                dropTextArea.remove();\n            }\n        }\n        else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {\n            this.createDropTextHint();\n            this.dropZoneElement = this.uploadWrapper;\n            this.setProperties({ dropArea: this.uploadWrapper }, true);\n        }\n        this.bindDropEvents();\n    }\n    updateDropArea() {\n        if (this.dropArea) {\n            this.setDropArea();\n        }\n        else {\n            this.dropZoneElement = null;\n            let dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n            if (dropTextArea) {\n                dropTextArea.remove();\n            }\n        }\n    }\n    createDropTextHint() {\n        if (!this.isServerBlazor) {\n            let fileDropArea = this.createElement('span', { className: DROP_AREA });\n            fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');\n            this.dropAreaWrapper.appendChild(fileDropArea);\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr$1.indexOf(pro) < 0) {\n                    this.element.setAttribute(pro, this.htmlAttributes[pro]);\n                }\n            }\n        }\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr$1.indexOf(pro) > -1) {\n                    if (pro === 'class') {\n                        let updatedClassValues = (this.htmlAttributes[pro].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValues !== '') {\n                            addClass([this.uploadWrapper], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (pro === 'style') {\n                        let uploadStyle = this.uploadWrapper.getAttribute(pro);\n                        uploadStyle = !isNullOrUndefined(uploadStyle) ? (uploadStyle + this.htmlAttributes[pro]) :\n                            this.htmlAttributes[pro];\n                        this.uploadWrapper.setAttribute(pro, uploadStyle);\n                    }\n                    else {\n                        this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);\n                    }\n                }\n            }\n        }\n    }\n    setMultipleSelection() {\n        if (this.multiple && !this.element.hasAttribute('multiple')) {\n            let newAttr = document.createAttribute('multiple');\n            newAttr.value = 'multiple';\n            this.element.setAttributeNode(newAttr);\n        }\n        else if (!this.multiple) {\n            this.element.removeAttribute('multiple');\n        }\n    }\n    checkAutoUpload(fileData) {\n        if (this.autoUpload) {\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                this.sequenceUpload(fileData);\n            }\n            else {\n                this.upload(fileData);\n            }\n            this.removeActionButtons();\n        }\n        else if (!this.actionButtons) {\n            this.renderActionButtons();\n        }\n        this.checkActionButtonStatus();\n    }\n    sequenceUpload(fileData) {\n        if (this.filesData.length - fileData.length === 0 ||\n            this.filesData[(this.filesData.length - fileData.length - 1)].statusCode !== '1') {\n            ++this.count;\n            let isFileListCreated = this.showFileList ? false : true;\n            if (typeof this.filesData[this.count] === 'object') {\n                this.isFirstFileOnSelection = false;\n                this.upload(this.filesData[this.count], isFileListCreated);\n                if (this.filesData[this.count].statusCode === '0') {\n                    this.sequenceUpload(fileData);\n                }\n            }\n            else {\n                --this.count;\n            }\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== '') {\n            addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));\n        }\n        let updatedOldCssClass = oldCSSClass;\n        if (!isNullOrUndefined(oldCSSClass)) {\n            updatedOldCssClass = (oldCSSClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== '') {\n            removeClass([this.uploadWrapper], updatedOldCssClass.split(' '));\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);\n        EventHandler.add(this.element, 'change', this.onSelectFiles, this);\n        EventHandler.add(document, 'click', this.removeFocus, this);\n        this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n        if (this.isForm) {\n            EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n        }\n    }\n    unWireEvents() {\n        EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);\n        EventHandler.remove(this.element, 'change', this.onSelectFiles);\n        EventHandler.remove(document, 'click', this.removeFocus);\n        if (this.isForm) {\n            EventHandler.remove(this.formElement, 'reset', this.resetForm);\n        }\n        this.keyboardModule.destroy();\n    }\n    resetForm() {\n        this.clearAll();\n    }\n    keyActionHandler(e) {\n        let targetElement = e.target;\n        switch (e.action) {\n            case 'enter':\n                if (e.target === this.clearButton) {\n                    this.clearButtonClick();\n                }\n                else if (e.target === this.uploadButton) {\n                    this.uploadButtonClick();\n                }\n                else if (e.target === this.browseButton) {\n                    this.browseButtonClick();\n                }\n                else if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n                    let metaData = this.getCurrentMetaData(null, e);\n                    metaData.file.statusCode = '4';\n                    metaData.file.status = this.localizedTexts('pauseUpload');\n                    this.abortUpload(metaData, false);\n                }\n                else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n                    this.resumeUpload(this.getCurrentMetaData(null, e), e);\n                }\n                else if (targetElement.classList.contains(RETRY_ICON)) {\n                    let metaData = this.getCurrentMetaData(null, e);\n                    if (!isNullOrUndefined(metaData)) {\n                        metaData.file.statusCode = '1';\n                        metaData.file.status = this.localizedTexts('readyToUploadMessage');\n                        this.chunkUpload(metaData.file);\n                    }\n                    else {\n                        let target = e.target.parentElement;\n                        let fileData = this.filesData[this.fileList.indexOf(target)];\n                        this.retry(fileData);\n                    }\n                }\n                else {\n                    this.removeFiles(e);\n                    if (!targetElement.classList.contains(ABORT_ICON)) {\n                        this.browseButton.focus();\n                    }\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                break;\n        }\n    }\n    getCurrentMetaData(fileInfo, e) {\n        let fileData;\n        let targetMetaData;\n        if (isNullOrUndefined(fileInfo)) {\n            let target = e.target.parentElement;\n            fileData = this.filesData[this.fileList.indexOf(target)];\n        }\n        else {\n            fileData = fileInfo;\n        }\n        for (let i = 0; i < this.uploadMetaData.length; i++) {\n            if (this.uploadMetaData[i].file.name === fileData.name) {\n                targetMetaData = this.uploadMetaData[i];\n            }\n        }\n        return targetMetaData;\n    }\n    removeFocus() {\n        if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {\n            document.activeElement.blur();\n            this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);\n        }\n    }\n    browseButtonClick() {\n        this.element.click();\n    }\n    uploadButtonClick() {\n        if (this.sequentialUpload) {\n            this.sequenceUpload(this.filesData);\n        }\n        else {\n            this.upload(this.filesData);\n        }\n    }\n    clearButtonClick() {\n        this.clearAll();\n        /* istanbul ignore next */\n        if (this.sequentialUpload) {\n            this.count = -1;\n        }\n        this.actionCompleteCount = 0;\n    }\n    bindDropEvents() {\n        if (this.dropZoneElement) {\n            EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);\n            EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);\n            EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);\n            EventHandler.add(this.dropZoneElement, 'paste', this.onPasteFile, this);\n        }\n    }\n    unBindDropEvents() {\n        if (this.dropZoneElement) {\n            EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);\n            EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);\n            EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);\n        }\n    }\n    onDragLeave(e) {\n        this.dropZoneElement.classList.remove(DRAG_HOVER);\n    }\n    dragHover(e) {\n        if (!this.enabled) {\n            return;\n        }\n        this.dropZoneElement.classList.add(DRAG_HOVER);\n        if (this.dropEffect !== 'Default') {\n            e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    /* istanbul ignore next */\n    dropElement(e) {\n        this.dropZoneElement.classList.remove(DRAG_HOVER);\n        this.onSelectFiles(e);\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    /* istanbul ignore next */\n    onPasteFile(event) {\n        let item = event.clipboardData.items;\n        if (item.length !== 1) {\n            return;\n        }\n        let pasteFile = [].slice.call(item)[0];\n        if ((pasteFile.kind === 'file') && pasteFile.type.match('^image/')) {\n            this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);\n        }\n    }\n    getSelectedFiles(index) {\n        let data = [];\n        let liElement = this.fileList[index];\n        let allFiles = this.getFilesData();\n        let nameElements = +liElement.getAttribute('data-files-count');\n        let startIndex = 0;\n        for (let i = 0; i < index; i++) {\n            startIndex += (+this.fileList[i].getAttribute('data-files-count'));\n        }\n        for (let j = startIndex; j < (startIndex + nameElements); j++) {\n            data.push(allFiles[j]);\n        }\n        return data;\n    }\n    removeFiles(args) {\n        if (!this.enabled) {\n            return;\n        }\n        let selectedElement = args.target.parentElement;\n        if (this.isBlazorSaveUrl) {\n            this.fileList = [].slice.call(this.uploadWrapper.querySelectorAll('li'));\n        }\n        let index = this.fileList.indexOf(selectedElement);\n        let liElement = this.fileList[index];\n        let formUpload = this.isFormUpload();\n        let fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);\n        if (isNullOrUndefined(fileData)) {\n            return;\n        }\n        if (args.target.classList.contains(ABORT_ICON) && !formUpload) {\n            fileData[0].statusCode = '5';\n            if (!isNullOrUndefined(liElement)) {\n                let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n                createSpinner({ target: spinnerTarget, width: '20px' });\n                showSpinner(spinnerTarget);\n            }\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                this.uploadSequential();\n            }\n            if (!(liElement.classList.contains(RESTRICT_RETRY))) {\n                this.checkActionComplete(true);\n            }\n        }\n        else if (!closest(args.target, '.' + SPINNER_PANE)) {\n            this.remove(fileData, false, false, true, args);\n        }\n        this.element.value = '';\n        this.checkActionButtonStatus();\n    }\n    removeFilesData(file, customTemplate) {\n        let index;\n        if (customTemplate) {\n            if (!this.showFileList) {\n                index = this.filesData.indexOf(file);\n                this.filesData.splice(index, 1);\n            }\n            return;\n        }\n        let selectedElement = this.getLiElement(file);\n        if (isNullOrUndefined(selectedElement)) {\n            return;\n        }\n        if (!this.isBlazorSaveUrl) {\n            detach(selectedElement);\n        }\n        index = this.fileList.indexOf(selectedElement);\n        this.fileList.splice(index, 1);\n        this.filesData.splice(index, 1);\n        if (!this.isBlazorSaveUrl) {\n            if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {\n                detach(this.listParent);\n                this.listParent = null;\n                this.removeActionButtons();\n            }\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                if (index <= this.count) {\n                    --this.count;\n                }\n            }\n        }\n        else {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('removeFileData', index);\n        }\n    }\n    removeUploadedFile(file, eventArgs, removeDirectly, custom) {\n        let selectedFiles = file;\n        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n        ajax.emitError = false;\n        let formData = new FormData();\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            if (isBlazor()) {\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            if (!removeDirectly) {\n                this.trigger('removing', eventArgs, (eventArgs) => {\n                    if (eventArgs.cancel) {\n                        e.cancel = true;\n                    }\n                    else {\n                        this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n                    }\n                });\n            }\n            else {\n                this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n            }\n        };\n        if (this.isServerBlazor) {\n            let name = this.element.getAttribute('name');\n            if (!isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n                formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n            }\n            else {\n                formData.append(name, selectedFiles.name);\n            }\n        }\n        ajax.onLoad = (e) => { this.removeCompleted(e, selectedFiles, custom); return {}; };\n        /* istanbul ignore next */\n        ajax.onError = (e) => { this.removeFailed(e, selectedFiles, custom); return {}; };\n        ajax.send(formData);\n    }\n    removingEventCallback(eventArgs, formData, selectedFiles, file) {\n        /* istanbul ignore next */\n        let name = this.element.getAttribute('name');\n        let liElement = this.getLiElement(file);\n        if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON)) ||\n            !isNullOrUndefined(liElement.querySelector('.' + REMOVE_ICON)))) {\n            let spinnerTarget;\n            spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) :\n                liElement.querySelector('.' + REMOVE_ICON);\n            createSpinner({ target: spinnerTarget, width: '20px' });\n            showSpinner(spinnerTarget);\n        }\n        if (!this.isServerBlazor) {\n            if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n                formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n            }\n            else {\n                formData.append(name, selectedFiles.name);\n            }\n            this.updateFormData(formData, eventArgs.customFormData);\n        }\n    }\n    /* istanbul ignore next */\n    updateFormData(formData, customData) {\n        if (customData.length > 0 && customData[0]) {\n            for (let i = 0; i < customData.length; i++) {\n                let data = customData[i];\n                // tslint:disable-next-line\n                let value = Object.keys(data).map(function (e) {\n                    return data[e];\n                });\n                formData.append(Object.keys(data)[0], value);\n            }\n        }\n    }\n    /* istanbul ignore next */\n    updateCustomheader(request, currentRequest) {\n        if (currentRequest.length > 0 && currentRequest[0]) {\n            for (let i = 0; i < currentRequest.length; i++) {\n                let data = currentRequest[i];\n                // tslint:disable-next-line\n                let value = Object.keys(data).map(function (e) {\n                    return data[e];\n                });\n                request.setRequestHeader(Object.keys(data)[0], value);\n            }\n        }\n    }\n    removeCompleted(e, files, customTemplate) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = {\n            e, response: response, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')\n        };\n        this.trigger('success', args);\n        this.removeFilesData(files, customTemplate);\n        let index = this.uploadedFilesData.indexOf(files);\n        this.uploadedFilesData.splice(index, 1);\n        this.trigger('change', { files: this.uploadedFilesData });\n    }\n    removeFailed(e, files, customTemplate) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = {\n            e, response: response, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')\n        };\n        if (!customTemplate) {\n            let index = this.filesData.indexOf(files);\n            let rootElement = this.fileList[index];\n            if (rootElement) {\n                rootElement.classList.remove(UPLOAD_SUCCESS);\n                rootElement.classList.add(UPLOAD_FAILED);\n                let statusElement = rootElement.querySelector('.' + STATUS);\n                if (statusElement) {\n                    statusElement.classList.remove(UPLOAD_SUCCESS);\n                    statusElement.classList.add(UPLOAD_FAILED);\n                }\n            }\n            this.checkActionButtonStatus();\n        }\n        this.trigger('failure', args);\n        let liElement = this.getLiElement(files);\n        /* istanbul ignore next */\n        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON))) {\n            let spinnerTarget = liElement.querySelector('.' + DELETE_ICON);\n            hideSpinner(spinnerTarget);\n            detach(liElement.querySelector('.e-spinner-pane'));\n        }\n    }\n    /* istanbul ignore next */\n    getFilesFromFolder(event) {\n        this.filesEntries = [];\n        let items;\n        items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];\n        let validDirectoryUpload = this.checkDirectoryUpload(items);\n        if (!validDirectoryUpload) {\n            return;\n        }\n        for (let i = 0; i < items.length; i++) {\n            // tslint:disable-next-line\n            let item = items[i].webkitGetAsEntry();\n            if (item.isFile) {\n                let files = [];\n                // tslint:disable-next-line\n                (item).file((fileObj) => {\n                    let path = item.fullPath;\n                    files.push({ 'path': path, 'file': fileObj });\n                });\n                this.renderSelectedFiles(event, files, true);\n            }\n            else if (item.isDirectory) {\n                this.traverseFileTree(item, event);\n            }\n        }\n    }\n    /* istanbul ignore next */\n    checkDirectoryUpload(items) {\n        for (let i = 0; items && i < items.length; i++) {\n            // tslint:disable-next-line\n            let item = items[i].webkitGetAsEntry();\n            if (item.isDirectory) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // tslint:disable\n    /* istanbul ignore next */\n    traverseFileTree(item, event) {\n        if (item.isFile) {\n            this.filesEntries.push(item);\n        }\n        else if (item.isDirectory) {\n            // tslint:disable-next-line\n            let directoryReader = item.createReader();\n            // tslint:disable-next-line\n            this.readFileFromDirectory(directoryReader, event);\n        }\n    }\n    // tslint:disable\n    /* istanbul ignore next */\n    readFileFromDirectory(directoryReader, event) {\n        // tslint:disable-next-line\n        directoryReader.readEntries((entries) => {\n            for (let i = 0; i < entries.length; i++) {\n                this.traverseFileTree(entries[i]);\n                // tslint:disable-next-line\n            }\n            \n            this.pushFilesEntries(event);\n            if (entries.length) {\n                this.readFileFromDirectory(directoryReader);\n            }\n        });\n    }\n    pushFilesEntries(event) {\n        let files = [];\n        for (let i = 0; i < this.filesEntries.length; i++) {\n            // tslint:disable-next-line\n            this.filesEntries[i].file((fileObj) => {\n                if (this.filesEntries) {\n                    let path = this.filesEntries[i].fullPath;\n                    files.push({ 'path': path, 'file': fileObj });\n                    if (i === this.filesEntries.length - 1) {\n                        this.filesEntries = [];\n                        this.renderSelectedFiles(event, files, true);\n                    }\n                }\n            });\n        }\n    }\n    // tslint:enable\n    onSelectFiles(args) {\n        if (!this.enabled) {\n            return;\n        }\n        let targetFiles;\n        /* istanbul ignore next */\n        if (args.type === 'drop') {\n            if (this.directoryUpload) {\n                this.getFilesFromFolder(args);\n            }\n            else {\n                let files = this.sortFilesList = args.dataTransfer.files;\n                if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n                    this.element.files = files;\n                }\n                targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];\n                this.renderSelectedFiles(args, targetFiles);\n            }\n        }\n        else {\n            targetFiles = [].slice.call(args.target.files);\n            this.renderSelectedFiles(args, targetFiles);\n        }\n    }\n    /* istanbul ignore next */\n    getBase64(file) {\n        return new Promise((resolve, reject) => {\n            let fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = () => resolve(fileReader.result);\n            fileReader.onerror = (error) => reject(error);\n        });\n    }\n    /* istanbul ignore next */\n    /* tslint:ignore */\n    renderSelectedFiles(args, \n    // tslint:disable-next-line\n    targetFiles, directory, paste) {\n        this.base64String = [];\n        // tslint:disable-next-line\n        let eventArgs = {\n            event: args,\n            cancel: false,\n            filesData: [],\n            isModified: false,\n            modifiedFilesData: [],\n            progressInterval: '',\n            isCanceled: false,\n            currentRequest: null,\n            customFormData: null\n        };\n        /* istanbul ignore next */\n        if (targetFiles.length < 1) {\n            eventArgs.isCanceled = true;\n            this.trigger('selected', eventArgs);\n            return;\n        }\n        this.flag = true;\n        let fileData = [];\n        if (!this.multiple) {\n            this.clearData(true);\n            targetFiles = [targetFiles[0]];\n        }\n        for (let i = 0; i < targetFiles.length; i++) {\n            let file = directory ? targetFiles[i].file : targetFiles[i];\n            this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);\n        }\n        eventArgs.filesData = fileData;\n        if (this.allowedExtensions.indexOf('*') > -1) {\n            this.allTypes = true;\n        }\n        if (!this.allTypes) {\n            fileData = this.checkExtension(fileData);\n        }\n        this.trigger('selected', eventArgs, (eventArgs) => {\n            this._internalRenderSelect(eventArgs, fileData);\n        });\n    }\n    updateInitialFileDetails(args, \n    // tslint:disable-next-line\n    targetFiles, file, i, fileData, directory, paste) {\n        let fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ?\n            getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) :\n            this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;\n        let fileDetails = {\n            name: fileName,\n            rawFile: file,\n            size: file.size,\n            status: this.localizedTexts('readyToUploadMessage'),\n            type: this.getFileType(file.name),\n            validationMessages: this.validatedFileSize(file.size),\n            statusCode: '1',\n            id: getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)\n        };\n        /* istanbul ignore next */\n        if (paste) {\n            fileDetails.fileSource = 'paste';\n        }\n        fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n            fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;\n        if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {\n            fileDetails.statusCode = '0';\n        }\n        fileData.push(fileDetails);\n    }\n    _internalRenderSelect(eventArgs, fileData) {\n        if (!eventArgs.cancel) {\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                this.currentRequestHeader = eventArgs.currentRequest;\n                this.customFormDatas = eventArgs.customFormData;\n            }\n            this.selectedFiles = fileData;\n            this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';\n            if (this.showFileList) {\n                if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {\n                    for (let j = 0; j < eventArgs.modifiedFilesData.length; j++) {\n                        for (let k = 0; k < fileData.length; k++) {\n                            if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {\n                                eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;\n                            }\n                        }\n                    }\n                    let dataFiles = this.allTypes ? eventArgs.modifiedFilesData :\n                        this.checkExtension(eventArgs.modifiedFilesData);\n                    this.updateSortedFileList(dataFiles);\n                    this.filesData = dataFiles;\n                    if (!this.isForm || this.allowUpload()) {\n                        this.checkAutoUpload(dataFiles);\n                    }\n                }\n                else {\n                    this.createFileList(fileData, true);\n                    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                        this.filesData = this.filesData.concat(fileData);\n                    }\n                    if (!this.isForm || this.allowUpload()) {\n                        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                            this.checkAutoUpload(fileData);\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {\n                    this.progressInterval = eventArgs.progressInterval;\n                }\n            }\n            else {\n                this.filesData = this.filesData.concat(fileData);\n                if (this.isBlazorSaveUrl) {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('updateServerFileData', this.filesData, this.isForm);\n                }\n                if (this.autoUpload) {\n                    this.upload(this.filesData, true);\n                }\n            }\n            this.raiseActionComplete();\n            this.isFirstFileOnSelection = true;\n        }\n    }\n    allowUpload() {\n        let allowFormUpload = false;\n        if (this.isForm && (!isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '')) {\n            allowFormUpload = true;\n        }\n        return allowFormUpload;\n    }\n    isFormUpload() {\n        let isFormUpload = false;\n        if (this.isForm && ((isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '')\n            && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === ''))) {\n            isFormUpload = true;\n        }\n        return isFormUpload;\n    }\n    clearData(singleUpload) {\n        if (!isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            detach(this.listParent);\n            this.listParent = null;\n        }\n        if (this.browserName !== 'msie' && !singleUpload) {\n            this.element.value = '';\n        }\n        this.fileList = [];\n        this.filesData = [];\n        if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('clearAll');\n        }\n        else {\n            this.removeActionButtons();\n        }\n    }\n    updateSortedFileList(filesData) {\n        let previousListClone = this.createElement('div', { id: 'clonewrapper' });\n        let added = -1;\n        let removedList;\n        if (this.listParent) {\n            for (let i = 0; i < this.listParent.querySelectorAll('li').length; i++) {\n                let liElement = this.listParent.querySelectorAll('li')[i];\n                previousListClone.appendChild(liElement.cloneNode(true));\n            }\n            removedList = this.listParent.querySelectorAll('li');\n            for (let item of removedList) {\n                detach(item);\n            }\n            this.removeActionButtons();\n            let oldList = [].slice.call(previousListClone.childNodes);\n            detach(this.listParent);\n            this.listParent = null;\n            this.fileList = [];\n            this.createParentUL();\n            for (let index = 0; index < filesData.length; index++) {\n                for (let j = 0; j < this.filesData.length; j++) {\n                    if (this.filesData[j].name === filesData[index].name) {\n                        this.listParent.appendChild(oldList[j]);\n                        EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);\n                        this.fileList.push(oldList[j]);\n                        added = index;\n                    }\n                }\n                if (added !== index) {\n                    this.createFileList([filesData[index]]);\n                }\n            }\n        }\n        else {\n            this.createFileList(filesData);\n        }\n    }\n    isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n    checkExtension(files) {\n        let dropFiles = files;\n        if (!this.isBlank(this.allowedExtensions)) {\n            let allowedExtensions = [];\n            let extensions = this.allowedExtensions.split(',');\n            for (let extension of extensions) {\n                allowedExtensions.push(extension.trim().toLocaleLowerCase());\n            }\n            for (let i = 0; i < files.length; i++) {\n                if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {\n                    files[i].status = this.localizedTexts('invalidFileType');\n                    files[i].statusCode = '0';\n                }\n            }\n        }\n        return dropFiles;\n    }\n    validatedFileSize(fileSize) {\n        let minSizeError = '';\n        let maxSizeError = '';\n        if (fileSize < this.minFileSize) {\n            minSizeError = this.localizedTexts('invalidMinFileSize');\n        }\n        else if (fileSize > this.maxFileSize) {\n            maxSizeError = this.localizedTexts('invalidMaxFileSize');\n        }\n        else {\n            minSizeError = '';\n            maxSizeError = '';\n        }\n        let errorMessage = { minSize: minSizeError, maxSize: maxSizeError };\n        return errorMessage;\n    }\n    isPreLoadFile(fileData) {\n        let isPreload = false;\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {\n                isPreload = true;\n            }\n        }\n        return isPreload;\n    }\n    createCustomfileList(fileData) {\n        this.createParentUL();\n        resetBlazorTemplate(this.element.id + 'Template', 'Template');\n        for (let listItem of fileData) {\n            let liElement = this.createElement('li', { className: FILE, attrs: { 'data-file-name': listItem.name } });\n            this.uploadTemplateFn = this.templateComplier(this.template);\n            let fromElements = [].slice.call(this.uploadTemplateFn(listItem, null, null, this.element.id + 'Template', this.isStringTemplate));\n            let index = fileData.indexOf(listItem);\n            append(fromElements, liElement);\n            let eventArgs = {\n                element: liElement,\n                fileInfo: listItem,\n                index: index,\n                isPreload: this.isPreLoadFile(listItem)\n            };\n            let eventsArgs = {\n                element: liElement,\n                fileInfo: listItem,\n                index: index,\n                isPreload: this.isPreLoadFile(listItem)\n            };\n            this.trigger('rendering', eventArgs);\n            this.trigger('fileListRendering', eventsArgs);\n            this.listParent.appendChild(liElement);\n            this.fileList.push(liElement);\n        }\n        updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n    }\n    createParentUL() {\n        if (isNullOrUndefined(this.listParent)) {\n            this.listParent = this.createElement('ul', { className: LIST_PARENT });\n            this.uploadWrapper.appendChild(this.listParent);\n        }\n    }\n    formFileList(fileData, files) {\n        let fileList = this.createElement('li', { className: FILE });\n        fileList.setAttribute('data-files-count', fileData.length + '');\n        let fileContainer = this.createElement('span', { className: TEXT_CONTAINER });\n        let statusMessage;\n        for (let listItem of fileData) {\n            let fileNameEle = this.createElement('span', { className: FILE_NAME });\n            fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);\n            let fileTypeEle = this.createElement('span', { className: FILE_TYPE });\n            fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);\n            if (!this.enableRtl) {\n                fileContainer.appendChild(fileNameEle);\n                fileContainer.appendChild(fileTypeEle);\n            }\n            else {\n                let rtlContainer = this.createElement('span', { className: RTL_CONTAINER });\n                rtlContainer.appendChild(fileTypeEle);\n                rtlContainer.appendChild(fileNameEle);\n                fileContainer.appendChild(rtlContainer);\n            }\n            this.truncateName(fileNameEle);\n            statusMessage = this.formValidateFileInfo(listItem, fileList);\n        }\n        fileList.appendChild(fileContainer);\n        this.setListToFileInfo(fileData, fileList);\n        let index = this.listParent.querySelectorAll('li').length;\n        let infoEle = this.createElement('span');\n        if (fileList.classList.contains(INVALID_FILE)) {\n            infoEle.classList.add(STATUS);\n            infoEle.classList.add(INVALID_FILE);\n            infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n        }\n        else {\n            infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);\n            infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , '\n                + this.localizedTexts('size') + ': ' +\n                this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);\n            this.createFormInput(fileData);\n        }\n        fileContainer.appendChild(infoEle);\n        if (isNullOrUndefined(fileList.querySelector('.e-icons'))) {\n            let iconElement = this.createElement('span', { className: 'e-icons', attrs: { 'tabindex': this.btnTabIndex } });\n            /* istanbul ignore next */\n            if (this.browserName === 'msie') {\n                iconElement.classList.add('e-msie');\n            }\n            iconElement.setAttribute('title', this.localizedTexts('remove'));\n            fileList.appendChild(fileContainer);\n            fileList.appendChild(iconElement);\n            EventHandler.add(iconElement, 'click', this.removeFiles, this);\n            iconElement.classList.add(REMOVE_ICON);\n        }\n        let eventArgs = {\n            element: fileList,\n            fileInfo: this.mergeFileInfo(fileData, fileList),\n            index: index,\n            isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n        };\n        let eventsArgs = {\n            element: fileList,\n            fileInfo: this.mergeFileInfo(fileData, fileList),\n            index: index,\n            isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n        };\n        this.trigger('rendering', eventArgs);\n        this.trigger('fileListRendering', eventsArgs);\n        this.listParent.appendChild(fileList);\n        this.fileList.push(fileList);\n    }\n    formValidateFileInfo(listItem, fileList) {\n        let statusMessage = listItem.status;\n        let validationMessages = this.validatedFileSize(listItem.size);\n        if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n            this.addInvalidClass(fileList);\n            statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n                validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n        }\n        let typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n        if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n            this.addInvalidClass(fileList);\n            statusMessage = typeValidationMessage;\n        }\n        return statusMessage;\n    }\n    addInvalidClass(fileList) {\n        fileList.classList.add(INVALID_FILE);\n    }\n    createFormInput(fileData) {\n        let inputElement = this.element.cloneNode(true);\n        inputElement.classList.add(HIDDEN_INPUT);\n        for (let listItem of fileData) {\n            listItem.input = inputElement;\n        }\n        inputElement.setAttribute('name', this.uploaderName);\n        this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);\n        if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n            this.element.value = '';\n        }\n    }\n    getFileSize(fileData) {\n        let fileSize = 0;\n        for (let file of fileData) {\n            fileSize += file.size;\n        }\n        return fileSize;\n    }\n    mergeFileInfo(fileData, fileList) {\n        let result = {\n            name: '',\n            rawFile: '',\n            size: 0,\n            status: '',\n            type: '',\n            validationMessages: { minSize: '', maxSize: '' },\n            statusCode: '1',\n            list: fileList\n        };\n        let fileNames = [];\n        let type = '';\n        for (let listItem of fileData) {\n            fileNames.push(listItem.name);\n            type = listItem.type;\n        }\n        result.name = fileNames.join(', ');\n        result.size = this.getFileSize(fileData);\n        result.type = type;\n        result.status = this.statusForFormUpload(fileData, fileList);\n        return result;\n    }\n    statusForFormUpload(fileData, fileList) {\n        let isValid = true;\n        let statusMessage;\n        for (let listItem of fileData) {\n            statusMessage = listItem.status;\n            let validationMessages = this.validatedFileSize(listItem.size);\n            if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n                isValid = false;\n                statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n                    validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n            }\n            let typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n            if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n                isValid = false;\n                statusMessage = typeValidationMessage;\n            }\n        }\n        if (!isValid) {\n            fileList.classList.add(INVALID_FILE);\n            statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n        }\n        else {\n            statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , '\n                + this.localizedTexts('size') + ': ' +\n                this.bytesToSize(this.getFileSize(fileData));\n        }\n        return statusMessage;\n    }\n    formCustomFileList(fileData, files) {\n        this.createParentUL();\n        resetBlazorTemplate(this.element.id + 'Template', 'Template');\n        let fileList = this.createElement('li', { className: FILE });\n        fileList.setAttribute('data-files-count', fileData.length + '');\n        this.setListToFileInfo(fileData, fileList);\n        let result = this.mergeFileInfo(fileData, fileList);\n        fileList.setAttribute('data-file-name', result.name);\n        this.uploadTemplateFn = this.templateComplier(this.template);\n        let fromElements = [].slice.call(this.uploadTemplateFn(result, null, null, this.element.id + 'Template', this.isStringTemplate));\n        let index = this.listParent.querySelectorAll('li').length;\n        append(fromElements, fileList);\n        if (!fileList.classList.contains(INVALID_FILE)) {\n            this.createFormInput(fileData);\n        }\n        let eventArgs = {\n            element: fileList,\n            fileInfo: result,\n            index: index,\n            isPreload: this.isPreLoadFile(result)\n        };\n        let eventsArgs = {\n            element: fileList,\n            fileInfo: result,\n            index: index,\n            isPreload: this.isPreLoadFile(result)\n        };\n        this.trigger('rendering', eventArgs);\n        this.trigger('fileListRendering', eventsArgs);\n        this.listParent.appendChild(fileList);\n        this.fileList.push(fileList);\n        updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n    }\n    /**\n     * Create the file list for specified files data.\n     * @param { FileInfo[] } fileData - specifies the files data for file list creation.\n     * @returns void\n     */\n    createFileList(fileData, isSelectedFile) {\n        if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n            let fileListData = (isSelectedFile) ? this.filesData = this.filesData.concat(fileData) : fileData;\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('createFileList', fileListData, this.isForm);\n        }\n        else {\n            this.createParentUL();\n            if (this.template !== '' && !isNullOrUndefined(this.template)) {\n                if (this.isFormUpload()) {\n                    this.uploadWrapper.classList.add(FORM_UPLOAD);\n                    this.formCustomFileList(fileData, this.element.files);\n                }\n                else {\n                    this.createCustomfileList(fileData);\n                }\n            }\n            else if (this.isFormUpload()) {\n                this.uploadWrapper.classList.add(FORM_UPLOAD);\n                this.formFileList(fileData, this.element.files);\n            }\n            else {\n                for (let listItem of fileData) {\n                    let liElement = this.createElement('li', {\n                        className: FILE,\n                        attrs: { 'data-file-name': listItem.name, 'data-files-count': '1' }\n                    });\n                    let textContainer = this.createElement('span', { className: TEXT_CONTAINER });\n                    let textElement = this.createElement('span', { className: FILE_NAME, attrs: { 'title': listItem.name } });\n                    textElement.innerHTML = this.getFileNameOnly(listItem.name);\n                    let fileExtension = this.createElement('span', { className: FILE_TYPE });\n                    fileExtension.innerHTML = '.' + this.getFileType(listItem.name);\n                    if (!this.enableRtl) {\n                        textContainer.appendChild(textElement);\n                        textContainer.appendChild(fileExtension);\n                    }\n                    else {\n                        let rtlContainer = this.createElement('span', { className: RTL_CONTAINER });\n                        rtlContainer.appendChild(fileExtension);\n                        rtlContainer.appendChild(textElement);\n                        textContainer.appendChild(rtlContainer);\n                    }\n                    let fileSize = this.createElement('span', { className: FILE_SIZE });\n                    fileSize.innerHTML = this.bytesToSize(listItem.size);\n                    textContainer.appendChild(fileSize);\n                    let statusElement = this.createElement('span', { className: STATUS });\n                    textContainer.appendChild(statusElement);\n                    statusElement.innerHTML = listItem.status;\n                    liElement.appendChild(textContainer);\n                    let iconElement = this.createElement('span', { className: ' e-icons',\n                        attrs: { 'tabindex': this.btnTabIndex } });\n                    /* istanbul ignore next */\n                    if (this.browserName === 'msie') {\n                        iconElement.classList.add('e-msie');\n                    }\n                    iconElement.setAttribute('title', this.localizedTexts('remove'));\n                    liElement.appendChild(iconElement);\n                    EventHandler.add(iconElement, 'click', this.removeFiles, this);\n                    if (listItem.statusCode === '2') {\n                        statusElement.classList.add(UPLOAD_SUCCESS);\n                        iconElement.classList.add(DELETE_ICON);\n                        iconElement.setAttribute('title', this.localizedTexts('delete'));\n                    }\n                    else if (listItem.statusCode !== '1') {\n                        statusElement.classList.remove(UPLOAD_SUCCESS);\n                        statusElement.classList.add(VALIDATION_FAILS);\n                    }\n                    if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {\n                        statusElement.innerHTML = '';\n                    }\n                    if (!iconElement.classList.contains(DELETE_ICON)) {\n                        iconElement.classList.add(REMOVE_ICON);\n                    }\n                    let index = fileData.indexOf(listItem);\n                    let eventArgs = {\n                        element: liElement,\n                        fileInfo: listItem,\n                        index: index,\n                        isPreload: this.isPreLoadFile(listItem)\n                    };\n                    let eventsArgs = {\n                        element: liElement,\n                        fileInfo: listItem,\n                        index: index,\n                        isPreload: this.isPreLoadFile(listItem)\n                    };\n                    this.trigger('rendering', eventArgs);\n                    this.trigger('fileListRendering', eventsArgs);\n                    this.listParent.appendChild(liElement);\n                    this.fileList.push(liElement);\n                    this.truncateName(textElement);\n                    let preventActionComplete = this.flag;\n                    if (this.isPreLoadFile(listItem)) {\n                        this.flag = false;\n                        this.checkActionComplete(true);\n                        this.flag = preventActionComplete;\n                    }\n                }\n            }\n        }\n    }\n    getSlicedName(nameElement) {\n        let text;\n        text = nameElement.textContent;\n        nameElement.dataset.tail = text.slice(text.length - 10);\n    }\n    setListToFileInfo(fileData, fileList) {\n        for (let listItem of fileData) {\n            listItem.list = fileList;\n        }\n    }\n    truncateName(name) {\n        let nameElement = name;\n        if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {\n            this.getSlicedName(nameElement);\n            /* istanbul ignore next */\n        }\n        else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {\n            this.getSlicedName(nameElement);\n        }\n    }\n    getFileType(name) {\n        let extension;\n        let index = name.lastIndexOf('.');\n        if (index >= 0) {\n            extension = name.substring(index + 1);\n        }\n        return extension ? extension : '';\n    }\n    getFileNameOnly(name) {\n        let type = this.getFileType(name);\n        let names = name.split('.' + type);\n        return type = names[0];\n    }\n    setInitialAttributes() {\n        if (this.initialAttr.accept) {\n            this.element.setAttribute('accept', this.initialAttr.accept);\n        }\n        if (this.initialAttr.disabled) {\n            this.element.setAttribute('disabled', 'disabled');\n        }\n        if (this.initialAttr.multiple) {\n            let newAttr = document.createAttribute('multiple');\n            this.element.setAttributeNode(newAttr);\n        }\n    }\n    filterfileList(files) {\n        let filterFiles = [];\n        let li;\n        for (let i = 0; i < files.length; i++) {\n            li = this.getLiElement(files[i]);\n            if (!li.classList.contains(UPLOAD_SUCCESS)) {\n                filterFiles.push(files[i]);\n            }\n        }\n        return filterFiles;\n    }\n    updateStatus(files, status, statusCode, updateLiStatus = true) {\n        if (!(status === '' || isNullOrUndefined(status)) && !(statusCode === '' || isNullOrUndefined(statusCode))) {\n            if (this.isBlazorSaveUrl) {\n                for (let i = 0; i < this.filesData.length; i++) {\n                    if (this.filesData[i].name === files.name) {\n                        this.filesData[i].status = status;\n                        this.filesData[i].statusCode = statusCode;\n                    }\n                }\n            }\n            else {\n                files.status = status;\n                files.statusCode = statusCode;\n            }\n        }\n        if (updateLiStatus) {\n            let li = this.getLiElement(files);\n            if (!isNullOrUndefined(li)) {\n                if (!isNullOrUndefined(li.querySelector('.' + STATUS)) && !((status === '' || isNullOrUndefined(status)))) {\n                    li.querySelector('.' + STATUS).textContent = status;\n                }\n            }\n        }\n        return files;\n    }\n    getLiElement(files) {\n        let index;\n        for (let i = 0; i < this.filesData.length; i++) {\n            if ((!isNullOrUndefined(this.filesData[i].id) && !isNullOrUndefined(files.id)) ? (this.filesData[i].name === files.name &&\n                this.filesData[i].id === files.id) : this.filesData[i].name === files.name) {\n                index = i;\n            }\n        }\n        return this.fileList[index];\n    }\n    createProgressBar(liElement) {\n        let progressbarWrapper = this.createElement('span', { className: PROGRESS_WRAPPER });\n        let progressBar = this.createElement('progressbar', { className: PROGRESSBAR, attrs: { value: '0', max: '100' } });\n        let progressbarInnerWrapper = this.createElement('span', { className: PROGRESS_INNER_WRAPPER });\n        progressBar.setAttribute('style', 'width: 0%');\n        let progressbarText = this.createElement('span', { className: PROGRESSBAR_TEXT });\n        progressbarText.textContent = '0%';\n        progressbarInnerWrapper.appendChild(progressBar);\n        progressbarWrapper.appendChild(progressbarInnerWrapper);\n        progressbarWrapper.appendChild(progressbarText);\n        liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);\n    }\n    /* istanbul ignore next */\n    updateProgressbar(e, li) {\n        if (!isNaN(Math.round((e.loaded / e.total) * 100)) && !isNullOrUndefined(li.querySelector('.' + PROGRESSBAR))) {\n            if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== '') {\n                let value = (Math.round((e.loaded / e.total) * 100)) % parseInt(this.progressInterval, 10);\n                if (value === 0 || value === 100) {\n                    this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');\n                }\n            }\n            else {\n                this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');\n            }\n        }\n    }\n    changeProgressValue(li, progressValue) {\n        li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);\n        li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;\n    }\n    uploadInProgress(e, files, customUI, request) {\n        let li = this.getLiElement(files);\n        if (isNullOrUndefined(li) && (!customUI)) {\n            return;\n        }\n        if (!isNullOrUndefined(li)) {\n            /* istanbul ignore next */\n            if (files.statusCode === '5') {\n                this.cancelUploadingFile(files, e, request, li);\n            }\n            if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);\n                this.createProgressBar(li);\n                this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n            }\n            this.updateProgressbar(e, li);\n            let iconEle = li.querySelector('.' + REMOVE_ICON);\n            if (!isNullOrUndefined(iconEle)) {\n                iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);\n                iconEle.setAttribute('title', this.localizedTexts('abort'));\n                iconEle.classList.remove(REMOVE_ICON);\n            }\n        }\n        else {\n            this.cancelUploadingFile(files, e, request);\n        }\n        let args = { e, operation: 'upload', file: this.updateStatus(files, this.localizedTexts('inProgress'), '3') };\n        this.trigger('progress', args);\n    }\n    /* istanbul ignore next */\n    cancelUploadingFile(files, e, request, li) {\n        if (files.statusCode === '5') {\n            let eventArgs = {\n                event: e,\n                fileData: files,\n                cancel: false\n            };\n            this.trigger('canceling', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    files.statusCode = '3';\n                    if (!isNullOrUndefined(li)) {\n                        let spinnerTarget = li.querySelector('.' + ABORT_ICON);\n                        if (!isNullOrUndefined(spinnerTarget)) {\n                            hideSpinner(spinnerTarget);\n                            detach(li.querySelector('.e-spinner-pane'));\n                        }\n                    }\n                }\n                else {\n                    request.emitError = false;\n                    request.httpRequest.abort();\n                    let formData = new FormData();\n                    if (files.statusCode === '5') {\n                        let name = this.element.getAttribute('name');\n                        formData.append(name, files.name);\n                        formData.append('cancel-uploading', files.name);\n                        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n                        ajax.emitError = false;\n                        ajax.onLoad = (e) => { this.removecanceledFile(e, files); return {}; };\n                        ajax.send(formData);\n                    }\n                }\n            });\n        }\n    }\n    removecanceledFile(e, file) {\n        let liElement = this.getLiElement(file);\n        if (liElement.querySelector('.' + RETRY_ICON) || isNullOrUndefined(liElement.querySelector('.' + ABORT_ICON))) {\n            return;\n        }\n        this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');\n        this.renderFailureState(e, file, liElement);\n        let spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);\n        if (!isNullOrUndefined(liElement)) {\n            hideSpinner(spinnerTarget);\n            detach(liElement.querySelector('.e-spinner-pane'));\n        }\n        let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = { event: e, response: requestResponse, operation: 'cancel', file: file };\n        this.trigger('success', args);\n    }\n    renderFailureState(e, file, liElement) {\n        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n        this.removeProgressbar(liElement, 'failure');\n        if (!isNullOrUndefined(liElement.querySelector('.e-file-status'))) {\n            liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);\n        }\n        let deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n        if (isNullOrUndefined(deleteIcon)) {\n            return;\n        }\n        deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n        deleteIcon.classList.add(REMOVE_ICON);\n        deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n        this.pauseButton = this.createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });\n        deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);\n        this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n        let retryElement = liElement.querySelector('.' + RETRY_ICON);\n        /* istanbul ignore next */\n        retryElement.addEventListener('click', (e) => { this.reloadcanceledFile(e, file, liElement, false); }, false);\n    }\n    reloadcanceledFile(e, file, liElement, custom) {\n        file.statusCode = '1';\n        file.status = this.localizedTexts('readyToUploadMessage');\n        if (!custom) {\n            liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n            if (!isNullOrUndefined(liElement.querySelector('.' + RETRY_ICON))) {\n                detach(liElement.querySelector('.' + RETRY_ICON));\n            }\n            this.pauseButton = null;\n        }\n        /* istanbul ignore next */\n        liElement.classList.add(RESTRICT_RETRY);\n        this.upload([file]);\n    }\n    /* istanbul ignore next */\n    uploadComplete(e, file, customUI) {\n        let status = e.target;\n        if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n            let li = this.getLiElement(file);\n            if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) {\n                return;\n            }\n            if (!isNullOrUndefined(li)) {\n                this.updateProgressBarClasses(li, UPLOAD_SUCCESS);\n                this.removeProgressbar(li, 'success');\n                let iconEle = li.querySelector('.' + ABORT_ICON);\n                if (!isNullOrUndefined(iconEle)) {\n                    iconEle.classList.add(DELETE_ICON);\n                    iconEle.setAttribute('title', this.localizedTexts('delete'));\n                    iconEle.classList.remove(ABORT_ICON);\n                    iconEle.classList.remove(UPLOAD_INPROGRESS);\n                }\n            }\n            this.raiseSuccessEvent(e, file);\n        }\n        else {\n            this.uploadFailed(e, file);\n        }\n    }\n    getResponse(e) {\n        // tslint:disable-next-line\n        let target = e.currentTarget;\n        let response = {\n            readyState: target.readyState,\n            statusCode: target.status,\n            statusText: target.statusText,\n            headers: target.getAllResponseHeaders(),\n            withCredentials: target.withCredentials\n        };\n        return response;\n    }\n    /* istanbul ignore next */\n    serverRemoveIconBindEvent() {\n        if (this.uploadWrapper && this.isBlazorSaveUrl) {\n            let iconElement = [].slice.call(this.uploadWrapper.querySelectorAll('ul li'));\n            for (let i = 0; i < iconElement.length; i++) {\n                let removeIconEle = (iconElement[i]) ? iconElement[i].querySelector('.e-icons') : null;\n                if (removeIconEle) {\n                    EventHandler.remove(removeIconEle, 'click', this.removeFiles);\n                    EventHandler.add(removeIconEle, 'click', this.removeFiles, this);\n                }\n            }\n        }\n    }\n    raiseSuccessEvent(e, file) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let statusMessage = this.localizedTexts('uploadSuccessMessage');\n        let args = {\n            e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '2', false), statusText: statusMessage\n        };\n        if (!this.isBlazorSaveUrl) {\n            let liElement = this.getLiElement(file);\n            if (!isNullOrUndefined(liElement)) {\n                let spinnerEle = liElement.querySelector('.' + SPINNER_PANE);\n                if (!isNullOrUndefined(spinnerEle)) {\n                    hideSpinner(liElement);\n                    detach(spinnerEle);\n                }\n            }\n        }\n        this.trigger('success', args, (args) => {\n            // tslint:disable-next-line\n            this.updateStatus(file, args.statusText, '2');\n            this.uploadedFilesData.push(file);\n            if (!this.isBlazorSaveUrl) {\n                this.trigger('change', { file: this.uploadedFilesData });\n            }\n            this.checkActionButtonStatus();\n            if (this.fileList.length > 0) {\n                if ((!(this.getLiElement(file)).classList.contains(RESTRICT_RETRY))) {\n                    this.uploadSequential();\n                    this.checkActionComplete(true);\n                }\n                else {\n                    /* istanbul ignore next */\n                    (this.getLiElement(file)).classList.remove(RESTRICT_RETRY);\n                }\n            }\n        });\n    }\n    uploadFailed(e, file) {\n        let li = this.getLiElement(file);\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let statusMessage = this.localizedTexts('uploadFailedMessage');\n        let args = {\n            e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '0', false), statusText: statusMessage\n        };\n        if (!isNullOrUndefined(li)) {\n            this.renderFailureState(e, file, li);\n        }\n        this.trigger('failure', args, (args) => {\n            // tslint:disable-next-line\n            this.updateStatus(file, args.statusText, '0');\n            this.checkActionButtonStatus();\n            this.uploadSequential();\n            this.checkActionComplete(true);\n        });\n    }\n    uploadSequential() {\n        if (this.sequentialUpload) {\n            if (this.autoUpload) {\n                /* istanbul ignore next */\n                this.checkAutoUpload(this.filesData);\n            }\n            else {\n                this.uploadButtonClick();\n            }\n        }\n    }\n    checkActionComplete(increment) {\n        increment ? ++this.actionCompleteCount : --this.actionCompleteCount;\n        this.raiseActionComplete();\n    }\n    raiseActionComplete() {\n        if ((this.filesData.length === this.actionCompleteCount) && this.flag) {\n            this.flag = false;\n            let eventArgs = {\n                fileData: []\n            };\n            eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);\n            this.trigger('actionComplete', eventArgs);\n        }\n    }\n    getSelectedFileStatus(selectedFiles) {\n        let matchFiles = [];\n        let matchFilesIndex = 0;\n        for (let selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {\n            let selectedFileData = selectedFiles[selectFileIndex];\n            for (let fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {\n                if (this.filesData[fileDataIndex].name === selectedFileData.name) {\n                    matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];\n                    ++matchFilesIndex;\n                }\n            }\n        }\n        return matchFiles;\n    }\n    updateProgressBarClasses(li, className) {\n        let progressBar = li.querySelector('.' + PROGRESSBAR);\n        if (!isNullOrUndefined(progressBar)) {\n            progressBar.classList.add(className);\n        }\n    }\n    removeProgressbar(li, callType) {\n        if (!isNullOrUndefined(li.querySelector('.' + PROGRESS_WRAPPER))) {\n            this.progressAnimation = new Animation({ duration: 1250 });\n            this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), { name: 'FadeOut' });\n            this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), { name: 'FadeOut' });\n            setTimeout(() => { this.animateProgressBar(li, callType); }, 750);\n        }\n    }\n    /* istanbul ignore next */\n    animateProgressBar(li, callType) {\n        if (callType === 'success') {\n            li.classList.add(UPLOAD_SUCCESS);\n            if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);\n            }\n        }\n        else {\n            if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n            }\n        }\n        if (li.querySelector('.' + PROGRESS_WRAPPER)) {\n            detach(li.querySelector('.' + PROGRESS_WRAPPER));\n        }\n    }\n    setExtensions(extensions) {\n        if (extensions !== '' && !isNullOrUndefined(extensions)) {\n            this.element.setAttribute('accept', extensions);\n        }\n        else {\n            this.element.removeAttribute('accept');\n        }\n    }\n    templateComplier(uploadTemplate) {\n        if (uploadTemplate) {\n            try {\n                if (document.querySelectorAll(uploadTemplate).length) {\n                    return compile(document.querySelector(uploadTemplate).innerHTML.trim());\n                }\n            }\n            catch (exception) {\n                return compile(uploadTemplate);\n            }\n        }\n        return undefined;\n    }\n    setRTL() {\n        this.enableRtl ? addClass([this.uploadWrapper], RTL) : removeClass([this.uploadWrapper], RTL);\n    }\n    localizedTexts(localeText) {\n        this.l10n.setLocale(this.locale);\n        return this.l10n.getConstant(localeText);\n    }\n    setControlStatus() {\n        if (!this.enabled) {\n            this.uploadWrapper.classList.add(DISABLED);\n            this.element.setAttribute('disabled', 'disabled');\n            this.browseButton.setAttribute('disabled', 'disabled');\n            if (!isNullOrUndefined(this.clearButton)) {\n                this.clearButton.setAttribute('disabled', 'disabled');\n            }\n            if (!isNullOrUndefined(this.uploadButton)) {\n                this.uploadButton.setAttribute('disabled', 'disabled');\n            }\n        }\n        else {\n            if (this.uploadWrapper.classList.contains(DISABLED)) {\n                this.uploadWrapper.classList.remove(DISABLED);\n            }\n            if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute('disabled')) {\n                this.element.removeAttribute('disabled');\n                this.browseButton.removeAttribute('disabled');\n            }\n            if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute('disabled')) {\n                this.clearButton.removeAttribute('disabled');\n            }\n            if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {\n                this.uploadButton.hasAttribute('disabled');\n            }\n        }\n    }\n    checkHTMLAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['accept', 'multiple', 'disabled'];\n        for (let prop of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n                switch (prop) {\n                    case 'accept':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['allowedExtensions'] === undefined))\n                            || isDynamic) {\n                            this.setProperties({ allowedExtensions: this.element.getAttribute('accept') }, !isDynamic);\n                            this.initialAttr.accept = this.allowedExtensions;\n                        }\n                        break;\n                    case 'multiple':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['multiple'] === undefined)) || isDynamic) {\n                            let isMutiple = this.element.getAttribute(prop) === 'multiple' ||\n                                this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;\n                            this.setProperties({ multiple: isMutiple }, !isDynamic);\n                            this.initialAttr.multiple = true;\n                        }\n                        break;\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['enabled'] === undefined)) || isDynamic) {\n                            let isDisabled = this.element.getAttribute(prop) === 'disabled' ||\n                                this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;\n                            this.setProperties({ enabled: isDisabled }, !isDynamic);\n                            this.initialAttr.disabled = true;\n                        }\n                }\n            }\n        }\n    }\n    chunkUpload(file, custom, fileIndex) {\n        let start = 0;\n        let end = Math.min(this.asyncSettings.chunkSize, file.size);\n        let index = 0;\n        let blob = file.rawFile.slice(start, end);\n        let metaData = { chunkIndex: index, blob: blob, file: file, start: start, end: end, retryCount: 0, request: null };\n        this.sendRequest(file, metaData, custom, fileIndex);\n    }\n    sendRequest(file, metaData, custom, fileIndex) {\n        let formData = new FormData();\n        let blob = file.rawFile.slice(metaData.start, metaData.end);\n        formData.append('chunkFile', blob, file.name);\n        formData.append(this.uploaderName, blob, file.name);\n        formData.append('chunk-index', metaData.chunkIndex.toString());\n        formData.append('chunkIndex', metaData.chunkIndex.toString());\n        let totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);\n        formData.append('total-chunk', totalChunk.toString());\n        formData.append('totalChunk', totalChunk.toString());\n        let ajax = new Ajax({ url: this.asyncSettings.saveUrl, type: 'POST', async: true, contentType: null });\n        ajax.emitError = false;\n        ajax.onLoad = (e) => { this.chunkUploadComplete(e, metaData, custom); return {}; };\n        ajax.onUploadProgress = (e) => {\n            this.chunkUploadInProgress(e, metaData, custom);\n            return {};\n        };\n        let eventArgs = {\n            fileData: file,\n            customFormData: [],\n            cancel: false,\n            chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize\n        };\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            eventArgs.currentChunkIndex = metaData.chunkIndex;\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            if (eventArgs.currentChunkIndex === 0) {\n                // This event is currently not required but to avoid breaking changes for previous customer, we have included.\n                this.trigger('uploading', eventArgs, (eventArgs) => {\n                    this.uploadingEventCallback(formData, eventArgs, e, file);\n                });\n            }\n            else {\n                this.trigger('chunkUploading', eventArgs, (eventArgs) => {\n                    this.uploadingEventCallback(formData, eventArgs, e, file);\n                });\n            }\n        };\n        /* istanbul ignore next */\n        ajax.onError = (e) => { this.chunkUploadFailed(e, metaData, custom); return {}; };\n        ajax.send(formData);\n        metaData.request = ajax;\n    }\n    uploadingEventCallback(formData, eventArgs, e, file) {\n        if (eventArgs.cancel) {\n            this.eventCancelByArgs(e, eventArgs, file);\n        }\n        else {\n            this.updateFormData(formData, eventArgs.customFormData);\n        }\n    }\n    eventCancelByArgs(e, eventArgs, file) {\n        e.cancel = true;\n        if (eventArgs.fileData.statusCode === '5') {\n            return;\n        }\n        let liElement = this.getLiElement(eventArgs.fileData);\n        liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');\n        liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n        eventArgs.fileData.statusCode = '5';\n        eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');\n        this.pauseButton = this.createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });\n        let removeIcon = liElement.querySelector('.' + REMOVE_ICON);\n        removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);\n        this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n        /* istanbul ignore next */\n        this.pauseButton.addEventListener('click', (e) => { this.reloadcanceledFile(e, file, liElement); }, false);\n        this.checkActionButtonStatus();\n    }\n    checkChunkUpload() {\n        return (this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize)) ? false : true;\n    }\n    chunkUploadComplete(e, metaData, custom) {\n        let response = e.target;\n        let liElement;\n        if (response.readyState === 4 && response.status >= 200 && response.status < 300) {\n            let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n            let totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n            let eventArgs = {\n                event: e,\n                file: metaData.file,\n                chunkIndex: metaData.chunkIndex,\n                totalChunk: totalChunk,\n                chunkSize: this.asyncSettings.chunkSize,\n                response: requestResponse\n            };\n            this.trigger('chunkSuccess', eventArgs);\n            if (isNullOrUndefined(custom) || !custom) {\n                liElement = this.getLiElement(metaData.file);\n            }\n            this.updateMetaData(metaData);\n            if (metaData.end === metaData.file.size) {\n                metaData.file.statusCode = '3';\n            }\n            if (metaData.file.statusCode === '5') {\n                let eventArgs = { event: e, fileData: metaData.file, cancel: false };\n                this.trigger('canceling', eventArgs, (eventArgs) => {\n                    /* istanbul ignore next */\n                    if (eventArgs.cancel) {\n                        metaData.file.statusCode = '3';\n                        let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n                        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {\n                            hideSpinner(spinnerTarget);\n                            detach(liElement.querySelector('.e-spinner-pane'));\n                        }\n                        this.sendNextRequest(metaData);\n                    }\n                    else {\n                        metaData.request.emitError = false;\n                        response.abort();\n                        let formData = new FormData();\n                        let name = this.element.getAttribute('name');\n                        formData.append(name, metaData.file.name);\n                        formData.append('cancel-uploading', metaData.file.name);\n                        formData.append('cancelUploading', metaData.file.name);\n                        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n                        ajax.emitError = false;\n                        ajax.onLoad = (e) => { this.removeChunkFile(e, metaData, custom); return {}; };\n                        ajax.send(formData);\n                    }\n                });\n            }\n            else {\n                if ((totalChunk - 1) === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {\n                    let index = this.pausedData.indexOf(metaData);\n                    if (index >= 0) {\n                        this.pausedData.splice(index, 1);\n                    }\n                    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n                        if (liElement) {\n                            detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n                        }\n                        this.removeChunkProgressBar(metaData);\n                    }\n                    this.raiseSuccessEvent(e, metaData.file);\n                    return;\n                }\n                this.sendNextRequest(metaData);\n            }\n        }\n        else {\n            this.chunkUploadFailed(e, metaData);\n        }\n    }\n    sendNextRequest(metaData) {\n        metaData.start = metaData.end;\n        metaData.end += this.asyncSettings.chunkSize;\n        metaData.end = Math.min(metaData.end, metaData.file.size);\n        metaData.chunkIndex += 1;\n        this.sendRequest(metaData.file, metaData);\n    }\n    removeChunkFile(e, metaData, custom) {\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) && !custom)) {\n            let liElement = this.getLiElement(metaData.file);\n            let deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n            let spinnerTarget = deleteIcon;\n            this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n            this.removeProgressbar(liElement, 'failure');\n            deleteIcon.classList.remove(ABORT_ICON);\n            deleteIcon.classList.add(REMOVE_ICON);\n            deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n            let pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);\n            pauseIcon.classList.add(RETRY_ICON);\n            pauseIcon.classList.remove(PAUSE_UPLOAD);\n            pauseIcon.setAttribute('title', this.localizedTexts('retry'));\n            if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon)) {\n                hideSpinner(spinnerTarget);\n                detach(liElement.querySelector('.e-spinner-pane'));\n            }\n        }\n    }\n    pauseUpload(metaData, e, custom) {\n        metaData.file.statusCode = '4';\n        metaData.file.status = this.localizedTexts('pause');\n        this.updateMetaData(metaData);\n        let eventArgs = {\n            event: e ? e : null,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n            chunkSize: this.asyncSettings.chunkSize\n        };\n        this.abortUpload(metaData, custom, eventArgs);\n    }\n    abortUpload(metaData, custom, eventArgs) {\n        metaData.request.emitError = false;\n        metaData.request.httpRequest.abort();\n        let liElement = this.getLiElement(metaData.file);\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n            let targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);\n            targetElement.classList.remove(PAUSE_UPLOAD);\n            targetElement.classList.add(RESUME_UPLOAD);\n            targetElement.setAttribute('title', this.localizedTexts('resume'));\n            targetElement.nextElementSibling.classList.add(REMOVE_ICON);\n            targetElement.nextElementSibling.classList.remove(ABORT_ICON);\n            targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));\n        }\n        for (let i = 0; i < this.pausedData.length; i++) {\n            if (this.pausedData[i].file.name === metaData.file.name) {\n                this.pausedData.splice(i, 1);\n            }\n        }\n        this.pausedData.push(metaData);\n        this.trigger('pausing', eventArgs);\n    }\n    resumeUpload(metaData, e, custom) {\n        let liElement = this.getLiElement(metaData.file);\n        let targetElement;\n        if (!isNullOrUndefined(liElement)) {\n            targetElement = liElement.querySelector('.' + RESUME_UPLOAD);\n        }\n        if (!isNullOrUndefined(targetElement) && (isNullOrUndefined(custom) || !custom)) {\n            targetElement.classList.remove(RESUME_UPLOAD);\n            targetElement.classList.add(PAUSE_UPLOAD);\n            targetElement.setAttribute('title', this.localizedTexts('pause'));\n            targetElement.nextElementSibling.classList.remove(REMOVE_ICON);\n            targetElement.nextElementSibling.classList.add(ABORT_ICON);\n            targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));\n        }\n        metaData.file.status = this.localizedTexts('inProgress');\n        metaData.file.statusCode = '3';\n        this.updateMetaData(metaData);\n        let eventArgs = {\n            event: e ? e : null,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n            chunkSize: this.asyncSettings.chunkSize\n        };\n        this.trigger('resuming', eventArgs);\n        for (let i = 0; i < this.pausedData.length; i++) {\n            if (this.pausedData[i].end === this.pausedData[i].file.size) {\n                this.chunkUploadComplete(e, metaData, custom);\n            }\n            else {\n                if (this.pausedData[i].file.name === metaData.file.name) {\n                    this.pausedData[i].start = this.pausedData[i].end;\n                    this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;\n                    this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);\n                    this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;\n                    this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);\n                }\n            }\n        }\n    }\n    updateMetaData(metaData) {\n        if (this.uploadMetaData.indexOf(metaData) === -1) {\n            this.uploadMetaData.push(metaData);\n        }\n        else {\n            this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);\n            this.uploadMetaData.push(metaData);\n        }\n    }\n    removeChunkProgressBar(metaData) {\n        let liElement = this.getLiElement(metaData.file);\n        if (!isNullOrUndefined(liElement)) {\n            this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);\n            this.removeProgressbar(liElement, 'success');\n            let cancelButton = liElement.querySelector('.' + ABORT_ICON);\n            if (!isNullOrUndefined(cancelButton)) {\n                cancelButton.classList.add(DELETE_ICON);\n                cancelButton.setAttribute('title', this.localizedTexts('delete'));\n                cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n            }\n        }\n    }\n    chunkUploadFailed(e, metaData, custom) {\n        let chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n        let liElement;\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n            liElement = this.getLiElement(metaData.file);\n        }\n        let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n        let eventArgs = {\n            event: e,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            totalChunk: chunkCount,\n            chunkSize: this.asyncSettings.chunkSize,\n            cancel: false,\n            response: requestResponse\n        };\n        this.trigger('chunkFailure', eventArgs, (eventArgs) => {\n            // To prevent triggering of failure event\n            // tslint:disable-next-line\n            if (!eventArgs.cancel) {\n                if (metaData.retryCount < this.asyncSettings.retryCount) {\n                    setTimeout(() => { this.retryRequest(liElement, metaData, custom); }, this.asyncSettings.retryAfterDelay);\n                }\n                else {\n                    if (!isNullOrUndefined(liElement)) {\n                        let pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ?\n                            liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);\n                        if (!isNullOrUndefined(pauseButton)) {\n                            pauseButton.classList.add(RETRY_ICON);\n                            pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);\n                        }\n                        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n                        this.removeProgressbar(liElement, 'failure');\n                        liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);\n                        let iconElement = liElement.querySelector('.' + ABORT_ICON) ?\n                            liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n                        iconElement.classList.remove(ABORT_ICON);\n                        if (!isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD))) {\n                            detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n                        }\n                        if (metaData.start > 0) {\n                            iconElement.classList.add(DELETE_ICON);\n                            iconElement.setAttribute('title', this.localizedTexts('delete'));\n                        }\n                        else {\n                            iconElement.classList.add(REMOVE_ICON);\n                            iconElement.setAttribute('title', this.localizedTexts('remove'));\n                        }\n                    }\n                    metaData.retryCount = 0;\n                    let file = metaData.file;\n                    let failureMessage = this.localizedTexts('uploadFailedMessage');\n                    let args = {\n                        e, response: requestResponse,\n                        operation: 'upload',\n                        file: this.updateStatus(file, failureMessage, '0', false),\n                        statusText: failureMessage\n                    };\n                    this.trigger('failure', args, (args) => {\n                        // tslint:disable-next-line\n                        this.updateStatus(file, args.statusText, '0');\n                        this.uploadSequential();\n                        this.checkActionComplete(true);\n                    });\n                }\n            }\n        });\n    }\n    retryRequest(liElement, metaData, custom) {\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n        }\n        metaData.retryCount += 1;\n        this.sendRequest(metaData.file, metaData);\n    }\n    checkPausePlayAction(e) {\n        let targetElement = e.target;\n        let selectedElement = e.target.parentElement;\n        let index = this.fileList.indexOf(selectedElement);\n        let fileData = this.filesData[index];\n        let metaData = this.getCurrentMetaData(fileData);\n        if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n            /* istanbul ignore next */\n            this.pauseUpload(metaData, e);\n        }\n        else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n            /* istanbul ignore next */\n            this.resumeUpload(metaData, e);\n        }\n        else if (targetElement.classList.contains(RETRY_ICON)) {\n            if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {\n                this.retryUpload(metaData, false);\n            }\n            else {\n                this.retryUpload(metaData, true);\n            }\n        }\n    }\n    retryUpload(metaData, fromcanceledStage) {\n        if (fromcanceledStage) {\n            metaData.end = metaData.end + this.asyncSettings.chunkSize;\n            metaData.start = metaData.start + this.asyncSettings.chunkSize;\n            this.sendRequest(metaData.file, metaData);\n        }\n        else {\n            metaData.file.statusCode = '1';\n            metaData.file.status = this.localizedTexts('readyToUploadMessage');\n            this.chunkUpload(metaData.file);\n        }\n        /* istanbul ignore next */\n        (this.getLiElement(metaData.file)).classList.add(RESTRICT_RETRY);\n    }\n    chunkUploadInProgress(e, metaData, custom) {\n        if (metaData.file.statusCode === '4') {\n            return;\n        }\n        if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {\n            metaData.file.statusCode = '3';\n            metaData.file.status = this.localizedTexts('inProgress');\n        }\n        this.updateMetaData(metaData);\n        let liElement = this.getLiElement(metaData.file);\n        if (isNullOrUndefined(liElement)) {\n            return;\n        }\n        let retryElement = liElement.querySelector('.' + RETRY_ICON);\n        if (!isNullOrUndefined(retryElement)) {\n            retryElement.classList.add(PAUSE_UPLOAD);\n            retryElement.setAttribute('title', this.localizedTexts('pause'));\n            retryElement.classList.remove(RETRY_ICON);\n        }\n        if (!isNullOrUndefined(liElement)) {\n            if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {\n                let statusElement = liElement.querySelector('.' + STATUS);\n                if (isNullOrUndefined(this.template)) {\n                    statusElement.classList.add(UPLOAD_INPROGRESS);\n                    statusElement.classList.remove(UPLOAD_FAILED);\n                    this.createProgressBar(liElement);\n                    this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);\n                }\n                let clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) :\n                    liElement.querySelector('.' + DELETE_ICON);\n                if (!isNullOrUndefined(clearIcon)) {\n                    clearIcon.classList.add(ABORT_ICON);\n                    clearIcon.setAttribute('title', this.localizedTexts('abort'));\n                    clearIcon.classList.remove(REMOVE_ICON);\n                }\n            }\n            if (!isNaN(Math.round((e.loaded / e.total) * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== '4') {\n                let loadedSize = (metaData.chunkIndex * this.asyncSettings.chunkSize);\n                let value = Math.min((((loadedSize + e.loaded) / metaData.file.size) * 100), 100);\n                this.changeProgressValue(liElement, Math.round(value).toString() + '%');\n            }\n            if (metaData.chunkIndex === 0) {\n                this.checkActionButtonStatus();\n            }\n        }\n        if (isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD)) && isNullOrUndefined(this.template)) {\n            this.pauseButton = this.createElement('span', { className: 'e-icons e-file-pause-btn', attrs: { 'tabindex': this.btnTabIndex } });\n            if (this.browserName === 'msie') {\n                this.pauseButton.classList.add('e-msie');\n            }\n            let abortIcon = liElement.querySelector('.' + ABORT_ICON);\n            abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);\n            this.pauseButton.setAttribute('title', this.localizedTexts('pause'));\n            this.pauseButton.addEventListener('click', (e) => { this.checkPausePlayAction(e); }, false);\n        }\n    }\n    /**\n     * It is used to convert bytes value into kilobytes or megabytes depending on the size based\n     * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).\n     * @param { number } bytes - specifies the file size in bytes.\n     * @returns string\n     */\n    bytesToSize(bytes) {\n        let i = -1;\n        if (!bytes) {\n            return '0.0 KB';\n        }\n        do {\n            bytes = bytes / 1024;\n            i++;\n        } while (bytes > 99);\n        if (i >= 2) {\n            bytes = bytes * 1024;\n            i = 1;\n        }\n        return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];\n    }\n    /**\n     * Allows you to sort the file data alphabetically based on its file name clearly.\n     * @param { FileList } filesData - specifies the files data for upload.\n     * @returns File[]\n     */\n    /* istanbul ignore next */\n    sortFileList(filesData) {\n        filesData = filesData ? filesData : this.sortFilesList;\n        let files = filesData;\n        let fileNames = [];\n        for (let i = 0; i < files.length; i++) {\n            fileNames.push(files[i].name);\n        }\n        let sortedFileNames = fileNames.sort();\n        let sortedFilesData = [];\n        for (let name of sortedFileNames) {\n            for (let i = 0; i < files.length; i++) {\n                if (name === files[i].name) {\n                    sortedFilesData.push(files[i]);\n                }\n            }\n        }\n        return sortedFilesData;\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.element.value = null;\n        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.clearAll();\n        }\n        this.unWireEvents();\n        this.unBindDropEvents();\n        if (this.multiple) {\n            this.element.removeAttribute('multiple');\n        }\n        if (!this.enabled) {\n            this.element.removeAttribute('disabled');\n        }\n        this.element.removeAttribute('accept');\n        this.setInitialAttributes();\n        let attributes$$1 = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];\n        for (let key of attributes$$1) {\n            this.element.removeAttribute(key);\n        }\n        if (!this.isServerBlazor) {\n            if (!isNullOrUndefined(this.uploadWrapper)) {\n                this.uploadWrapper.parentElement.appendChild(this.element);\n                detach(this.uploadWrapper);\n            }\n            this.uploadWrapper = null;\n            super.destroy();\n        }\n        else {\n            this.uploadWrapper = null;\n        }\n    }\n    /**\n     * Allows you to call the upload process manually by calling save URL action.\n     * To process the selected files (added in upload queue), pass an empty argument otherwise\n     * upload the specific file based on its argument.\n     * @param { FileInfo | FileInfo[] } files - specifies the files data for upload.\n     * @returns void\n     */\n    upload(files, custom) {\n        files = files ? files : this.filesData;\n        if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {\n            this.sequenceUpload(files);\n        }\n        else {\n            let uploadFiles = this.getFilesInArray(files);\n            let eventArgs = {\n                customFormData: [],\n                currentRequest: null,\n                cancel: false\n            };\n            this.trigger('beforeUpload', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (isBlazor()) {\n                        this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : this.currentRequestHeader;\n                        this.customFormDatas = (eventArgs.customFormData && eventArgs.customFormData.length > 0) ?\n                            eventArgs.customFormData : this.customFormDatas;\n                    }\n                    this.uploadFiles(uploadFiles, custom);\n                }\n            });\n        }\n    }\n    getFilesInArray(files) {\n        let uploadFiles = [];\n        if (files instanceof Array) {\n            uploadFiles = files;\n        }\n        else {\n            uploadFiles.push(files);\n        }\n        return uploadFiles;\n    }\n    /* istanbul ignore next */\n    serverReadFileBase64(fileIndex, position, totalCount) {\n        return new Promise((resolve, reject) => {\n            let file = this.fileStreams[fileIndex].rawFile;\n            try {\n                let reader = new FileReader();\n                // tslint:disable-next-line\n                reader.onload = ((args) => {\n                    return () => {\n                        try {\n                            let contents = args.result;\n                            let data = contents ? contents.split(';base64,')[1] : null;\n                            resolve(data);\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    };\n                })(reader);\n                reader.readAsDataURL(file.slice(position, position + totalCount));\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    /* istanbul ignore next */\n    uploadFileCount(ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return -1;\n        }\n        let result = files.length;\n        return result;\n    }\n    /* istanbul ignore next */\n    getFileRead(index, ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return -1;\n        }\n        let file = files[index];\n        let fileCount = this.newFileRef++;\n        this.fileStreams[fileCount] = file;\n        return fileCount;\n    }\n    /* istanbul ignore next */\n    getFileInfo(index, ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return null;\n        }\n        let file = files[index];\n        if (!file) {\n            return null;\n        }\n        return this.filesData[index];\n    }\n    uploadFiles(files, custom) {\n        let selectedFiles = [];\n        if (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) {\n            if (this.isServerBlazor) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('GetFileDetails', files);\n            }\n            return;\n        }\n        if (!custom || isNullOrUndefined(custom)) {\n            if (!this.multiple) {\n                let file = [];\n                file.push(files[0]);\n                selectedFiles = this.filterfileList(file);\n            }\n            else {\n                selectedFiles = this.filterfileList(files);\n            }\n        }\n        else {\n            selectedFiles = files;\n        }\n        for (let i = 0; i < selectedFiles.length; i++) {\n            if (this.isServerBlazor && !this.checkChunkUpload()) {\n                /* istanbul ignore next */\n                /* tslint:disable */\n                if (selectedFiles[i] && selectedFiles[i].rawFile instanceof File) {\n                    this.getBase64(selectedFiles[i].rawFile).then((data) => {\n                        this.base64String.push(data);\n                        this.uploadFilesRequest(selectedFiles, i, custom);\n                    });\n                }\n                /* tslint:disable */\n            }\n            else {\n                this.uploadFilesRequest(selectedFiles, i, custom);\n            }\n        }\n    }\n    uploadFilesRequest(selectedFiles, i, custom) {\n        let cloneFiles = [];\n        let chunkEnabled = this.checkChunkUpload();\n        let ajax = new Ajax(this.asyncSettings.saveUrl, 'POST', true, null);\n        ajax.emitError = false;\n        let getFileData;\n        /* istanbul ignore next */\n        if (this.isServerBlazor) {\n            getFileData = selectedFiles.slice(0);\n            cloneFiles.push(getFileData[i].rawFile);\n        }\n        let eventArgs = {\n            fileData: (this.isServerBlazor) ? getFileData[i] : selectedFiles[i],\n            customFormData: [],\n            cancel: false\n        };\n        let formData = new FormData();\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                eventArgs.fileData.rawFile = !chunkEnabled ? this.base64String[i] : eventArgs.fileData.rawFile;\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            this.trigger('uploading', eventArgs, (eventArgs) => {\n                /* istanbul ignore next */\n                if (this.isServerBlazor && !chunkEnabled) {\n                    selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];\n                }\n                if (eventArgs.cancel) {\n                    this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);\n                }\n                this.updateFormData(formData, eventArgs.customFormData);\n            });\n        };\n        if (selectedFiles[i].statusCode === '1') {\n            let name = this.element.getAttribute('name');\n            formData.append(name, selectedFiles[i].rawFile, selectedFiles[i].name);\n            if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {\n                this.chunkUpload(selectedFiles[i], custom, i);\n            }\n            else {\n                ajax.onLoad = (e) => {\n                    if (eventArgs.cancel && this.isServerBlazor) {\n                        return {};\n                    }\n                    else {\n                        this.uploadComplete(e, selectedFiles[i], custom);\n                        return {};\n                    }\n                };\n                ajax.onUploadProgress = (e) => {\n                    if (eventArgs.cancel && this.isServerBlazor) {\n                        return {};\n                    }\n                    else {\n                        this.uploadInProgress(e, selectedFiles[i], custom, ajax);\n                        return {};\n                    }\n                };\n                /* istanbul ignore next */\n                ajax.onError = (e) => { this.uploadFailed(e, selectedFiles[i]); return {}; };\n                ajax.send(formData);\n            }\n        }\n    }\n    spliceFiles(liIndex) {\n        let liElement = this.fileList[liIndex];\n        let allFiles = this.getFilesData();\n        let nameElements = +liElement.getAttribute('data-files-count');\n        let startIndex = 0;\n        for (let i = 0; i < liIndex; i++) {\n            startIndex += (+this.fileList[i].getAttribute('data-files-count'));\n        }\n        let endIndex = (startIndex + nameElements) - 1;\n        for (let j = endIndex; j >= startIndex; j--) {\n            allFiles.splice(j, 1);\n        }\n    }\n    /**\n     * Remove the uploaded file from server manually by calling the remove URL action.\n     * If you pass an empty argument to this method, the complete file list can be cleared,\n     * otherwise remove the specific file based on its argument (“file_data”).\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.\n     * @param { boolean } customTemplate - Set true if the component rendering with customize template.\n     * @param { boolean } removeDirectly - Set true if files remove without removing event.\n     * @param { boolean } postRawFile - Set false, to post file name only to the remove action.\n     * @returns void\n     */\n    remove(fileData, customTemplate, removeDirectly, postRawFile, args) {\n        if (isNullOrUndefined(postRawFile)) {\n            postRawFile = true;\n        }\n        let eventArgs = {\n            event: args,\n            cancel: false,\n            filesData: [],\n            customFormData: [],\n            postRawFile: postRawFile,\n            currentRequest: null\n        };\n        let beforeEventArgs = {\n            cancel: false,\n            customFormData: [],\n            currentRequest: null\n        };\n        this.trigger('beforeRemove', beforeEventArgs, (beforeEventArgs) => {\n            if (!beforeEventArgs.cancel) {\n                if (isBlazor()) {\n                    this.currentRequestHeader = beforeEventArgs.currentRequest;\n                    this.customFormDatas = beforeEventArgs.customFormData;\n                }\n                let index;\n                if (this.isFormUpload() && !this.isBlazorSaveUrl) {\n                    eventArgs.filesData = fileData;\n                    this.trigger('removing', eventArgs, (eventArgs) => {\n                        if (!eventArgs.cancel) {\n                            let removingFiles = this.getFilesInArray(fileData);\n                            let isLiRemoved = false;\n                            let liIndex;\n                            for (let data of removingFiles) {\n                                if (!isLiRemoved) {\n                                    liIndex = this.fileList.indexOf(data.list);\n                                }\n                                if (liIndex > -1) {\n                                    let inputElement = !isNullOrUndefined(data.input) ? data.input : null;\n                                    if (inputElement) {\n                                        detach(inputElement);\n                                    }\n                                    this.spliceFiles(liIndex);\n                                    detach(this.fileList[liIndex]);\n                                    this.fileList.splice(liIndex, 1);\n                                    isLiRemoved = true;\n                                    liIndex = -1;\n                                }\n                            }\n                        }\n                    });\n                }\n                else if (this.isForm && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')\n                    && !this.isBlazorSaveUrl) {\n                    eventArgs.filesData = this.getFilesData();\n                    this.trigger('removing', eventArgs, (eventArgs) => {\n                        if (!eventArgs.cancel) {\n                            this.clearAll();\n                        }\n                    });\n                }\n                else {\n                    let removeFiles = [];\n                    fileData = !isNullOrUndefined(fileData) ? fileData : this.filesData;\n                    if (fileData instanceof Array) {\n                        removeFiles = fileData;\n                    }\n                    else {\n                        removeFiles.push(fileData);\n                    }\n                    eventArgs.filesData = removeFiles;\n                    let removeUrl = this.asyncSettings.removeUrl;\n                    let validUrl = (removeUrl === '' || isNullOrUndefined(removeUrl)) ? false : true;\n                    for (let files of removeFiles) {\n                        index = this.filesData.indexOf(files);\n                        if ((files.statusCode === '2' || files.statusCode === '4') && validUrl) {\n                            this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);\n                        }\n                        else {\n                            if (!removeDirectly) {\n                                this.trigger('removing', eventArgs, (eventArgs) => {\n                                    if (!eventArgs.cancel) {\n                                        this.removeFilesData(files, customTemplate);\n                                    }\n                                });\n                            }\n                            else {\n                                this.removeFilesData(files, customTemplate);\n                            }\n                        }\n                        if (args && !args.target.classList.contains(REMOVE_ICON)) {\n                            this.checkActionComplete(false);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Clear all the file entries from list that can be uploaded files or added in upload queue.\n     * @returns void\n     */\n    clearAll() {\n        if (isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            if (this.browserName !== 'msie') {\n                this.element.value = '';\n            }\n            this.filesData = [];\n            return;\n        }\n        let eventArgs = {\n            cancel: false,\n            filesData: this.filesData\n        };\n        this.trigger('clearing', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.clearData();\n                this.actionCompleteCount = 0;\n                this.count = -1;\n            }\n        });\n    }\n    /**\n     * Get the data of files which are shown in file list.\n     * @param { number } index - specifies the file list item(li) index.\n     * @returns FileInfo[]\n     */\n    getFilesData(index) {\n        if (!this.isServerBlazor) {\n            if (isNullOrUndefined(index)) {\n                return this.filesData;\n            }\n            else {\n                return this.getSelectedFiles(index);\n            }\n        }\n        else {\n            for (let i = 0; i < this.filesData.length; i++) {\n                this.filesData[i].rawFile = this.base64String[i];\n            }\n            return this.filesData;\n        }\n    }\n    /**\n     * Pauses the in-progress chunked upload based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.\n     * @param { boolean } custom - Set true if used custom UI.\n     * @returns void\n     */\n    pause(fileData, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.pauseUploading(fileDataFiles, custom);\n    }\n    pauseUploading(fileData, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '3') {\n                this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);\n            }\n        }\n    }\n    getFiles(fileData) {\n        let files = [];\n        if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {\n            files.push(fileData);\n        }\n        else {\n            files = fileData;\n        }\n        return files;\n    }\n    /**\n     * Resumes the chunked upload that is previously paused based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.\n     * @param { boolean } custom - Set true if used custom UI.\n     * @returns void\n     */\n    resume(fileData, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.resumeFiles(fileDataFiles, custom);\n    }\n    resumeFiles(fileData, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '4') {\n                this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);\n            }\n        }\n    }\n    /**\n     * Retries the canceled or failed file upload based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.\n     * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.\n     * @returns void\n     */\n    retry(fileData, fromcanceledStage, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);\n    }\n    retryFailedFiles(fileData, fromcanceledStage, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '5' || files[i].statusCode === '0') {\n                if (this.asyncSettings.chunkSize > 0) {\n                    this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);\n                }\n                else {\n                    let liElement;\n                    if (!custom) {\n                        liElement = this.fileList[this.filesData.indexOf(files[i])];\n                    }\n                    this.reloadcanceledFile(null, files[i], liElement, custom);\n                }\n            }\n        }\n    }\n    /**\n     * Stops the in-progress chunked upload based on the file data.\n     * When the file upload is canceled, the partially uploaded file is removed from server.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.\n     * @returns void\n     */\n    cancel(fileData) {\n        fileData = fileData ? fileData : this.filesData;\n        let cancelingFiles = this.getFilesInArray(fileData);\n        this.cancelUpload(cancelingFiles);\n    }\n    cancelUpload(fileData) {\n        let files = this.getFiles(fileData);\n        if (this.asyncSettings.chunkSize > 0) {\n            for (let i = 0; i < files.length; i++) {\n                if (files[i].statusCode === '3') {\n                    let metaData = this.getCurrentMetaData(files[i], null);\n                    metaData.file.statusCode = '5';\n                    metaData.file.status = this.localizedTexts('fileUploadCancel');\n                    this.updateMetaData(metaData);\n                    this.showHideUploadSpinner(files[i]);\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < files.length; i++) {\n                if (files[i].statusCode === '3') {\n                    files[i].statusCode = '5';\n                    files[i].status = this.localizedTexts('fileUploadCancel');\n                    this.showHideUploadSpinner(files[i]);\n                }\n            }\n        }\n    }\n    showHideUploadSpinner(files) {\n        let liElement = this.getLiElement(files);\n        if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {\n            let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n            createSpinner({ target: spinnerTarget, width: '20px' });\n            showSpinner(spinnerTarget);\n        }\n    }\n};\n__decorate$4([\n    Complex({ saveUrl: '', removeUrl: '' }, AsyncSettings)\n], Uploader.prototype, \"asyncSettings\", void 0);\n__decorate$4([\n    Property(false)\n], Uploader.prototype, \"sequentialUpload\", void 0);\n__decorate$4([\n    Property({})\n], Uploader.prototype, \"htmlAttributes\", void 0);\n__decorate$4([\n    Property('')\n], Uploader.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"enabled\", void 0);\n__decorate$4([\n    Property(null)\n], Uploader.prototype, \"template\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"multiple\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"autoUpload\", void 0);\n__decorate$4([\n    Complex({}, ButtonsProps)\n], Uploader.prototype, \"buttons\", void 0);\n__decorate$4([\n    Property('')\n], Uploader.prototype, \"allowedExtensions\", void 0);\n__decorate$4([\n    Property(0)\n], Uploader.prototype, \"minFileSize\", void 0);\n__decorate$4([\n    Property(30000000)\n], Uploader.prototype, \"maxFileSize\", void 0);\n__decorate$4([\n    Property(null)\n], Uploader.prototype, \"dropArea\", void 0);\n__decorate$4([\n    Collection([{}], FilesProp)\n], Uploader.prototype, \"files\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"showFileList\", void 0);\n__decorate$4([\n    Property(false)\n], Uploader.prototype, \"directoryUpload\", void 0);\n__decorate$4([\n    Property('Default')\n], Uploader.prototype, \"dropEffect\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"actionComplete\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"rendering\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"beforeUpload\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"fileListRendering\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"selected\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"uploading\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"success\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"failure\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"removing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"beforeRemove\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"clearing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"progress\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"change\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkSuccess\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkFailure\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkUploading\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"canceling\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"pausing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"resuming\", void 0);\nUploader = __decorate$4([\n    NotifyPropertyChanges\n], Uploader);\n\n/**\n * Uploader modules\n */\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst APPLY = 'e-apply';\nconst CANCEL = 'e-cancel';\nconst CURRENT = 'e-current';\nconst CONTAINER = 'e-container';\nconst CTRLBTN = 'e-ctrl-btn';\nconst CTRLSWITCH = 'e-switch-ctrl-btn';\nconst DISABLED$1 = 'e-disabled';\nconst FORMATSWITCH = 'e-value-switch-btn';\nconst HANDLER = 'e-handler';\nconst HEX = 'e-hex';\nconst HIDEHEX = 'e-hide-hex-value';\nconst HIDEOPACITY = 'e-hide-opacity';\nconst HIDERGBA = 'e-hide-switchable-value';\nconst HIDEVALUE = 'e-hide-value';\nconst HIDEVALUESWITCH = 'e-hide-valueswitcher';\nconst HSVAREA = 'e-hsv-color';\nconst HSVCONTAINER = 'e-hsv-container';\nconst INPUTWRAPPER = 'e-selected-value';\nconst MODESWITCH = 'e-mode-switch-btn';\nconst NOCOLOR = 'e-nocolor-item';\nconst OPACITY = 'e-opacity-value';\nconst PALETTES = 'e-palette';\nconst PALETTECONTENT = 'e-color-palette';\nconst PICKERCONTENT = 'e-color-picker';\nconst PREVIEW = 'e-preview-container';\nconst PREVIOUS = 'e-previous';\nconst RTL$1 = 'e-rtl';\nconst SHOWVALUE = 'e-show-value';\nconst SELECT = 'e-selected';\nconst SPLITPREVIEW = 'e-split-preview';\nconst TILE = 'e-tile';\nconst presets = {\n    default: ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b',\n        '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7',\n        '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4',\n        '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d',\n        '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176',\n        '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58',\n        '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835',\n        '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d',\n        '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825',\n        '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']\n};\n/**\n * ColorPicker component is a user interface to select and adjust color values. It provides supports for various\n * color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n * ```html\n * <input type=\"color\" id=\"color-picker\">\n * ```\n * ```typescript\n * <script>\n *   let colorPickerObj: ColorPicker = new ColorPicker(null , \"#color-picker\");\n * </script>\n * ```\n */\nlet ColorPicker = class ColorPicker extends Component {\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        let ele = this.element;\n        this.formElement = closest(this.element, 'form');\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n        let localeText = { Apply: 'Apply', Cancel: 'Cancel', ModeSwitcher: 'Switch Mode' };\n        this.l10n = new L10n('colorpicker', localeText, this.locale);\n        if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {\n            ele.setAttribute('name', ele.id);\n        }\n    }\n    /**\n     * To Initialize the component rendering\n     * @private\n     */\n    render() {\n        this.initWrapper();\n        if (this.inline) {\n            this.createWidget();\n        }\n        else {\n            this.createSplitBtn();\n        }\n        if (!this.enableOpacity) {\n            addClass([this.container.parentElement], HIDEOPACITY);\n        }\n        this.renderComplete();\n    }\n    initWrapper() {\n        let wrapper = this.createElement('div', { className: 'e-' + this.getModuleName() + '-wrapper' });\n        this.element.parentNode.insertBefore(wrapper, this.element);\n        wrapper.appendChild(this.element);\n        attributes(this.element, { 'tabindex': '-1', 'spellcheck': 'false' });\n        this.container = this.createElement('div', { className: CONTAINER });\n        this.getWrapper().appendChild(this.container);\n        let value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';\n        if (this.noColor && this.mode === 'Palette' && this.value === '') {\n            value = '';\n        }\n        let slicedValue = value.slice(0, 7);\n        if (isNullOrUndefined(this.initialInputValue)) {\n            this.initialInputValue = slicedValue;\n        }\n        this.element.value = slicedValue;\n        if (this.enableOpacity) {\n            this.setProperties({ 'value': value }, true);\n        }\n        else {\n            this.setProperties({ 'value': slicedValue }, true);\n        }\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL$1);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        this.tileRipple = rippleEffect(this.container, { selector: '.' + TILE });\n        this.ctrlBtnRipple = rippleEffect(this.container, { selector: '.e-btn' });\n    }\n    getWrapper() {\n        return this.element.parentElement;\n    }\n    createWidget() {\n        if (this.mode === 'Palette') {\n            this.createPalette();\n            if (!this.inline) {\n                this.firstPaletteFocus();\n            }\n        }\n        else {\n            this.createPicker();\n            if (!this.inline) {\n                this.getDragHandler().focus();\n            }\n        }\n        this.isRgb = true;\n        this.createInput();\n        this.createCtrlBtn();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        if (this.inline && this.disabled) {\n            this.toggleDisabled(true);\n        }\n        if (Browser.isDevice) {\n            this.refreshPopupPos();\n        }\n    }\n    createSplitBtn() {\n        let splitButton = this.createElement('button', { className: 'e-split-colorpicker' });\n        this.getWrapper().appendChild(splitButton);\n        this.splitBtn = new SplitButton({\n            iconCss: 'e-selected-color',\n            target: this.container,\n            disabled: this.disabled,\n            enableRtl: this.enableRtl,\n            open: this.onOpen.bind(this),\n            click: (args) => {\n                this.trigger('change', {\n                    currentValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },\n                    previousValue: { hex: null, rgba: null }, value: this.value\n                });\n            }\n        });\n        this.splitBtn.createElement = this.createElement;\n        this.splitBtn.appendTo(splitButton);\n        let preview = this.createElement('span', { className: SPLITPREVIEW });\n        select('.e-selected-color', splitButton).appendChild(preview);\n        preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));\n        let popupEle = this.getPopupEle();\n        addClass([popupEle], 'e-colorpicker-popup');\n        if (this.cssClass) {\n            addClass([popupEle], this.cssClass.split(' '));\n        }\n        if (Browser.isDevice) {\n            let popupInst = this.getPopupInst();\n            popupInst.relateTo = document.body;\n            popupInst.position = { X: 'center', Y: 'center' };\n            popupInst.targetType = 'container';\n            popupInst.collision = { X: 'fit', Y: 'fit' };\n            popupInst.offsetY = 4;\n            popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();\n        }\n        this.bindCallBackEvent();\n    }\n    onOpen(args) {\n        this.trigger('open', { element: this.container });\n    }\n    getPopupInst() {\n        return getInstance(this.getPopupEle(), Popup);\n    }\n    bindCallBackEvent() {\n        this.splitBtn.beforeOpen = (args) => {\n            let callBackPromise = new Deferred();\n            this.trigger('beforeOpen', args, (observeOpenArgs) => {\n                if (!observeOpenArgs.cancel) {\n                    let popupEle = this.getPopupEle();\n                    popupEle.style.top = formatUnit(0 + pageYOffset);\n                    popupEle.style.left = formatUnit(0 + pageXOffset);\n                    popupEle.style.display = 'block';\n                    this.createWidget();\n                    popupEle.style.display = '';\n                    if (Browser.isDevice) {\n                        this.modal = this.createElement('div');\n                        this.modal.className = 'e-' + this.getModuleName() + ' e-modal';\n                        this.modal.style.display = 'none';\n                        document.body.insertBefore(this.modal, popupEle);\n                        document.body.className += ' e-colorpicker-overflow';\n                        this.modal.style.display = 'block';\n                        this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();\n                    }\n                }\n                args.cancel = observeOpenArgs.cancel;\n                callBackPromise.resolve(observeOpenArgs);\n            });\n            return callBackPromise;\n        };\n        this.splitBtn.beforeClose = (args) => {\n            let callBackPromise = new Deferred();\n            if (!isNullOrUndefined(args.event)) {\n                let beforeCloseArgs = { element: this.container, event: args.event, cancel: false };\n                this.trigger('beforeClose', beforeCloseArgs, (observedCloseArgs) => {\n                    if (Browser.isDevice && args.event.target === this.modal) {\n                        observedCloseArgs.cancel = true;\n                    }\n                    if (!observedCloseArgs.cancel) {\n                        this.onPopupClose();\n                    }\n                    args.cancel = observedCloseArgs.cancel;\n                    callBackPromise.resolve(observedCloseArgs);\n                });\n            }\n            else {\n                callBackPromise.resolve(args);\n            }\n            return callBackPromise;\n        };\n    }\n    onPopupClose() {\n        this.unWireEvents();\n        this.destroyOtherComp();\n        this.container.style.width = '';\n        select('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor\n            = this.convertToRgbString(this.hexToRgb(this.value));\n        this.container.innerHTML = '';\n        removeClass([this.container], [PICKERCONTENT, PALETTECONTENT]);\n        if (Browser.isDevice && this.modal) {\n            removeClass([document.body], 'e-colorpicker-overflow');\n            this.modal.style.display = 'none';\n            this.modal.outerHTML = '';\n            this.modal = null;\n        }\n    }\n    createPalette() {\n        classList(this.container, [PALETTECONTENT], [PICKERCONTENT]);\n        if (this.presetColors) {\n            let paletteGroup = this.createElement('div', { className: 'e-custom-palette' });\n            this.appendElement(paletteGroup);\n            let keys = Object.keys(this.presetColors);\n            if (keys.length === 1) {\n                this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);\n            }\n            else {\n                for (let i = 0, len = keys.length; i < len; i++) {\n                    this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);\n                }\n            }\n            if (selectAll('.e-row', paletteGroup).length > 10) {\n                addClass([paletteGroup], 'e-palette-group');\n            }\n        }\n        else {\n            this.appendPalette(presets.default, 'default');\n        }\n        if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {\n            this.setNoColor();\n        }\n        let width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);\n        this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width);\n        this.rgb = this.hexToRgb(this.roundValue(this.value));\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n    }\n    firstPaletteFocus() {\n        if (!select('.' + SELECT, this.container.children[0])) {\n            selectAll('.' + PALETTES, this.container)[0].focus();\n        }\n    }\n    appendPalette(colors, key, refEle) {\n        let palette = this.createElement('div', { className: PALETTES, attrs: { 'tabindex': '0' } });\n        if (refEle) {\n            refEle.appendChild(palette);\n        }\n        else {\n            this.appendElement(palette);\n        }\n        let row;\n        let tile;\n        let roundedColor;\n        for (let i = 0, len = colors.length; i < len; i++) {\n            if (i === 0 || i % this.columns === 0) {\n                row = this.createElement('div', {\n                    className: 'e-row', attrs: { 'role': 'row' }\n                });\n                palette.appendChild(row);\n            }\n            roundedColor = this.roundValue(colors[i]).toLowerCase();\n            tile = this.createElement('span', {\n                className: TILE, attrs: { 'role': 'gridcell', 'aria-label': roundedColor, 'aria-selected': 'false' }\n            });\n            this.trigger('beforeTileRender', { element: tile, presetName: key, value: colors[i] });\n            row.appendChild(tile);\n            if (this.value === roundedColor) {\n                this.addTileSelection(tile);\n                palette.focus();\n            }\n            tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));\n        }\n    }\n    setNoColor() {\n        let noColorEle = this.container.querySelector('.e-row').children[0];\n        noColorEle.classList.add(NOCOLOR);\n        if (!this.value) {\n            noColorEle.classList.add(SELECT);\n            closest(noColorEle, '.' + PALETTES).focus();\n        }\n        ['aria-selected', 'aria-label'].forEach((attr) => { noColorEle.removeAttribute(attr); });\n        noColorEle.style.backgroundColor = '';\n    }\n    appendElement(ele, insertPos = 0) {\n        let refEle = this.container.children[insertPos];\n        refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);\n    }\n    addTileSelection(ele) {\n        ele.classList.add(SELECT);\n        ele.setAttribute('aria-selected', 'true');\n    }\n    createPicker() {\n        classList(this.container, [PICKERCONTENT], [PALETTECONTENT]);\n        let hsvContainer = this.createElement('div', { className: HSVCONTAINER });\n        this.appendElement(hsvContainer);\n        hsvContainer.appendChild(this.createElement('div', { className: HSVAREA }));\n        let dragHandler = this.createElement('span', { className: HANDLER, attrs: { 'tabindex': '0' } });\n        hsvContainer.appendChild(dragHandler);\n        this.rgb = this.hexToRgb(this.value);\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n        this.setHsvContainerBg();\n        this.setHandlerPosition();\n        this.createSlider();\n        this.createDragTooltip();\n    }\n    setHsvContainerBg(h = this.hsv[0]) {\n        this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));\n    }\n    getHsvContainer() {\n        return select('.' + HSVCONTAINER, this.container);\n    }\n    setHandlerPosition() {\n        let dragHandler = this.getDragHandler();\n        let hsvArea = select('.' + HSVAREA, this.container);\n        if (this.enableRtl) {\n            dragHandler.style.left = formatUnit(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);\n        }\n        else {\n            dragHandler.style.left = formatUnit(hsvArea.offsetWidth * this.hsv[1] / 100);\n        }\n        dragHandler.style.top = formatUnit(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);\n    }\n    createSlider() {\n        let sliderPreviewWrapper = this.createElement('div', { className: 'e-slider-preview' });\n        this.appendElement(sliderPreviewWrapper, 1);\n        this.createPreview(sliderPreviewWrapper);\n        let sliderWrapper = this.createElement('div', { className: 'e-colorpicker-slider' });\n        sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);\n        let slider = this.createElement('div', { className: 'e-hue-slider' });\n        sliderWrapper.appendChild(slider);\n        this.hueSlider = new Slider({\n            value: this.hsv[0],\n            min: 0,\n            max: 359,\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            change: this.hueChange.bind(this)\n        });\n        this.hueSlider.createElement = this.createElement;\n        this.hueSlider.appendTo(slider);\n        if (this.enableOpacity) {\n            slider = this.createElement('div', { className: 'e-opacity-slider' });\n            sliderWrapper.appendChild(slider);\n            this.createOpacitySlider(slider);\n        }\n    }\n    createOpacitySlider(slider) {\n        this.opacitySlider = new Slider({\n            value: this.rgb[3] * 100,\n            min: 0,\n            max: 100,\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            change: this.opacityChange.bind(this)\n        });\n        this.opacitySlider.createElement = this.createElement;\n        this.opacitySlider.appendTo(slider);\n        let opacityBgTrack = this.createElement('div', { className: 'e-opacity-empty-track' });\n        slider.appendChild(opacityBgTrack);\n        this.updateOpacitySliderBg();\n    }\n    updateOpacitySliderBg() {\n        let direction = this.enableRtl ? 'to left' : 'to right';\n        select('.e-slider-track', this.opacitySlider.element).style.background =\n            'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' +\n                this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';\n    }\n    hueChange(args) {\n        this.hsv[0] = args.value;\n        this.setHsvContainerBg();\n        this.convertToOtherFormat();\n    }\n    opacityChange(args) {\n        let value = args.value;\n        let pValue = this.rgbToHex(this.rgb);\n        this.hsv[3] = value / 100;\n        this.rgb[3] = value / 100;\n        let cValue = this.rgbToHex(this.rgb);\n        this.updateOpacityInput(value);\n        let rgb = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgb);\n        this.triggerEvent(cValue, pValue, rgb);\n    }\n    updateOpacityInput(value) {\n        if (!this.getWrapper().classList.contains(HIDEVALUE)) {\n            let opacityTextBoxInst = getInstance(select('.' + OPACITY, this.container), NumericTextBox);\n            opacityTextBoxInst.value = value;\n            opacityTextBoxInst.dataBind();\n        }\n    }\n    createPreview(parentEle) {\n        let previewContainer = this.createElement('div', { className: PREVIEW });\n        parentEle.appendChild(previewContainer);\n        let preview = this.createElement('span', { className: 'e-preview ' + CURRENT });\n        previewContainer.appendChild(preview);\n        let colorValue = this.convertToRgbString(this.rgb);\n        preview.style.backgroundColor = colorValue;\n        preview = this.createElement('span', { className: 'e-preview ' + PREVIOUS });\n        previewContainer.appendChild(preview);\n        preview.style.backgroundColor = colorValue;\n    }\n    isPicker() {\n        return !this.container.classList.contains(PALETTECONTENT);\n    }\n    getPopupEle() {\n        return this.container.parentElement;\n    }\n    createNumericInput(element, value, label, max) {\n        let numericInput = new NumericTextBox({\n            value: value,\n            placeholder: label,\n            min: 0,\n            max: max,\n            format: '###.##',\n            showSpinButton: false,\n            floatLabelType: 'Always',\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            readonly: this.isPicker() ? false : true,\n            change: (args) => {\n                if (args.event) {\n                    this.inputHandler(args.event);\n                }\n            }\n        });\n        numericInput.createElement = this.createElement;\n        numericInput.appendTo(element);\n    }\n    createInput() {\n        let isPicker = this.isPicker();\n        let wrapper = this.getWrapper();\n        if ((isPicker && !wrapper.classList.contains(HIDEVALUE)) || (!isPicker && wrapper.classList.contains(SHOWVALUE))) {\n            let inputWrap = this.createElement('div', { className: INPUTWRAPPER });\n            isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);\n            let container = this.createElement('div', { className: 'e-input-container' });\n            inputWrap.appendChild(container);\n            if (!wrapper.classList.contains(HIDEVALUESWITCH)) {\n                this.appendValueSwitchBtn(inputWrap);\n            }\n            if (!wrapper.classList.contains(HIDEHEX)) {\n                let hexInput = this.createElement('input', {\n                    className: HEX,\n                    attrs: { 'maxlength': '7', 'spellcheck': 'false' }\n                });\n                container.appendChild(hexInput);\n                Input.createInput({\n                    element: hexInput,\n                    floatLabelType: 'Always',\n                    properties: {\n                        placeholder: 'HEX',\n                        enableRtl: this.enableRtl,\n                        enabled: !this.disabled,\n                        readonly: this.isPicker() ? false : true\n                    }\n                }, this.createElement);\n                Input.setValue(this.value.slice(0, 7), hexInput);\n                hexInput.addEventListener('input', this.inputHandler.bind(this));\n            }\n            if (!wrapper.classList.contains(HIDERGBA)) {\n                let label;\n                let value;\n                if (this.isRgb) {\n                    label = 'RGB';\n                    value = this.rgb;\n                }\n                else {\n                    label = 'HSV';\n                    value = this.hsv;\n                }\n                let clsName = ['rh', 'gs', 'bv'];\n                for (let i = 0; i < 3; i++) {\n                    this.createNumericInput(container.appendChild(this.createElement('input', { className: 'e-' + clsName[i] + '-value' })), value[i], label[i], 255);\n                }\n                if (this.enableOpacity) {\n                    this.appendOpacityValue(container);\n                }\n            }\n        }\n    }\n    appendOpacityValue(container) {\n        this.createNumericInput(container.appendChild(this.createElement('input', { className: OPACITY })), this.rgb[3] * 100, 'A', 100);\n    }\n    appendValueSwitchBtn(targetEle) {\n        let valueSwitchBtn = this.createElement('button', {\n            className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH\n        });\n        targetEle.appendChild(valueSwitchBtn);\n        if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {\n            valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));\n        }\n    }\n    createCtrlBtn() {\n        if (this.modeSwitcher || this.showButtons) {\n            this.l10n.setLocale(this.locale);\n            let btnWrapper = this.createElement('div', { className: CTRLSWITCH });\n            this.container.appendChild(btnWrapper);\n            if (this.showButtons) {\n                let controlBtnWrapper = this.createElement('div', { className: CTRLBTN });\n                btnWrapper.appendChild(controlBtnWrapper);\n                let apply = this.l10n.getConstant('Apply');\n                controlBtnWrapper.appendChild(this.createElement('button', {\n                    innerHTML: apply,\n                    className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,\n                    attrs: { 'title': apply }\n                }));\n                let cancel = this.l10n.getConstant('Cancel');\n                controlBtnWrapper.appendChild(this.createElement('button', {\n                    innerHTML: cancel,\n                    className: 'e-btn e-css e-flat e-small ' + CANCEL,\n                    attrs: { 'title': cancel }\n                }));\n            }\n            if (this.modeSwitcher) {\n                this.appendModeSwitchBtn();\n            }\n        }\n    }\n    appendModeSwitchBtn() {\n        let modeSwitcher = this.createElement('button', {\n            className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH, attrs: { title: this.l10n.getConstant('ModeSwitcher') }\n        });\n        select('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select('.' + CTRLBTN, this.container));\n    }\n    createDragTooltip() {\n        let tooltip = new Tooltip({\n            opensOn: 'Custom',\n            showTipPointer: false,\n            cssClass: 'e-color-picker-tooltip',\n            beforeOpen: (args) => {\n                this.tooltipEle = args.element;\n            },\n            animation: { open: { effect: 'None' }, close: { effect: 'None' } }\n        });\n        tooltip.createElement = this.createElement;\n        tooltip.appendTo(this.container);\n        tooltip.open(this.container);\n        this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString();\n        select('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', { className: 'e-tip-transparent' }));\n    }\n    getTooltipInst() {\n        return getInstance(this.container, Tooltip);\n    }\n    setTooltipOffset(value) {\n        this.getTooltipInst().offsetY = value;\n    }\n    toggleDisabled(enable) {\n        enable ? this.getWrapper().classList.add(DISABLED$1) : this.getWrapper().classList.remove(DISABLED$1);\n        if (this.showButtons) {\n            ([].slice.call(selectAll('.e-btn', this.container))).forEach((ele) => {\n                enable ? attributes(ele, { 'disabled': '' }) : ele.removeAttribute('disabled');\n            });\n        }\n    }\n    convertToRgbString(rgb) {\n        return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';\n    }\n    convertToHsvString(hsv) {\n        return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';\n    }\n    updateHsv() {\n        this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];\n        this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];\n        this.setHandlerPosition();\n    }\n    convertToOtherFormat(isKey = false) {\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.hsvToRgb.apply(this, this.hsv);\n        let cValue = this.rgbToHex(this.rgb);\n        let rgba = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgba);\n        this.updateInput(cValue);\n        this.triggerEvent(cValue, pValue, rgba, isKey);\n    }\n    updateInput(value) {\n        let wrapper = this.getWrapper();\n        if (!wrapper.classList.contains(HIDEVALUE)) {\n            if (!wrapper.classList.contains(HIDEHEX)) {\n                Input.setValue(value.substr(0, 7), select('.' + HEX, this.container));\n            }\n            if (!wrapper.classList.contains(HIDERGBA)) {\n                if (this.isRgb) {\n                    this.updateValue(this.rgb, false);\n                }\n                else {\n                    this.updateValue(this.hsv, false);\n                }\n            }\n        }\n    }\n    updatePreview(value) {\n        if (this.enableOpacity) {\n            this.updateOpacitySliderBg();\n        }\n        select('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;\n        select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;\n        select('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor\n            = this.convertToRgbString(this.hexToRgb(this.value));\n    }\n    getDragHandler() {\n        return select('.' + HANDLER, this.container);\n    }\n    removeTileSelection() {\n        let selectedEle = [].slice.call(selectAll('.' + SELECT, this.container.children[0]));\n        selectedEle.forEach((ele) => {\n            ele.classList.remove(SELECT);\n            ele.setAttribute('aria-selected', 'false');\n        });\n    }\n    convertRgbToNumberArray(value) {\n        return (value.slice(value.indexOf('(') + 1, value.indexOf(')'))).split(',').map((n, i) => {\n            return (i !== 3) ? parseInt(n, 10) : parseFloat(n);\n        });\n    }\n    /**\n     * To get color value in specified type.\n     * @param value - Specify the color value.\n     * @param type - Specify the type to which the specified color needs to be converted.\n     * @method getValue\n     * @return {string}\n     */\n    getValue(value, type) {\n        if (!value) {\n            value = this.value;\n        }\n        type = !type ? 'hex' : type.toLowerCase();\n        if (value[0] === 'r') {\n            let cValue = this.convertRgbToNumberArray(value);\n            if (type === 'hex' || type === 'hexa') {\n                let hex = this.rgbToHex(cValue);\n                return type === 'hex' ? hex.slice(0, 7) : hex;\n            }\n            else {\n                if (type === 'hsv') {\n                    return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));\n                }\n                else {\n                    if (type === 'hsva') {\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));\n                    }\n                    else {\n                        return 'null';\n                    }\n                }\n            }\n        }\n        else {\n            if (value[0] === 'h') {\n                let cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));\n                if (type === 'rgba') {\n                    return this.convertToRgbString(cValue);\n                }\n                else {\n                    if (type === 'hex' || type === 'hexa') {\n                        let hex = this.rgbToHex(cValue);\n                        return type === 'hex' ? hex.slice(0, 7) : hex;\n                    }\n                    else {\n                        if (type === 'rgb') {\n                            return this.convertToRgbString(cValue.slice(0, 3));\n                        }\n                        else {\n                            return 'null';\n                        }\n                    }\n                }\n            }\n            else {\n                value = this.roundValue(value);\n                let rgb = this.hexToRgb(value);\n                if (type === 'rgb' || type === 'hsv') {\n                    rgb = rgb.slice(0, 3);\n                }\n                if (type === 'rgba' || type === 'rgb') {\n                    return this.convertToRgbString(rgb);\n                }\n                else {\n                    if (type === 'hsva' || type === 'hsv') {\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));\n                    }\n                    else {\n                        if (type === 'hex') {\n                            return value.slice(0, 7);\n                        }\n                        else {\n                            if (type === 'a') {\n                                return rgb[3].toString();\n                            }\n                            else {\n                                return 'null';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To show/hide ColorPicker popup based on current state of the SplitButton.\n     * @method toggle\n     * @return {void}\n     */\n    toggle() {\n        this.container.parentElement.classList.contains('e-popup-close') ? this.splitBtn.toggle() : this.closePopup(null);\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'colorpicker';\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    wireEvents() {\n        if (this.isPicker()) {\n            let dragHandler = this.getDragHandler();\n            EventHandler.add(dragHandler, 'keydown', this.pickerKeyDown, this);\n            EventHandler.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);\n            if (this.modeSwitcher || this.showButtons) {\n                this.addCtrlSwitchEvent();\n            }\n            EventHandler.add(select('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);\n        }\n        else {\n            EventHandler.add(this.container, 'click', this.paletteClickHandler, this);\n            EventHandler.add(this.container, 'keydown', this.paletteKeyDown, this);\n        }\n    }\n    formResetHandler() {\n        this.value = this.initialInputValue;\n        attributes(this.element, { 'value': this.initialInputValue });\n    }\n    addCtrlSwitchEvent() {\n        let ctrlSwitchBtn = select('.' + CTRLSWITCH, this.container);\n        if (ctrlSwitchBtn) {\n            EventHandler.add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);\n        }\n    }\n    pickerKeyDown(e) {\n        switch (e.keyCode) {\n            case 39:\n                this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);\n                break;\n            case 37:\n                this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);\n                break;\n            case 38:\n                this.handlerDragPosition(2, 1, e);\n                break;\n            case 40:\n                this.handlerDragPosition(2, -1, e);\n                break;\n            case 13:\n                e.preventDefault();\n                let cValue = this.rgbToHex(this.rgb);\n                this.enterKeyHandler(cValue, e);\n        }\n    }\n    enterKeyHandler(value, e) {\n        this.triggerChangeEvent(value);\n        if (!this.inline) {\n            this.closePopup(e);\n            this.splitBtn.element.focus();\n        }\n    }\n    closePopup(e) {\n        let beforeCloseArgs = { element: this.container, event: e, cancel: false };\n        this.trigger('beforeClose', beforeCloseArgs, (observedcloseArgs) => {\n            if (!observedcloseArgs.cancel) {\n                this.splitBtn.toggle();\n                this.onPopupClose();\n            }\n        });\n    }\n    triggerChangeEvent(value) {\n        let hex = value.slice(0, 7);\n        this.trigger('change', {\n            currentValue: { hex: hex, rgba: this.convertToRgbString(this.rgb) },\n            previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },\n            value: this.enableOpacity ? value : hex\n        });\n        if (this.enableOpacity) {\n            this.setProperties({ 'value': value }, true);\n        }\n        else {\n            this.setProperties({ 'value': hex }, true);\n        }\n        this.element.value = hex ? hex : '#000000';\n    }\n    handlerDragPosition(prob, value, e) {\n        e.preventDefault();\n        this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);\n        if (this.hsv[prob] < 0) {\n            this.hsv[prob] = 0;\n        }\n        this.updateHsv();\n        this.convertToOtherFormat(true);\n    }\n    handlerDown(e) {\n        e.preventDefault();\n        if (e.type === 'mousedown') {\n            this.clientX = Math.abs(e.pageX - pageXOffset);\n            this.clientY = Math.abs(e.pageY - pageYOffset);\n            this.setTooltipOffset(8);\n        }\n        else {\n            this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n            this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n            this.setTooltipOffset(-8);\n        }\n        this.setHsv(this.clientX, this.clientY);\n        this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';\n        this.updateHsv();\n        this.convertToOtherFormat();\n        this.getDragHandler().focus();\n        EventHandler.add(document, 'mousemove touchmove', this.handlerMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.handlerEnd, this);\n    }\n    handlerMove(e) {\n        if (e.type !== 'touchmove') {\n            e.preventDefault();\n        }\n        let x;\n        let y;\n        if (e.type === 'mousemove') {\n            x = Math.abs(e.pageX - pageXOffset);\n            y = Math.abs(e.pageY - pageYOffset);\n        }\n        else {\n            x = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n            y = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n        }\n        this.setHsv(x, y);\n        let dragHandler = this.getDragHandler();\n        let left = parseInt(dragHandler.style.left, 10);\n        let top = parseInt(dragHandler.style.top, 10);\n        this.updateHsv();\n        this.convertToOtherFormat();\n        this.getTooltipInst().refresh(dragHandler);\n        if (!this.tooltipEle.style.transform) {\n            if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {\n                select('.' + HSVAREA, this.container).style.cursor = 'pointer';\n                dragHandler.style.transition = 'none';\n                if (!this.inline) {\n                    this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();\n                }\n                this.tooltipEle.style.transform = 'rotate(45deg)';\n                dragHandler.classList.add('e-hide-handler');\n            }\n        }\n    }\n    setHsv(clientX, clientY) {\n        let ele = select('.' + HSVAREA, this.container);\n        let position = ele.getBoundingClientRect();\n        if (this.enableRtl) {\n            clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);\n        }\n        else {\n            clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;\n        }\n        clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;\n        this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight -\n            Math.max(0, Math.min(ele.offsetHeight, (clientY - ele.offsetTop)))) / ele.offsetHeight) * 10) / 10;\n        this.hsv[1] =\n            Math.round(Number(100 * (Math.max(0, Math.min(ele.offsetWidth, (clientX - ele.offsetLeft)))) / ele.offsetWidth) * 10) / 10;\n    }\n    handlerEnd(e) {\n        if (e.type !== 'touchend') {\n            e.preventDefault();\n        }\n        EventHandler.remove(document, 'mousemove touchmove', this.handlerMove);\n        EventHandler.remove(document, 'mouseup touchend', this.handlerEnd);\n        let dragHandler = this.getDragHandler();\n        select('.' + HSVAREA, this.container).style.cursor = '';\n        if (this.tooltipEle.style.transform) {\n            this.tooltipEle.style.transform = '';\n            dragHandler.classList.remove('e-hide-handler');\n        }\n        if (!this.inline && !this.showButtons) {\n            this.closePopup(e);\n        }\n    }\n    btnClickHandler(e) {\n        let target = e.target;\n        if (closest(target, '.' + MODESWITCH)) {\n            e.stopPropagation();\n            this.switchToPalette();\n        }\n        else {\n            if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n                this.ctrlBtnClick(target, e);\n            }\n        }\n    }\n    switchToPalette() {\n        this.trigger('beforeModeSwitch', { element: this.container, mode: 'Palette' });\n        this.unWireEvents();\n        this.destroyOtherComp();\n        detach(select('.e-slider-preview', this.container));\n        if (!this.getWrapper().classList.contains(HIDEVALUE)) {\n            remove(select('.' + INPUTWRAPPER, this.container));\n        }\n        detach(this.getHsvContainer());\n        this.createPalette();\n        this.firstPaletteFocus();\n        this.createInput();\n        this.refreshPopupPos();\n        this.wireEvents();\n        this.trigger('onModeSwitch', { element: this.container, mode: 'Palette' });\n    }\n    refreshPopupPos() {\n        if (!this.inline) {\n            let popupEle = this.getPopupEle();\n            popupEle.style.left = formatUnit(0 + pageXOffset);\n            popupEle.style.top = formatUnit(0 + pageYOffset);\n            this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);\n        }\n    }\n    formatSwitchHandler(e) {\n        let target = e.target.parentElement;\n        if (this.isRgb) {\n            this.updateValue(this.hsv, true, 3, [360, 100, 100]);\n            this.isRgb = false;\n        }\n        else {\n            this.updateValue(this.rgb, true, 2);\n            this.isRgb = true;\n        }\n    }\n    updateValue(value, format, idx, max) {\n        let clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];\n        let inst;\n        for (let i = 0, len = clsName.length; i < len; i++) {\n            inst = getInstance(select('.' + clsName[i], this.container), NumericTextBox);\n            inst.value = Math.round(value[i]);\n            if (format) {\n                inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();\n                inst.max = max ? max[i] : 255;\n            }\n            inst.dataBind();\n        }\n    }\n    previewHandler(e) {\n        let target = e.target;\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);\n        if (!this.rgb[3]) {\n            this.rgb[3] = 1;\n        }\n        let cValue = this.rgbToHex(this.rgb);\n        let hsv = this.rgbToHsv.apply(this, this.rgb);\n        if (hsv[0] !== this.hsv[0]) {\n            this.hueSlider.setProperties({ 'value': hsv[0] }, true);\n            this.hueSlider.refresh();\n        }\n        this.setHsvContainerBg(hsv[0]);\n        if (this.enableOpacity && hsv[3] !== this.hsv[3]) {\n            this.opacitySlider.setProperties({ 'value': hsv[3] * 100 }, true);\n            this.opacitySlider.refresh();\n            this.updateOpacitySliderBg();\n        }\n        this.hsv = hsv;\n        this.setHandlerPosition();\n        this.updateInput(cValue);\n        select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);\n        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n    }\n    paletteClickHandler(e) {\n        e.preventDefault();\n        let target = e.target;\n        if (target.classList.contains(TILE)) {\n            this.removeTileSelection();\n            this.addTileSelection(target);\n            if (target.classList.contains(NOCOLOR)) {\n                this.noColorTile();\n            }\n            else {\n                let cValue = target.getAttribute('aria-label');\n                let pValue = this.rgbToHex(this.rgb);\n                this.rgb = this.hexToRgb(this.roundValue(cValue));\n                this.hsv = this.rgbToHsv.apply(this, this.rgb);\n                if (this.getWrapper().classList.contains(SHOWVALUE)) {\n                    this.updateInput(cValue);\n                }\n                this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n            }\n            if (!this.inline && !this.showButtons) {\n                this.closePopup(e);\n            }\n        }\n        else {\n            if (closest(target, '.' + MODESWITCH)) {\n                this.switchToPicker();\n            }\n            else {\n                if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n                    this.ctrlBtnClick(target, e);\n                }\n                else {\n                    if (this.getWrapper().classList.contains(SHOWVALUE) && closest(target, '.' + FORMATSWITCH)) {\n                        this.formatSwitchHandler(e);\n                    }\n                }\n            }\n        }\n    }\n    noColorTile(isKey = false) {\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = [];\n        this.hsv = [];\n        this.triggerEvent('', pValue, '', isKey);\n    }\n    switchToPicker() {\n        let wrapper = this.getWrapper();\n        this.trigger('beforeModeSwitch', { element: this.container, mode: 'Picker' });\n        this.unWireEvents();\n        ([].slice.call(selectAll('.' + PALETTES, this.container))).forEach((ele) => {\n            detach(ele);\n        });\n        if (wrapper.classList.contains(SHOWVALUE)) {\n            detach(select('.' + INPUTWRAPPER, this.container));\n        }\n        this.container.style.width = '';\n        let grpEle = select('.e-custom-palette', this.container);\n        if (this.presetColors) {\n            remove(grpEle);\n        }\n        this.createPicker();\n        this.getDragHandler().focus();\n        this.createInput();\n        this.refreshPopupPos();\n        this.wireEvents();\n        this.trigger('onModeSwitch', { element: this.container, mode: 'Picker' });\n    }\n    ctrlBtnClick(ele, e) {\n        if (ele.classList.contains(APPLY)) {\n            let cValue = this.rgbToHex(this.rgb);\n            this.triggerChangeEvent(cValue);\n        }\n        if (!this.inline) {\n            this.closePopup(e);\n            this.splitBtn.element.focus();\n        }\n    }\n    paletteKeyDown(e) {\n        let target = e.target;\n        if (!target.classList.contains(PALETTES)) {\n            return;\n        }\n        let selectedEle;\n        let idx;\n        let tiles = [].slice.call(selectAll('.' + TILE, target));\n        let prevSelectedEle = (tiles.filter((tile) => tile.classList.contains('e-selected'))).pop();\n        switch (!e.altKey && e.keyCode) {\n            case 39:\n                e.preventDefault();\n                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)]\n                    : tiles[this.enableRtl ? tiles.length - 1 : 0];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 37:\n                e.preventDefault();\n                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)]\n                    : tiles[this.enableRtl ? 0 : tiles.length - 1];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 38:\n                e.preventDefault();\n                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;\n                selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 40:\n                e.preventDefault();\n                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;\n                if (tiles[idx]) {\n                    selectedEle = tiles[idx];\n                }\n                else {\n                    idx %= tiles.length;\n                    idx += tiles[tiles.length - 1].parentElement.childElementCount;\n                    selectedEle = tiles[idx];\n                }\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 13:\n                e.preventDefault();\n                if (prevSelectedEle) {\n                    let cValue = prevSelectedEle.getAttribute('aria-label');\n                    this.enterKeyHandler(cValue ? cValue : '', e);\n                }\n        }\n    }\n    keySelectionChanges(newEle) {\n        this.removeTileSelection();\n        this.addTileSelection(newEle);\n        if (newEle.classList.contains(NOCOLOR)) {\n            this.noColorTile(true);\n        }\n        else {\n            let cValue = newEle.getAttribute('aria-label');\n            let pValue = this.rgbToHex(this.rgb);\n            this.rgb = this.hexToRgb(cValue);\n            this.hsv = this.rgbToHsv.apply(this, this.rgb);\n            if (this.getWrapper().classList.contains(SHOWVALUE)) {\n                this.updateInput(cValue);\n            }\n            this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);\n        }\n    }\n    tilePosition(items, element, cIdx) {\n        items = Array.prototype.slice.call(items);\n        let n = items.length;\n        let emptyCount = this.columns - items[n - 1].parentElement.childElementCount;\n        let idx = items.indexOf(element);\n        idx += cIdx;\n        idx < 0 ? idx += n + emptyCount : idx %= n + emptyCount;\n        return idx;\n    }\n    inputHandler(e) {\n        let target = e.target;\n        if (!target.value.length) {\n            return;\n        }\n        let hsv;\n        let pValue;\n        let label = select('.e-float-text', target.parentElement).textContent;\n        switch (label) {\n            case 'HEX':\n                let value = '';\n                if ((target.value[0] === '#' && target.value.length !== 5) || (target.value[0] !== '#' && target.value.length !== 4)) {\n                    value = this.roundValue(target.value);\n                }\n                if (value.length === 9) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb = this.hexToRgb(value + value.substr(-2));\n                    this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);\n                }\n                else {\n                    return;\n                }\n                break;\n            case 'R':\n                if (this.rgb[0] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[0] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'G':\n                if (this.rgb[1] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[1] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'B':\n                if (this.rgb[2] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[2] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'H':\n                this.hueSlider.value = Number(target.value);\n                break;\n            case 'S':\n                if (this.hsv[1] !== Number(target.value)) {\n                    this.hsv[1] = Number(target.value);\n                    this.updateHsv();\n                    this.convertToOtherFormat();\n                }\n                break;\n            case 'V':\n                if (this.hsv[2] !== Number(target.value)) {\n                    this.hsv[2] = Number(target.value);\n                    this.updateHsv();\n                    this.convertToOtherFormat();\n                }\n                break;\n            case 'A':\n                this.opacitySlider.value = Number(target.value);\n                break;\n        }\n    }\n    inputValueChange(hsv, pValue, value) {\n        if (hsv[0] !== this.hsv[0]) {\n            this.hueSlider.setProperties({ 'value': hsv[0] }, true);\n            this.hueSlider.refresh();\n            this.setHsvContainerBg(hsv[0]);\n        }\n        this.hsv = hsv;\n        let cValue = this.rgbToHex(this.rgb);\n        this.setHandlerPosition();\n        this.updateInput(value ? value : cValue);\n        let rgba = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgba);\n        this.triggerEvent(cValue, pValue, rgba);\n    }\n    triggerEvent(cValue, pValue, rgba, isKey = false) {\n        let hex = cValue.slice(0, 7);\n        if (!this.showButtons && !isKey) {\n            this.trigger('change', { currentValue: { hex: hex, rgba: rgba },\n                previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) }, value: cValue });\n            this.setProperties({ 'value': cValue }, true);\n            this.element.value = hex ? hex : '#000000';\n        }\n        else {\n            this.trigger('select', {\n                currentValue: { hex: hex, rgba: rgba },\n                previousValue: { hex: pValue.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(pValue)) }\n            });\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        super.destroy();\n        ['tabindex', 'spellcheck'].forEach((attr) => { this.element.removeAttribute(attr); });\n        if (this.inline) {\n            this.unWireEvents();\n            this.destroyOtherComp();\n        }\n        else {\n            if (this.isPopupOpen()) {\n                this.unWireEvents();\n                this.destroyOtherComp();\n            }\n            this.splitBtn.destroy();\n            this.splitBtn = null;\n        }\n        this.tileRipple();\n        this.tileRipple = null;\n        this.ctrlBtnRipple();\n        this.ctrlBtnRipple = null;\n        if (this.element.nextElementSibling) {\n            detach(this.element.nextElementSibling);\n        }\n        if (wrapper) {\n            wrapper.parentElement.insertBefore(this.element, wrapper);\n            detach(wrapper);\n        }\n        this.container = null;\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    destroyOtherComp() {\n        if (this.isPicker()) {\n            this.hueSlider.destroy();\n            if (this.enableOpacity) {\n                this.opacitySlider.destroy();\n                this.opacitySlider = null;\n            }\n            this.hueSlider = null;\n            let tooltipInst = this.getTooltipInst();\n            tooltipInst.close();\n            tooltipInst.destroy();\n            this.tooltipEle = null;\n        }\n    }\n    isPopupOpen() {\n        return this.getPopupEle().classList.contains('e-popup-open');\n    }\n    unWireEvents() {\n        if (this.isPicker()) {\n            let wrapper = this.getWrapper();\n            let dragHandler = this.getDragHandler();\n            EventHandler.remove(dragHandler, 'keydown', this.pickerKeyDown);\n            EventHandler.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);\n            if (this.modeSwitcher || this.showButtons) {\n                EventHandler.remove(select('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);\n            }\n            EventHandler.remove(select('.' + PREVIOUS, this.container), 'click', this.previewHandler);\n        }\n        else {\n            EventHandler.remove(this.container, 'click', this.paletteClickHandler);\n            EventHandler.remove(this.container, 'keydown', this.paletteKeyDown);\n        }\n    }\n    roundValue(value) {\n        if (!value) {\n            return '';\n        }\n        if (value[0] !== '#') {\n            value = '#' + value;\n        }\n        let len = value.length;\n        if (len === 4) {\n            value += 'f';\n            len = 5;\n        }\n        if (len === 5) {\n            let tempValue = '';\n            for (let i = 1, len = value.length; i < len; i++) {\n                tempValue += (value.charAt(i) + value.charAt(i));\n            }\n            value = '#' + tempValue;\n            len = 9;\n        }\n        if (len === 7) {\n            value += 'ff';\n        }\n        return value;\n    }\n    hexToRgb(hex) {\n        if (!hex) {\n            return [];\n        }\n        hex = hex.trim();\n        if (hex.length !== 9) {\n            hex = this.roundValue(hex);\n        }\n        let opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));\n        hex = hex.slice(1, 7);\n        let bigInt = parseInt(hex, 16);\n        let h = [];\n        h.push((bigInt >> 16) & 255);\n        h.push((bigInt >> 8) & 255);\n        h.push(bigInt & 255);\n        h.push(opacity);\n        return h;\n    }\n    rgbToHsv(r, g, b, opacity) {\n        if (this.rgb && !this.rgb.length) {\n            return [];\n        }\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h;\n        let s;\n        let v = max;\n        let d = max - min;\n        s = max === 0 ? 0 : d / max;\n        if (max === min) {\n            h = 0;\n        }\n        else {\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        let hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];\n        if (!isNullOrUndefined(opacity)) {\n            hsv.push(opacity);\n        }\n        return hsv;\n    }\n    hsvToRgb(h, s, v, opacity) {\n        let r;\n        let g;\n        let b;\n        let i;\n        let f;\n        let p;\n        let q;\n        let t;\n        s /= 100;\n        v /= 100;\n        if (s === 0) {\n            r = g = b = v;\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];\n        }\n        h /= 60;\n        i = Math.floor(h);\n        f = h - i;\n        p = v * (1 - s);\n        q = v * (1 - s * f);\n        t = v * (1 - s * (1 - f));\n        switch (i) {\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            default:\n                r = v;\n                g = p;\n                b = q;\n        }\n        let rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        if (!isNullOrUndefined(opacity)) {\n            rgb.push(opacity);\n        }\n        return rgb;\n    }\n    rgbToHex(rgb) {\n        return rgb.length ? ('#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) +\n            (!isNullOrUndefined(rgb[3]) ? (rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00') : '')) : '';\n    }\n    hex(x) {\n        return ('0' + x.toString(16)).slice(-2);\n    }\n    changeModeSwitcherProp(prop) {\n        let ctrlSwitchWrapper = select('.' + CTRLSWITCH, this.container);\n        if (prop) {\n            if (ctrlSwitchWrapper) {\n                this.appendModeSwitchBtn();\n            }\n            else {\n                this.createCtrlBtn();\n                if (this.isPicker() && !this.disabled) {\n                    this.addCtrlSwitchEvent();\n                }\n            }\n        }\n        else {\n            if (ctrlSwitchWrapper) {\n                if (this.showButtons) {\n                    detach(select('.' + MODESWITCH, ctrlSwitchWrapper));\n                }\n                else {\n                    remove(ctrlSwitchWrapper);\n                }\n            }\n        }\n    }\n    changeShowBtnProps(prop) {\n        let ctrlBtnWrapper = select('.' + CTRLSWITCH, this.container);\n        if (prop) {\n            if (ctrlBtnWrapper) {\n                remove(ctrlBtnWrapper);\n            }\n            this.createCtrlBtn();\n            if (this.isPicker() && !this.disabled) {\n                this.addCtrlSwitchEvent();\n            }\n        }\n        else {\n            if (this.modeSwitcher) {\n                detach(select('.' + CTRLBTN, ctrlBtnWrapper));\n            }\n            else {\n                remove(ctrlBtnWrapper);\n            }\n        }\n    }\n    changeValueProp(newProp) {\n        if (this.isPicker()) {\n            this.rgb = this.hexToRgb(newProp);\n            this.hsv = this.rgbToHsv.apply(this, this.rgb);\n            this.setHandlerPosition();\n            detach(closest(this.hueSlider.element, '.e-slider-preview'));\n            this.createSlider();\n            this.setHsvContainerBg();\n            this.updateInput(newProp);\n            if (this.rgb.length === 4) {\n                this.updateOpacityInput(this.rgb[3] * 100);\n            }\n        }\n        else {\n            this.removeTileSelection();\n            let ele = select('span[aria-label=\"' + this.roundValue(newProp) + '\"]', this.container);\n            if (ele) {\n                this.addTileSelection(ele);\n            }\n        }\n    }\n    setInputEleProps(prop) {\n        remove(select('.' + INPUTWRAPPER, this.container));\n        this.createInput();\n    }\n    changeDisabledProp(newProp) {\n        if (this.isPicker()) {\n            this.hueSlider.enabled = !newProp;\n            this.opacitySlider.enabled = !newProp;\n            this.setInputEleProps(newProp);\n        }\n        if (newProp) {\n            this.toggleDisabled(true);\n            this.unWireEvents();\n        }\n        else {\n            this.toggleDisabled(false);\n            this.wireEvents();\n        }\n    }\n    changeCssClassProps(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        let popupWrapper = this.getPopupEle();\n        if (oldProp) {\n            removeClass([wrapper, popupWrapper], oldProp.split(' '));\n        }\n        if (newProp) {\n            addClass([wrapper, popupWrapper], newProp.split(' '));\n        }\n    }\n    changeRtlProps(newProp) {\n        if (newProp) {\n            addClass([this.getWrapper()], 'e-rtl');\n        }\n        else {\n            removeClass([this.getWrapper()], 'e-rtl');\n        }\n    }\n    changePaletteProps() {\n        detach(this.container.children[0]);\n        this.container.style.width = '';\n        this.createPalette();\n    }\n    changeOpacityProps(newProp) {\n        let wrapper = this.getWrapper();\n        if (newProp) {\n            removeClass([this.container.parentElement], HIDEOPACITY);\n            this.createOpacitySlider(select('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', { className: 'e-opacity-slider' })));\n            if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n                this.appendOpacityValue(select('.e-input-container', this.container));\n            }\n        }\n        else {\n            addClass([this.container.parentElement], HIDEOPACITY);\n            this.opacitySlider.destroy();\n            remove(this.opacitySlider.element);\n            this.opacitySlider = null;\n            if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n                remove(select('.' + OPACITY, this.container).parentElement);\n            }\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ColorPickerModel} newProp\n     * @param  {ColorPickerModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (!isNullOrUndefined(newProp.value)) {\n            let value = this.roundValue(newProp.value);\n            if (value.length === 9) {\n                this.element.value = this.roundValue(value).slice(0, 7);\n                let preview = this.splitBtn && select('.' + SPLITPREVIEW, this.splitBtn.element);\n                if (preview) {\n                    preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));\n                }\n            }\n            else {\n                this.value = oldProp.value;\n            }\n        }\n        if (!this.inline && isNullOrUndefined(newProp.inline)) {\n            let otherCompModel = ['disabled', 'enableRtl'];\n            this.splitBtn.setProperties(getModel(newProp, otherCompModel));\n            if (!this.isPopupOpen()) {\n                this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n                this.changeRtlProps(newProp.enableRtl);\n                return;\n            }\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'inline':\n                    if (newProp.inline) {\n                        this.getWrapper().appendChild(this.container);\n                        this.splitBtn.destroy();\n                        detach(this.element.nextElementSibling);\n                        if (!this.container.children.length) {\n                            this.createWidget();\n                        }\n                    }\n                    else {\n                        this.destroyOtherComp();\n                        this.unWireEvents();\n                        this.container.innerHTML = '';\n                        this.createSplitBtn();\n                    }\n                    break;\n                case 'cssClass':\n                    this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n                    let props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));\n                    props = props.reduce((a, b) => { if (a.indexOf(b) < 0) {\n                        a.push(b);\n                    } return a; }, []);\n                    let count = 0;\n                    props.forEach((cls) => {\n                        if (count === 0 &&\n                            (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {\n                            let inputWrap = select('.' + INPUTWRAPPER, this.container);\n                            if (inputWrap) {\n                                remove(select('.' + INPUTWRAPPER, this.container));\n                            }\n                            this.createInput();\n                            count++;\n                        }\n                    });\n                    break;\n                case 'enableRtl':\n                    if (this.isPicker()) {\n                        this.hueSlider.enableRtl = newProp.enableRtl;\n                        if (this.enableOpacity) {\n                            this.opacitySlider.enableRtl = newProp.enableRtl;\n                        }\n                        this.setInputEleProps(newProp.enableRtl);\n                    }\n                    this.changeRtlProps(newProp.enableRtl);\n                    break;\n                case 'disabled':\n                    this.changeDisabledProp(newProp.disabled);\n                    break;\n                case 'value':\n                    if (this.value !== oldProp.value) {\n                        this.changeValueProp(newProp.value);\n                    }\n                    break;\n                case 'showButtons':\n                    this.changeShowBtnProps(newProp.showButtons);\n                    break;\n                case 'mode':\n                    if (newProp.mode === 'Picker') {\n                        this.switchToPicker();\n                    }\n                    else {\n                        this.switchToPalette();\n                    }\n                    break;\n                case 'modeSwitcher':\n                    this.changeModeSwitcherProp(newProp.modeSwitcher);\n                    break;\n                case 'columns':\n                case 'presetColors':\n                    if (!this.isPicker()) {\n                        this.changePaletteProps();\n                    }\n                    break;\n                case 'noColor':\n                    if (newProp.noColor) {\n                        if (this.mode === 'Palette' && !this.modeSwitcher) {\n                            this.setNoColor();\n                        }\n                    }\n                    else {\n                        this.changePaletteProps();\n                    }\n                    break;\n                case 'enableOpacity':\n                    this.changeOpacityProps(newProp.enableOpacity);\n                    break;\n            }\n        }\n    }\n    /**\n     * Sets the focus to Colorpicker\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.parentElement.focus();\n    }\n};\n__decorate$5([\n    Property('#008000ff')\n], ColorPicker.prototype, \"value\", void 0);\n__decorate$5([\n    Property('')\n], ColorPicker.prototype, \"cssClass\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"disabled\", void 0);\n__decorate$5([\n    Property('Picker')\n], ColorPicker.prototype, \"mode\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"modeSwitcher\", void 0);\n__decorate$5([\n    Property(null)\n], ColorPicker.prototype, \"presetColors\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"showButtons\", void 0);\n__decorate$5([\n    Property(10)\n], ColorPicker.prototype, \"columns\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"inline\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"noColor\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"enablePersistence\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"enableOpacity\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"select\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"change\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeTileRender\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeOpen\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"open\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeClose\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeModeSwitch\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"onModeSwitch\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"created\", void 0);\nColorPicker = __decorate$5([\n    NotifyPropertyChanges\n], ColorPicker);\n\n/**\n * ColorPicker modules\n */\n\nvar __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst HIDE_CLEAR = 'e-clear-icon-hide';\nconst TEXTBOX_FOCUS = 'e-input-focus';\nconst containerAttr = ['title', 'style', 'class'];\n/**\n * Represents the TextBox component that allows the user to enter the values based on it's type.\n * ```html\n * <input name='images' id='textbox'/>\n * ```\n * ```typescript\n * <script>\n *   var textboxObj = new TextBox();\n *   textboxObj.appendTo('#textbox');\n * </script>\n * ```\n */\nlet TextBox = class TextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.previousValue = null;\n        this.isAngular = false;\n        this.isHiddenInput = false;\n        this.isForm = false;\n        this.inputPreviousValue = null;\n        this.isVue = false;\n        this.textboxOptions = options;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'floatLabelType':\n                    Input.removeFloating(this.textboxWrapper);\n                    Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n                    this.bindClearEvent();\n                    break;\n                case 'width':\n                    Input.setWidth(newProp.width, this.textboxWrapper.container);\n                    break;\n                case 'value':\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    if (!this.isBlank(this.value)) {\n                        this.value = this.value.toString();\n                    }\n                    this.isProtectedOnChange = prevOnChange;\n                    Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n                    if (this.isHiddenInput) {\n                        this.element.value = this.respectiveElement.value;\n                    }\n                    this.inputPreviousValue = this.respectiveElement.value;\n                    /* istanbul ignore next */\n                    if ((this.isAngular || this.isVue) && this.preventChange === true) {\n                        this.previousValue = this.isAngular ? this.value : this.previousValue;\n                        this.preventChange = false;\n                    }\n                    else if (isNullOrUndefined(this.isAngular) || !this.isAngular\n                        || (this.isAngular && !this.preventChange) || (this.isAngular && isNullOrUndefined(this.preventChange))) {\n                        this.raiseChangeEvent();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    let attributes$$1 = this.element.attributes;\n                    this.checkAttributes(true);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.respectiveElement);\n                    break;\n                case 'type':\n                    if (this.respectiveElement.tagName !== 'TEXTAREA') {\n                        this.respectiveElement.setAttribute('type', this.type);\n                        this.raiseChangeEvent();\n                    }\n                    break;\n                case 'showClearButton':\n                    if (this.respectiveElement.tagName !== 'TEXTAREA') {\n                        Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);\n                        this.bindClearEvent();\n                    }\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(this.placeholder, this.respectiveElement);\n                    break;\n                case 'autocomplete':\n                    if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n                        this.respectiveElement.autocomplete = this.autocomplete;\n                    }\n                    else {\n                        this.removeAttributes(['autocomplete']);\n                    }\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'locale':\n                    this.globalize = new Internationalization(this.locale);\n                    this.l10n.setLocale(this.locale);\n                    this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n                    Input.setPlaceholder(this.placeholder, this.respectiveElement);\n                    break;\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'textbox';\n    }\n    isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n    preRender() {\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.cloneElement = this.element.cloneNode(true);\n            this.formElement = closest(this.element, 'form');\n            if (!isNullOrUndefined(this.formElement)) {\n                this.isForm = true;\n            }\n            /* istanbul ignore next */\n            if (this.element.tagName === 'EJS-TEXTBOX') {\n                let ejInstance = getValue('ej2_instances', this.element);\n                let inputElement = this.multiline ?\n                    this.createElement('textarea') :\n                    this.createElement('input');\n                let index = 0;\n                for (index; index < this.element.attributes.length; index++) {\n                    let attributeName = this.element.attributes[index].nodeName;\n                    if (attributeName !== 'id') {\n                        inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);\n                        inputElement.innerHTML = this.element.innerHTML;\n                        if (attributeName === 'name') {\n                            this.element.removeAttribute('name');\n                        }\n                    }\n                }\n                this.element.appendChild(inputElement);\n                this.element = inputElement;\n                setValue('ej2_instances', ejInstance, this.element);\n            }\n            this.updateHTMLAttrToElement();\n            this.checkAttributes(false);\n            if (this.element.tagName !== 'TEXTAREA') {\n                this.element.setAttribute('type', this.type);\n            }\n            this.element.setAttribute('role', 'textbox');\n            this.globalize = new Internationalization(this.locale);\n            let localeText = { placeholder: this.placeholder };\n            this.l10n = new L10n('textbox', localeText, this.locale);\n            if (this.l10n.getConstant('placeholder') !== '') {\n                this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n            }\n            if (!this.element.hasAttribute('id')) {\n                this.element.setAttribute('id', getUniqueID('textbox'));\n            }\n            if (!this.element.hasAttribute('name')) {\n                this.element.setAttribute('name', this.element.getAttribute('id'));\n            }\n            if (this.element.tagName === 'INPUT' && this.multiline) {\n                this.isHiddenInput = true;\n                this.textarea = this.createElement('textarea');\n                this.element.parentNode.insertBefore(this.textarea, this.element);\n                this.element.setAttribute('type', 'hidden');\n                this.textarea.setAttribute('name', this.element.getAttribute('name'));\n                this.element.removeAttribute('name');\n                this.textarea.setAttribute('role', this.element.getAttribute('role'));\n                this.element.removeAttribute('role');\n                let attribute = ['required', 'minlength', 'maxlength'];\n                for (let i = 0; i < attribute.length; i++) {\n                    if (this.element.hasAttribute(attribute[i])) {\n                        let attr = this.element.getAttribute(attribute[i]);\n                        this.textarea.setAttribute(attribute[i], attr);\n                        this.element.removeAttribute(attribute[i]);\n                    }\n                }\n            }\n        }\n    }\n    checkAttributes(isDynamic) {\n        let attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];\n        for (let key of attrs) {\n            if (!isNullOrUndefined(this.element.getAttribute(key))) {\n                switch (key) {\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' ||\n                                this.element.getAttribute(key) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === ''\n                                || this.element.getAttribute(key) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'autocomplete':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['autocomplete'] === undefined)) || isDynamic) {\n                            let autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';\n                            this.setProperties({ autocomplete: autoCompleteTxt }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['value'] === undefined)) || isDynamic) {\n                            this.setProperties({ value: this.element.value }, !isDynamic);\n                        }\n                        break;\n                    case 'type':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['type'] === undefined)) || isDynamic) {\n                            this.setProperties({ type: this.element.type }, !isDynamic);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = this.getInputValidClassList(this.cssClass);\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.respectiveElement = (this.isHiddenInput) ? this.textarea : this.element;\n            this.textboxWrapper = Input.createInput({\n                element: this.respectiveElement,\n                floatLabelType: this.floatLabelType,\n                properties: {\n                    enabled: this.enabled,\n                    enableRtl: this.enableRtl,\n                    cssClass: updatedCssClassValue,\n                    readonly: this.readonly,\n                    placeholder: this.placeholder,\n                    showClearButton: this.showClearButton\n                }\n            });\n            this.updateHTMLAttrToWrapper();\n            if (this.isHiddenInput) {\n                this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);\n            }\n        }\n        else {\n            this.respectiveElement = this.element;\n            this.textboxWrapper = { container: this.element.parentElement };\n            if (this.showClearButton && !this.multiline) {\n                this.textboxWrapper.clearButton = this.textboxWrapper.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.respectiveElement, this.textboxWrapper.clearButton, this.textboxWrapper.container);\n            }\n            if (this.floatLabelType === 'Auto') {\n                Input.wireFloatingEvents(this.respectiveElement);\n            }\n            // tslint:disable-next-line\n            Input.bindInitialEvent({ element: this.respectiveElement, buttons: null, customTag: null, floatLabelType: this.floatLabelType, properties: this.properties });\n        }\n        this.wireEvents();\n        if (!isNullOrUndefined(this.value)) {\n            Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n            if (this.isHiddenInput) {\n                this.element.value = this.respectiveElement.value;\n            }\n        }\n        if (!isNullOrUndefined(this.value)) {\n            this.initialValue = this.value;\n            this.setInitialValue();\n        }\n        if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n            this.respectiveElement.autocomplete = this.autocomplete;\n            // tslint:disable-next-line\n        }\n        else if (!isNullOrUndefined(this.textboxOptions) && (this.textboxOptions['autocomplete'] !== undefined)) {\n            this.removeAttributes(['autocomplete']);\n        }\n        this.previousValue = this.value;\n        this.inputPreviousValue = this.value;\n        this.respectiveElement.defaultValue = this.respectiveElement.value;\n        Input.setWidth(this.width, this.textboxWrapper.container);\n        this.renderComplete();\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        let updatedClassValues = this.getInputValidClassList(this.htmlAttributes[key]);\n                        if (updatedClassValues !== '') {\n                            addClass([this.textboxWrapper.container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        let setStyle = this.textboxWrapper.container.getAttribute(key);\n                        setStyle = !isNullOrUndefined(setStyle) ? (setStyle + this.htmlAttributes[key]) :\n                            this.htmlAttributes[key];\n                        this.textboxWrapper.container.setAttribute(key, setStyle);\n                    }\n                    else {\n                        this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) < 0) {\n                    this.element.setAttribute(key, this.htmlAttributes[key]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));\n    }\n    getInputValidClassList(inputClassName) {\n        let result = inputClassName;\n        if (!isNullOrUndefined(inputClassName) && inputClassName !== '') {\n            result = (inputClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    setInitialValue() {\n        if (!this.isAngular) {\n            this.respectiveElement.setAttribute('value', this.initialValue);\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.respectiveElement, 'focus', this.focusHandler, this);\n        EventHandler.add(this.respectiveElement, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.respectiveElement, 'input', this.inputHandler, this);\n        EventHandler.add(this.respectiveElement, 'change', this.changeHandler, this);\n        if (this.isForm) {\n            EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n        }\n        this.bindClearEvent();\n    }\n    resetValue(value) {\n        let prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.value = value;\n        this.isProtectedOnChange = prevOnChange;\n    }\n    resetForm() {\n        if (this.isAngular) {\n            this.resetValue('');\n        }\n        else {\n            this.resetValue(this.initialValue);\n        }\n        if (!isNullOrUndefined(this.textboxWrapper)) {\n            let label = this.textboxWrapper.container.querySelector('.e-float-text');\n            if (!isNullOrUndefined(label)) {\n                if ((isNullOrUndefined(this.initialValue) || this.initialValue === '')) {\n                    label.classList.add('e-label-bottom');\n                    label.classList.remove('e-label-top');\n                }\n                else if (this.initialValue !== '') {\n                    label.classList.add('e-label-top');\n                    label.classList.remove('e-label-bottom');\n                }\n            }\n        }\n    }\n    focusHandler(args) {\n        let eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('focus', eventArgs);\n    }\n    focusOutHandler(args) {\n        if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') &&\n            (this.previousValue !== this.respectiveElement.value)) {\n            this.raiseChangeEvent(args, true);\n        }\n        let eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('blur', eventArgs);\n    }\n    inputHandler(args) {\n        // tslint:disable-next-line\n        let textboxObj = this;\n        let eventArgs = {\n            event: args,\n            value: this.respectiveElement.value,\n            previousValue: this.inputPreviousValue,\n            container: this.textboxWrapper.container\n        };\n        this.inputPreviousValue = this.respectiveElement.value;\n        /* istanbul ignore next */\n        if (this.isAngular) {\n            textboxObj.localChange({ value: this.respectiveElement.value });\n            this.preventChange = true;\n        }\n        if (this.isVue) {\n            this.preventChange = true;\n        }\n        this.trigger('input', eventArgs);\n        args.stopPropagation();\n    }\n    changeHandler(args) {\n        this.setProperties({ value: this.respectiveElement.value }, true);\n        this.raiseChangeEvent(args, true);\n        args.stopPropagation();\n    }\n    raiseChangeEvent(event, interaction) {\n        let eventArgs = {\n            event: event,\n            value: this.value,\n            previousValue: this.previousValue,\n            container: this.textboxWrapper.container,\n            isInteraction: interaction ? interaction : false,\n            isInteracted: interaction ? interaction : false\n        };\n        this.preventChange = false;\n        this.trigger('change', eventArgs);\n        this.previousValue = this.value;\n    }\n    bindClearEvent() {\n        if (this.showClearButton && this.respectiveElement.tagName !== 'TEXTAREA') {\n            if (this.enabled) {\n                EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);\n            }\n            else {\n                EventHandler.remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);\n            }\n        }\n    }\n    resetInputHandler(event) {\n        event.preventDefault();\n        if (!(this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR))) {\n            let previousValue = this.value;\n            Input.setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);\n            if (this.isHiddenInput) {\n                this.element.value = this.respectiveElement.value;\n            }\n            this.setProperties({ value: this.respectiveElement.value }, true);\n            let eventArgs = {\n                event: event,\n                value: this.respectiveElement.value,\n                previousValue: this.inputPreviousValue,\n                container: this.textboxWrapper.container\n            };\n            this.trigger('input', eventArgs);\n            this.inputPreviousValue = this.respectiveElement.value;\n            this.raiseChangeEvent(event, true);\n        }\n    }\n    unWireEvents() {\n        EventHandler.remove(this.respectiveElement, 'focus', this.focusHandler);\n        EventHandler.remove(this.respectiveElement, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.respectiveElement, 'input', this.inputHandler);\n        EventHandler.remove(this.respectiveElement, 'change', this.changeHandler);\n        if (this.isForm) {\n            EventHandler.remove(this.formElement, 'reset', this.resetForm);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also, it maintains the initial TextBox element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        this.unWireEvents();\n        if (!(isBlazor() && this.isServerRendered)) {\n            if (this.element.tagName === 'INPUT' && this.multiline) {\n                detach(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);\n                this.respectiveElement = this.element;\n                this.element.removeAttribute('type');\n            }\n            this.respectiveElement.value = this.respectiveElement.defaultValue;\n            this.respectiveElement.classList.remove('e-input');\n            this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);\n            if (!isNullOrUndefined(this.textboxWrapper)) {\n                this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);\n                detach(this.textboxWrapper.container);\n            }\n            this.textboxWrapper = null;\n            super.destroy();\n        }\n        else {\n            this.textboxWrapper = null;\n        }\n    }\n    /**\n     * Adding the icons to the TextBox component.\n     * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.\n     * @param { string | string[] } iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for TextBox.\n     * @return {void}\n     */\n    addIcon(position, icons) {\n        Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Adding the multiple attributes as key-value pair to the TextBox element.\n     * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.\n     * @return {void}\n     */\n    addAttributes(attributes$$1) {\n        for (let key of Object.keys(attributes$$1)) {\n            if (key === 'disabled') {\n                this.setProperties({ enabled: false }, true);\n                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: true }, true);\n                Input.setReadonly(this.readonly, this.respectiveElement);\n            }\n            else if (key === 'class') {\n                this.respectiveElement.classList.add(attributes$$1[key]);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: attributes$$1[key] }, true);\n                Input.setPlaceholder(this.placeholder, this.respectiveElement);\n            }\n            else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {\n                this.respectiveElement.setAttribute(key, attributes$$1[key]);\n            }\n            else {\n                this.respectiveElement.setAttribute(key, attributes$$1[key]);\n            }\n        }\n    }\n    /**\n     * Removing the multiple attributes as key-value pair to the TextBox element.\n     * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.\n     * @return {void}\n     */\n    removeAttributes(attributes$$1) {\n        for (let key of attributes$$1) {\n            if (key === 'disabled') {\n                this.setProperties({ enabled: true }, true);\n                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: false }, true);\n                Input.setReadonly(this.readonly, this.respectiveElement);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: null }, true);\n                Input.setPlaceholder(this.placeholder, this.respectiveElement);\n            }\n            else {\n                this.respectiveElement.removeAttribute(key);\n            }\n        }\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.respectiveElement && this.enabled) {\n            this.respectiveElement.focus();\n            if (this.textboxWrapper.container.classList.contains('e-input-group')\n                || this.textboxWrapper.container.classList.contains('e-outline')\n                || this.textboxWrapper.container.classList.contains('e-filled')) {\n                addClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n            }\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.respectiveElement && this.enabled) {\n            this.respectiveElement.blur();\n            if (this.textboxWrapper.container.classList.contains('e-input-group')\n                || this.textboxWrapper.container.classList.contains('e-outline')\n                || this.textboxWrapper.container.classList.contains('e-filled')) {\n                removeClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n            }\n        }\n    }\n};\n__decorate$6([\n    Property('text')\n], TextBox.prototype, \"type\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"readonly\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"value\", void 0);\n__decorate$6([\n    Property('Never')\n], TextBox.prototype, \"floatLabelType\", void 0);\n__decorate$6([\n    Property('')\n], TextBox.prototype, \"cssClass\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"placeholder\", void 0);\n__decorate$6([\n    Property('on')\n], TextBox.prototype, \"autocomplete\", void 0);\n__decorate$6([\n    Property({})\n], TextBox.prototype, \"htmlAttributes\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"multiline\", void 0);\n__decorate$6([\n    Property(true)\n], TextBox.prototype, \"enabled\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"showClearButton\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"enablePersistence\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"width\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"created\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"destroyed\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"change\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"blur\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"focus\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"input\", void 0);\nTextBox = __decorate$6([\n    NotifyPropertyChanges\n], TextBox);\n\n/**\n * Uploader modules\n */\n\n/**\n * NumericTextBox all modules\n */\n\nexport { NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputFocusHandler, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox };\n//# sourceMappingURL=ej2-inputs.es2015.js.map\n","import { Animation, Browser, ChildProperty, Complex, Component, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isBlazor, isNullOrUndefined, isUndefined, matches, prepend, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil, Predicate, Query } from '@syncfusion/ej2-data';\nimport { ListBase, Sortable, cssClass, moveTo } from '@syncfusion/ej2-lists';\nimport { Popup, createSpinner, getZindexPartial, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Input, TextBox } from '@syncfusion/ej2-inputs';\nimport { Button, createCheckBox } from '@syncfusion/ej2-buttons';\nimport { TreeView } from '@syncfusion/ej2-navigations';\n\n/**\n * IncrementalSearch module file\n */\nlet queryString = '';\nlet prevString = '';\nlet matches$1 = [];\nlet activeClass = 'e-active';\nlet prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]] } items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n */\nfunction incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, isBlazor$$1) {\n    queryString += String.fromCharCode(keyCode);\n    setTimeout(() => { queryString = ''; }, 1000);\n    let index;\n    queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n    if (prevElementId === elementId && prevString === queryString) {\n        for (let i = 0; i < matches$1.length; i++) {\n            if (matches$1[i].classList.contains(activeClass)) {\n                index = i;\n                break;\n            }\n        }\n        index = index + 1;\n        return matches$1[index];\n    }\n    else {\n        let listItems = items;\n        let strLength = queryString.length;\n        let text;\n        let item;\n        selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n        let i = selectedIndex;\n        matches$1 = [];\n        do {\n            if (i === listItems.length) {\n                i = -1;\n            }\n            i === -1 ? index = 0 : index = i;\n            item = listItems[index];\n            if (isBlazor$$1) {\n                text = ignoreCase ? item.textContent.trim().toLowerCase() : item.textContent.trim();\n            }\n            else {\n                text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n            }\n            if (text.substr(0, strLength) === queryString) {\n                matches$1.push(listItems[index]);\n            }\n            i++;\n        } while (i !== selectedIndex);\n        prevString = queryString;\n        prevElementId = elementId;\n        return matches$1[0];\n    }\n}\nfunction Search(inputVal, items, searchType, ignoreCase) {\n    let listItems = items;\n    ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n    let itemData = { item: null, index: null };\n    if (inputVal && inputVal.length) {\n        let strLength = inputVal.length;\n        let queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n        for (let i = 0, itemsData = listItems; i < itemsData.length; i++) {\n            let item = itemsData[i];\n            let text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n            if ((searchType === 'Equal' && text === queryStr) || (searchType === 'StartsWith' && text.substr(0, strLength) === queryStr)) {\n                itemData.item = item;\n                itemData.index = i;\n                return { item: item, index: i };\n            }\n        }\n        return itemData;\n    }\n    return itemData;\n}\n\n/**\n * Function helps to find which highlightSearch is to call based on your data.\n * @param  {HTMLElement} element - Specifies an li element.\n * @param  {string} query - Specifies the string to be highlighted.\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\n * @param  {HightLightType} type - Specifies the type of highlight.\n */\nfunction highlightSearch(element, query, ignoreCase, type, isBlazor$$1) {\n    if (query === '') {\n        return;\n    }\n    else {\n        let ignoreRegex = ignoreCase ? 'gim' : 'gm';\n        query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n        let replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')';\n        findTextNode(element, new RegExp(replaceQuery, ignoreRegex), isBlazor$$1);\n    }\n}\nfunction findTextNode(element, pattern, isBlazor$$1) {\n    for (let index = 0; element.childNodes && (index < element.childNodes.length); index++) {\n        if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {\n            element = (isBlazor$$1 && element.classList.contains('e-highlight')) ? element.parentElement : element;\n            if (isBlazor$$1 && element.getAttribute('data-value')) {\n                element.innerHTML = element.getAttribute('data-value').replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            }\n            else {\n                element.innerHTML = element.innerHTML.replace(pattern, '<span class=\"e-highlight\">$1</span>');\n            }\n            break;\n        }\n        else {\n            findTextNode(element.childNodes[index], pattern, isBlazor$$1);\n        }\n    }\n}\n/**\n * Function helps to remove highlighted element based on your data.\n * @param  {HTMLElement} content - Specifies an content element.\n */\nfunction revertHighlightSearch(content) {\n    let contentElement = content.querySelectorAll('.e-highlight');\n    for (let i = contentElement.length - 1; i >= 0; i--) {\n        let parent = contentElement[i].parentNode;\n        let text = document.createTextNode(contentElement[i].textContent);\n        parent.replaceChild(text, contentElement[i]);\n    }\n}\n\n/**\n * Common source\n */\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass FieldSettings extends ChildProperty {\n}\n__decorate([\n    Property()\n], FieldSettings.prototype, \"text\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"value\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"groupBy\", void 0);\n__decorate([\n    Property()\n], FieldSettings.prototype, \"htmlAttributes\", void 0);\nconst dropDownBaseClasses = {\n    root: 'e-dropdownbase',\n    rtl: 'e-rtl',\n    content: 'e-content',\n    selected: 'e-active',\n    hover: 'e-hover',\n    noData: 'e-nodata',\n    fixedHead: 'e-fixed-head',\n    focus: 'e-item-focus',\n    li: 'e-list-item',\n    group: 'e-list-group-item',\n    disabled: 'e-disabled',\n    grouping: 'e-dd-group'\n};\nconst ITEMTEMPLATE_PROPERTY = 'ItemTemplate';\nconst VALUETEMPLATE_PROPERTY = 'ValueTemplate';\nconst GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';\nconst NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';\nconst ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';\n/**\n * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components\n */\nlet DropDownBase = class DropDownBase extends Component {\n    /**\n     * * Constructor for DropDownBase class\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    ;\n    getPropObject(prop, newProp, oldProp) {\n        let newProperty = new Object();\n        let oldProperty = new Object();\n        // tslint:disable-next-line:no-function-constructor-with-string-args\n        let propName = (prop) => {\n            return prop;\n        };\n        newProperty[propName(prop)] = newProp[propName(prop)];\n        oldProperty[propName(prop)] = oldProp[propName(prop)];\n        let data = new Object();\n        data.newProperty = newProperty;\n        data.oldProperty = oldProperty;\n        return data;\n    }\n    getValueByText(text, ignoreCase, ignoreAccent) {\n        let value = null;\n        if (!isNullOrUndefined(this.listData)) {\n            if (ignoreCase) {\n                value = this.checkValueCase(text, true, ignoreAccent);\n            }\n            else {\n                value = this.checkValueCase(text, false, ignoreAccent);\n            }\n        }\n        return value;\n    }\n    ;\n    checkValueCase(text, ignoreCase, ignoreAccent, isTextByValue) {\n        let value = null;\n        if (isTextByValue) {\n            value = text;\n        }\n        let dataSource = this.listData;\n        let fields = this.fields;\n        let type = this.typeOfData(dataSource).typeof;\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            for (let item of dataSource) {\n                if (!isNullOrUndefined(item)) {\n                    if (ignoreAccent) {\n                        value = this.checkingAccent(String(item), text, ignoreCase);\n                    }\n                    else {\n                        if (ignoreCase) {\n                            if (this.checkIgnoreCase(String(item), text)) {\n                                value = this.getItemValue(String(item), text, ignoreCase);\n                            }\n                        }\n                        else {\n                            if (this.checkNonIgnoreCase(String(item), text)) {\n                                value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (ignoreCase) {\n                dataSource.filter((item) => {\n                    let itemValue = getValue(fields.value, item);\n                    if (!isNullOrUndefined(itemValue) && this.checkIgnoreCase(getValue(fields.text, item).toString(), text)) {\n                        value = getValue(fields.value, item);\n                    }\n                });\n            }\n            else {\n                if (isTextByValue) {\n                    dataSource.filter((item) => {\n                        let itemValue = getValue(fields.value, item);\n                        if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === value.toString()) {\n                            value = getValue(fields.text, item);\n                        }\n                    });\n                }\n                else {\n                    dataSource.filter((item) => {\n                        if (this.checkNonIgnoreCase(getValue(fields.text, item), text)) {\n                            value = getValue(fields.value, item);\n                        }\n                    });\n                }\n            }\n        }\n        return value;\n    }\n    checkingAccent(item, text, ignoreCase) {\n        let dataItem = DataUtil.ignoreDiacritics(String(item));\n        let textItem = DataUtil.ignoreDiacritics(text.toString());\n        let value = null;\n        if (ignoreCase) {\n            if (this.checkIgnoreCase(dataItem, textItem)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n            }\n        }\n        else {\n            if (this.checkNonIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n            }\n        }\n        return value;\n    }\n    checkIgnoreCase(item, text) {\n        return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;\n    }\n    checkNonIgnoreCase(item, text) {\n        return String(item) === text.toString() ? true : false;\n    }\n    getItemValue(dataItem, typedText, ignoreCase, isTextByValue) {\n        let value = null;\n        let dataSource = this.listData;\n        let type = this.typeOfData(dataSource).typeof;\n        if (isTextByValue) {\n            value = dataItem.toString();\n        }\n        else {\n            if (ignoreCase) {\n                value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));\n            }\n            else {\n                value = type === 'string' ? typedText : this.getFormattedValue(typedText);\n            }\n        }\n        return value;\n    }\n    templateCompiler(baseTemplate) {\n        let checkTemplate = false;\n        if (baseTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(baseTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    l10nUpdate(actionFailure) {\n        let ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;\n        if (this.noRecordsTemplate !== 'No records found' || this.actionFailureTemplate !== 'Request failed') {\n            this.DropDownBaseresetBlazorTemplates(false, false, true, true);\n            let template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n            let compiledString;\n            let templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n            ele.innerHTML = '';\n            let tempaltecheck = this.templateCompiler(template);\n            if (tempaltecheck) {\n                compiledString = compile(document.querySelector(template).innerHTML.trim());\n            }\n            else {\n                compiledString = compile(template);\n            }\n            for (let item of compiledString({}, null, null, templateId, this.isStringTemplate)) {\n                ele.appendChild(item);\n            }\n            this.DropDownBaseupdateBlazorTemplates(false, false, !actionFailure, actionFailure, false, false, false, false);\n        }\n        else {\n            let l10nLocale = { noRecordsTemplate: 'No records found', actionFailureTemplate: 'Request failed' };\n            let componentLocale = new L10n(this.getLocaleName(), {}, this.locale);\n            if (componentLocale.getConstant('actionFailureTemplate') !== '') {\n                this.l10n = componentLocale;\n            }\n            else {\n                this.l10n = new L10n(this.getModuleName() === 'listbox' ? 'listbox' : 'dropdowns', l10nLocale, this.locale);\n            }\n            let content = actionFailure ?\n                this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n            if (this.getModuleName() === 'listbox') {\n                let liElem = this.createElement('li');\n                liElem.textContent = content;\n                ele.appendChild(liElem);\n                liElem.classList.add('e-list-nrt');\n            }\n            else {\n                ele.innerHTML = content;\n            }\n        }\n    }\n    getLocaleName() {\n        return 'drop-down-base';\n    }\n    ;\n    getTextByValue(value) {\n        let text;\n        text = this.checkValueCase(value, false, false, true);\n        return text;\n    }\n    getFormattedValue(value) {\n        if (this.listData && this.listData.length) {\n            let item = this.typeOfData(this.listData);\n            if (isBlazor() && isNullOrUndefined(value) || value === 'null') {\n                return null;\n            }\n            if (typeof getValue((this.fields.value ? this.fields.value : 'value'), item.item) === 'number'\n                || item.typeof === 'number') {\n                return parseFloat(value);\n            }\n            if (typeof getValue((this.fields.value ? this.fields.value : 'value'), item.item) === 'boolean'\n                || item.typeof === 'boolean') {\n                return (value === 'true');\n            }\n        }\n        return value;\n    }\n    /**\n     * Sets RTL to dropdownbase wrapper\n     */\n    setEnableRtl() {\n        if (this.list) {\n            this.enableRtlElements.push(this.list);\n        }\n        this.enableRtl ? addClass(this.enableRtlElements, dropDownBaseClasses.rtl) :\n            removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n    }\n    ;\n    /**\n     * Initialize the Component.\n     */\n    initialize() {\n        this.bindEvent = true;\n        this.actionFailureTemplateId = `${this.element.id}${ACTIONFAILURETEMPLATE_PROPERTY}`;\n        if (this.element.tagName === 'UL') {\n            let jsonElement = ListBase.createJsonFromElement(this.element);\n            this.setProperties({ fields: { text: 'text', value: 'text' } }, true);\n            this.resetList(jsonElement, this.fields);\n        }\n        else if (this.element.tagName === 'SELECT') {\n            let dataSource = this.dataSource instanceof Array ? (this.dataSource.length > 0 ? true : false)\n                : !isNullOrUndefined(this.dataSource) ? true : false;\n            if (!dataSource) {\n                this.renderItemsBySelect();\n            }\n        }\n        else {\n            this.setListData(this.dataSource, this.fields, this.query);\n        }\n    }\n    ;\n    DropDownBaseupdateBlazorTemplates(item, group, noRecord, action, value, header, footer, isEmpty) {\n        if (!this.isStringTemplate) {\n            if (this.itemTemplate && item) {\n                updateBlazorTemplate(this.itemTemplateId, ITEMTEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (this.groupTemplate && group) {\n                updateBlazorTemplate(this.groupTemplateId, GROUPTEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (this.noRecordsTemplate && noRecord) {\n                updateBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (this.actionFailureTemplate && action) {\n                updateBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (value) {\n                updateBlazorTemplate(this.valueTemplateId, VALUETEMPLATE_PROPERTY, this, isEmpty);\n            }\n            if (header) {\n                updateBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE_PROPERTY, this);\n            }\n            if (footer) {\n                updateBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY, this);\n            }\n        }\n    }\n    DropDownBaseresetBlazorTemplates(item, group, noRecord, action, value, header, footer) {\n        if (!this.isStringTemplate) {\n            if (this.itemTemplate && item) {\n                resetBlazorTemplate(this.itemTemplateId, ITEMTEMPLATE_PROPERTY);\n            }\n            if (this.groupTemplate && group) {\n                resetBlazorTemplate(this.groupTemplateId, GROUPTEMPLATE_PROPERTY);\n            }\n            if (this.noRecordsTemplate && noRecord) {\n                resetBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE_PROPERTY);\n            }\n            if (this.actionFailureTemplate && action) {\n                resetBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE_PROPERTY);\n            }\n            if (value) {\n                resetBlazorTemplate(this.valueTemplateId, VALUETEMPLATE_PROPERTY);\n            }\n            if (header) {\n                resetBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE_PROPERTY);\n            }\n            if (footer) {\n                resetBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE_PROPERTY);\n            }\n        }\n    }\n    /**\n     * Get the properties to be maintained in persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    ;\n    /**\n     * Sets the enabled state to DropDownBase.\n     */\n    setEnabled() {\n        this.element.setAttribute('aria-disabled', (this.enabled) ? 'false' : 'true');\n    }\n    ;\n    /**\n     * Sets the enabled state to DropDownBase.\n     */\n    updateDataAttribute(value) {\n        let invalidAttr = ['class', 'style', 'id', 'type'];\n        let attr = {};\n        for (let a = 0; a < this.element.attributes.length; a++) {\n            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&\n                !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        extend(attr, value, attr);\n        this.setProperties({ htmlAttributes: attr }, true);\n    }\n    renderItemsBySelect() {\n        let element = this.element;\n        let fields = { value: 'value', text: 'text' };\n        let jsonElement = [];\n        let group = element.querySelectorAll('select>optgroup');\n        let option = element.querySelectorAll('select>option');\n        this.getJSONfromOption(jsonElement, option, fields);\n        if (group.length) {\n            for (let i = 0; i < group.length; i++) {\n                let item = group[i];\n                let optionGroup = {};\n                optionGroup[fields.text] = item.label;\n                optionGroup.isHeader = true;\n                let child = item.querySelectorAll('option');\n                jsonElement.push(optionGroup);\n                this.getJSONfromOption(jsonElement, child, fields);\n            }\n            let items = element.querySelectorAll('select>option');\n        }\n        this.fields.text = fields.text;\n        this.fields.value = fields.value;\n        this.resetList(jsonElement, fields);\n    }\n    getJSONfromOption(items, options, fields) {\n        for (let option of options) {\n            let json = {};\n            json[fields.text] = option.innerText;\n            json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText;\n            items.push(json);\n        }\n    }\n    /**\n     * Execute before render the list items\n     * @private\n     */\n    preRender() {\n        // there is no event handler\n        this.scrollTimer = -1;\n        this.enableRtlElements = [];\n        this.isRequested = false;\n        this.isDataFetched = false;\n        this.itemTemplateId = `${this.element.id}${ITEMTEMPLATE_PROPERTY}`;\n        this.valueTemplateId = `${this.element.id}${VALUETEMPLATE_PROPERTY}`;\n        this.groupTemplateId = `${this.element.id}${GROUPTEMPLATE_PROPERTY}`;\n        this.headerTemplateId = `${this.element.id}${HEADERTEMPLATE_PROPERTY}`;\n        this.footerTemplateId = `${this.element.id}${FOOTERTEMPLATE_PROPERTY}`;\n        this.noRecordsTemplateId = `${this.element.id}${NORECORDSTEMPLATE_PROPERTY}`;\n    }\n    /**\n     * Creates the list items of DropDownBase component.\n     */\n    setListData(dataSource, fields, query) {\n        fields = fields ? fields : this.fields;\n        let ulElement;\n        this.isActive = true;\n        let eventArgs = { cancel: false, data: dataSource, query: query };\n        this.trigger('actionBegin', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.showSpinner();\n                if (dataSource instanceof DataManager) {\n                    this.isRequested = true;\n                    if (this.isDataFetched) {\n                        this.emptyDataRequest(fields);\n                        return;\n                    }\n                    eventArgs.data.executeQuery(this.getQuery(eventArgs.query)).then((e) => {\n                        this.trigger('actionComplete', e, (e) => {\n                            if (!e.cancel) {\n                                let listItems = e.result;\n                                if (listItems.length === 0) {\n                                    this.isDataFetched = true;\n                                }\n                                ulElement = this.renderItems(listItems, fields);\n                                this.onActionComplete(ulElement, listItems, e);\n                                if (this.groupTemplate) {\n                                    this.renderGroupTemplate(ulElement);\n                                }\n                                this.isRequested = false;\n                                this.bindChildItems(listItems, ulElement, fields, e);\n                            }\n                        });\n                    }).catch((e) => {\n                        this.isRequested = false;\n                        this.onActionFailure(e);\n                        this.hideSpinner();\n                    });\n                }\n                else {\n                    let dataManager = new DataManager(eventArgs.data);\n                    let listItems = (this.getQuery(eventArgs.query)).executeLocal(dataManager);\n                    let localDataArgs = { cancel: false, result: listItems };\n                    this.trigger('actionComplete', localDataArgs, (localDataArgs) => {\n                        if (!localDataArgs.cancel) {\n                            ulElement = this.renderItems(localDataArgs.result, fields);\n                            this.onActionComplete(ulElement, localDataArgs.result);\n                            if (this.groupTemplate) {\n                                this.renderGroupTemplate(ulElement);\n                            }\n                            this.bindChildItems(localDataArgs.result, ulElement, fields);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    bindChildItems(listItems, ulElement, fields, e) {\n        if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {\n            setTimeout(() => {\n                let childNode = this.remainingItems(this.sortedData, fields);\n                append(childNode, ulElement);\n                this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n                this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n                this.updateListValues();\n                this.raiseDataBound(listItems, e);\n            }, 0);\n        }\n        else {\n            this.raiseDataBound(listItems, e);\n        }\n    }\n    updateListValues() {\n        // Used this method in component side.\n    }\n    findListElement(list, findNode, attribute, value) {\n        let liElement = null;\n        if (list) {\n            let listArr = [].slice.call(list.querySelectorAll(findNode));\n            for (let index = 0; index < listArr.length; index++) {\n                if (listArr[index].getAttribute(attribute) === (value + '')) {\n                    liElement = listArr[index];\n                    break;\n                }\n            }\n        }\n        return liElement;\n    }\n    raiseDataBound(listItems, e) {\n        this.hideSpinner();\n        let dataBoundEventArgs = {\n            items: listItems,\n            e: e\n        };\n        this.trigger('dataBound', dataBoundEventArgs);\n    }\n    remainingItems(dataSource, fields) {\n        let spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));\n        if (this.itemTemplate) {\n            let listElements = this.templateListItem(spliceData, fields);\n            return [].slice.call(listElements.childNodes);\n        }\n        let type = this.typeOfData(spliceData).typeof;\n        if (type === 'string' || type === 'number' || type === 'boolean') {\n            return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields));\n        }\n        return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true);\n    }\n    emptyDataRequest(fields) {\n        let listItems = [];\n        this.onActionComplete(this.renderItems(listItems, fields), listItems);\n        this.isRequested = false;\n        this.hideSpinner();\n    }\n    showSpinner() {\n        // Used this method in component side.\n    }\n    hideSpinner() {\n        // Used this method in component side.\n    }\n    onActionFailure(e) {\n        this.liCollections = [];\n        this.trigger('actionFailure', e);\n        this.l10nUpdate(true);\n        addClass([this.list], dropDownBaseClasses.noData);\n    }\n    onActionComplete(ulElement, list, e) {\n        this.listData = list;\n        if (isBlazor() && this.isServerRendered && this.getModuleName() === 'listbox') {\n            remove(this.list.querySelector('.e-list-parent'));\n            remove(this.list.querySelector('.e-hidden-select'));\n        }\n        else {\n            this.list.innerHTML = '';\n        }\n        this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;\n        this.list.appendChild(ulElement);\n        this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n        this.ulElement = this.list.querySelector('ul');\n        this.postRender(this.list, list, this.bindEvent);\n    }\n    postRender(listElement, list, bindEvent) {\n        let focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);\n        let selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);\n        if (focusItem && !selectedItem) {\n            focusItem.classList.add(dropDownBaseClasses.focus);\n        }\n        if (list.length <= 0) {\n            this.l10nUpdate();\n            addClass([listElement], dropDownBaseClasses.noData);\n        }\n        else {\n            listElement.classList.remove(dropDownBaseClasses.noData);\n        }\n    }\n    /**\n     * Get the query to do the data operation before list item generation.\n     */\n    getQuery(query) {\n        return query ? query : this.query ? this.query : new Query();\n    }\n    /**\n     * To render the template content for group header element.\n     */\n    renderGroupTemplate(listEle) {\n        if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {\n            let dataSource = this.dataSource;\n            let option = { groupTemplateID: this.groupTemplateId, isStringTemplate: this.isStringTemplate };\n            let headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);\n            let groupcheck = this.templateCompiler(this.groupTemplate);\n            if (groupcheck) {\n                let groupValue = document.querySelector(this.groupTemplate).innerHTML.trim();\n                let tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option);\n            }\n            else {\n                let tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option);\n            }\n            this.DropDownBaseupdateBlazorTemplates(false, true, false, false, false, false, false, false);\n        }\n    }\n    /**\n     * To create the ul li list items\n     */\n    createListItems(dataSource, fields) {\n        if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {\n            if (fields.groupBy) {\n                if (this.sortOrder !== 'None') {\n                    dataSource = this.getSortedDataSource(dataSource);\n                }\n                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n            }\n            addClass([this.list], dropDownBaseClasses.grouping);\n        }\n        else {\n            dataSource = this.getSortedDataSource(dataSource);\n        }\n        let options = this.listOption(dataSource, fields);\n        let spliceData = (dataSource.length > 100) ?\n            new DataManager(dataSource).executeLocal(new Query().take(100))\n            : dataSource;\n        this.sortedData = dataSource;\n        return ListBase.createList(this.createElement, (this.getModuleName() === 'autocomplete') ? spliceData : dataSource, options, true);\n    }\n    ;\n    listOption(dataSource, fields) {\n        let iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n        let fieldValues = !isNullOrUndefined(fields.properties) ?\n            fields.properties : fields;\n        let options = (fields.text !== null || fields.value !== null) ? {\n            fields: fieldValues,\n            showIcon: iconCss, ariaAttributes: { groupItemRole: 'presentation' }\n        } : { fields: { value: 'text' } };\n        return extend({}, options, fields, true);\n    }\n    ;\n    setFloatingHeader(e) {\n        if (isNullOrUndefined(this.fixedHeaderElement)) {\n            this.fixedHeaderElement = this.createElement('div', { className: dropDownBaseClasses.fixedHead });\n            if (!this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {\n                this.fixedHeaderElement.style.display = 'none';\n            }\n            prepend([this.fixedHeaderElement], this.list);\n            this.setFixedHeader();\n        }\n        if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {\n            this.setFixedHeader();\n        }\n        this.scrollStop(e);\n    }\n    scrollStop(e) {\n        let target = e.target;\n        let liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n        let topIndex = Math.round(target.scrollTop / liHeight);\n        let liCollections = this.list.querySelectorAll('li');\n        for (let i = topIndex; i > -1; i--) {\n            if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {\n                let currentLi = liCollections[i];\n                this.fixedHeaderElement.innerHTML = currentLi.innerHTML;\n                this.fixedHeaderElement.style.top = e.target.scrollTop + 'px';\n                this.fixedHeaderElement.style.display = 'block';\n                break;\n            }\n            else {\n                this.fixedHeaderElement.style.display = 'none';\n                this.fixedHeaderElement.style.top = 'none';\n            }\n        }\n    }\n    /**\n     * To render the list items\n     */\n    renderItems(listData, fields) {\n        let ulElement;\n        if (this.itemTemplate && listData) {\n            let dataSource = listData;\n            if (dataSource && fields.groupBy) {\n                if (this.sortOrder !== 'None') {\n                    dataSource = this.getSortedDataSource(dataSource);\n                }\n                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n            }\n            else {\n                dataSource = this.getSortedDataSource(dataSource);\n            }\n            this.sortedData = dataSource;\n            let spliceData = (dataSource.length > 100) ?\n                new DataManager(dataSource).executeLocal(new Query().take(100))\n                : dataSource;\n            ulElement = this.templateListItem((this.getModuleName() === 'autocomplete') ? spliceData : dataSource, fields);\n            let isTempEmpty = (this.getModuleName() === 'listbox') ? true : false;\n            this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, isTempEmpty);\n        }\n        else {\n            ulElement = this.createListItems(listData, fields);\n        }\n        return ulElement;\n    }\n    ;\n    templateListItem(dataSource, fields) {\n        this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n        let option = this.listOption(dataSource, fields);\n        option.templateID = this.itemTemplateId;\n        option.isStringTemplate = this.isStringTemplate;\n        let itemcheck = this.templateCompiler(this.itemTemplate);\n        if (itemcheck) {\n            let itemValue = document.querySelector(this.itemTemplate).innerHTML.trim();\n            return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option);\n        }\n        else {\n            return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);\n        }\n    }\n    ;\n    typeOfData(items) {\n        let item = { typeof: null, item: null };\n        for (let i = 0; (!isNullOrUndefined(items) && i < items.length); i++) {\n            if (!isNullOrUndefined(items[i])) {\n                let listDataType = typeof (items[i]) === 'string' ||\n                    typeof (items[i]) === 'number' || typeof (items[i]) === 'boolean';\n                let isNullData = listDataType ? isNullOrUndefined(items[i]) :\n                    isNullOrUndefined(getValue((this.fields.value ? this.fields.value : 'value'), items[i]));\n                if (!isNullData) {\n                    return item = { typeof: typeof items[i], item: items[i] };\n                }\n            }\n        }\n        return item;\n    }\n    setFixedHeader() {\n        this.list.parentElement.style.display = 'block';\n        let borderWidth = 0;\n        if (this.list && this.list.parentElement) {\n            borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);\n        }\n        let liWidth = this.liCollections[0].offsetWidth - borderWidth;\n        this.fixedHeaderElement.style.width = liWidth.toString() + 'px';\n        setStyleAttribute(this.fixedHeaderElement, { zIndex: 10 });\n        let firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n    }\n    getSortedDataSource(dataSource) {\n        if (dataSource && this.sortOrder !== 'None') {\n            let textField = this.fields.text ? this.fields.text : 'text';\n            dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));\n        }\n        return dataSource;\n    }\n    /**\n     * Return the index of item which matched with given value in data source\n     */\n    getIndexByValue(value) {\n        let index;\n        let listItems = this.getItems();\n        for (let i = 0; i < listItems.length; i++) {\n            if (!isNullOrUndefined(value) && listItems[i].getAttribute('data-value') === value.toString()) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    ;\n    /**\n     * To dispatch the event manually\n     */\n    dispatchEvent(element, type) {\n        let evt = document.createEvent('HTMLEvents');\n        evt.initEvent(type, false, true);\n        element.dispatchEvent(evt);\n    }\n    /**\n     * To set the current fields\n     */\n    setFields() {\n        if (this.fields.value && !this.fields.text) {\n            this.fields.text = this.fields.value;\n        }\n        else if (!this.fields.value && this.fields.text) {\n            this.fields.value = this.fields.text;\n        }\n        else if (!this.fields.value && !this.fields.text) {\n            this.fields.value = this.fields.text = 'text';\n        }\n    }\n    /**\n     * reset the items list.\n     */\n    resetList(dataSource, fields, query) {\n        if (this.list) {\n            if ((this.element.tagName === 'SELECT' && this.element.options.length > 0)\n                || (this.element.tagName === 'UL' && this.element.childNodes.length > 0)) {\n                let data = dataSource instanceof Array ? (dataSource.length > 0)\n                    : !isNullOrUndefined(dataSource);\n                if (!data && this.selectData && this.selectData.length > 0) {\n                    dataSource = this.selectData;\n                }\n            }\n            this.setListData(dataSource, fields, query);\n        }\n    }\n    updateSelectElementData(isFiltering) {\n        if (isFiltering && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {\n            this.selectData = this.listData;\n        }\n    }\n    updateSelection() {\n        // This is for after added the item, need to update the selected index values.\n    }\n    renderList() {\n        // This is for render the list items.\n        this.render();\n    }\n    updateDataSource(props) {\n        this.resetList(this.dataSource);\n    }\n    setUpdateInitial(props, newProp) {\n        this.isDataFetched = false;\n        let updateData = {};\n        for (let j = 0; props.length > j; j++) {\n            if (newProp[props[j]] && props[j] === 'fields') {\n                this.setFields();\n            }\n            else if (newProp[props[j]]) {\n                updateData[props[j]] = newProp[props[j]];\n            }\n        }\n        if (Object.keys(updateData).length > 0) {\n            if (Object.keys(updateData).indexOf('dataSource') === -1) {\n                updateData.dataSource = this.dataSource;\n            }\n            this.updateDataSource(updateData);\n        }\n    }\n    /**\n     * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'dropdownbase') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'sortOrder':\n                case 'dataSource':\n                case 'itemTemplate':\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'enabled':\n                    this.setEnabled();\n                    break;\n                case 'groupTemplate':\n                    this.renderGroupTemplate(this.list);\n                    if (this.ulElement && this.fixedHeaderElement) {\n                        let firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n                        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n                    }\n                    break;\n                case 'locale':\n                    if (this.list && (!isNullOrUndefined(this.liCollections) && this.liCollections.length === 0)) {\n                        this.l10nUpdate();\n                    }\n                    break;\n                case 'zIndex':\n                    this.setProperties({ zIndex: newProp.zIndex }, true);\n                    this.setZIndex();\n                    break;\n            }\n        }\n    }\n    ;\n    /**\n     * Build and render the component\n     * @private\n     */\n    render(isEmptyData) {\n        this.list = this.createElement('div', { className: dropDownBaseClasses.content, attrs: { 'tabindex': '0' } });\n        this.list.classList.add(dropDownBaseClasses.root);\n        this.setFields();\n        let rippleModel = { duration: 300, selector: '.' + dropDownBaseClasses.li };\n        this.rippleFun = rippleEffect(this.list, rippleModel);\n        let group = this.element.querySelector('select>optgroup');\n        if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {\n            EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n        }\n        if (this.getModuleName() === 'dropdownbase') {\n            if (this.element.getAttribute('tabindex')) {\n                this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));\n            }\n            removeClass([this.element], dropDownBaseClasses.root);\n            this.element.style.display = 'none';\n            let wrapperElement = this.createElement('div');\n            this.element.parentElement.insertBefore(wrapperElement, this.element);\n            wrapperElement.appendChild(this.element);\n            wrapperElement.appendChild(this.list);\n        }\n        this.setEnableRtl();\n        this.setEnabled();\n        if (!isEmptyData) {\n            this.initialize();\n        }\n    }\n    ;\n    /**\n     * Return the module name of this component.\n     * @private\n     */\n    getModuleName() {\n        return 'dropdownbase';\n    }\n    ;\n    /**\n     * Gets all the list items bound on this component.\n     * @returns Element[].\n     */\n    getItems() {\n        return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n    }\n    ;\n    /**\n     * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     * @deprecated\n     */\n    addItem(items, itemIndex) {\n        if (!this.list || (this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox')) {\n            this.renderList();\n        }\n        if (this.sortOrder !== 'None' && isNullOrUndefined(itemIndex)) {\n            let newList = [].slice.call(this.listData);\n            newList.push(items);\n            newList = this.getSortedDataSource(newList);\n            if (this.fields.groupBy) {\n                newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);\n                itemIndex = newList.indexOf(items);\n            }\n            else {\n                itemIndex = newList.indexOf(items);\n            }\n        }\n        this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n        let itemsCount = this.getItems().length;\n        let selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);\n        items = (items instanceof Array ? items : [items]);\n        let index;\n        index = (isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1) ? itemsCount : itemIndex;\n        let fields = this.fields;\n        if (items && fields.groupBy) {\n            items = ListBase.groupDataSource(items, fields.properties);\n        }\n        let liCollections = [];\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i];\n            let isHeader = item.isHeader;\n            let li = this.createElement('li', { className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li, id: 'option-add-' + i });\n            let itemText = item instanceof Object ? getValue(fields.text, item) : item;\n            if (isHeader) {\n                li.innerText = itemText;\n            }\n            if (this.itemTemplate && !isHeader) {\n                let compiledString = compile(this.itemTemplate);\n                append(compiledString(item, null, null, this.itemTemplateId, this.isStringTemplate), li);\n                this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n            }\n            else if (!isHeader) {\n                li.appendChild(document.createTextNode(itemText));\n            }\n            li.setAttribute('data-value', item instanceof Object ? getValue(fields.value, item) : item);\n            li.setAttribute('role', 'option');\n            this.notify('addItem', { module: 'CheckBoxSelection', item: li });\n            liCollections.push(li);\n            this.listData.push(item);\n            this.updateActionCompleteData(li, item, index);\n            //Listbox event\n            this.trigger('beforeItemRender', { element: li, item: item });\n        }\n        if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector('ul'))) {\n            this.list.innerHTML = '';\n            this.list.classList.remove(dropDownBaseClasses.noData);\n            this.list.appendChild(this.ulElement);\n            this.liCollections = liCollections;\n            append(liCollections, this.ulElement);\n            this.updateAddItemList(this.list, itemsCount);\n        }\n        else {\n            if (this.getModuleName() === 'listbox' && itemsCount === 0) {\n                this.ulElement.innerHTML = '';\n            }\n            let attr = [];\n            for (let i = 0; i < items.length; i++) {\n                let listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');\n                for (let j = 0; j < listGroupItem.length; j++) {\n                    attr[j] = listGroupItem[j].innerText;\n                }\n                if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {\n                    for (let j = 0; j < listGroupItem.length; j++) {\n                        if (attr[j] === liCollections[i].innerText) {\n                            if (this.sortOrder === 'None') {\n                                this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);\n                            }\n                            else {\n                                this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);\n                            }\n                            i = i + 1;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    if (this.liCollections[index]) {\n                        this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);\n                    }\n                    else {\n                        this.ulElement.appendChild(liCollections[i]);\n                    }\n                }\n                let tempLi = [].slice.call(this.liCollections);\n                tempLi.splice(index, 0, liCollections[i]);\n                this.liCollections = tempLi;\n                index += 1;\n                if (this.getModuleName() === 'multiselect') {\n                    this.updateDataList();\n                }\n            }\n        }\n        if (selectedItemValue || itemIndex === 0) {\n            this.updateSelection();\n        }\n    }\n    validationAttribute(target, hidden) {\n        let name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n        hidden.setAttribute('name', name);\n        target.removeAttribute('name');\n        let attributes$$1 = ['required', 'aria-required', 'form'];\n        for (let i = 0; i < attributes$$1.length; i++) {\n            if (!target.getAttribute(attributes$$1[i])) {\n                continue;\n            }\n            let attr = target.getAttribute(attributes$$1[i]);\n            hidden.setAttribute(attributes$$1[i], attr);\n            target.removeAttribute(attributes$$1[i]);\n        }\n    }\n    setZIndex() {\n        // this is for component wise\n    }\n    updateActionCompleteData(li, item, index) {\n        // this is for ComboBox custom value\n    }\n    updateAddItemList(list, itemCount) {\n        // this is for multiselect add item\n    }\n    updateDataList() {\n        // this is for multiselect update list items\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns Object.\n     * @blazorType object\n     */\n    getDataByValue(value) {\n        if (!isNullOrUndefined(this.listData)) {\n            let type = this.typeOfData(this.listData).typeof;\n            if (type === 'string' || type === 'number' || type === 'boolean') {\n                for (let item of this.listData) {\n                    if (!isNullOrUndefined(item) && item === value) {\n                        return item;\n                    }\n                }\n            }\n            else {\n                for (let item of this.listData) {\n                    if (!isNullOrUndefined(item) && getValue((this.fields.value ? this.fields.value : 'value'), item) === value) {\n                        return item;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        if (document.body.contains(this.list)) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n            if (!isNullOrUndefined(this.rippleFun)) {\n                this.rippleFun();\n            }\n            detach(this.list);\n        }\n        super.destroy();\n    }\n    ;\n};\n__decorate([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], DropDownBase.prototype, \"fields\", void 0);\n__decorate([\n    Property(false)\n], DropDownBase.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"itemTemplate\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Property('No records found')\n], DropDownBase.prototype, \"noRecordsTemplate\", void 0);\n__decorate([\n    Property('Request failed')\n], DropDownBase.prototype, \"actionFailureTemplate\", void 0);\n__decorate([\n    Property('None')\n], DropDownBase.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(true)\n], DropDownBase.prototype, \"enabled\", void 0);\n__decorate([\n    Property([])\n], DropDownBase.prototype, \"dataSource\", void 0);\n__decorate([\n    Property(null)\n], DropDownBase.prototype, \"query\", void 0);\n__decorate([\n    Property('StartsWith')\n], DropDownBase.prototype, \"filterType\", void 0);\n__decorate([\n    Property(true)\n], DropDownBase.prototype, \"ignoreCase\", void 0);\n__decorate([\n    Property(1000)\n], DropDownBase.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], DropDownBase.prototype, \"ignoreAccent\", void 0);\n__decorate([\n    Property()\n], DropDownBase.prototype, \"locale\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"actionFailure\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"dataBound\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], DropDownBase.prototype, \"destroyed\", void 0);\nDropDownBase = __decorate([\n    NotifyPropertyChanges\n], DropDownBase);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n/* tslint:disable */\n// don't use space in classnames \nconst dropDownListClasses = {\n    root: 'e-dropdownlist',\n    hover: dropDownBaseClasses.hover,\n    selected: dropDownBaseClasses.selected,\n    rtl: dropDownBaseClasses.rtl,\n    li: dropDownBaseClasses.li,\n    disable: dropDownBaseClasses.disabled,\n    base: dropDownBaseClasses.root,\n    focus: dropDownBaseClasses.focus,\n    input: 'e-input-group',\n    inputFocus: 'e-input-focus',\n    icon: 'e-input-group-icon e-ddl-icon',\n    iconAnimation: 'e-icon-anim',\n    value: 'e-input-value',\n    device: 'e-ddl-device',\n    backIcon: 'e-input-group-icon e-back-icon e-icons',\n    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n    filterInput: 'e-input-filter',\n    filterParent: 'e-filter-parent',\n    mobileFilter: 'e-ddl-device-filter',\n    footer: 'e-ddl-footer',\n    header: 'e-ddl-header',\n    clearIcon: 'e-clear-icon',\n    clearIconHide: 'e-clear-icon-hide',\n    popupFullScreen: 'e-popup-full-page',\n    disableIcon: 'e-ddl-disable-icon',\n    hiddenElement: 'e-ddl-hidden'\n};\nlet inputObject = {\n    container: null,\n    buttons: []\n};\n/**\n * The DropDownList component contains a list of predefined values from which you can\n * choose a single value.\n * ```html\n * <input type=\"text\" tabindex=\"1\" id=\"list\"> </input>\n * ```\n * ```typescript\n *   let dropDownListObj:DropDownList = new DropDownList();\n *   dropDownListObj.appendTo(\"#list\");\n * ```\n */\nlet DropDownList = class DropDownList extends DropDownBase {\n    /**\n     * * Constructor for creating the DropDownList component.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.previousValue = null;\n    }\n    ;\n    /**\n     * Initialize the event handler.\n     * @private\n     */\n    preRender() {\n        let checkBlazor = isBlazor() && this.isServerRendered;\n        this.isServerBlazor = (checkBlazor) ? true : false;\n        if (this.isServerBlazor) {\n            this.initializeData();\n        }\n        else {\n            this.element.style.opacity = '0';\n            this.initializeData();\n            super.preRender();\n        }\n        this.activeIndex = this.index;\n        this.queryString = '';\n    }\n    initializeData() {\n        this.isPopupOpen = false;\n        this.isDocumentClick = false;\n        this.isInteracted = false;\n        this.isFilterFocus = false;\n        this.beforePopupOpen = false;\n        this.initial = true;\n        this.initRemoteRender = false;\n        this.isNotSearchList = false;\n        this.isTyped = false;\n        this.isSelected = false;\n        this.preventFocus = false;\n        this.preventAutoFill = false;\n        this.isValidKey = false;\n        this.typedString = '';\n        this.isEscapeKey = false;\n        this.isPreventBlur = false;\n        this.isTabKey = false;\n        this.actionCompleteData = { isUpdated: false };\n        this.prevSelectPoints = {};\n        this.isSelectCustom = false;\n        this.isDropDownClick = false;\n        this.preventAltUp = false;\n        this.isCustomFilter = false;\n        this.isSecondClick = false;\n        this.keyConfigure = {\n            tab: 'tab',\n            enter: '13',\n            escape: '27',\n            end: '35',\n            home: '36',\n            down: '40',\n            up: '38',\n            pageUp: '33',\n            pageDown: '34',\n            open: 'alt+40',\n            close: 'shift+tab',\n            hide: 'alt+38',\n            space: '32'\n        };\n    }\n    setZIndex() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ 'zIndex': this.zIndex });\n        }\n    }\n    renderList(isEmptyData) {\n        if (!this.isServerBlazor) {\n            super.render(isEmptyData);\n            this.wireListEvents();\n        }\n        else {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);\n        }\n    }\n    floatLabelChange() {\n        if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {\n            let floatElement = this.inputWrapper.container.querySelector('.e-float-text');\n            if (this.inputElement.value !== '' || this.isInteracted) {\n                classList(floatElement, ['e-label-top'], ['e-label-bottom']);\n            }\n            else {\n                classList(floatElement, ['e-label-bottom'], ['e-label-top']);\n            }\n        }\n    }\n    resetHandler(e) {\n        e.preventDefault();\n        this.clearAll(e);\n    }\n    resetFocusElement() {\n        this.removeHover();\n        this.removeSelection();\n        this.removeFocus();\n        this.list.scrollTop = 0;\n        if (this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.ulElement)) {\n            let li = this.ulElement.querySelector('.' + dropDownListClasses.li);\n            if (li) {\n                li.classList.add(dropDownListClasses.focus);\n            }\n        }\n    }\n    clearAll(e, properties) {\n        if (isNullOrUndefined(properties) || (!isNullOrUndefined(properties) &&\n            (isNullOrUndefined(properties.dataSource) ||\n                (!(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)))) {\n            this.isActive = true;\n            this.resetSelection(properties);\n        }\n        let dataItem = this.getItemData();\n        if (this.previousValue === dataItem.value) {\n            return;\n        }\n        this.onChangeEvent(e);\n    }\n    resetSelection(properties) {\n        if (this.list) {\n            if ((!isNullOrUndefined(properties) &&\n                (isNullOrUndefined(properties.dataSource) ||\n                    (!(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)))) {\n                this.selectedLI = null;\n                this.actionCompleteData.isUpdated = false;\n                this.actionCompleteData.ulElement = null;\n                this.actionCompleteData.list = null;\n                this.resetList(properties.dataSource);\n            }\n            else {\n                if (this.allowFiltering && this.getModuleName() !== 'autocomplete'\n                    && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n                    let actionList = this.actionCompleteData.ulElement.querySelector('li');\n                    let ulElement = this.ulElement && this.ulElement.querySelector('li');\n                    if (this.element.tagName === 'EJS-COMBOBOX' && actionList && ulElement &&\n                        actionList.childElementCount > 0 && ulElement.childElementCount > 0 &&\n                        actionList.textContent !== ulElement.textContent && this.itemTemplate) {\n                        this.cloneElements();\n                    }\n                    this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);\n                }\n                this.resetFocusElement();\n            }\n        }\n        if (!this.isServerBlazor) {\n            this.hiddenElement.innerHTML = '';\n        }\n        this.inputElement.value = '';\n        this.value = null;\n        this.itemData = null;\n        this.text = null;\n        this.index = null;\n        this.activeIndex = null;\n        this.item = null;\n        this.queryString = '';\n        if (this.valueTempElement) {\n            detach(this.valueTempElement);\n            this.inputElement.style.display = 'block';\n            this.valueTempElement = null;\n        }\n        this.setSelection(null, null);\n        this.isSelectCustom = false;\n        this.updateIconState();\n        this.cloneElements();\n    }\n    setHTMLAttributes() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (let htmlAttr of Object.keys(this.htmlAttributes)) {\n                if (htmlAttr === 'class') {\n                    let updatedClassValue = (this.htmlAttributes[htmlAttr].replace(/\\s+/g, ' ')).trim();\n                    if (updatedClassValue !== '') {\n                        addClass([this.inputWrapper.container], updatedClassValue.split(' '));\n                    }\n                }\n                else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {\n                    this.enabled = false;\n                    this.setEnable();\n                }\n                else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[htmlAttr])) {\n                    this.readonly = true;\n                    this.dataBind();\n                }\n                else if (htmlAttr === 'style') {\n                    this.inputWrapper.container.setAttribute('style', this.htmlAttributes[htmlAttr]);\n                }\n                else {\n                    let defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder',\n                        'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n                    let validateAttr = ['name', 'required'];\n                    if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n                        defaultAttr.push('tabindex');\n                    }\n                    if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                        this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else if (defaultAttr.indexOf(htmlAttr) > -1) {\n                        htmlAttr === 'placeholder' ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) :\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else {\n                        this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                }\n            }\n        }\n        if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n            this.inputWrapper.container.removeAttribute('tabindex');\n        }\n    }\n    getAriaAttributes() {\n        return {\n            'aria-disabled': 'false',\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false',\n            'aria-activedescendant': 'null',\n            'aria-live': 'polite',\n            'aria-labelledby': this.hiddenElement.id\n        };\n    }\n    setEnableRtl() {\n        Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);\n        if (this.popupObj) {\n            this.popupObj.enableRtl = this.enableRtl;\n            this.popupObj.dataBind();\n        }\n    }\n    setEnable() {\n        Input.setEnabled(this.enabled, this.inputElement);\n        if (this.enabled) {\n            removeClass([this.inputWrapper.container], dropDownListClasses.disable);\n            this.inputElement.setAttribute('aria-disabled', 'false');\n            this.targetElement().setAttribute('tabindex', this.tabIndex);\n        }\n        else {\n            this.hidePopup();\n            addClass([this.inputWrapper.container], dropDownListClasses.disable);\n            this.inputElement.setAttribute('aria-disabled', 'true');\n            this.targetElement().tabIndex = -1;\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    ;\n    getLocaleName() {\n        return 'drop-down-list';\n    }\n    ;\n    preventTabIndex(element) {\n        if (this.getModuleName() === 'dropdownlist') {\n            element.tabIndex = -1;\n        }\n    }\n    targetElement() {\n        return this.inputWrapper.container;\n    }\n    getNgDirective() {\n        return 'EJS-DROPDOWNLIST';\n    }\n    getElementByText(text) {\n        return this.getElementByValue(this.getValueByText(text));\n    }\n    getElementByValue(value) {\n        let item;\n        let listItems = this.getItems();\n        for (let liItem of listItems) {\n            if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {\n                item = liItem;\n                break;\n            }\n        }\n        return item;\n    }\n    ;\n    initValue() {\n        this.renderList();\n        if (this.dataSource instanceof DataManager) {\n            this.initRemoteRender = true;\n        }\n        else {\n            this.updateValues();\n        }\n    }\n    updateValues() {\n        if (!isNullOrUndefined(this.value)) {\n            this.setSelection(this.getElementByValue(this.value), null);\n        }\n        else if (this.text && isNullOrUndefined(this.value)) {\n            let element = this.getElementByText(this.text);\n            if (isNullOrUndefined(element)) {\n                this.setProperties({ text: null });\n                return;\n            }\n            else {\n                this.setSelection(element, null);\n            }\n        }\n        else {\n            this.setSelection(this.liCollections[this.activeIndex], null);\n        }\n        this.setHiddenValue();\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n    onBlur(e) {\n        if (!this.enabled) {\n            return;\n        }\n        let target = e.relatedTarget;\n        let currentTarget = e.target;\n        let isPreventBlur = this.isPreventBlur;\n        this.isPreventBlur = false;\n        //IE 11 - issue\n        if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) ||\n            !this.isFilterLayout() && isNullOrUndefined(target))) {\n            if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {\n                this.filterInput.focus();\n            }\n            else {\n                this.targetElement().focus();\n            }\n            return;\n        }\n        if (this.isDocumentClick || (!isNullOrUndefined(this.popupObj)\n            && document.body.contains(this.popupObj.element) &&\n            this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter))) {\n            if (!this.beforePopupOpen) {\n                this.isDocumentClick = false;\n            }\n            return;\n        }\n        if (((this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement)\n            && (document.activeElement !== target || (document.activeElement === target &&\n                currentTarget.classList.contains(dropDownListClasses.inputFocus)))) ||\n            (isNullOrUndefined(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering &&\n                currentTarget !== this.inputWrapper.container) || this.getModuleName() !== 'dropdownlist' &&\n            !this.inputWrapper.container.contains(target) || this.isTabKey) {\n            this.isDocumentClick = this.isPopupOpen ? true : false;\n            this.focusOutAction(e);\n            this.isTabKey = false;\n        }\n        if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {\n            this.isActive = false;\n            this.beforePopupOpen = false;\n        }\n    }\n    focusOutAction(e) {\n        this.isInteracted = false;\n        this.focusOut(e);\n        this.onFocusOut();\n    }\n    onFocusOut() {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.isSelected) {\n            this.isSelectCustom = false;\n            this.onChangeEvent(null);\n        }\n        this.floatLabelChange();\n        this.dispatchEvent(this.hiddenElement, 'change');\n        if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {\n            this.dispatchEvent(this.inputElement, 'blur');\n        }\n        if (this.inputWrapper.clearButton) {\n            addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n        }\n        this.trigger('blur');\n    }\n    onFocus(e) {\n        if (!this.isInteracted) {\n            this.isInteracted = true;\n            let args = { isInteracted: e ? true : false, event: e };\n            this.trigger('focus', args);\n        }\n        this.updateIconState();\n    }\n    resetValueHandler(e) {\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement && e.target === formElement) {\n            let val = (this.element.tagName === this.getNgDirective()) ? null : this.inputElement.getAttribute('value');\n            this.text = val;\n        }\n    }\n    wireEvent() {\n        EventHandler.add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);\n        EventHandler.add(this.inputWrapper.container, 'focus', this.focusIn, this);\n        EventHandler.add(this.inputWrapper.container, 'keypress', this.onSearch, this);\n        this.bindCommonEvent();\n    }\n    bindCommonEvent() {\n        EventHandler.add(this.targetElement(), 'blur', this.onBlur, this);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        if (!Browser.isDevice) {\n            this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n                keyAction: this.keyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n        else {\n            this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n                keyAction: this.mobileKeyActionHandler.bind(this), keyConfigs: this.keyConfigure, eventName: 'keydown'\n            });\n        }\n        this.bindClearEvent();\n    }\n    bindClearEvent() {\n        if (this.showClearButton) {\n            EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n        }\n    }\n    unBindCommonEvent() {\n        EventHandler.remove(this.targetElement(), 'blur', this.onBlur);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n        if (!Browser.isDevice) {\n            this.keyboardModule.destroy();\n        }\n        if (this.showClearButton) {\n            EventHandler.remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);\n        }\n    }\n    updateIconState() {\n        if (this.showClearButton) {\n            if (this.inputElement.value !== '' && !this.readonly) {\n                removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n            else {\n                addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n        }\n    }\n    /**\n     * Event binding for list\n     */\n    wireListEvents() {\n        EventHandler.add(this.list, 'click', this.onMouseClick, this);\n        EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n    ;\n    onSearch(e) {\n        if (e.charCode !== 32 && e.charCode !== 13) {\n            if (this.list === undefined) {\n                if (!this.isServerBlazor) {\n                    this.renderList();\n                }\n                else {\n                    this.isServerIncrementalSearch = true;\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n                }\n            }\n            this.searchKeyEvent = e;\n            this.onServerIncrementalSearch(e);\n        }\n    }\n    onServerIncrementalSearch(e) {\n        if (!this.isRequested && !isNullOrUndefined(this.list) &&\n            !isNullOrUndefined(this.list.querySelector('li')) && this.enabled && !this.readonly) {\n            this.incrementalSearch(e);\n        }\n    }\n    onMouseClick(e) {\n        let target = e.target;\n        let classList$$1 = target.classList;\n        let li = closest(target, '.' + dropDownBaseClasses.li);\n        if (!this.isValidLI(li)) {\n            return;\n        }\n        this.setSelection(li, e);\n        if (Browser.isDevice && this.isFilterLayout()) {\n            history.back();\n        }\n        else {\n            let delay = 100;\n            this.closePopup(delay);\n        }\n    }\n    onMouseOver(e) {\n        let currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        this.setHover(currentLi);\n    }\n    ;\n    setHover(li) {\n        if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n    }\n    ;\n    onMouseLeave(e) {\n        this.removeHover();\n    }\n    ;\n    removeHover() {\n        if (this.list) {\n            let hoveredItem = (this.isServerBlazor && this.popupObj && this.popupObj.element) ?\n                this.popupObj.element.querySelectorAll('.' + dropDownBaseClasses.hover) :\n                this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.hover);\n            }\n        }\n    }\n    ;\n    isValidLI(li) {\n        return (li && li.hasAttribute('role') && li.getAttribute('role') === 'option');\n    }\n    ;\n    incrementalSearch(e) {\n        if (this.liCollections.length > 0) {\n            let li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id, this.isServerBlazor);\n            if (!isNullOrUndefined(li)) {\n                this.setSelection(li, e);\n                this.setScrollPosition();\n            }\n        }\n    }\n    ;\n    /**\n     * Hides the spinner loader.\n     * @returns void.\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            this.spinnerElement.innerHTML = '';\n            this.spinnerElement = null;\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     * @returns void.\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] ||\n                !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];\n            addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            createSpinner({\n                target: this.spinnerElement,\n                width: Browser.isDevice ? '16px' : '14px'\n            }, this.createElement);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    keyActionHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        let preventAction = e.action === 'pageUp' || e.action === 'pageDown';\n        let preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');\n        this.isEscapeKey = e.action === 'escape';\n        this.isTabKey = !this.isPopupOpen && e.action === 'tab';\n        let isNavAction = e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end';\n        let isNavigation = (e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown'\n            || e.action === 'home' || e.action === 'end');\n        if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {\n            return;\n        }\n        if (!this.readonly) {\n            let isTabAction = e.action === 'tab' || e.action === 'close';\n            if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape') {\n                this.searchKeyEvent = e;\n                this.renderList();\n            }\n            if (!(this.isServerBlazor && (e.action === 'open' || e.action === 'space')) && isNullOrUndefined(this.list) ||\n                (!isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0) || this.isRequested) {\n                if (!(this.isServerBlazor && isNavAction)) {\n                    return;\n                }\n            }\n            if ((isTabAction && this.getModuleName() !== 'autocomplete') && this.isPopupOpen\n                || e.action === 'escape') {\n                e.preventDefault();\n            }\n            this.isSelected = e.action === 'escape' ? false : this.isSelected;\n            this.isTyped = (isNavigation || e.action === 'escape') ? false : this.isTyped;\n            switch (e.action) {\n                case 'down':\n                case 'up':\n                    this.updateUpDownAction(e);\n                    break;\n                case 'pageUp':\n                    this.pageUpSelection(this.activeIndex - this.getPageCount(), e);\n                    e.preventDefault();\n                    break;\n                case 'pageDown':\n                    this.pageDownSelection(this.activeIndex + this.getPageCount(), e);\n                    e.preventDefault();\n                    break;\n                case 'home':\n                    this.updateHomeEndAction(e);\n                    break;\n                case 'end':\n                    this.updateHomeEndAction(e);\n                    break;\n                case 'space':\n                    if (this.getModuleName() === 'dropdownlist') {\n                        if (!this.beforePopupOpen) {\n                            this.showPopup();\n                        }\n                    }\n                    break;\n                case 'open':\n                    this.showPopup();\n                    break;\n                case 'hide':\n                    this.preventAltUp = this.isPopupOpen;\n                    this.hidePopup(e);\n                    this.focusDropDown(e);\n                    break;\n                case 'enter':\n                    this.selectCurrentItem(e);\n                    break;\n                case 'tab':\n                    this.selectCurrentValueOnTab(e);\n                    break;\n                case 'escape':\n                case 'close':\n                    if (this.isPopupOpen) {\n                        this.hidePopup(e);\n                        this.focusDropDown(e);\n                    }\n                    break;\n            }\n        }\n    }\n    updateUpDownAction(e) {\n        if (this.isServerBlazor && isNullOrUndefined(this.list)) {\n            this.isServerNavigation = true;\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n        }\n        else {\n            this.isServerNavigation = false;\n            let focusEle = this.list.querySelector('.' + dropDownListClasses.focus);\n            if (this.isSelectFocusItem(focusEle)) {\n                this.setSelection(focusEle, e);\n            }\n            else {\n                let nextItem;\n                let index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n                let startIndex = 0;\n                if (this.getModuleName() === 'autocomplete') {\n                    startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n                    index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n                }\n                nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];\n                if (!isNullOrUndefined(nextItem)) {\n                    this.setSelection(nextItem, e);\n                }\n            }\n            e.preventDefault();\n        }\n    }\n    updateHomeEndAction(e) {\n        if (this.getModuleName() === 'dropdownlist') {\n            if (this.isServerBlazor && isNullOrUndefined(this.list)) {\n                this.isServerNavigation = true;\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerRenderList', true, false);\n            }\n            else {\n                this.isServerNavigation = false;\n                let findLi = 0;\n                if (e.action === 'home') {\n                    findLi = 0;\n                }\n                else {\n                    findLi = this.getItems().length - 1;\n                }\n                e.preventDefault();\n                if (this.activeIndex === findLi) {\n                    return;\n                }\n                this.setSelection(this.liCollections[findLi], e);\n            }\n        }\n    }\n    selectCurrentValueOnTab(e) {\n        if (this.getModuleName() === 'autocomplete') {\n            this.selectCurrentItem(e);\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup(e);\n                this.focusDropDown(e);\n            }\n        }\n    }\n    mobileKeyActionHandler(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if ((this.isEditTextBox()) && !this.isPopupOpen) {\n            return;\n        }\n        if (!this.readonly) {\n            if (this.list === undefined && !this.isRequested) {\n                this.searchKeyEvent = e;\n                this.renderList();\n            }\n            if (isNullOrUndefined(this.list) || (!isNullOrUndefined(this.liCollections) &&\n                this.liCollections.length === 0) || this.isRequested) {\n                return;\n            }\n            if (e.action === 'enter') {\n                this.selectCurrentItem(e);\n            }\n        }\n    }\n    selectCurrentItem(e) {\n        if (this.isPopupOpen) {\n            let li = this.list.querySelector('.' + dropDownListClasses.focus);\n            if (li) {\n                this.setSelection(li, e);\n                this.isTyped = false;\n            }\n            if (this.isSelected) {\n                this.isSelectCustom = false;\n                this.onChangeEvent(e);\n            }\n            this.hidePopup();\n            this.focusDropDown(e);\n        }\n        else {\n            this.showPopup();\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    getPageCount() {\n        let liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null :\n            getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n        return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));\n    }\n    pageUpSelection(steps, event) {\n        let previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];\n        this.setSelection(previousItem, event);\n    }\n    ;\n    pageDownSelection(steps, event) {\n        let list = this.getItems();\n        let previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];\n        this.setSelection(previousItem, event);\n    }\n    ;\n    unWireEvent() {\n        EventHandler.remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);\n        EventHandler.remove(this.inputWrapper.container, 'keypress', this.onSearch);\n        EventHandler.remove(this.inputWrapper.container, 'focus', this.focusIn);\n        this.unBindCommonEvent();\n    }\n    /**\n     * Event un binding for list items.\n     */\n    unWireListEvents() {\n        EventHandler.remove(this.list, 'click', this.onMouseClick);\n        EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n    }\n    ;\n    checkSelector(id) {\n        return '#' + id.replace(/(:|\\.|\\[|\\]|,|=|@|\\\\|\\/|#)/g, '\\\\$1');\n    }\n    onDocumentClick(e) {\n        let target = e.target;\n        if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) &&\n            !this.inputWrapper.container.contains(e.target)) {\n            if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {\n                this.isDocumentClick = true;\n                let isActive = this.isRequested;\n                this.isInteracted = false;\n                this.hidePopup(e);\n                if (!isActive) {\n                    this.onFocusOut();\n                    this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n                }\n            }\n        }\n        else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput)\n            && !(this.getModuleName() === 'combobox' &&\n                !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {\n            this.isPreventBlur = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.targetElement() ||\n                document.activeElement === this.filterInput);\n            e.preventDefault();\n        }\n    }\n    activeStateChange() {\n        if (this.isDocumentClick) {\n            this.hidePopup();\n            this.onFocusOut();\n            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n        }\n    }\n    focusDropDown(e) {\n        if (!this.initial && this.isFilterLayout()) {\n            this.focusIn(e);\n        }\n    }\n    dropDownClick(e) {\n        if (e.which === 3 || e.button === 2) {\n            return;\n        }\n        if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {\n            return;\n        }\n        let target = e.target;\n        if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {\n            e.preventDefault();\n        }\n        if (!this.readonly) {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n                if (this.isFilterLayout()) {\n                    this.focusDropDown(e);\n                }\n            }\n            else {\n                this.focusIn(e);\n                this.floatLabelChange();\n                this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;\n                this.isDropDownClick = true;\n                this.showPopup();\n            }\n            let proxy = this;\n            let duration = (isBlazor()) ? 1000 : (this.element.tagName === this.getNgDirective() && this.itemTemplate) ? 500 : 100;\n            if (!this.isSecondClick) {\n                setTimeout(() => { proxy.cloneElements(); proxy.isSecondClick = true; }, duration);\n            }\n        }\n        else {\n            this.focusIn(e);\n        }\n    }\n    cloneElements() {\n        if (this.list) {\n            let ulElement = this.list.querySelector('ul');\n            if (ulElement) {\n                ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                this.actionCompleteData.ulElement = ulElement;\n            }\n        }\n    }\n    updateSelectedItem(li, e, preventSelect, isSelection) {\n        this.removeSelection();\n        li.classList.add(dropDownBaseClasses.selected);\n        this.removeHover();\n        let value = this.getFormattedValue(li.getAttribute('data-value'));\n        let selectedData = this.getDataByValue(value);\n        if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {\n            let items = this.detachChanges(selectedData);\n            this.isSelected = true;\n            let eventArgs = {\n                e: e,\n                item: li,\n                itemData: items,\n                isInteracted: e ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    li.classList.remove(dropDownBaseClasses.selected);\n                }\n                else {\n                    this.selectEventCallback(li, e, preventSelect, selectedData, value);\n                    if (this.isServerBlazor) {\n                        // tslint:disable-next-line\n                        this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);\n                    }\n                    if (isSelection) {\n                        this.setSelectOptions(li, e);\n                    }\n                }\n            });\n        }\n        else {\n            this.selectEventCallback(li, e, preventSelect, selectedData, value);\n            if (this.isServerBlazor) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerItemData', this.itemData);\n            }\n            if (isSelection) {\n                this.setSelectOptions(li, e);\n            }\n        }\n    }\n    selectEventCallback(li, e, preventSelect, selectedData, value) {\n        this.previousItemData = (!isNullOrUndefined(this.itemData)) ? this.itemData : null;\n        this.item = li;\n        this.itemData = selectedData;\n        let focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (focusedItem) {\n            removeClass([focusedItem], dropDownBaseClasses.focus);\n        }\n        li.setAttribute('aria-selected', 'true');\n        this.activeIndex = this.getIndexByValue(value);\n    }\n    activeItem(li) {\n        if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {\n            this.removeSelection();\n            li.classList.add(dropDownBaseClasses.selected);\n            this.removeHover();\n            li.setAttribute('aria-selected', 'true');\n        }\n    }\n    setValue(e) {\n        let dataItem = this.getItemData();\n        if (dataItem.value === null) {\n            if (isBlazor() && dataItem.text !== null || dataItem.text !== '') {\n                Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n            else {\n                Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n        }\n        else {\n            Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n        if (this.isServerBlazor) {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerValueTemplate', dataItem);\n        }\n        if (this.valueTemplate && this.itemData !== null && !this.isServerBlazor) {\n            this.DropDownBaseresetBlazorTemplates(false, false, false, false, true);\n            this.setValueTemplate();\n        }\n        else if (this.inputElement.previousSibling === this.valueTempElement) {\n            detach(this.valueTempElement);\n            this.inputElement.style.display = 'block';\n        }\n        if (this.previousValue === dataItem.value) {\n            this.isSelected = false;\n            return true;\n        }\n        else {\n            this.isSelected = !this.initial ? true : false;\n            this.isSelectCustom = false;\n            if (this.getModuleName() === 'dropdownlist') {\n                this.updateIconState();\n            }\n            return false;\n        }\n    }\n    setSelection(li, e) {\n        if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || (this.isPopupOpen && this.isSelected\n            && li.classList.contains(dropDownBaseClasses.selected)))) {\n            this.updateSelectedItem(li, e, false, true);\n        }\n        else {\n            this.setSelectOptions(li, e);\n        }\n    }\n    setSelectOptions(li, e) {\n        if (this.list) {\n            this.removeHover();\n        }\n        this.previousSelectedLI = (!isNullOrUndefined(this.selectedLI)) ? this.selectedLI : null;\n        this.selectedLI = li;\n        if (this.setValue(e)) {\n            return;\n        }\n        if (this.isPopupOpen) {\n            attributes(this.targetElement(), { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n            if (this.isFilterLayout() && this.filterInput) {\n                attributes(this.filterInput, { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n            }\n        }\n        if ((!this.isPopupOpen && !isNullOrUndefined(li)) || (this.isPopupOpen && !isNullOrUndefined(e) &&\n            (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter'))) {\n            this.isSelectCustom = false;\n            this.onChangeEvent(e);\n        }\n        if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {\n            this.setScrollPosition(e);\n        }\n        if (Browser.info.name !== 'mozilla') {\n            attributes(this.inputElement, { 'aria-label': this.inputElement.value });\n            attributes(this.targetElement(), { 'aria-describedby': this.inputElement.id });\n            this.targetElement().removeAttribute('aria-live');\n        }\n    }\n    dropdownCompiler(dropdownTemplate) {\n        let checkTemplate = false;\n        if (dropdownTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(dropdownTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    setValueTemplate() {\n        let compiledString;\n        if (!this.valueTempElement) {\n            this.valueTempElement = this.createElement('span', { className: dropDownListClasses.value });\n            this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);\n            this.inputElement.style.display = 'none';\n        }\n        this.valueTempElement.innerHTML = '';\n        let templateData = (isBlazor()) ? JSON.parse(JSON.stringify(this.itemData)) : this.itemData;\n        let valuecheck = this.dropdownCompiler(this.valueTemplate);\n        if (valuecheck) {\n            compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.valueTemplate);\n        }\n        for (let item of compiledString(templateData, null, null, this.valueTemplateId, this.isStringTemplate)) {\n            this.valueTempElement.appendChild(item);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, true, true);\n    }\n    removeSelection() {\n        if (this.list) {\n            let selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n            if (selectedItems.length) {\n                removeClass(selectedItems, dropDownBaseClasses.selected);\n                selectedItems[0].removeAttribute('aria-selected');\n            }\n        }\n    }\n    ;\n    getItemData() {\n        let fields = this.fields;\n        let dataItem = null;\n        dataItem = this.itemData;\n        let dataValue;\n        let dataText;\n        if (!isNullOrUndefined(dataItem)) {\n            dataValue = getValue(fields.value, dataItem);\n            dataText = getValue(fields.text, dataItem);\n        }\n        let value = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataValue : dataItem);\n        let text = (!isNullOrUndefined(dataItem) &&\n            !isUndefined(dataValue) ? dataText : dataItem);\n        return { value: value, text: text };\n    }\n    /**\n     * To trigger the change event for list.\n     */\n    onChangeEvent(eve) {\n        let dataItem = this.getItemData();\n        let index = this.isSelectCustom ? null : this.activeIndex;\n        this.setProperties({ 'index': index, 'text': dataItem.text, 'value': dataItem.value }, true);\n        this.detachChangeEvent(eve);\n    }\n    ;\n    detachChanges(value) {\n        let items;\n        if (typeof value === 'string' ||\n            typeof value === 'boolean' ||\n            typeof value === 'number') {\n            items = Object.defineProperties({}, {\n                value: {\n                    value: value,\n                    enumerable: true\n                },\n                text: {\n                    value: value,\n                    enumerable: true\n                }\n            });\n        }\n        else {\n            items = value;\n        }\n        return items;\n    }\n    detachChangeEvent(eve) {\n        this.isSelected = false;\n        this.previousValue = this.value;\n        this.activeIndex = this.index;\n        this.typedString = !isNullOrUndefined(this.text) ? this.text : '';\n        if (!this.initial) {\n            let items = this.detachChanges(this.itemData);\n            let preItems;\n            if (typeof this.previousItemData === 'string' ||\n                typeof this.previousItemData === 'boolean' ||\n                typeof this.previousItemData === 'number') {\n                preItems = Object.defineProperties({}, {\n                    value: {\n                        value: this.previousItemData,\n                        enumerable: true\n                    },\n                    text: {\n                        value: this.previousItemData,\n                        enumerable: true\n                    }\n                });\n            }\n            else {\n                preItems = this.previousItemData;\n            }\n            this.setHiddenValue();\n            let eventArgs = {\n                e: eve,\n                item: this.item,\n                itemData: items,\n                previousItem: this.previousSelectedLI,\n                previousItemData: preItems,\n                isInteracted: eve ? true : false,\n                value: this.value,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n            if (this.isServerBlazor && this.enablePersistence) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('ServerChange');\n            }\n        }\n        if ((isNullOrUndefined(this.value) || this.value === '') && this.floatLabelType !== 'Always') {\n            removeClass([this.inputWrapper.container], 'e-valid-input');\n        }\n    }\n    setHiddenValue() {\n        if (!isNullOrUndefined(this.value)) {\n            if (this.isServerBlazor && this.hiddenElement.querySelector('option')) {\n                let selectedElement = this.hiddenElement.querySelector('option');\n                selectedElement.textContent = this.text;\n                selectedElement.setAttribute('value', this.value.toString());\n            }\n            else if (!this.isServerBlazor) {\n                this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';\n                let selectedElement = this.hiddenElement.querySelector('option');\n                selectedElement.setAttribute('value', this.value.toString());\n            }\n        }\n        else if (!this.isServerBlazor) {\n            this.hiddenElement.innerHTML = '';\n        }\n    }\n    /**\n     * Filter bar implementation\n     */\n    onFilterUp(e) {\n        if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {\n            this.isValidKey = false;\n            switch (e.keyCode) {\n                case 38: //up arrow \n                case 40: //down arrow \n                    if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else {\n                        this.preventAutoFill = false;\n                    }\n                    this.preventAltUp = false;\n                    e.preventDefault();\n                    break;\n                case 46: //delete\n                case 8: //backspace\n                    this.typedString = this.filterInput.value;\n                    if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {\n                        this.preventAutoFill = true;\n                        this.searchLists(e);\n                    }\n                    else if (this.typedString === '') {\n                        if (this.list) {\n                            this.resetFocusElement();\n                        }\n                        this.activeIndex = null;\n                        if (this.getModuleName() === 'autocomplete') {\n                            this.hidePopup();\n                        }\n                    }\n                    e.preventDefault();\n                    break;\n                default:\n                    this.typedString = this.filterInput.value;\n                    this.preventAutoFill = false;\n                    this.searchLists(e);\n                    break;\n            }\n        }\n        else {\n            this.isValidKey = false;\n        }\n    }\n    onFilterDown(e) {\n        switch (e.keyCode) {\n            case 13: //enter\n                break;\n            case 40: //down arrow\n            case 38: //up arrow \n                this.queryString = this.filterInput.value;\n                e.preventDefault();\n                break;\n            case 9: //tab \n                if (this.isPopupOpen && this.getModuleName() !== 'autocomplete') {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                this.prevSelectPoints = this.getSelectionPoints();\n                this.queryString = this.filterInput.value;\n                break;\n        }\n    }\n    removeFillSelection() {\n        if (this.isInteracted) {\n            let selection = this.getSelectionPoints();\n            this.inputElement.setSelectionRange(selection.end, selection.end);\n        }\n    }\n    getQuery(query) {\n        let filterQuery;\n        if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {\n            filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n            let filterType = this.typedString === '' ? 'contains' : this.filterType;\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                let fields = (this.fields.text) ? this.fields.text : '';\n                filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        else {\n            filterQuery = query ? query : this.query ? this.query : new Query();\n        }\n        return filterQuery;\n    }\n    getSelectionPoints() {\n        let input = this.inputElement;\n        return { start: Math.abs(input.selectionStart), end: Math.abs(input.selectionEnd) };\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        this.activeIndex = null;\n        if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {\n            let clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n            clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n        }\n        this.isDataFetched = false;\n        if (this.isFiltering()) {\n            if (this.isServerBlazor) {\n                this.beforePopupOpen = (this.getModuleName() === 'combobox' && this.isFiltering() && !this.beforePopupOpen)\n                    ? !this.beforePopupOpen : this.beforePopupOpen;\n                if (this.filterInput.value === '' && this.getModuleName() !== 'dropdownlist') {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, false);\n                }\n                else {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);\n                }\n            }\n            else {\n                let eventArgs = {\n                    preventDefaultAction: false,\n                    text: this.filterInput.value,\n                    updateData: (dataSource, query, fields) => {\n                        if (eventArgs.cancel) {\n                            return;\n                        }\n                        this.isCustomFilter = true;\n                        this.filteringAction(dataSource, query, fields);\n                    },\n                    baseEventArgs: e,\n                    cancel: false\n                };\n                this.trigger('filtering', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel && !this.isCustomFilter && !eventArgs.preventDefaultAction) {\n                        this.filteringAction(this.dataSource, null, this.fields);\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        this.isCustomFilter = true;\n        this.filteringAction(dataSource, query, fields);\n    }\n    filteringAction(dataSource, query, fields) {\n        if (!isNullOrUndefined(this.filterInput)) {\n            this.beforePopupOpen = true;\n            if (this.filterInput.value.trim() === '' && !this.itemTemplate) {\n                this.actionCompleteData.isUpdated = false;\n                this.isTyped = false;\n                if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n                    this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);\n                }\n                this.isTyped = true;\n                if (!isNullOrUndefined(this.itemData) && this.getModuleName() === 'dropdownlist') {\n                    this.focusIndexItem();\n                    this.setScrollPosition();\n                }\n                this.isNotSearchList = true;\n            }\n            else {\n                this.isNotSearchList = false;\n                query = (this.filterInput.value.trim() === '') ? null : query;\n                this.resetList(dataSource, fields, query);\n            }\n        }\n    }\n    setSearchBox(popupElement) {\n        if (this.isFiltering()) {\n            let parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ?\n                popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {\n                className: dropDownListClasses.filterParent\n            });\n            if (this.isServerBlazor) {\n                parentElement.innerHTML = '';\n            }\n            this.filterInput = this.createElement('input', {\n                attrs: { type: 'text' },\n                className: dropDownListClasses.filterInput\n            });\n            this.element.parentNode.insertBefore(this.filterInput, this.element);\n            let backIcon = false;\n            if (Browser.isDevice) {\n                backIcon = true;\n            }\n            this.filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: backIcon ?\n                    [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],\n                properties: { placeholder: this.filterBarPlaceholder }\n            }, this.createElement);\n            if (!isNullOrUndefined(this.cssClass)) {\n                if (this.cssClass.split(' ').indexOf('e-outline') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-outline');\n                }\n                else if (this.cssClass.split(' ').indexOf('e-filled') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-filled');\n                }\n            }\n            append([this.filterInputObj.container], parentElement);\n            prepend([parentElement], popupElement);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'aria-owns': this.element.id + '_options',\n                'role': 'listbox',\n                'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null,\n                'autocomplete': 'off',\n                'autocorrect': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n            if (!Browser.isDevice && this.clearIconElement) {\n                EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n                this.clearIconElement.style.visibility = 'hidden';\n            }\n            if (!Browser.isDevice) {\n                this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n                    keyAction: this.keyActionHandler.bind(this),\n                    keyConfigs: this.keyConfigure,\n                    eventName: 'keydown'\n                });\n            }\n            else {\n                this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n                    keyAction: this.mobileKeyActionHandler.bind(this),\n                    keyConfigs: this.keyConfigure,\n                    eventName: 'keydown'\n                });\n            }\n            EventHandler.add(this.filterInput, 'input', this.onInput, this);\n            EventHandler.add(this.filterInput, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.filterInput, 'keydown', this.onFilterDown, this);\n            EventHandler.add(this.filterInput, 'blur', this.onBlur, this);\n            EventHandler.add(this.filterInput, 'paste', this.pasteHandler, this);\n            return this.filterInputObj;\n        }\n        else {\n            return inputObject;\n        }\n    }\n    ;\n    onInput(e) {\n        this.isValidKey = true;\n        // For filtering works in mobile firefox.\n        if (Browser.isDevice && Browser.info.name === 'mozilla') {\n            this.typedString = this.filterInput.value;\n            this.preventAutoFill = true;\n            this.searchLists(e);\n        }\n    }\n    pasteHandler(e) {\n        setTimeout(() => {\n            this.typedString = this.filterInput.value;\n            this.searchLists(e);\n        });\n    }\n    onActionFailure(e) {\n        super.onActionFailure(e);\n        if (this.beforePopupOpen) {\n            this.renderPopup();\n        }\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        if (this.isNotSearchList) {\n            this.isNotSearchList = false;\n            return;\n        }\n        if (this.isActive) {\n            let selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;\n            super.onActionComplete(ulElement, list, e);\n            this.updateSelectElementData(this.allowFiltering);\n            if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {\n                this.isRequested = false;\n                this.keyActionHandler(this.searchKeyEvent);\n                this.searchKeyEvent = null;\n            }\n            if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {\n                this.incrementalSearch(this.searchKeyEvent);\n                this.searchKeyEvent = null;\n            }\n            this.list.scrollTop = 0;\n            if (!isNullOrUndefined(ulElement)) {\n                attributes(ulElement, { 'id': this.element.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n            }\n            if (this.initRemoteRender) {\n                this.initial = true;\n                this.activeIndex = this.index;\n                this.updateValues();\n                this.initRemoteRender = false;\n                this.initial = false;\n                if (this.value && this.dataSource instanceof DataManager) {\n                    let checkField = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n                    let checkVal = list.some((x) => x[checkField] === this.value);\n                    if (!checkVal) {\n                        this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField, 'equal', this.value)))\n                            .then((e) => {\n                            if (e.result.length > 0) {\n                                this.addItem(e.result, list.length);\n                                this.updateValues();\n                            }\n                        });\n                    }\n                }\n            }\n            if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {\n                if (!this.actionCompleteData.isUpdated || ((!this.isCustomFilter\n                    && !this.isFilterFocus)\n                    && ((this.dataSource instanceof DataManager)\n                        || (!isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) &&\n                            this.dataSource.length !== 0)))) {\n                    this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list: list, isUpdated: true };\n                }\n                this.addNewItem(list, selectedItem);\n                if (!isNullOrUndefined(this.itemData)) {\n                    this.focusIndexItem();\n                }\n            }\n            if (this.beforePopupOpen) {\n                this.renderPopup();\n            }\n        }\n    }\n    addNewItem(listData, newElement) {\n        if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {\n            let value = this.getItemData().value;\n            let isExist = listData.some((data) => {\n                return (((typeof data === 'string' || typeof data === 'number') && data === value) ||\n                    (getValue(this.fields.value, data) === value));\n            });\n            if (!isExist) {\n                this.addItem(this.itemData);\n            }\n        }\n    }\n    updateActionCompleteData(li, item, index) {\n        if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {\n            this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);\n            if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {\n                this.actionCompleteData.list.push(item);\n            }\n        }\n    }\n    focusIndexItem() {\n        let value = this.getItemData().value;\n        this.activeIndex = this.getIndexByValue(value);\n        let element = this.findListElement(this.list, 'li', 'data-value', value);\n        this.selectedLI = element;\n        this.activeItem(element);\n        this.removeFocus();\n    }\n    updateSelection() {\n        let selectedItem = this.list.querySelector('.' + dropDownBaseClasses.selected);\n        if (selectedItem) {\n            this.setProperties({ 'index': this.getIndexByValue(selectedItem.getAttribute('data-value')) });\n            this.activeIndex = this.index;\n        }\n        else {\n            this.removeFocus();\n            this.list.querySelector('.' + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);\n        }\n    }\n    removeFocus() {\n        let highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);\n        if (highlightedItem && highlightedItem.length) {\n            removeClass(highlightedItem, dropDownListClasses.focus);\n        }\n    }\n    ;\n    renderPopup() {\n        if (this.popupObj && document.body.contains(this.popupObj.element)) {\n            this.refreshPopup();\n            return;\n        }\n        let args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                let popupEle = (this.serverPopupEle) ? this.serverPopupEle : this.createElement('div', {\n                    id: this.element.id + '_popup', className: 'e-ddl e-popup ' + (this.cssClass != null ? this.cssClass : '')\n                });\n                let searchBox = this.setSearchBox(popupEle);\n                this.listHeight = formatUnit(this.popupHeight);\n                if (this.headerTemplate && !this.isServerBlazor) {\n                    this.setHeaderTemplate(popupEle);\n                }\n                append([this.list], popupEle);\n                if (this.footerTemplate && !this.isServerBlazor) {\n                    this.setFooterTemplate(popupEle);\n                }\n                if (this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer')) {\n                    popupEle.appendChild(popupEle.querySelector('.e-ddl-footer'));\n                }\n                document.body.appendChild(popupEle);\n                this.updateServerPopup(popupEle);\n                popupEle.style.visibility = 'hidden';\n                if (this.popupHeight !== 'auto') {\n                    this.searchBoxHeight = 0;\n                    if (!isNullOrUndefined(searchBox.container)) {\n                        this.searchBoxHeight = (searchBox.container.parentElement).getBoundingClientRect().height;\n                        this.listHeight = (parseInt(this.listHeight, 10) - (this.searchBoxHeight)).toString() + 'px';\n                    }\n                    if (this.headerTemplate || (this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-header'))) {\n                        this.header = this.header ? this.header : popupEle.querySelector('.e-ddl-header');\n                        let height = Math.round(this.header.getBoundingClientRect().height);\n                        this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';\n                    }\n                    if (this.footerTemplate || (this.isServerRendered && popupEle && popupEle.querySelector('.e-ddl-footer'))) {\n                        this.footer = this.footer ? this.footer : popupEle.querySelector('.e-ddl-footer');\n                        let height = Math.round(this.footer.getBoundingClientRect().height);\n                        this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + 'px';\n                    }\n                    this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n                    popupEle.style.maxHeight = formatUnit(this.popupHeight);\n                }\n                else {\n                    popupEle.style.height = 'auto';\n                }\n                let offsetValue = 0;\n                let left;\n                if (!isNullOrUndefined(this.selectedLI) && (!isNullOrUndefined(this.activeIndex) && this.activeIndex >= 0)) {\n                    this.setScrollPosition();\n                }\n                else {\n                    this.list.scrollTop = 0;\n                }\n                if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === 'dropdownlist' ||\n                    (this.isDropDownClick && this.getModuleName() === 'combobox')))) {\n                    offsetValue = this.getOffsetValue(popupEle);\n                    let firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n                    left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) -\n                        parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) +\n                        parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10));\n                }\n                this.getFocusElement();\n                this.createPopup(popupEle, offsetValue, left);\n                this.checkCollision(popupEle);\n                if (Browser.isDevice) {\n                    this.popupObj.element.classList.add(dropDownListClasses.device);\n                    if (this.getModuleName() === 'dropdownlist' || (this.getModuleName() === 'combobox'\n                        && !this.allowFiltering && this.isDropDownClick)) {\n                        this.popupObj.collision = { X: 'fit', Y: 'fit' };\n                    }\n                    if (this.isFilterLayout()) {\n                        this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);\n                        this.popupObj.position = { X: 0, Y: 0 };\n                        this.popupObj.dataBind();\n                        attributes(this.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });\n                        addClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n                        this.setSearchBoxPosition();\n                        this.backIconElement = searchBox.container.querySelector('.e-back-icon');\n                        this.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);\n                        EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n                        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n                    }\n                }\n                popupEle.style.visibility = 'visible';\n                addClass([popupEle], 'e-popup-close');\n                let scrollParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n                for (let element of scrollParentElements) {\n                    EventHandler.add(element, 'scroll', this.scrollHandler, this);\n                }\n                if (Browser.isDevice && this.isFilterLayout()) {\n                    EventHandler.add(this.list, 'scroll', this.listScroll, this);\n                }\n                attributes(this.targetElement(), { 'aria-expanded': 'true' });\n                let inputParent = this.isFiltering() ? this.filterInput.parentElement : this.inputWrapper.container;\n                addClass([inputParent], [dropDownListClasses.inputFocus]);\n                let animModel = { name: 'FadeIn', duration: 100 };\n                this.beforePopupOpen = true;\n                let popupInstance = (isBlazor() && this.isServerRendered) ? null : this.popupObj;\n                let eventArgs = { popup: popupInstance, cancel: false, animation: animModel };\n                this.trigger('open', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        this.serverBlazorUpdateSelection();\n                        this.bindServerScrollEvent();\n                        addClass([this.inputWrapper.container], [dropDownListClasses.iconAnimation]);\n                        this.popupObj.show(new Animation(eventArgs.animation), (this.zIndex === 1000) ? this.element : null);\n                    }\n                    else {\n                        this.beforePopupOpen = false;\n                        this.destroyPopup();\n                    }\n                });\n            }\n            else {\n                this.beforePopupOpen = false;\n            }\n        });\n    }\n    checkCollision(popupEle) {\n        if (!Browser.isDevice || (Browser.isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick))) {\n            let collision = isCollide(popupEle);\n            if (collision.length > 0) {\n                popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n            }\n            this.popupObj.resolveCollision();\n        }\n    }\n    serverBlazorUpdateSelection() {\n        if (this.isServerBlazor && (this.value !== null || this.index !== null || this.text !== null) ||\n            (this.getModuleName() !== 'dropdownlist' && !this.isTyped)) {\n            if (this.getModuleName() === 'dropdownlist') {\n                this.removeSelection();\n                this.removeFocus();\n                this.removeHover();\n                this.updateValues();\n            }\n            if (this.getModuleName() === 'combobox' && this.ulElement &&\n                this.findListElement(this.ulElement, 'li', 'data-value', this.value) && !this.isTyped) {\n                this.updateValues();\n            }\n            if (this.isServerBlazor && this.getModuleName() !== 'dropdownlist' &&\n                (this.text === '' || this.text === null) && this.ulElement) {\n                if (!this.ulElement.querySelector('li').classList.contains(dropDownBaseClasses.hover)) {\n                    addClass([this.ulElement.querySelector('li')], dropDownBaseClasses.hover);\n                }\n            }\n        }\n    }\n    bindServerScrollEvent() {\n        if (this.isServerBlazor && this.list) {\n            if ((this.fields.groupBy) && !this.isGroupChecking) {\n                EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n                EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n            }\n        }\n    }\n    updateServerPopup(popupEle) {\n        if (this.isServerBlazor) {\n            if (popupEle && popupEle.querySelector('li')) {\n                removeClass([popupEle.querySelector('.e-content')], ['e-nodata']);\n            }\n            this.initial = false;\n            popupEle.removeAttribute('style');\n        }\n    }\n    getOffsetValue(popupEle) {\n        let popupStyles = getComputedStyle(popupEle);\n        let borderTop = parseInt(popupStyles.borderTopWidth, 10);\n        let borderBottom = parseInt(popupStyles.borderBottomWidth, 10);\n        return this.setPopupPosition(borderTop + borderBottom);\n    }\n    createPopup(element, offsetValue, left) {\n        this.popupObj = new Popup(element, {\n            width: this.setWidth(), targetType: 'relative',\n            relateTo: this.inputWrapper.container, collision: { X: 'flip', Y: 'flip' }, offsetY: offsetValue,\n            enableRtl: this.enableRtl, offsetX: left, position: { X: 'left', Y: 'bottom' },\n            zIndex: this.zIndex,\n            close: () => {\n                if (!this.isDocumentClick) {\n                    this.focusDropDown();\n                }\n                let isResetItem = (this.getModuleName() === 'autocomplete') ? true : false;\n                this.DropDownBaseresetBlazorTemplates(isResetItem, isResetItem, true, true, false, true, true);\n                this.isNotSearchList = false;\n                this.isDocumentClick = false;\n                this.destroyPopup();\n                let formElement = closest(this.inputElement, 'form');\n                if (this.isFiltering() && formElement && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n                    this.isActive = true;\n                    this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n                }\n            },\n            open: () => {\n                EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                this.isPopupOpen = true;\n                let actionList = this.actionCompleteData && this.actionCompleteData.ulElement &&\n                    this.actionCompleteData.ulElement.querySelector('li');\n                let ulElement = this.list.querySelector('ul li');\n                if (this.isFiltering() && this.itemTemplate && (this.element.tagName === this.getNgDirective()) &&\n                    (actionList && ulElement && actionList.textContent !== ulElement.textContent)) {\n                    this.cloneElements();\n                }\n                if (this.isFilterLayout()) {\n                    removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n                    this.isFilterFocus = true;\n                    this.filterInput.focus();\n                    if (this.inputWrapper.clearButton) {\n                        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n                    }\n                }\n                this.activeStateChange();\n            },\n            targetExitViewport: () => {\n                if (!Browser.isDevice) {\n                    this.hidePopup();\n                }\n            }\n        });\n    }\n    isEmptyList() {\n        return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;\n    }\n    getFocusElement() {\n        // combo-box used this method\n    }\n    isFilterLayout() {\n        return this.getModuleName() === 'dropdownlist' && this.allowFiltering;\n    }\n    scrollHandler() {\n        if (Browser.isDevice && ((this.getModuleName() === 'dropdownlist' &&\n            !this.isFilterLayout()) || (this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick))) {\n            this.hidePopup();\n        }\n    }\n    setSearchBoxPosition() {\n        let searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n        this.popupObj.element.style.maxHeight = '100%';\n        this.popupObj.element.style.width = '100%';\n        this.list.style.maxHeight = (window.innerHeight - searchBoxHeight) + 'px';\n        this.list.style.height = (window.innerHeight - searchBoxHeight) + 'px';\n        let clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n        detach(this.filterInput);\n        clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n    }\n    setPopupPosition(border) {\n        let offsetValue;\n        let popupOffset = border;\n        let selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;\n        let firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n        let lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];\n        let liHeight = firstItem.getBoundingClientRect().height;\n        let listHeight = this.list.offsetHeight / 2;\n        let height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;\n        let lastItemOffsetValue = lastItem.offsetTop;\n        if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) &&\n            this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {\n            let count = this.list.offsetHeight / liHeight;\n            let paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);\n            offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;\n            this.list.scrollTop = selectedLI.offsetTop;\n        }\n        else if (height > listHeight) {\n            offsetValue = listHeight - liHeight / 2;\n            this.list.scrollTop = height - listHeight + liHeight / 2;\n        }\n        else {\n            offsetValue = height;\n        }\n        let inputHeight = this.inputWrapper.container.offsetHeight;\n        offsetValue = offsetValue + liHeight + popupOffset - ((liHeight - inputHeight) / 2);\n        return -offsetValue;\n    }\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            let inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === 'dropdownlist' ||\n            (this.isDropDownClick && this.getModuleName() === 'combobox')))) {\n            let firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n            width = (parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) -\n                parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) +\n                parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2) + 'px';\n        }\n        return width;\n    }\n    scrollBottom(isInitial) {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            let currentOffset = this.list.offsetHeight;\n            let nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            let nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n            nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;\n            let boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n            if (this.activeIndex === 0) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = nextOffset;\n            }\n        }\n    }\n    scrollTop() {\n        if (!isNullOrUndefined(this.selectedLI)) {\n            let nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;\n            let nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n            nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n            let boxRange = (this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop);\n            if (this.activeIndex === 0) {\n                this.list.scrollTop = 0;\n            }\n            else if (nextOffset < 0) {\n                this.list.scrollTop = this.list.scrollTop + nextOffset;\n            }\n            else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n                this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n                    this.fixedHeaderElement.offsetHeight : 0);\n            }\n        }\n    }\n    isEditTextBox() {\n        return false;\n    }\n    isFiltering() {\n        return this.allowFiltering;\n    }\n    isPopupButton() {\n        return true;\n    }\n    setScrollPosition(e) {\n        if (!isNullOrUndefined(e)) {\n            switch (e.action) {\n                case 'pageDown':\n                case 'down':\n                case 'end':\n                    this.scrollBottom();\n                    break;\n                default:\n                    this.scrollTop();\n                    break;\n            }\n        }\n        else {\n            this.scrollBottom(true);\n        }\n    }\n    clearText() {\n        this.filterInput.value = '';\n        this.searchLists(null);\n    }\n    listScroll() {\n        this.filterInput.blur();\n    }\n    setEleWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.inputWrapper.container.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.inputWrapper.container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    closePopup(delay) {\n        this.isTyped = false;\n        if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {\n            return;\n        }\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.isActive = false;\n        this.filterInputObj = null;\n        this.isDropDownClick = false;\n        this.preventAutoFill = false;\n        let scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n        for (let element of scrollableParentElements) {\n            EventHandler.remove(element, 'scroll', this.scrollHandler);\n        }\n        if (Browser.isDevice && this.isFilterLayout()) {\n            removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n            EventHandler.remove(this.list, 'scroll', this.listScroll);\n        }\n        if (this.isFilterLayout()) {\n            if (!Browser.isDevice) {\n                this.searchKeyModule.destroy();\n                if (this.clearIconElement) {\n                    EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n                }\n            }\n            if (this.backIconElement) {\n                EventHandler.remove(this.backIconElement, 'click', this.clickOnBackIcon);\n                EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n            }\n            EventHandler.remove(this.filterInput, 'input', this.onInput);\n            EventHandler.remove(this.filterInput, 'keyup', this.onFilterUp);\n            EventHandler.remove(this.filterInput, 'keydown', this.onFilterDown);\n            EventHandler.remove(this.filterInput, 'blur', this.onBlur);\n            EventHandler.remove(this.filterInput, 'paste', this.pasteHandler);\n            this.filterInput = null;\n        }\n        attributes(this.targetElement(), { 'aria-expanded': 'false', 'aria-activedescendant': null });\n        this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);\n        if (this.isFiltering()) {\n            this.actionCompleteData.isUpdated = false;\n        }\n        this.beforePopupOpen = false;\n        let animModel = {\n            name: 'FadeOut',\n            duration: 100,\n            delay: delay ? delay : 0\n        };\n        let popupInstance = (isBlazor() && this.isServerRendered) ? null : this.popupObj;\n        let eventArgs = { popup: popupInstance, cancel: false, animation: animModel };\n        this.trigger('close', eventArgs, (eventArgs) => {\n            if (!isNullOrUndefined(this.popupObj) &&\n                !isNullOrUndefined(this.popupObj.element.querySelector('.e-fixed-head'))) {\n                let fixedHeader = this.popupObj.element.querySelector('.e-fixed-head');\n                fixedHeader.parentNode.removeChild(fixedHeader);\n                this.fixedHeaderElement = null;\n            }\n            if (!eventArgs.cancel) {\n                if (this.getModuleName() === 'autocomplete' && !this.isServerBlazor) {\n                    this.rippleFun();\n                }\n                if (this.isPopupOpen) {\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                }\n                else {\n                    this.destroyPopup();\n                }\n            }\n        });\n    }\n    destroyPopup() {\n        let popupHolderEle = document.querySelector('#' + this.element.id + '_popup_holder');\n        if (this.isServerBlazor && this.serverPopupEle && popupHolderEle) {\n            popupHolderEle.appendChild(this.serverPopupEle);\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('OnServerClosePopup');\n        }\n        this.isPopupOpen = false;\n        this.isFilterFocus = false;\n        this.popupObj.destroy();\n        detach(this.popupObj.element);\n    }\n    clickOnBackIcon() {\n        this.hidePopup();\n        this.focusIn();\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    // tslint:disable-next-line\n    render() {\n        if (this.isServerBlazor) {\n            this.inputElement = this.element;\n            this.inputWrapper = { container: this.element.parentElement };\n            this.hiddenElement = this.inputWrapper.container.querySelector('select');\n            this.inputWrapper.buttons = [this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon')];\n            if (this.showClearButton) {\n                this.inputWrapper.clearButton = this.inputWrapper.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n            }\n            if (this.floatLabelType === 'Auto') {\n                Input.wireFloatingEvents(this.element);\n            }\n            Input.bindInitialEvent({\n                element: this.element,\n                buttons: null, customTag: null,\n                floatLabelType: this.floatLabelType,\n                properties: this.properties\n            });\n            this.setFields();\n            this.wireEvent();\n            this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n            if (!this.enabled) {\n                this.targetElement().tabIndex = -1;\n            }\n            if (this.element.hasAttribute('autofocus')) {\n                this.focusIn();\n            }\n            this.initial = false;\n        }\n        else {\n            if (this.element.tagName === 'INPUT') {\n                this.inputElement = this.element;\n                if (isNullOrUndefined(this.inputElement.getAttribute('role'))) {\n                    this.inputElement.setAttribute('role', 'textbox');\n                }\n                if (isNullOrUndefined(this.inputElement.getAttribute('type'))) {\n                    this.inputElement.setAttribute('type', 'text');\n                }\n            }\n            else {\n                this.inputElement = this.createElement('input', { attrs: { role: 'textbox', type: 'text' } });\n                if (this.element.tagName !== this.getNgDirective()) {\n                    this.element.style.display = 'none';\n                }\n                this.element.parentElement.insertBefore(this.inputElement, this.element);\n                this.preventTabIndex(this.inputElement);\n            }\n            let updatedCssClassValues = this.cssClass;\n            if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n                updatedCssClassValues = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n            }\n            this.inputWrapper = Input.createInput({\n                element: this.inputElement,\n                buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,\n                floatLabelType: this.floatLabelType,\n                properties: {\n                    readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,\n                    placeholder: this.placeholder,\n                    cssClass: updatedCssClassValues,\n                    enabled: this.enabled,\n                    enableRtl: this.enableRtl,\n                    showClearButton: this.showClearButton\n                },\n            }, this.createElement);\n            if (this.element.tagName === this.getNgDirective()) {\n                this.element.appendChild(this.inputWrapper.container);\n            }\n            else {\n                this.inputElement.parentElement.insertBefore(this.element, this.inputElement);\n            }\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'tabindex': '-1', 'class': dropDownListClasses.hiddenElement }\n            });\n            prepend([this.hiddenElement], this.inputWrapper.container);\n            this.validationAttribute(this.element, this.hiddenElement);\n            this.setFields();\n            this.inputWrapper.container.style.width = formatUnit(this.width);\n            this.inputWrapper.container.classList.add('e-ddl');\n            this.wireEvent();\n            this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n            this.element.removeAttribute('tabindex');\n            let id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n            this.element.id = id;\n            this.hiddenElement.id = id + '_hidden';\n            this.targetElement().setAttribute('tabindex', this.tabIndex);\n            attributes(this.targetElement(), this.getAriaAttributes());\n            this.updateDataAttribute(this.htmlAttributes);\n            this.setHTMLAttributes();\n            if (this.value !== null || this.activeIndex !== null || this.text !== null) {\n                this.initValue();\n            }\n            else if (this.element.tagName === 'SELECT' && this.element.options[0]) {\n                let selectElement = this.element;\n                this.value = selectElement.options[selectElement.selectedIndex].value;\n                this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;\n                this.initValue();\n            }\n            this.preventTabIndex(this.element);\n            if (!this.enabled) {\n                this.targetElement().tabIndex = -1;\n            }\n            this.initial = false;\n            this.element.style.opacity = '';\n            this.inputElement.onselect = (e) => { e.stopImmediatePropagation(); };\n            this.inputElement.onchange = (e) => { e.stopImmediatePropagation(); };\n            if (this.element.hasAttribute('autofocus')) {\n                this.focusIn();\n            }\n            if (!isNullOrUndefined(this.text)) {\n                this.inputElement.setAttribute('value', this.text);\n            }\n        }\n        this.renderComplete();\n    }\n    ;\n    setFooterTemplate(popupEle) {\n        let compiledString;\n        if (this.footer) {\n            this.footer.innerHTML = '';\n        }\n        else {\n            this.footer = this.createElement('div');\n            addClass([this.footer], dropDownListClasses.footer);\n        }\n        let footercheck = this.dropdownCompiler(this.footerTemplate);\n        if (footercheck) {\n            compiledString = compile(document.querySelector(this.footerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.footerTemplate);\n        }\n        for (let item of compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate)) {\n            this.footer.appendChild(item);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);\n        append([this.footer], popupEle);\n    }\n    setHeaderTemplate(popupEle) {\n        let compiledString;\n        if (this.header) {\n            this.header.innerHTML = '';\n        }\n        else {\n            this.header = this.createElement('div');\n            addClass([this.header], dropDownListClasses.header);\n        }\n        let headercheck = this.dropdownCompiler(this.headerTemplate);\n        if (headercheck) {\n            compiledString = compile(document.querySelector(this.headerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.headerTemplate);\n        }\n        for (let item of compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate)) {\n            this.header.appendChild(item);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);\n        let contentEle = popupEle.querySelector('div.e-content');\n        popupEle.insertBefore(this.header, contentEle);\n    }\n    setOldText(text) {\n        this.text = text;\n    }\n    setOldValue(value) {\n        this.value = value;\n    }\n    refreshPopup() {\n        if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) &&\n            ((this.allowFiltering && !(Browser.isDevice && this.isFilterLayout())) || this.getModuleName() === 'autocomplete')) {\n            removeClass([this.popupObj.element], 'e-popup-close');\n            this.popupObj.refreshPosition(this.inputWrapper.container);\n            this.popupObj.resolveCollision();\n        }\n    }\n    checkDatasource(newProp) {\n        if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering) {\n            this.list = null;\n            this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };\n        }\n        let isChangeValue = Object.keys(newProp).indexOf('value') !== -1 && isNullOrUndefined(newProp.value);\n        let isChangeText = Object.keys(newProp).indexOf('text') !== -1 && isNullOrUndefined(newProp.text);\n        if (this.getModuleName() !== 'autocomplete' && this.allowFiltering && (isChangeValue || isChangeText)) {\n            this.itemData = null;\n        }\n    }\n    updateDataSource(props) {\n        if (this.inputElement.value !== '' || (!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource)\n            || (!(props.dataSource instanceof DataManager) && props.dataSource.length === 0)))) {\n            this.clearAll(null, props);\n        }\n        if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource)\n            || (!(props.dataSource instanceof DataManager) && props.dataSource.length === 0))) || !(props.dataSource === [])) {\n            this.resetList(this.dataSource);\n        }\n        if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {\n            this.checkCustomValue();\n        }\n    }\n    checkCustomValue() {\n        this.itemData = this.getDataByValue(this.value);\n        let dataItem = this.getItemData();\n        this.setProperties({ 'value': dataItem.value, 'text': dataItem.text });\n    }\n    updateInputFields() {\n        if (this.getModuleName() === 'dropdownlist') {\n            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'dropdownlist') {\n            if (!this.isServerBlazor) {\n                this.checkDatasource(newProp);\n                this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n            }\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'dataSource':\n                    break;\n                case 'htmlAttributes':\n                    this.setHTMLAttributes();\n                    break;\n                case 'width':\n                    this.setEleWidth(newProp.width);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.inputElement);\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.filterInput) {\n                        Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n                    }\n                    break;\n                case 'readonly':\n                    if (this.getModuleName() !== 'dropdownlist') {\n                        Input.setReadonly(newProp.readonly, this.inputElement);\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'text':\n                    if (newProp.text === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender) {\n                        let li = this.getElementByText(newProp.text);\n                        if (!this.checkValidLi(li)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.text, oldProp.text, 'text');\n                            }\n                            else if (!this.isServerBlazor) {\n                                this.setOldText(oldProp.text);\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'value':\n                    if (newProp.value === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    this.notify('beforeValueChange', { newProp: newProp }); // gird component value type change\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender) {\n                        let item = this.getElementByValue(newProp.value);\n                        if (!this.checkValidLi(item)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.value, oldProp.value, 'value');\n                            }\n                            else if (!this.isServerBlazor) {\n                                this.setOldValue(oldProp.value);\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'index':\n                    if (newProp.index === null) {\n                        this.clearAll();\n                        break;\n                    }\n                    if (!this.list) {\n                        if (this.dataSource instanceof DataManager) {\n                            this.initRemoteRender = true;\n                        }\n                        this.renderList();\n                    }\n                    if (!this.initRemoteRender && this.liCollections) {\n                        let element = this.liCollections[newProp.index];\n                        if (!this.checkValidLi(element)) {\n                            if (this.liCollections && this.liCollections.length === 100 &&\n                                this.getModuleName() === 'autocomplete' && this.listData.length > 100) {\n                                this.setSelectionData(newProp.index, oldProp.index, 'index');\n                            }\n                            else if (!this.isServerBlazor) {\n                                this.index = oldProp.index;\n                            }\n                        }\n                        this.updateInputFields();\n                    }\n                    break;\n                case 'footerTemplate':\n                    if (this.popupObj) {\n                        this.setFooterTemplate(this.popupObj.element);\n                    }\n                    break;\n                case 'headerTemplate':\n                    if (this.popupObj) {\n                        this.setHeaderTemplate(this.popupObj.element);\n                    }\n                    break;\n                case 'valueTemplate':\n                    if (!isNullOrUndefined(this.itemData) && this.valueTemplate != null) {\n                        this.setValueTemplate();\n                    }\n                    break;\n                case 'allowFiltering':\n                    if (this.allowFiltering) {\n                        this.actionCompleteData = { ulElement: this.ulElement,\n                            list: this.listData, isUpdated: true };\n                        this.updateSelectElementData(this.allowFiltering);\n                    }\n                    break;\n                case 'floatLabelType':\n                    Input.removeFloating(this.inputWrapper);\n                    Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);\n                    break;\n                case 'showClearButton':\n                    Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement);\n                    this.bindClearEvent();\n                    break;\n                default:\n                    let ddlProps;\n                    ddlProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(ddlProps.newProperty, ddlProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    checkValidLi(element) {\n        if (this.isValidLI(element)) {\n            this.setSelection(element, null);\n            return true;\n        }\n        return false;\n    }\n    setSelectionData(newProp, oldProp, prop) {\n        let li;\n        this.updateListValues = () => {\n            if (prop === 'text') {\n                li = this.getElementByText(newProp);\n                if (!this.checkValidLi(li)) {\n                    this.setOldText(oldProp);\n                }\n            }\n            else if (prop === 'value') {\n                li = this.getElementByValue(newProp);\n                if (!this.checkValidLi(li)) {\n                    this.setOldValue(oldProp);\n                }\n            }\n            else if (prop === 'index') {\n                li = this.liCollections[newProp];\n                if (!this.checkValidLi(li)) {\n                    this.index = oldProp;\n                }\n            }\n        };\n    }\n    setCssClass(newClass, oldClass) {\n        if (!isNullOrUndefined(oldClass)) {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(newClass)) {\n            newClass = (newClass.replace(/\\s+/g, ' ')).trim();\n        }\n        Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);\n        if (this.popupObj) {\n            Input.setCssClass(newClass, [this.popupObj.element], oldClass);\n        }\n    }\n    /**\n     * Return the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'dropdownlist';\n    }\n    /**\n     * Opens the popup that displays the list of items.\n     * @returns void.\n     */\n    showPopup() {\n        if (!this.enabled) {\n            return;\n        }\n        if (isBlazor() && this.itemTemplate) {\n            this.DropDownBaseupdateBlazorTemplates(true, false, false, false);\n        }\n        if (this.beforePopupOpen) {\n            this.refreshPopup();\n            return;\n        }\n        this.beforePopupOpen = true;\n        if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n            this.isActive = true;\n            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n        }\n        else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) ||\n            this.list.querySelectorAll('.' + dropDownBaseClasses.li).length <= 0)) {\n            this.renderList();\n        }\n        else if (this.isFiltering() && this.isServerBlazor) {\n            this.renderList();\n        }\n        if (!this.isServerBlazor) {\n            this.invokeRenderPopup();\n        }\n        let popupHolderEle = !this.isFiltering() || document.querySelector('#' + this.element.id + '_popup_holder');\n        let isDropdownComp = this.getModuleName() === 'dropdownlist' || !this.isFiltering();\n        if (this.isServerBlazor && popupHolderEle && !isNullOrUndefined(this.list) && isDropdownComp) {\n            this.invokeRenderPopup();\n        }\n    }\n    invokeRenderPopup() {\n        if (Browser.isDevice && this.isFilterLayout()) {\n            let proxy = this;\n            window.onpopstate = () => {\n                proxy.hidePopup();\n            };\n            history.pushState({}, '');\n        }\n        if (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData)) {\n            this.renderPopup();\n        }\n        attributes(this.targetElement(), { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n    }\n    clientRenderPopup(data, popupEle) {\n        if (popupEle) {\n            this.serverPopupEle = popupEle;\n            this.list = popupEle.querySelector('.e-dropdownbase.e-content') ?\n                popupEle.querySelector('.e-dropdownbase.e-content') : this.list;\n            this.ulElement = this.list.querySelector('ul');\n            if (isNullOrUndefined(this.ulElement) && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n                addClass([this.list], [dropDownBaseClasses.noData]);\n            }\n            this.liCollections = this.ulElement ?\n                this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li) : [];\n            this.listData = data;\n            if (this.getModuleName() === 'autocomplete' && this.liCollections.length > 0) {\n                this.renderHightSearch();\n            }\n            this.initRemoteRender = false;\n            if (!this.isPopupOpen) {\n                this.serverBlazorUpdateSelection();\n            }\n            this.unWireListEvents();\n            this.wireListEvents();\n            if (this.isServerIncrementalSearch && this.searchKeyEvent) {\n                this.isServerIncrementalSearch = false;\n                this.initial = false;\n                this.onServerIncrementalSearch(this.searchKeyEvent);\n            }\n            if (this.isServerNavigation && this.searchKeyEvent) {\n                if (this.searchKeyEvent.action === 'down' || this.searchKeyEvent.action === 'up') {\n                    this.isServerNavigation = false;\n                    this.updateUpDownAction(this.searchKeyEvent);\n                }\n                else if (this.searchKeyEvent.action === 'home' || this.searchKeyEvent.action === 'end') {\n                    this.isServerNavigation = false;\n                    this.updateHomeEndAction(this.searchKeyEvent);\n                }\n            }\n            if (this.beforePopupOpen) {\n                this.invokeRenderPopup();\n            }\n            if (this.getModuleName() !== 'dropdownlist') {\n                this.onActionComplete(this.ulElement, this.listData);\n            }\n        }\n        else if (data != null && this.listData !== data) {\n            this.listData = data;\n            this.initRemoteRender = false;\n        }\n    }\n    renderHightSearch() {\n        // update high light search \n    }\n    updateclientItemData(data) {\n        this.listData = data;\n    }\n    initValueItemData(selectData) {\n        this.itemData = selectData;\n        this.previousValue = this.value;\n        this.initial = false;\n    }\n    serverUpdateListElement(data, popupEle) {\n        this.listData = data;\n        if (this.ulElement) {\n            this.liCollections = this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n        }\n    }\n    /**\n     * Hides the popup if it is in an open state.\n     * @returns void.\n     */\n    hidePopup(e) {\n        let isHeader = (this.headerTemplate) ? true : false;\n        let isFooter = (this.headerTemplate) ? true : false;\n        this.DropDownBaseresetBlazorTemplates(false, false, false, false, false, isHeader, isFooter);\n        if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {\n            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.isEscapeKey = false;\n            if (!isNullOrUndefined(this.index)) {\n                let element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);\n                this.selectedLI = this.liCollections[this.index] || element;\n                if (this.selectedLI) {\n                    this.updateSelectedItem(this.selectedLI, null, true);\n                    if (this.valueTemplate && this.itemData !== null) {\n                        this.setValueTemplate();\n                    }\n                }\n            }\n            else {\n                this.resetSelection();\n            }\n        }\n        this.closePopup();\n        let dataItem = this.getItemData();\n        let isSelectVal = this.isServerBlazor ? !isNullOrUndefined(this.value) : !isNullOrUndefined(this.selectedLI);\n        if (this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom ||\n            isSelectVal && this.inputElement.value !== dataItem.text)) {\n            this.isSelectCustom = false;\n            this.clearAll(e);\n        }\n    }\n    /**\n     * Sets the focus on the component for interaction.\n     * @returns void.\n     */\n    focusIn(e) {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.targetElement().classList.contains(dropDownListClasses.disable)) {\n            return;\n        }\n        let isFocused = false;\n        if (this.preventFocus && Browser.isDevice) {\n            this.inputWrapper.container.tabIndex = 1;\n            this.inputWrapper.container.focus();\n            this.preventFocus = false;\n            isFocused = true;\n        }\n        if (!isFocused) {\n            this.targetElement().focus();\n        }\n        addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n        this.onFocus(e);\n    }\n    /**\n     * Moves the focus from the component if the component is already focused.\n     * @returns void.\n     */\n    focusOut(e) {\n        if (!this.enabled) {\n            return;\n        }\n        this.isTyped = true;\n        this.hidePopup(e);\n        this.targetElement().blur();\n        removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.isActive = false;\n        if (!this.isServerBlazor || (this.popupObj && document.body.contains(this.popupObj.element))) {\n            this.hidePopup();\n        }\n        this.unWireEvent();\n        if (this.list) {\n            this.unWireListEvents();\n            if (this.isServerBlazor) {\n                if ((this.fields.groupBy) && !this.isGroupChecking) {\n                    EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n                }\n            }\n        }\n        if (!this.isServerBlazor) {\n            if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {\n                return;\n            }\n            let attrArray = ['readonly', 'aria-disabled', 'aria-placeholder',\n                'placeholder', 'aria-owns', 'aria-labelledby', 'aria-haspopup', 'aria-expanded',\n                'aria-activedescendant', 'autocomplete', 'aria-readonly', 'autocorrect',\n                'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];\n            for (let i = 0; i < attrArray.length; i++) {\n                this.inputElement.removeAttribute(attrArray[i]);\n            }\n            this.inputElement.setAttribute('tabindex', this.tabIndex);\n            this.inputElement.classList.remove('e-input');\n            Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n            this.element.style.display = 'block';\n            if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {\n                detach(this.inputWrapper.container);\n            }\n            else {\n                this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);\n                detach(this.inputWrapper.container);\n            }\n            super.destroy();\n        }\n    }\n    ;\n    /**\n     * Gets all the list items bound on this component.\n     * @returns Element[].\n     */\n    getItems() {\n        if (!this.list) {\n            if (this.dataSource instanceof DataManager) {\n                this.initRemoteRender = true;\n            }\n            this.renderList();\n        }\n        return this.ulElement ? super.getItems() : [];\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns Object.\n     * @blazorType object\n     */\n    getDataByValue(value) {\n        return super.getDataByValue(value);\n    }\n    /**\n     * Allows you to clear the selected values from the component.\n     * @returns void.\n     */\n    clear() {\n        this.value = null;\n    }\n};\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property('100%')\n], DropDownList.prototype, \"width\", void 0);\n__decorate$1([\n    Property('300px')\n], DropDownList.prototype, \"popupHeight\", void 0);\n__decorate$1([\n    Property('100%')\n], DropDownList.prototype, \"popupWidth\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"placeholder\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$1([\n    Property({})\n], DropDownList.prototype, \"htmlAttributes\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"query\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"valueTemplate\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"headerTemplate\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"footerTemplate\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownList.prototype, \"allowFiltering\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownList.prototype, \"readonly\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"text\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"value\", void 0);\n__decorate$1([\n    Property(null)\n], DropDownList.prototype, \"index\", void 0);\n__decorate$1([\n    Property('Never')\n], DropDownList.prototype, \"floatLabelType\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownList.prototype, \"showClearButton\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"filtering\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"beforeOpen\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"open\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"close\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"blur\", void 0);\n__decorate$1([\n    Event()\n], DropDownList.prototype, \"focus\", void 0);\nDropDownList = __decorate$1([\n    NotifyPropertyChanges\n], DropDownList);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst RTL = 'e-rtl';\nconst DROPDOWNTREE = 'e-ddt';\nconst HIDDENELEMENT = 'e-ddt-hidden';\nconst DROPDOWNICON = 'e-input-group-icon e-ddt-icon e-icons';\nconst SHOW_CHIP = 'e-show-chip';\nconst SHOW_CLEAR = 'e-show-clear';\nconst SHOW_DD_ICON = 'e-show-dd-icon';\nconst CHIP_INPUT = 'e-chip-input';\nconst INPUTFOCUS = 'e-input-focus';\nconst INPUTGROUP = 'e-input-group';\nconst ICONANIMATION = 'e-icon-anim';\nconst CLOSEICON_CLASS = 'e-clear-icon e-icons';\nconst CHIP_WRAPPER = 'e-chips-wrapper';\nconst CHIP_COLLECTION = 'e-chips-collection';\nconst CHIP = 'e-chips';\nconst CHIP_CONTENT = 'e-chipcontent';\nconst CHIP_CLOSE = 'e-chips-close';\nconst HIDEICON = 'e-icon-hide';\nconst POPUP_CLASS = 'e-ddt e-popup';\nconst PARENTITEM = 'e-list-parent';\nconst CONTENT = 'e-popup-content';\nconst DROPDOWN = 'e-dropdown';\nconst DISABLED = 'e-disabled';\nconst ICONS = 'e-icons';\nconst CHECKALLPARENT = 'e-selectall-parent';\nconst CHECKALLHIDE = 'e-hide-selectall';\nconst BIGGER = 'e-bigger';\nconst SMALL = 'e-small';\nconst ALLTEXT = 'e-all-text';\nconst CHECKBOXFRAME = 'e-frame';\nconst CHECK = 'e-check';\nconst CHECKBOXWRAP = 'e-checkbox-wrapper';\nconst FILTERWRAP = 'e-filter-wrap';\nconst DDTICON = 'e-ddt-icon';\nconst FOOTER = 'e-ddt-footer';\nconst HEADER = 'e-ddt-header';\nconst NODATACONTAINER = 'e-ddt-nodata';\nconst NODATA = 'e-no-data';\nconst HEADERTEMPLATE = 'HeaderTemplate';\nconst FOOTERTEMPLATE = 'FooterTemplate';\nconst NORECORDSTEMPLATE = 'NoRecordsTemplate';\nconst ACTIONFAILURETEMPLATE = 'ActionFailureTemplate';\nconst REMAIN_WRAPPER = 'e-remain';\nconst OVERFLOW_VIEW = 'e-overflow';\nconst SHOW_TEXT = 'e-show-text';\nconst TOTAL_COUNT_WRAPPER = 'e-total-count';\nconst REMAIN_COUNT = 'e-wrap-count';\nclass Fields extends ChildProperty {\n}\n__decorate$2([\n    Property('child')\n], Fields.prototype, \"child\", void 0);\n__decorate$2([\n    Property([])\n], Fields.prototype, \"dataSource\", void 0);\n__decorate$2([\n    Property('expanded')\n], Fields.prototype, \"expanded\", void 0);\n__decorate$2([\n    Property('hasChildren')\n], Fields.prototype, \"hasChildren\", void 0);\n__decorate$2([\n    Property('htmlAttributes')\n], Fields.prototype, \"htmlAttributes\", void 0);\n__decorate$2([\n    Property('iconCss')\n], Fields.prototype, \"iconCss\", void 0);\n__decorate$2([\n    Property('imageUrl')\n], Fields.prototype, \"imageUrl\", void 0);\n__decorate$2([\n    Property('parentValue')\n], Fields.prototype, \"parentValue\", void 0);\n__decorate$2([\n    Property(null)\n], Fields.prototype, \"query\", void 0);\n__decorate$2([\n    Property('selected')\n], Fields.prototype, \"selected\", void 0);\n__decorate$2([\n    Property(null)\n], Fields.prototype, \"tableName\", void 0);\n__decorate$2([\n    Property('text')\n], Fields.prototype, \"text\", void 0);\n__decorate$2([\n    Property('tooltip')\n], Fields.prototype, \"tooltip\", void 0);\n__decorate$2([\n    Property('value')\n], Fields.prototype, \"value\", void 0);\nclass TreeSettings extends ChildProperty {\n}\n__decorate$2([\n    Property(false)\n], TreeSettings.prototype, \"autoCheck\", void 0);\n__decorate$2([\n    Property('Auto')\n], TreeSettings.prototype, \"expandOn\", void 0);\n__decorate$2([\n    Property(false)\n], TreeSettings.prototype, \"loadOnDemand\", void 0);\n/**\n * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.\n * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,\n * UI customization, accessibility, and preselected values.\n * ```html\n *  <input type=\"text\" id=\"tree\"></input>\n * ```\n * ```typescript\n *  let ddtObj: DropDownTree = new DropDownTree();\n *  ddtObj.appendTo(\"#tree\");\n * ```\n */\nlet DropDownTree = class DropDownTree extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.filterTimer = null;\n        this.isFilteredData = false;\n        this.isFilterRestore = false;\n        this.selectedData = [];\n        this.filterDelayTime = 300;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @hidden\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    getLocaleName() {\n        return 'drop-down-tree';\n    }\n    /**\n     * Initialize the event handler.\n     * @private\n     */\n    preRender() {\n        this.inputFocus = false;\n        this.isPopupOpen = false;\n        this.isFirstRender = true;\n        this.isInitialized = false;\n        this.currentText = null;\n        this.currentValue = null;\n        this.oldValue = null;\n        this.removeValue = false;\n        this.selectedText = [];\n        this.treeItems = [];\n        this.dataValue = null;\n        this.isNodeSelected = false;\n        this.isDynamicChange = false;\n        this.clearIconWidth = 0;\n        this.isBlazorPlatForm = isBlazor();\n        this.headerTemplateId = `${this.element.id}${HEADERTEMPLATE}`;\n        this.footerTemplateId = `${this.element.id}${FOOTERTEMPLATE}`;\n        this.actionFailureTemplateId = `${this.element.id}${ACTIONFAILURETEMPLATE}`;\n        this.noRecordsTemplateId = `${this.element.id}${NORECORDSTEMPLATE}`;\n        this.keyConfigs = {\n            escape: 'escape',\n            altUp: 'alt+uparrow',\n            altDown: 'alt+downarrow',\n            tab: 'tab',\n            shiftTab: 'shift+tab',\n            end: 'end',\n            enter: 'enter',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n            ctrlA: 'ctrl+A'\n        };\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.ensureAutoCheck();\n        if (this.element.tagName === 'INPUT') {\n            this.inputEle = this.element;\n            if (isNullOrUndefined(this.inputEle.getAttribute('role'))) {\n                this.inputEle.setAttribute('role', 'textbox');\n            }\n            if (isNullOrUndefined(this.inputEle.getAttribute('type'))) {\n                this.inputEle.setAttribute('type', 'text');\n            }\n        }\n        else {\n            this.inputEle = this.createElement('input', { attrs: { role: 'textbox', type: 'text' } });\n            this.element.parentElement.insertBefore(this.inputEle, this.element);\n        }\n        this.inputObj = Input.createInput({\n            element: this.inputEle,\n            floatLabelType: this.floatLabelType,\n            buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,\n            properties: {\n                readonly: true,\n                placeholder: this.placeholder,\n                enabled: this.enabled,\n                cssClass: this.cssClass,\n                enableRtl: this.enableRtl,\n            },\n        }, this.createElement);\n        this.inputWrapper = this.inputObj.container;\n        if (!this.inputWrapper.classList.contains(INPUTGROUP)) {\n            this.inputWrapper.classList.add(INPUTGROUP);\n        }\n        if (this.showDropDownIcon) {\n            this.inputWrapper.classList.add(SHOW_DD_ICON);\n        }\n        if (this.element.tagName === this.getDirective()) {\n            this.element.appendChild(this.inputWrapper);\n        }\n        this.createHiddenElement();\n        this.createClearIcon();\n        this.inputWrapper.classList.add(DROPDOWNTREE);\n        this.setElementWidth(this.width);\n        this.setAttributes();\n        this.updateDataAttribute();\n        this.setHTMLAttributes();\n        this.popupDiv = this.createElement('div', { className: CONTENT, attrs: { 'tabindex': '0' } });\n        this.popupDiv.classList.add(DROPDOWN);\n        this.tree = this.createElement('div', { id: this.element.id + '_tree', });\n        this.popupDiv.appendChild(this.tree);\n        document.body.appendChild(this.popupDiv);\n        this.wireTreeEvents();\n        this.popupDiv.style.display = 'none';\n        this.renderTree();\n        this.isRemoteData = this.fields.dataSource instanceof DataManager;\n        if (this.allowMultiSelection || this.showCheckBox) {\n            if (this.mode !== 'Delimiter') {\n                this.createChip();\n            }\n            if (!this.wrapText) {\n                this.overFlowWrapper = this.createElement('span', { className: OVERFLOW_VIEW + ' ' + HIDEICON });\n                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n                if (this.mode !== 'Box') {\n                    addClass([this.overFlowWrapper], SHOW_TEXT);\n                }\n            }\n        }\n        if (!this.isRemoteData) {\n            this.setTreeValue();\n            this.setTreeText();\n            this.updateHiddenValue();\n            this.setSelectedValue();\n            if (!this.wrapText) {\n                this.updateView();\n            }\n        }\n        this.wireEvents();\n        let firstUl = select('.' + PARENTITEM, this.treeObj.element);\n        if (firstUl && firstUl.getAttribute('aria-multiselectable')) {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n        this.oldValue = this.value;\n        this.isInitialized = true;\n        this.renderComplete();\n    }\n    ensureAutoCheck() {\n        if (this.allowFiltering && this.treeSettings.autoCheck) {\n            this.setProperties({ treeSettings: { autoCheck: false } }, true);\n        }\n    }\n    hideCheckAll(flag) {\n        let checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector('.' + CHECKALLPARENT) : null;\n        if (!isNullOrUndefined(checkAllEle)) {\n            if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {\n                addClass([checkAllEle], CHECKALLHIDE);\n            }\n            else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {\n                removeClass([checkAllEle], CHECKALLHIDE);\n            }\n        }\n    }\n    renderFilter() {\n        this.filterContainer = this.createElement('div', {\n            id: this.element.id + '_filter_wrap',\n            className: FILTERWRAP\n        });\n        let filterInput = this.createElement('input', {\n            id: this.element.id + '_filter',\n            attrs: { autocomplete: 'off', 'aria-label': this.filterBarPlaceholder }\n        });\n        this.filterContainer.appendChild(filterInput);\n        prepend([this.filterContainer], this.popupEle);\n        this.filterObj = new TextBox({\n            value: '',\n            showClearButton: true,\n            placeholder: this.filterBarPlaceholder,\n            input: this.filterChangeHandler.bind(this),\n        });\n        this.filterObj.appendTo('#' + this.element.id + '_filter');\n    }\n    filterChangeHandler(args) {\n        if (!isNullOrUndefined(args.value)) {\n            window.clearTimeout(this.filterTimer);\n            this.filterTimer = window.setTimeout(() => { this.filterHandler(args.value, args.event); }, this.filterDelayTime);\n        }\n    }\n    filterHandler(value, event) {\n        if (!this.isFilteredData) {\n            this.treeData = this.treeObj.getTreeData();\n        }\n        let filterFields = this.cloneFields(this.fields);\n        let args = {\n            cancel: false,\n            preventDefaultAction: false,\n            event: event,\n            text: value,\n            fields: filterFields\n        };\n        this.trigger('filtering', args, (args) => {\n            if (!args.cancel) {\n                let flag = false;\n                let fields;\n                this.isFilteredData = true;\n                if (value === '') {\n                    this.isFilteredData = false;\n                    this.isFilterRestore = true;\n                    fields = this.cloneFields(this.fields);\n                }\n                else if (args.preventDefaultAction) {\n                    fields = args.fields;\n                }\n                else {\n                    if (this.treeDataType === 1) {\n                        fields = this.selfReferencefilter(value, args.fields);\n                    }\n                    else {\n                        if (this.fields.dataSource instanceof DataManager) {\n                            flag = true;\n                        }\n                        else {\n                            fields = this.nestedFilter(value, args.fields);\n                        }\n                    }\n                }\n                this.hideCheckAll(this.isFilteredData);\n                if (flag) {\n                    return;\n                }\n                this.treeObj.fields = this.getTreeFields(fields);\n                this.treeObj.dataBind();\n            }\n        });\n    }\n    nestedFilter(value, filteredFields) {\n        let matchedDataSource = [];\n        for (let i = 0; i < this.treeData.length; i++) {\n            let filteredChild = this.nestedChildFilter(value, this.treeData[i]);\n            if (!isNullOrUndefined(filteredChild)) {\n                matchedDataSource.push(filteredChild);\n            }\n        }\n        filteredFields.dataSource = matchedDataSource;\n        return filteredFields;\n    }\n    nestedChildFilter(value, node) {\n        let children = node[this.fields.child];\n        if (isNullOrUndefined(children)) {\n            return (this.isMatchedNode(value, node)) ? node : null;\n        }\n        else {\n            let matchedChildren = [];\n            for (let i = 0; i < children.length; i++) {\n                let filteredChild = this.nestedChildFilter(value, children[i]);\n                if (!isNullOrUndefined(filteredChild)) {\n                    matchedChildren.push(filteredChild);\n                }\n            }\n            if (matchedChildren.length !== 0) {\n                node[this.fields.child] = matchedChildren;\n                return node;\n            }\n            else {\n                node[this.fields.child] = null;\n                return (this.isMatchedNode(value, node)) ? node : null;\n            }\n        }\n    }\n    selfReferencefilter(value, filteredFields) {\n        let matchedData = [];\n        let matchedDataSource = [];\n        for (let i = 0; i < this.treeData.length; i++) {\n            if (this.isMatchedNode(value, this.treeData[i])) {\n                matchedData.push(this.treeData[i]);\n            }\n        }\n        for (let i = 0; i < matchedData.length; i++) {\n            if (matchedDataSource.indexOf(matchedData[i]) === -1) {\n                matchedDataSource.push(matchedData[i]);\n                let parentId = matchedData[i][this.fields.parentValue];\n                while (!isNullOrUndefined(parentId)) {\n                    let parent = null;\n                    for (let j = 0; j < this.treeData.length; j++) {\n                        let value = this.treeData[j][this.fields.value];\n                        if (!isNullOrUndefined(value) && (value === parentId)) {\n                            parent = this.treeData[j];\n                            break;\n                        }\n                    }\n                    if (!isNullOrUndefined(parent) && (matchedDataSource.indexOf(parent) === -1)) {\n                        matchedDataSource.push(parent);\n                        parentId = parent[this.fields.parentValue];\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n        }\n        filteredFields.dataSource = matchedDataSource;\n        return filteredFields;\n    }\n    isMatchedNode(value, node) {\n        let checkValue = node[this.fields.text];\n        if (this.ignoreCase) {\n            checkValue = checkValue.toLowerCase();\n            value = value.toLowerCase();\n        }\n        if (this.ignoreAccent) {\n            checkValue = DataUtil.ignoreDiacritics(checkValue);\n            value = DataUtil.ignoreDiacritics(value);\n        }\n        if (this.filterType === 'StartsWith') {\n            return checkValue.slice(0, value.length) === value;\n        }\n        else if (this.filterType === 'EndsWith') {\n            return checkValue.slice(-value.length) === value;\n        }\n        else {\n            return checkValue.indexOf(value) !== -1;\n        }\n    }\n    /* To wire events for the dropdown tree */\n    wireEvents() {\n        EventHandler.add(this.inputWrapper, 'mouseup', this.dropDownClick, this);\n        EventHandler.add(this.inputWrapper, 'focus', this.focusIn, this);\n        EventHandler.add(this.inputWrapper, 'blur', this.focusOut, this);\n        EventHandler.add(this.inputWrapper, 'mousemove', this.mouseIn, this);\n        EventHandler.add(this.inputWrapper, 'mouseout', this.onMouseLeave, this);\n        EventHandler.add(this.overAllClear, 'mousedown', this.clearAll, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        let formElement = closest(this.inputWrapper, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        this.keyboardModule = new KeyboardEvents(this.inputWrapper, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    wireTreeEvents() {\n        this.keyboardModule = new KeyboardEvents(this.tree, {\n            keyAction: this.treeAction.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    wireCheckAllWrapperEvents() {\n        this.keyboardModule = new KeyboardEvents(this.checkAllParent, {\n            keyAction: this.checkAllAction.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    /* To unwire events for the dropdown tree */\n    unWireEvents() {\n        EventHandler.remove(this.inputWrapper, 'mouseup', this.dropDownClick);\n        EventHandler.remove(this.inputWrapper, 'focus', this.focusIn);\n        EventHandler.remove(this.inputWrapper, 'blur', this.focusOut);\n        EventHandler.remove(this.inputWrapper, 'mousemove', this.mouseIn);\n        EventHandler.remove(this.inputWrapper, 'mouseout', this.onMouseLeave);\n        EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n        EventHandler.remove(window, 'resize', this.windowResize);\n        let formElement = closest(this.inputWrapper, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n    }\n    /* Trigger when the dropdown is clicked */\n    dropDownClick(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.isClearButtonClick) {\n            this.isClearButtonClick = false;\n            return;\n        }\n        if (!this.wrapText && e.target.classList.contains(CHIP_CLOSE)) {\n            this.removeChip(e);\n        }\n        if (this.isPopupOpen) {\n            this.hidePopup();\n        }\n        else {\n            this.focusIn(e);\n            this.renderPopup();\n        }\n        this.showOverAllClear();\n    }\n    mouseIn() {\n        if (this.enabled || !this.readonly) {\n            this.showOverAllClear();\n        }\n    }\n    onMouseLeave() {\n        if (!this.inputFocus) {\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n    }\n    getDirective() {\n        return 'EJS-DROPDOWNTREE';\n    }\n    focusOut(e) {\n        if (!this.enabled || this.readonly || !this.inputFocus) {\n            return;\n        }\n        if ((Browser.isIE || Browser.info.name === 'edge') && (e.target === this.inputWrapper)) {\n            return;\n        }\n        let target = e.relatedTarget;\n        if ((target !== this.inputEle) && (isNullOrUndefined(target)) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {\n            this.onFocusOut(e);\n        }\n    }\n    onFocusOut(event) {\n        this.inputFocus = false;\n        if (this.isPopupOpen) {\n            this.hidePopup();\n        }\n        if (this.isClearButtonClick) {\n            this.isClearButtonClick = false;\n        }\n        if (this.showClearButton) {\n            this.clearIconWidth = select('.e-clear-icon', this.inputWrapper).offsetWidth;\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n        removeClass([this.inputWrapper], [INPUTFOCUS]);\n        if ((this.allowMultiSelection || this.showCheckBox)) {\n            let isValue = this.value ? (this.value.length ? true : false) : false;\n            if (this.mode !== 'Delimiter') {\n                if (this.chipWrapper && (this.mode === 'Default')) {\n                    addClass([this.chipWrapper], HIDEICON);\n                    removeClass([this.inputWrapper], SHOW_CHIP);\n                    removeClass([this.inputEle], CHIP_INPUT);\n                }\n            }\n            if (!this.wrapText && isValue) {\n                this.updateView();\n            }\n        }\n        if (this.changeOnBlur) {\n            this.triggerChangeEvent(event);\n        }\n        this.removeValue = false;\n        this.oldValue = this.value;\n        this.trigger('blur');\n    }\n    updateView() {\n        if (!this.showCheckBox && !this.allowMultiSelection) {\n            return;\n        }\n        if (this.mode !== 'Box') {\n            addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);\n        }\n        else {\n            addClass([this.inputWrapper], SHOW_CHIP);\n        }\n        if (this.value && this.value.length !== 0) {\n            if (this.inputWrapper.contains(this.chipWrapper)) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n            addClass([this.inputEle], CHIP_INPUT);\n            this.updateOverFlowView();\n            this.ensurePlaceHolder();\n        }\n    }\n    triggerChangeEvent(event) {\n        let isEqual = this.compareValues(this.oldValue, this.value);\n        if ((!isEqual || this.isChipDelete) && !this.removeValue) {\n            let eventArgs = {\n                e: event,\n                oldValue: this.oldValue,\n                value: this.value,\n                isInteracted: event ? true : false,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n        }\n    }\n    compareValues(oldValue, newValue) {\n        if (oldValue === null || oldValue.length === 0) {\n            let isValid = oldValue === null ? ((newValue === oldValue) ? true : false) :\n                (oldValue.length === 0 ? (newValue === oldValue) : false);\n            return isValid;\n        }\n        else if (oldValue.length !== newValue.length) {\n            return false;\n        }\n        for (let i = 0; i < oldValue.length; i++) {\n            if (oldValue[i] !== newValue[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    focusIn(e) {\n        if (!this.enabled || this.readonly || this.inputFocus) {\n            return;\n        }\n        this.showOverAllClear();\n        this.inputFocus = true;\n        addClass([this.inputWrapper], [INPUTFOCUS]);\n        if (this.allowMultiSelection || this.showCheckBox) {\n            if (this.mode !== 'Delimiter' && this.inputFocus) {\n                if (this.chipWrapper && (this.value && this.value.length !== 0)) {\n                    removeClass([this.chipWrapper], HIDEICON);\n                    addClass([this.inputEle], CHIP_INPUT);\n                }\n                addClass([this.inputWrapper], SHOW_CHIP);\n                if (this.popupObj) {\n                    this.popupObj.refreshPosition();\n                }\n            }\n            if (!this.wrapText) {\n                if (this.inputWrapper.contains(this.overFlowWrapper)) {\n                    addClass([this.overFlowWrapper], HIDEICON);\n                }\n                if (this.mode === 'Delimiter') {\n                    removeClass([this.inputWrapper], SHOW_CHIP);\n                    removeClass([this.inputEle], CHIP_INPUT);\n                }\n                else {\n                    addClass([this.inputWrapper], SHOW_CHIP);\n                }\n                removeClass([this.inputWrapper], SHOW_TEXT);\n                this.ensurePlaceHolder();\n            }\n        }\n        let args = { isInteracted: e ? true : false, event: e };\n        this.trigger('focus', args);\n    }\n    treeAction(e) {\n        let eventArgs = {\n            cancel: false,\n            event: e,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'escape':\n                    case 'altUp':\n                        this.inputWrapper.focus();\n                        e.preventDefault();\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'tab':\n                    case 'shiftTab':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        if (!this.showCheckBox) {\n                            this.isValueChange = true;\n                            this.keyEventArgs = e;\n                        }\n                        break;\n                    case 'space':\n                        this.isValueChange = true;\n                        this.keyEventArgs = e;\n                        break;\n                    case 'ctrlA':\n                        if (this.allowMultiSelection) {\n                            this.selectAll(true);\n                        }\n                        break;\n                    case 'moveRight':\n                    case 'moveLeft':\n                    case 'shiftDown':\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                    case 'shiftUp':\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                }\n            }\n            else {\n                e.stopImmediatePropagation();\n            }\n        });\n    }\n    keyActionHandler(e) {\n        let eventArgs = {\n            cancel: false,\n            event: e,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'escape':\n                    case 'altUp':\n                    case 'shiftTab':\n                    case 'tab':\n                        if (this.isPopupOpen) {\n                            this.hidePopup();\n                        }\n                        break;\n                    case 'altDown':\n                        if (!this.isPopupOpen) {\n                            this.showPopup();\n                            e.preventDefault();\n                        }\n                        break;\n                    case 'moveDown':\n                        if (this.showSelectAll && this.showCheckBox) {\n                            this.checkAllParent.focus();\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    checkAllAction(e) {\n        let eventArgs = {\n            cancel: false,\n            event: e,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        this.clickHandler(e);\n                        break;\n                    case 'moveDown':\n                        this.treeObj.element.focus();\n                }\n            }\n        });\n    }\n    windowResize() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ width: this.setWidth() });\n            this.popupObj.refreshPosition();\n        }\n    }\n    resetValueHandler(e) {\n        let formElement = closest(this.inputWrapper, 'form');\n        if (formElement && e.target === formElement) {\n            this.resetValue(true);\n        }\n    }\n    getAriaAttributes() {\n        let disable = this.enabled ? 'false' : 'true';\n        return {\n            'aria-disabled': disable,\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false',\n            'aria-activedescendant': 'null',\n            'aria-labelledby': this.hiddenElement.id\n        };\n    }\n    updateOverFlowView() {\n        this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n        removeClass([this.overFlowWrapper], HIDEICON);\n        if (this.value && this.value.length) {\n            let data = '';\n            let overAllContainer;\n            let temp;\n            let tempData;\n            let tempIndex = 1;\n            let wrapperleng;\n            let remaining;\n            let downIconWidth = 0;\n            this.overFlowWrapper.innerHTML = '';\n            let l10nLocale = { overflowCountTemplate: '+${count} more..', totalCountTemplate: '${count} selected' };\n            this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            let remainContent = this.l10n.getConstant('overflowCountTemplate');\n            let remainElement = this.createElement('span', { className: REMAIN_WRAPPER });\n            let compiledString = compile(remainContent);\n            let totalCompiledString = compile(this.l10n.getConstant('totalCountTemplate'));\n            remainElement.appendChild(compiledString({ 'count': this.value.length }, null, null, null, !this.isStringTemplate)[0]);\n            this.overFlowWrapper.appendChild(remainElement);\n            let remainSize = remainElement.offsetWidth;\n            remove(remainElement);\n            if (this.showDropDownIcon) {\n                downIconWidth = select('.' + DDTICON, this.inputWrapper).offsetWidth;\n            }\n            if (!isNullOrUndefined(this.value)) {\n                if (this.mode !== 'Box') {\n                    for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                        data += (index === 0) ? '' : this.delimiterChar + ' ';\n                        temp = this.getOverflowVal(index);\n                        data += temp;\n                        temp = this.overFlowWrapper.innerHTML;\n                        this.overFlowWrapper.innerHTML = data;\n                        wrapperleng = this.overFlowWrapper.offsetWidth;\n                        overAllContainer = this.inputWrapper.offsetWidth;\n                        if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                            if (tempData !== undefined && tempData !== '') {\n                                temp = tempData;\n                                index = tempIndex + 1;\n                            }\n                            this.overFlowWrapper.innerHTML = temp;\n                            remaining = this.value.length - index;\n                            wrapperleng = this.overFlowWrapper.offsetWidth;\n                            while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) >= overAllContainer)\n                                && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                                let textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);\n                                textArr.pop();\n                                this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);\n                                remaining++;\n                                wrapperleng = this.overFlowWrapper.offsetWidth;\n                            }\n                            break;\n                        }\n                        else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                            tempData = data;\n                            tempIndex = index;\n                        }\n                        else if (index === 0) {\n                            tempData = '';\n                            tempIndex = -1;\n                        }\n                    }\n                }\n                else {\n                    addClass([this.chipWrapper], HIDEICON);\n                    let ele = this.chipWrapper.cloneNode(true);\n                    let chips = selectAll('.' + CHIP, ele);\n                    for (let i = 0; i < chips.length; i++) {\n                        temp = this.overFlowWrapper.innerHTML;\n                        this.overFlowWrapper.appendChild(chips[i]);\n                        data = this.overFlowWrapper.innerHTML;\n                        wrapperleng = this.overFlowWrapper.offsetWidth;\n                        overAllContainer = this.inputWrapper.offsetWidth;\n                        if ((wrapperleng + downIconWidth + this.clearIconWidth) > overAllContainer) {\n                            if (tempData !== undefined && tempData !== '') {\n                                temp = tempData;\n                                i = tempIndex + 1;\n                            }\n                            this.overFlowWrapper.innerHTML = temp;\n                            remaining = this.value.length - i;\n                            wrapperleng = this.overFlowWrapper.offsetWidth;\n                            while (((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) >= overAllContainer)\n                                && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                                this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);\n                                remaining++;\n                                wrapperleng = this.overFlowWrapper.offsetWidth;\n                            }\n                            break;\n                        }\n                        else if ((wrapperleng + remainSize + downIconWidth + this.clearIconWidth) <= overAllContainer) {\n                            tempData = data;\n                            tempIndex = i;\n                        }\n                        else if (i === 0) {\n                            tempData = '';\n                            tempIndex = -1;\n                        }\n                    }\n                }\n            }\n            if (remaining > 0) {\n                let totalWidth = overAllContainer - (downIconWidth + this.clearIconWidth);\n                this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth));\n            }\n            if (this.mode === 'Box' && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n                addClass([remainElement], REMAIN_COUNT);\n            }\n        }\n        else {\n            this.overFlowWrapper.innerHTML = '';\n            addClass([this.overFlowWrapper], HIDEICON);\n        }\n        this.updateDelimMode();\n    }\n    updateRemainTemplate(remainElement, remaining, compiledString, totalCompiledString, totalWidth) {\n        if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 &&\n            this.overFlowWrapper.firstChild.nodeValue === '') {\n            this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);\n        }\n        remainElement.innerHTML = '';\n        remainElement.appendChild((this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) ?\n            compiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0] :\n            totalCompiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0]);\n        if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) {\n            removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n        }\n        else {\n            addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n            removeClass([this.overFlowWrapper], REMAIN_COUNT);\n        }\n        return remainElement;\n    }\n    getOverflowVal(index) {\n        let temp;\n        let selectedData = this.getSelectedData(this.value[index]);\n        temp = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n        return temp;\n    }\n    updateDelimMode() {\n        if (this.mode !== 'Box') {\n            if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n                addClass([this.overFlowWrapper], REMAIN_COUNT);\n                addClass([this.overFlowWrapper], SHOW_TEXT);\n            }\n            else {\n                this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n                removeClass([this.overFlowWrapper], REMAIN_COUNT);\n            }\n        }\n        else if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper)) {\n            this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n        }\n    }\n    createHiddenElement() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'class': HIDDENELEMENT, 'tabindex': '-1', 'multiple': '' }\n            });\n        }\n        else {\n            this.hiddenElement = this.createElement('select', {\n                attrs: { 'aria-hidden': 'true', 'tabindex': '-1', 'class': HIDDENELEMENT }\n            });\n        }\n        prepend([this.hiddenElement], this.inputWrapper);\n        this.validationAttribute();\n    }\n    createClearIcon() {\n        this.overAllClear = this.createElement('span', {\n            className: CLOSEICON_CLASS\n        });\n        addClass([this.overAllClear], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CLEAR);\n        if (this.showClearButton) {\n            this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n        }\n    }\n    validationAttribute() {\n        let name = this.inputEle.getAttribute('name') ? this.inputEle.getAttribute('name') : this.inputEle.getAttribute('id');\n        this.hiddenElement.setAttribute('name', name);\n        this.inputEle.removeAttribute('name');\n        let attributes$$1 = ['required', 'aria-required', 'form'];\n        for (let i = 0; i < attributes$$1.length; i++) {\n            let attr = this.inputEle.getAttribute(attributes$$1[i]);\n            if (attr) {\n                this.hiddenElement.setAttribute(attributes$$1[i], attr);\n                this.inputEle.removeAttribute(attributes$$1[i]);\n            }\n        }\n    }\n    createChip() {\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.chipWrapper = this.createElement('span', {\n                className: CHIP_WRAPPER,\n            });\n            this.chipCollection = this.createElement('span', {\n                className: CHIP_COLLECTION\n            });\n            this.chipWrapper.appendChild(this.chipCollection);\n            this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);\n            addClass([this.inputWrapper], SHOW_CHIP);\n            let isValid = this.getValidMode();\n            if (isValid && this.value !== null) {\n                addClass([this.inputEle], CHIP_INPUT);\n            }\n            else if (this.value === null) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n        }\n    }\n    getValidMode() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            return this.mode === 'Box' ? true : (this.mode === 'Default' && this.inputFocus) ? true : false;\n        }\n        else {\n            return false;\n        }\n    }\n    createSelectAllWrapper() {\n        this.checkAllParent = this.createElement('div', {\n            className: CHECKALLPARENT, attrs: { 'tabindex': '0' }\n        });\n        this.selectAllSpan = this.createElement('span', {\n            className: ALLTEXT\n        });\n        this.selectAllSpan.textContent = '';\n        let ele = closest(this.element, '.' + BIGGER);\n        let touchClass = isNullOrUndefined(ele) ? '' : SMALL;\n        this.checkBoxElement = createCheckBox(this.createElement, true, { cssClass: touchClass });\n        this.checkBoxElement.setAttribute('role', 'checkbox');\n        this.checkAllParent.appendChild(this.checkBoxElement);\n        this.checkAllParent.appendChild(this.selectAllSpan);\n        this.setLocale();\n        EventHandler.add(this.checkAllParent, 'mouseup', this.clickHandler, this);\n        this.wireCheckAllWrapperEvents();\n    }\n    clickHandler(e) {\n        let target;\n        if ((e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT))) {\n            target = e.currentTarget.firstElementChild.lastElementChild;\n        }\n        else {\n            target = e.target;\n        }\n        this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n            this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? 'uncheck' : 'check', e);\n        }\n        e.preventDefault();\n    }\n    changeState(wrapper, state, e) {\n        let ariaState;\n        let frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.add(CHECK);\n            ariaState = 'true';\n            if (!this.isReverseUpdate) {\n                this.treeObj.checkAll();\n                if (!this.changeOnBlur) {\n                    this.triggerChangeEvent(e);\n                }\n            }\n            this.setLocale(true);\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK))) {\n            frameSpan.classList.remove(CHECK);\n            ariaState = 'false';\n            if (!this.isReverseUpdate) {\n                this.treeObj.uncheckAll();\n                if (!this.changeOnBlur) {\n                    this.triggerChangeEvent(e);\n                }\n            }\n            this.setLocale(false);\n        }\n        this.setMultiSelect();\n        this.ensurePlaceHolder();\n        ariaState = state === 'check' ? 'true' : 'false';\n        if (!isNullOrUndefined(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n    }\n    setLocale(unSelect) {\n        if (!this.selectAllSpan) {\n            return;\n        }\n        if (this.selectAllText !== 'Select All' || this.unSelectAllText !== 'Unselect All') {\n            let template = unSelect ? this.unSelectAllText : this.selectAllText;\n            let compiledString;\n            this.selectAllSpan.textContent = '';\n            compiledString = compile(template);\n            for (let item of compiledString({}, null, null, null, !this.isStringTemplate)) {\n                this.selectAllSpan.textContent = item.textContent;\n            }\n        }\n        else {\n            this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;\n        }\n    }\n    setAttributes() {\n        this.element.removeAttribute('tabindex');\n        let id = this.element.getAttribute('id');\n        this.hiddenElement.id = id + '_hidden';\n        this.inputWrapper.setAttribute('tabindex', '0');\n        attributes(this.inputWrapper, this.getAriaAttributes());\n    }\n    setHTMLAttributes() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (let htmlAttr of Object.keys(this.htmlAttributes)) {\n                if (htmlAttr === 'class') {\n                    this.inputWrapper.classList.add(this.htmlAttributes[htmlAttr]);\n                }\n                else if (htmlAttr === 'disabled' && this.htmlAttributes[htmlAttr] === 'disabled') {\n                    this.setProperties({ enabled: false }, true);\n                    this.setEnable();\n                }\n                else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[htmlAttr])) {\n                    this.setProperties({ readonly: true }, true);\n                    this.dataBind();\n                }\n                else if (htmlAttr === 'style') {\n                    this.inputWrapper.setAttribute('style', this.htmlAttributes[htmlAttr]);\n                }\n                else {\n                    let defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder',\n                        'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n                    let validateAttr = ['name', 'required'];\n                    if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                        this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else if (defaultAttr.indexOf(htmlAttr) > -1) {\n                        htmlAttr === 'placeholder' ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputEle) :\n                            this.inputEle.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                    else {\n                        this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                    }\n                }\n            }\n        }\n    }\n    updateDataAttribute() {\n        let value = this.htmlAttributes;\n        let invalidAttr = ['class', 'style', 'id', 'type'];\n        let attr = {};\n        for (let a = 0; a < this.element.attributes.length; a++) {\n            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&\n                !(this.element.attributes[a].name === 'readonly')) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        extend(attr, value, attr);\n        this.setProperties({ htmlAttributes: attr }, true);\n    }\n    showOverAllClear() {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.overAllClear) {\n            let isValue = this.value ? (this.value.length ? true : false) : false;\n            if (isValue && this.showClearButton) {\n                removeClass([this.overAllClear], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CLEAR);\n            }\n            else {\n                addClass([this.overAllClear], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CLEAR);\n            }\n        }\n    }\n    setTreeValue() {\n        if (this.value !== null && this.value.length !== 0) {\n            let data;\n            if (this.showCheckBox || this.allowMultiSelection) {\n                for (let i = 0; i < this.value.length; i++) {\n                    data = this.treeObj.getTreeData(this.value[i])[0];\n                    if (isNullOrUndefined(data)) {\n                        this.value.splice(this.value.indexOf(this.value[i]), 1);\n                    }\n                }\n                if (this.value.length !== 0) {\n                    this.setValidValue();\n                }\n            }\n            else {\n                data = this.treeObj.getTreeData(this.value[0])[0];\n                if (!isNullOrUndefined(data)) {\n                    this.setProperties({ text: data[this.fields.text] }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ value: this.currentValue }, true);\n                }\n            }\n        }\n    }\n    setTreeText() {\n        if (this.value !== null && !this.isInitialized) {\n            return;\n        }\n        if (this.text !== null) {\n            let data;\n            let valArr = [];\n            if (this.showCheckBox || this.allowMultiSelection) {\n                let textArr = this.text.split(this.delimiterChar);\n                for (let i = 0; i < textArr.length; i++) {\n                    data = this.getItems(textArr[i]);\n                    if (!isNullOrUndefined(data)) {\n                        valArr.push(data[this.fields.value].toString());\n                    }\n                }\n                if (valArr.length !== 0) {\n                    this.oldValue = this.value;\n                    this.setProperties({ value: valArr }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ text: this.currentText }, true);\n                }\n            }\n            else {\n                data = this.getItems(this.text);\n                if (!isNullOrUndefined(data)) {\n                    this.oldValue = this.value;\n                    this.setProperties({ value: [data[this.fields.value].toString()] }, true);\n                    this.setValidValue();\n                }\n                else {\n                    this.setProperties({ text: this.currentText }, true);\n                }\n            }\n        }\n    }\n    setSelectedValue() {\n        if (this.value != null) {\n            return;\n        }\n        if (!this.isInitialized) {\n            this.oldValue = this.value;\n            if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {\n                this.setProperties({ value: this.treeObj.selectedNodes }, true);\n                if (this.allowMultiSelection) {\n                    this.updateMode();\n                }\n            }\n            else if (this.showCheckBox && this.treeObj.checkedNodes) {\n                if (this.treeObj.checkedNodes.length > 0) {\n                    this.setProperties({ value: this.treeObj.checkedNodes }, true);\n                    setValue('selectedNodes', [], this.treeObj);\n                    this.treeObj.dataBind();\n                    this.updateMode();\n                }\n            }\n            this.updateSelectedValues();\n            this.currentText = this.text;\n            this.currentValue = this.value;\n        }\n    }\n    setValidValue() {\n        if (!this.showCheckBox && !this.allowMultiSelection) {\n            Input.setValue(this.text, this.inputEle, this.floatLabelType);\n            let id = this.value[0].toString();\n            if (this.treeObj.selectedNodes[0] !== id) {\n                setValue('selectedNodes', [id], this.treeObj);\n            }\n        }\n        else {\n            if (this.showCheckBox) {\n                this.treeObj.checkedNodes = this.value.slice();\n                setValue('selectedNodes', [], this.treeObj);\n                this.treeObj.dataBind();\n                this.setMultiSelect();\n            }\n            else {\n                this.treeObj.selectedNodes = this.value.slice();\n                this.selectedText = [];\n                this.updateSelectedValues();\n            }\n            this.treeObj.dataBind();\n        }\n        this.currentText = this.text;\n        this.currentValue = this.value;\n        if (this.isInitialized) {\n            this.triggerChangeEvent();\n        }\n    }\n    getItems(givenText) {\n        let data;\n        if (this.treeDataType === 1) {\n            for (let i = 0; i < this.treeItems.length; i++) {\n                let text = getValue(this.fields.text, this.treeItems[i]);\n                if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {\n                    data = this.treeItems[i];\n                    break;\n                }\n            }\n        }\n        else {\n            data = this.getNestedItems(this.treeItems, this.fields, givenText);\n        }\n        return data;\n    }\n    getNestedItems(data, field, givenText) {\n        let newData;\n        for (let i = 0, objlen = data.length; i < objlen; i++) {\n            let dataId = getValue(this.fields.text, data[i]);\n            if (data[i] && dataId && dataId.toString() === givenText) {\n                return data[i];\n            }\n            else if (typeof field.child === 'string' && !isNullOrUndefined(getValue(field.child, data[i]))) {\n                let childData = getValue(field.child, data[i]);\n                newData = this.getNestedItems(childData, this.getChildType(field), givenText);\n                if (newData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', data[i]))) {\n                let child = 'child';\n                newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);\n                if (newData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newData;\n    }\n    getChildType(mapper) {\n        return (typeof mapper.child === 'string' || isNullOrUndefined(mapper.child)) ? mapper : mapper.child;\n    }\n    /* To render the treeview */\n    renderTree() {\n        this.treeObj = new TreeView({\n            fields: this.getTreeFields(this.fields),\n            enableRtl: this.enableRtl,\n            nodeSelected: this.onNodeSelected.bind(this),\n            nodeChecked: this.onNodeChecked.bind(this),\n            nodeChecking: this.beforeCheck.bind(this),\n            actionFailure: this.onActionFailure.bind(this),\n            nodeClicked: this.onNodeClicked.bind(this),\n            dataBound: this.OnDataBound.bind(this),\n            allowMultiSelection: this.allowMultiSelection,\n            showCheckBox: this.showCheckBox,\n            autoCheck: this.treeSettings.autoCheck,\n            sortOrder: this.sortOrder,\n            expandOn: this.treeSettings.expandOn,\n            loadOnDemand: this.treeSettings.loadOnDemand,\n            nodeSelecting: this.onBeforeSelect.bind(this),\n            nodeTemplate: this.itemTemplate\n        });\n        this.treeObj.appendTo('#' + this.tree.id);\n    }\n    /* To render the popup element */\n    renderPopup() {\n        if (this.isFilteredData) {\n            this.filterObj.value = '';\n            this.treeObj.fields = this.getTreeFields(this.fields);\n            this.isFilterRestore = true;\n            this.isFilteredData = false;\n            this.hideCheckAll(false);\n        }\n        let isCancelled = false;\n        let args = { cancel: false };\n        this.trigger('beforeOpen', args, (args) => {\n            if (!args.cancel) {\n                addClass([this.inputWrapper], [ICONANIMATION]);\n                if (this.isFirstRender) {\n                    this.popupEle = this.createElement('div', {\n                        id: this.element.id + '_popup', className: POPUP_CLASS + ' ' + (this.cssClass != null ? this.cssClass : '')\n                    });\n                    document.body.appendChild(this.popupEle);\n                    this.createPopup(this.popupEle);\n                }\n                else {\n                    this.popupEle = this.popupObj.element;\n                }\n            }\n            else {\n                isCancelled = true;\n            }\n            if (this.isFirstRender && !isCancelled) {\n                prepend([this.popupDiv], this.popupEle);\n                this.popupDiv.style.display = 'block';\n                if (this.allowFiltering) {\n                    this.renderFilter();\n                }\n                if (this.showCheckBox && this.showSelectAll && (!this.popupDiv.classList.contains(NODATA))) {\n                    this.createSelectAllWrapper();\n                    this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n                }\n                if (this.headerTemplate) {\n                    this.setHeaderTemplate();\n                }\n                if (this.footerTemplate) {\n                    this.setFooterTemplate();\n                }\n                this.isFirstRender = false;\n            }\n            if (!isCancelled) {\n                attributes(this.inputWrapper, { 'aria-expanded': 'true' });\n                this.popupObj.show(null, (this.zIndex === 1000) ? this.inputEle : null);\n                this.popupEle.style.display = 'block';\n                this.updatePopupHeight();\n                this.popupObj.refreshPosition();\n                if (!(this.showCheckBox && this.showSelectAll) && (!this.popupDiv.classList.contains(NODATA)\n                    && this.treeItems.length > 0)) {\n                    this.treeObj.element.focus();\n                }\n                if (this.checkSelectAll && this.checkBoxElement) {\n                    let wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n                    this.changeState(wrap, 'check');\n                    this.checkSelectAll = false;\n                }\n                if (this.allowFiltering) {\n                    removeClass([this.inputWrapper], [INPUTFOCUS]);\n                    this.filterObj.element.focus();\n                }\n                let eventArgs = { popup: this.popupObj };\n                this.trigger('open', eventArgs);\n            }\n        });\n    }\n    updatePopupHeight() {\n        if (this.isFirstRender) {\n            return;\n        }\n        let popupHeight = this.getHeight();\n        this.popupEle.style.maxHeight = popupHeight;\n        if (this.allowFiltering) {\n            let height = Math.round(this.filterContainer.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.headerTemplate) {\n            let height = Math.round(this.header.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.showCheckBox && this.showSelectAll) {\n            let height = Math.round(this.checkAllParent.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        if (this.footerTemplate) {\n            let height = Math.round(this.footer.getBoundingClientRect().height);\n            popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n        }\n        let border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);\n        border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);\n        popupHeight = formatUnit(parseInt(popupHeight, 10) - border + 'px');\n        this.popupDiv.style.maxHeight = popupHeight;\n    }\n    createPopup(element) {\n        if (this.isFirstRender) {\n            this.popupObj = new Popup(element, {\n                width: this.setWidth(),\n                targetType: 'relative',\n                collision: { X: 'flip', Y: 'flip' },\n                relateTo: this.inputWrapper,\n                zIndex: this.zIndex,\n                enableRtl: this.enableRtl,\n                position: { X: 'left', Y: 'bottom' },\n                close: () => {\n                    this.isPopupOpen = false;\n                },\n                open: () => {\n                    EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n                    this.isPopupOpen = true;\n                },\n                targetExitViewport: () => {\n                    if (!Browser.isDevice) {\n                        this.hidePopup();\n                    }\n                }\n            });\n        }\n    }\n    /* To calculate the width when change via set model */\n    setElementWidth(inputWidth) {\n        let ddElement = this.inputWrapper;\n        if (!isNullOrUndefined(inputWidth)) {\n            if (typeof inputWidth === 'number') {\n                ddElement.style.width = formatUnit(inputWidth);\n            }\n            else if (typeof inputWidth === 'string') {\n                ddElement.style.width = (inputWidth.match(/px|%|em/)) ? (inputWidth) :\n                    (formatUnit(inputWidth));\n            }\n        }\n    }\n    /* To calculate the width of the popup */\n    setWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            let inputWidth = this.inputWrapper.offsetWidth * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        else if (typeof this.popupWidth === 'string') {\n            width = (this.popupWidth.match(/px|em/)) ? (this.popupWidth) : width;\n        }\n        return width;\n    }\n    /* To calculate the height of the popup */\n    getHeight() {\n        let height = formatUnit(this.popupHeight);\n        if (height.indexOf('%') > -1) {\n            // Will set the height of the popup according to the view port height\n            let viewPortHeight = document.documentElement.clientHeight * parseFloat(height) / 100;\n            height = viewPortHeight.toString() + 'px';\n        }\n        else if (typeof this.popupHeight === 'string') {\n            height = (this.popupHeight.match(/px|em/)) ? (this.popupHeight) : height;\n        }\n        return height;\n    }\n    onDocumentClick(e) {\n        let target = e.target;\n        let isTree = closest(target, '.' + PARENTITEM);\n        let isFilter = closest(target, '.' + FILTERWRAP);\n        let isScroller = target.classList.contains(DROPDOWN) ? true :\n            (matches(target, '.e-ddt .e-popup') || matches(target, '.e-ddt .e-treeview'));\n        if ((this.isPopupOpen && (this.inputWrapper.contains(target) || isTree || isFilter || isScroller)) ||\n            ((this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) ||\n                (this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT)\n                    || target.classList.contains(CHECKBOXFRAME)))))) {\n            this.isDocumentClick = false;\n            e.preventDefault();\n        }\n        else if (!this.inputWrapper.contains(target) && this.inputFocus) {\n            this.focusOut(e);\n        }\n    }\n    onActionFailure(e) {\n        this.trigger('actionFailure', e);\n        this.l10nUpdate(true);\n        addClass([this.popupDiv], NODATA);\n    }\n    OnDataBound(args) {\n        this.treeItems = args.data;\n        if (this.treeItems.length <= 0) {\n            this.l10nUpdate();\n            addClass([this.popupDiv], NODATA);\n            this.hideCheckAll(true);\n        }\n        else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {\n            removeClass([this.popupDiv], NODATA);\n            this.hideCheckAll(false);\n        }\n        this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);\n        if (this.isFirstRender && this.isRemoteData) {\n            this.setTreeValue();\n            this.setTreeText();\n            this.updateHiddenValue();\n            this.setSelectedValue();\n            if (!this.wrapText) {\n                this.updateView();\n            }\n            this.treeObj.element.focus();\n        }\n        let eventArgs = { data: args.data };\n        this.trigger('dataBound', eventArgs);\n        if (this.isFilteredData) {\n            this.treeObj.expandAll();\n        }\n        if (this.isFilterRestore) {\n            this.restoreFilterSelection();\n            this.isFilterRestore = false;\n        }\n    }\n    restoreFilterSelection() {\n        if (this.showCheckBox) {\n            this.treeObj.checkedNodes = this.value ? this.value : [];\n        }\n        else {\n            this.treeObj.selectedNodes = this.value ? this.value : [];\n        }\n    }\n    /* To set cssclass for the dropdowntree */\n    setCssClass(newClass, oldClass) {\n        let elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(newClass) && newClass !== '') {\n            addClass(elements, newClass.split(' '));\n        }\n    }\n    setEnableRTL(state) {\n        if (state) {\n            this.inputWrapper.classList.add(RTL);\n        }\n        else {\n            this.inputWrapper.classList.remove(RTL);\n        }\n        if (this.popupObj) {\n            this.popupObj.enableRtl = state;\n            this.popupObj.dataBind();\n        }\n        if (this.treeObj) {\n            this.treeObj.enableRtl = state;\n            this.treeObj.dataBind();\n        }\n    }\n    /* To set enable property */\n    setEnable() {\n        Input.setEnabled(this.enabled, this.inputEle);\n        if (this.enabled) {\n            removeClass([this.inputWrapper], DISABLED);\n            this.inputEle.setAttribute('aria-disabled', 'false');\n            this.inputWrapper.setAttribute('aria-disabled', 'false');\n        }\n        else {\n            if (this.isPopupOpen) {\n                this.hidePopup();\n            }\n            addClass([this.inputWrapper], DISABLED);\n            if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {\n                removeClass([this.inputWrapper], [INPUTFOCUS]);\n            }\n            this.inputEle.setAttribute('aria-disabled', 'true');\n            this.inputWrapper.setAttribute('aria-disabled', 'true');\n        }\n    }\n    cloneFields(fields) {\n        let clonedField = {\n            dataSource: fields.dataSource, value: fields.value, text: fields.text, parentValue: fields.parentValue,\n            child: this.cloneChildField(fields.child), hasChildren: fields.hasChildren, expanded: fields.expanded,\n            iconCss: fields.iconCss, imageUrl: fields.imageUrl, htmlAttributes: fields.htmlAttributes, query: fields.query,\n            selected: fields.selected, tableName: fields.tableName, tooltip: fields.tooltip\n        };\n        return clonedField;\n    }\n    cloneChildField(fields) {\n        if (typeof fields === 'string') {\n            return fields;\n        }\n        else {\n            let clonedField = {\n                dataSource: fields.dataSource, value: fields.value, text: fields.text, parentValue: fields.parentValue,\n                child: (fields.child ? this.cloneChildField(fields.child) : null), hasChildren: fields.hasChildren,\n                expanded: fields.expanded, iconCss: fields.iconCss, imageUrl: fields.imageUrl, htmlAttributes: fields.htmlAttributes,\n                query: fields.query, selected: fields.selected, tableName: fields.tableName, tooltip: fields.tooltip\n            };\n            return clonedField;\n        }\n    }\n    getTreeFields(fields) {\n        let treeFields = {\n            dataSource: fields.dataSource, id: fields.value, text: fields.text, parentID: fields.parentValue,\n            child: this.getTreeChildren(fields.child), hasChildren: fields.hasChildren, expanded: fields.expanded,\n            iconCss: fields.iconCss, imageUrl: fields.imageUrl, isChecked: fields.selected,\n            htmlAttributes: fields.htmlAttributes, query: fields.query, selected: fields.selected,\n            tableName: fields.tableName, tooltip: fields.tooltip\n        };\n        return treeFields;\n    }\n    getTreeChildren(mapper) {\n        if (typeof mapper === 'string') {\n            return mapper;\n        }\n        else if (!isNullOrUndefined(mapper)) {\n            let childFields;\n            mapper = this.getActualProperties(mapper);\n            childFields = mapper;\n            if (mapper.value) {\n                childFields.id = mapper.value;\n            }\n            if (mapper.parentValue) {\n                childFields.parentID = mapper.parentValue;\n            }\n            if (mapper.child) {\n                childFields.child = this.getTreeChildren(mapper.child);\n            }\n            if (mapper.selected && this.showCheckBox) {\n                childFields.isChecked = mapper.selected;\n            }\n            return childFields;\n        }\n        return null;\n    }\n    getTreeDataType(ds, field) {\n        if (this.fields.dataSource instanceof DataManager) {\n            for (let i = 0; i < ds.length; i++) {\n                if ((typeof field.child === 'string') && isNullOrUndefined(getValue(field.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (let i = 0, len = ds.length; i < len; i++) {\n            if ((typeof field.child === 'string') && !isNullOrUndefined(getValue(field.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNullOrUndefined(getValue(field.parentValue, ds[i])) || !isNullOrUndefined(getValue(field.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    }\n    /* Triggers when the tree fields is changed dynamically */\n    setFields() {\n        this.resetValue();\n        this.treeObj.fields = this.getTreeFields(this.fields);\n        this.treeObj.dataBind();\n    }\n    getEventArgs(args) {\n        let checkData = args.data;\n        let selectData = args.nodeData;\n        let state;\n        if (this.showCheckBox) {\n            if (args.action === 'check') {\n                state = 'select';\n            }\n            else if (args.action === 'uncheck') {\n                state = 'un-select';\n            }\n        }\n        let eventArgs = {\n            action: this.showCheckBox ? state : args.action,\n            isInteracted: args.isInteracted,\n            item: args.node,\n            itemData: this.showCheckBox ? checkData[0] : selectData\n        };\n        return eventArgs;\n    }\n    onBeforeSelect(args) {\n        if (args.isInteracted) {\n            this.oldValue = this.value ? this.value.slice() : this.value;\n            if (this.value === null) {\n                this.setProperties({ value: [] }, true);\n            }\n        }\n    }\n    updateHiddenValue() {\n        if (this.allowMultiSelection || this.showCheckBox) {\n            return;\n        }\n        if (this.value && this.value.length) {\n            this.hiddenElement.innerHTML = '<option selected value =\"' + this.value[0] + '\">' + this.text + '</option>';\n        }\n        else {\n            this.hiddenElement.innerHTML = '';\n        }\n    }\n    /* Triggers when the tree node is selected */\n    onNodeSelected(args) {\n        if (this.showCheckBox) {\n            return;\n        }\n        let selectedText;\n        if (args.isInteracted) {\n            let id = getValue('id', args.nodeData).toString();\n            if (!this.allowMultiSelection) {\n                this.hiddenElement.innerHTML = '';\n                this.setProperties({ value: [id] }, true);\n                if (this.itemTemplate) {\n                    selectedText = getValue('text', this.treeObj.getNode(id));\n                }\n                else {\n                    selectedText = getValue('text', args.nodeData).toString();\n                }\n                Input.setValue(selectedText, this.inputEle, this.floatLabelType);\n                this.setProperties({ text: selectedText }, true);\n                this.currentText = this.text;\n                this.currentValue = this.value;\n                attributes(this.inputWrapper, { 'aria-describedby': this.element.id });\n                attributes(this.inputWrapper, { 'aria-activedescendant': id.toString() });\n                this.updateHiddenValue();\n                this.showOverAllClear();\n                this.hidePopup();\n                this.isNodeSelected = true;\n            }\n            else if (this.allowMultiSelection) {\n                this.setMultiSelect();\n            }\n        }\n        let eventArgs = this.getEventArgs(args);\n        this.trigger('select', eventArgs);\n        if (this.isValueChange && !this.changeOnBlur) {\n            this.triggerChangeEvent(this.keyEventArgs);\n            this.isValueChange = false;\n        }\n    }\n    onNodeClicked(args) {\n        if (!this.changeOnBlur && this.isNodeSelected) {\n            this.triggerChangeEvent(args.event);\n            this.isNodeSelected = false;\n        }\n        let target = args.event.target;\n        if ((target.classList.contains('e-fullrow') || target.classList.contains('e-list-text')) && this.showCheckBox) {\n            let getNodeDetails = this.treeObj.getNode(args.node);\n            if (getNodeDetails.isChecked === 'true') {\n                this.treeObj.uncheckAll([args.node]);\n            }\n            else {\n                this.treeObj.checkAll([args.node]);\n            }\n            this.setMultiSelect();\n            this.ensurePlaceHolder();\n        }\n        if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {\n            this.triggerChangeEvent(args.event);\n        }\n    }\n    onNodeChecked(args) {\n        let eventArgs = this.getEventArgs(args);\n        this.trigger('select', eventArgs);\n        if (this.isFilteredData && args.action === 'uncheck') {\n            let id = getValue('id', args.data[0]).toString();\n            this.removeSelectedData(id, true);\n        }\n        if (!this.isChipDelete && args.isInteracted) {\n            this.setMultiSelect();\n            this.ensurePlaceHolder();\n        }\n        if (this.showSelectAll && this.checkBoxElement) {\n            let nodes = this.treeObj.element.querySelectorAll('li');\n            let checkedNodes = this.treeObj.element.querySelectorAll('li .e-checkbox-wrapper[aria-checked=true]');\n            let wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n            if (wrap && args.action === 'uncheck') {\n                this.isReverseUpdate = true;\n                this.changeState(wrap, 'uncheck');\n                this.isReverseUpdate = false;\n            }\n            else if (wrap && args.action === 'check' && checkedNodes.length === nodes.length) {\n                this.isReverseUpdate = true;\n                this.changeState(wrap, 'check');\n                this.isReverseUpdate = false;\n            }\n        }\n    }\n    beforeCheck(args) {\n        if (args.isInteracted) {\n            this.oldValue = this.value ? this.value.slice() : this.value;\n        }\n    }\n    updateClearButton(state) {\n        if (state) {\n            if (!this.inputWrapper.contains(this.overAllClear)) {\n                this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);\n            }\n            else {\n                removeClass([this.overAllClear], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CLEAR);\n            }\n        }\n        else {\n            addClass([this.overAllClear], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_CLEAR);\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n            let chipClose = selectAll('.' + CHIP_CLOSE, this.chipWrapper);\n            for (let i = 0; i < chipClose.length; i++) {\n                if (!state) {\n                    addClass([chipClose[i]], HIDEICON);\n                }\n                else {\n                    removeClass([chipClose[i]], HIDEICON);\n                }\n            }\n        }\n    }\n    updateDropDownIconState(state) {\n        let spinIcon = select('.' + DDTICON, this.inputWrapper);\n        if (state) {\n            if (!spinIcon) {\n                Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);\n            }\n            else {\n                removeClass([spinIcon], HIDEICON);\n            }\n            addClass([this.inputWrapper], SHOW_DD_ICON);\n        }\n        else {\n            addClass([spinIcon], HIDEICON);\n            removeClass([this.inputWrapper], SHOW_DD_ICON);\n        }\n    }\n    updateMode() {\n        if (this.mode !== 'Delimiter') {\n            if (!this.inputWrapper.contains(this.chipWrapper)) {\n                this.createChip();\n            }\n            let isValid = this.getValidMode();\n            if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {\n                removeClass([this.chipWrapper], HIDEICON);\n                addClass([this.inputWrapper], SHOW_CHIP);\n            }\n            else if (!isValid) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n            let isValue = this.value !== null ? (this.value.length !== 0 ? true : false) : false;\n            if (isValid && isValue) {\n                addClass([this.inputEle], CHIP_INPUT);\n            }\n            else {\n                removeClass([this.inputEle], CHIP_INPUT);\n            }\n        }\n        else if (this.inputEle.classList.contains(CHIP_INPUT)) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n        }\n    }\n    ensurePlaceHolder() {\n        if (this.value && this.value.length === 0) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n            }\n        }\n    }\n    ensureClearIconPosition(floatLabelType) {\n        if (floatLabelType !== 'Never') {\n            this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n        }\n    }\n    setMultiSelectValue(newValues) {\n        if (!this.isFilteredData) {\n            this.setProperties({ value: newValues }, true);\n            if (newValues && newValues.length !== 0 && !this.showCheckBox) {\n                this.treeObj.selectedNodes = this.value.slice();\n                this.treeObj.dataBind();\n            }\n        }\n        else {\n            let selectedValues = isNullOrUndefined(this.value) ? [] : this.value;\n            for (let i = 0; i < newValues.length; i++) {\n                if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {\n                    selectedValues.push(newValues[i]);\n                }\n            }\n            this.setProperties({ value: selectedValues }, true);\n        }\n    }\n    setMultiSelect() {\n        if (this.showCheckBox && !this.isDynamicChange) {\n            this.setMultiSelectValue(this.treeObj.checkedNodes);\n        }\n        else {\n            let ddtValue = this.allowMultiSelection ? (this.showCheckBox ? this.treeObj.checkedNodes\n                : this.treeObj.selectedNodes) : (this.value ? (this.showCheckBox ? this.value : [this.value[0]]) : null);\n            this.setMultiSelectValue(ddtValue);\n            if (this.showCheckBox && this.value !== null) {\n                this.treeObj.checkedNodes = this.value;\n                this.treeObj.dataBind();\n            }\n        }\n        this.selectedText = [];\n        let checkSelection = this.allowMultiSelection ? true : (this.showCheckBox ? true : false);\n        if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {\n            removeClass([this.inputEle], CHIP_INPUT);\n            detach(this.chipWrapper);\n        }\n        let isValid = this.getValidMode();\n        if (isValid && this.value !== null) {\n            addClass([this.inputEle], CHIP_INPUT);\n            if (this.chipWrapper) {\n                removeClass([this.chipWrapper], HIDEICON);\n            }\n        }\n        let isValue = this.value ? (this.value.length ? true : false) : false;\n        if (this.chipWrapper && (this.mode === 'Box' && !isValue)) {\n            addClass([this.chipWrapper], HIDEICON);\n            removeClass([this.inputEle], CHIP_INPUT);\n        }\n        this.updateSelectedValues();\n    }\n    getSelectedData(value) {\n        let data = null;\n        if (this.isFilteredData) {\n            for (let i = 0; i < this.selectedData.length; i++) {\n                if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n                    data = this.selectedData[i];\n                    break;\n                }\n            }\n        }\n        if (isNullOrUndefined(data)) {\n            if (this.treeSettings.loadOnDemand) {\n                data = this.treeObj.getTreeData(value)[0];\n            }\n            else {\n                data = this.treeObj.getNode(value);\n            }\n            if (!isNullOrUndefined(data)) {\n                this.selectedData.push(data);\n            }\n        }\n        return data;\n    }\n    removeSelectedData(value, muteOnChange) {\n        let selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();\n        selectedValues.splice(selectedValues.indexOf(value), 1);\n        this.setProperties({ value: selectedValues }, muteOnChange);\n        for (let i = 0; i < this.selectedData.length; i++) {\n            if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n                this.selectedData.splice(i, 1);\n                break;\n            }\n        }\n    }\n    updateSelectedValues() {\n        this.dataValue = '';\n        let temp;\n        let text;\n        let textValue = '';\n        let selectedData;\n        this.hiddenElement.innerHTML = '';\n        if ((!this.isChipDelete || this.treeSettings.autoCheck) && (this.inputWrapper.contains(this.chipWrapper))) {\n            this.chipCollection.innerHTML = '';\n        }\n        if (!this.isFilteredData) {\n            this.selectedData = [];\n        }\n        if (!isNullOrUndefined(this.value)) {\n            for (let i = 0, len = this.value.length; i < len; i++) {\n                selectedData = this.getSelectedData(this.value[i]);\n                text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n                this.selectedText.push(text);\n                temp = this.selectedText[this.selectedText.length - 1];\n                if (this.selectedText.length > 1) {\n                    this.dataValue += (this.delimiterChar + ' ' + temp);\n                    textValue += (',' + temp);\n                    this.setProperties({ text: textValue }, true);\n                }\n                else {\n                    this.dataValue += temp;\n                    textValue += temp;\n                }\n                if (this.mode !== 'Delimiter' && (!this.isChipDelete || this.treeSettings.autoCheck) &&\n                    (this.allowMultiSelection || this.showCheckBox)) {\n                    this.setChipValues(temp, this.value[i]);\n                }\n                this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[i] + '\">' +\n                    this.selectedText[this.selectedText.length - 1] + '</option>';\n            }\n        }\n        let isValid = this.getValidMode();\n        if (this.mode !== 'Box' && (this.allowMultiSelection || this.showCheckBox) && !isValid) {\n            if (this.chipWrapper) {\n                addClass([this.chipWrapper], HIDEICON);\n                removeClass([this.inputWrapper], SHOW_CHIP);\n            }\n        }\n        Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);\n        if (textValue === '') {\n            this.setProperties({ text: null }, true);\n        }\n        else {\n            this.setProperties({ text: textValue }, true);\n        }\n        if (this.showClearButton && this.inputFocus) {\n            this.showOverAllClear();\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {\n            this.popupObj.refreshPosition();\n        }\n        this.currentText = this.text;\n        this.currentValue = this.value;\n    }\n    setChipValues(text, value) {\n        if (!this.inputWrapper.contains(this.chipWrapper)) {\n            this.createChip();\n        }\n        let chip = this.createElement('span', {\n            className: CHIP,\n            attrs: { 'data-value': value }\n        });\n        let chipContent = this.createElement('span', { className: CHIP_CONTENT });\n        let chipClose = this.createElement('span', { className: CHIP_CLOSE + ' ' + ICONS });\n        chipContent.innerHTML = text;\n        chip.appendChild(chipContent);\n        this.chipCollection.appendChild(chip);\n        if (this.showClearButton) {\n            chip.appendChild(chipClose);\n            EventHandler.add(chipClose, 'mousedown', this.removeChip, this);\n        }\n    }\n    setSelectAllWrapper(state) {\n        if (this.isFirstRender) {\n            return;\n        }\n        if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {\n            this.createSelectAllWrapper();\n            this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n        }\n        else if (this.popupEle.contains(this.checkAllParent)) {\n            detach(this.checkAllParent);\n            this.checkAllParent = null;\n        }\n    }\n    setHeaderTemplate() {\n        let compiledString;\n        if (this.header) {\n            this.header.innerHTML = '';\n        }\n        else {\n            this.header = this.createElement('div');\n            addClass([this.header], HEADER);\n        }\n        compiledString = this.templateComplier(this.headerTemplate);\n        for (let item of compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate)) {\n            this.header.appendChild(item);\n        }\n        this.ddtupdateBlazorTemplates(false, false, true, false);\n        this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);\n    }\n    templateComplier(template) {\n        if (template) {\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        return compile(template);\n    }\n    setFooterTemplate() {\n        let compiledString;\n        if (this.footer) {\n            this.footer.innerHTML = '';\n        }\n        else {\n            this.footer = this.createElement('div');\n            addClass([this.footer], FOOTER);\n        }\n        compiledString = this.templateComplier(this.footerTemplate);\n        for (let item of compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate)) {\n            this.footer.appendChild(item);\n        }\n        this.ddtupdateBlazorTemplates(false, false, false, true);\n        append([this.footer], this.popupEle);\n    }\n    clearAll(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        this.resetValue();\n        this.showOverAllClear();\n        if ((this.allowMultiSelection || this.showCheckBox)) {\n            if (this.popupObj) {\n                this.popupObj.refreshPosition();\n            }\n            if (!this.wrapText) {\n                this.updateOverflowWrapper(true);\n            }\n        }\n        if (e) {\n            this.isClearButtonClick = true;\n        }\n        if (!this.changeOnBlur) {\n            this.triggerChangeEvent(e);\n        }\n    }\n    removeChip(e) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let element = e.target.parentElement;\n        let value = element.getAttribute('data-value');\n        if (this.chipCollection) {\n            if (element) {\n                remove(element);\n            }\n        }\n        this.isChipDelete = true;\n        this.isClearButtonClick = true;\n        this.removeSelectedData(value, true);\n        this.selectedText = [];\n        if (this.allowMultiSelection) {\n            this.treeObj.selectedNodes = this.value.slice();\n            this.updateSelectedValues();\n        }\n        if (this.showCheckBox) {\n            this.treeObj.uncheckAll([value]);\n            this.clearCheckAll();\n            this.setMultiSelect();\n        }\n        this.triggerChangeEvent(e);\n        this.isChipDelete = false;\n        this.ensurePlaceHolder();\n    }\n    resetValue(isDynamicChange) {\n        Input.setValue(null, this.inputEle, this.floatLabelType);\n        this.oldValue = this.value;\n        this.dataValue = null;\n        this.setProperties({ value: [] }, true);\n        this.setProperties({ text: null }, true);\n        this.selectedData = [];\n        setValue('selectedNodes', [], this.treeObj);\n        this.hiddenElement.innerHTML = '';\n        if (this.showCheckBox) {\n            this.treeObj.uncheckAll();\n            this.setMultiSelect();\n            this.clearCheckAll();\n        }\n        if (this.oldValue === null && !isDynamicChange) {\n            this.removeValue = true;\n        }\n        else if (isDynamicChange) {\n            this.triggerChangeEvent();\n        }\n        if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n            this.chipCollection.innerHTML = '';\n            this.ensurePlaceHolder();\n        }\n    }\n    clearCheckAll() {\n        if (this.showSelectAll && this.value.length === 0) {\n            this.setLocale(false);\n        }\n    }\n    selectAllItems(state) {\n        if (this.showCheckBox) {\n            state ? this.treeObj.checkAll() : this.treeObj.uncheckAll();\n            this.checkSelectAll = true;\n        }\n        else if (this.allowMultiSelection) {\n            if (!state) {\n                this.treeObj.selectedNodes = [];\n            }\n            else {\n                let li = selectAll('li', this.treeObj.element);\n                let id;\n                let arr = [];\n                for (let i = 0; i < li.length; i++) {\n                    id = li[i].getAttribute('data-uid').toString();\n                    arr.push(id);\n                }\n                this.treeObj.selectedNodes = arr;\n            }\n        }\n        this.updateMode();\n        this.setMultiSelect();\n        if (!this.wrapText) {\n            state ? this.updateView() : this.updateOverflowWrapper(true);\n        }\n    }\n    updateTreeSettings(prop) {\n        let value = Object.keys(prop.treeSettings)[0];\n        if (value === 'autoCheck') {\n            this.ensureAutoCheck();\n            this.treeObj.autoCheck = this.treeSettings.autoCheck;\n        }\n        else if (value === 'loadOnDemand') {\n            this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;\n        }\n        else if (value === 'expandOn') {\n            this.treeObj.expandOn = this.treeSettings.expandOn;\n            this.treeObj.dataBind();\n            return;\n        }\n        this.treeObj.dataBind();\n        this.setMultiSelect();\n    }\n    updateCheckBoxState(checkBox) {\n        if (!this.wrapText) {\n            this.updateOverflowWrapper(false);\n        }\n        this.treeObj.showCheckBox = checkBox;\n        this.treeObj.dataBind();\n        this.isDynamicChange = true;\n        this.setSelectAllWrapper(this.showSelectAll);\n        if (this.showSelectAll) {\n            this.setLocale();\n        }\n        if (this.showCheckBox) {\n            this.updateMode();\n        }\n        this.setMultiSelect();\n        this.isDynamicChange = false;\n    }\n    updateTemplate() {\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            if (this.isPopupOpen) {\n                this.hidePopup();\n                this.isFirstRender = true;\n                this.renderPopup();\n            }\n            else {\n                this.isFirstRender = true;\n            }\n        }\n    }\n    l10nUpdate(actionFailure) {\n        if (this.noRecord) {\n            this.noRecord.innerHTML = '';\n        }\n        else {\n            this.noRecord = this.createElement('div');\n            addClass([this.noRecord], NODATACONTAINER);\n            prepend([this.noRecord], this.popupDiv);\n        }\n        if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {\n            let template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n            let compiledString;\n            let templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n            compiledString = this.templateComplier(template);\n            for (let item of compiledString({}, null, null, templateId, this.isStringTemplate)) {\n                this.noRecord.appendChild(item);\n            }\n            this.ddtupdateBlazorTemplates(!actionFailure, actionFailure);\n        }\n        else {\n            let l10nLocale = { noRecordsTemplate: 'No Records Found', actionFailureTemplate: 'The Request Failed' };\n            this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n            this.noRecord.innerHTML = actionFailure ?\n                this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n        }\n    }\n    ddtupdateBlazorTemplates(noRecord, action, header, footer, isEmpty) {\n        if (!this.isStringTemplate) {\n            if (this.noRecordsTemplate && noRecord) {\n                updateBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE, this, isEmpty);\n            }\n            if (this.actionFailureTemplate && action) {\n                updateBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE, this, isEmpty);\n            }\n            if (header) {\n                updateBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE, this);\n            }\n            if (footer) {\n                updateBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE, this);\n            }\n        }\n    }\n    ddtresetBlazorTemplates(noRecord, action, header, footer) {\n        if (!this.isStringTemplate) {\n            if (this.noRecordsTemplate && noRecord) {\n                resetBlazorTemplate(this.noRecordsTemplateId, NORECORDSTEMPLATE);\n            }\n            if (this.actionFailureTemplate && action) {\n                resetBlazorTemplate(this.actionFailureTemplateId, ACTIONFAILURETEMPLATE);\n            }\n            if (header) {\n                resetBlazorTemplate(this.headerTemplateId, HEADERTEMPLATE);\n            }\n            if (footer) {\n                resetBlazorTemplate(this.footerTemplateId, FOOTERTEMPLATE);\n            }\n        }\n    }\n    updateRecordTemplate(action) {\n        if (this.treeItems && this.treeItems.length <= 0) {\n            this.l10nUpdate(action);\n            this.updateTemplate();\n        }\n    }\n    updateOverflowWrapper(state) {\n        if (!state) {\n            if (!this.inputWrapper.contains(this.overFlowWrapper)) {\n                this.overFlowWrapper = this.createElement('span', { className: OVERFLOW_VIEW + ' ' + HIDEICON });\n                this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n            }\n        }\n        else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {\n            this.overFlowWrapper.innerHTML = '';\n        }\n    }\n    updateMultiSelection(state) {\n        if (!this.wrapText) {\n            this.updateOverflowWrapper(false);\n        }\n        this.treeObj.allowMultiSelection = state;\n        this.treeObj.dataBind();\n        this.updateOption();\n        if (this.allowMultiSelection) {\n            this.updateMode();\n        }\n        this.setMultiSelect();\n    }\n    updateAllowFiltering(state) {\n        if (!this.isFirstRender) {\n            if (state) {\n                this.renderFilter();\n            }\n            else {\n                this.destroyFilter();\n            }\n        }\n        this.ensureAutoCheck();\n    }\n    updateFilterPlaceHolder() {\n        if (this.filterObj) {\n            this.filterObj.placeholder = this.filterBarPlaceholder;\n            this.filterObj.element.setAttribute('aria-label', this.filterBarPlaceholder);\n        }\n    }\n    updateValue(value) {\n        if (isNullOrUndefined(value) || value.length === 0) {\n            this.resetValue(true);\n        }\n        else {\n            this.setTreeValue();\n            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                this.updateOverflowWrapper(false);\n                this.updateView();\n            }\n        }\n        this.updateHiddenValue();\n    }\n    updateText(text) {\n        if (isNullOrUndefined(text)) {\n            this.resetValue();\n        }\n        else {\n            this.setTreeText();\n            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                this.updateOverflowWrapper(false);\n                this.updateView();\n            }\n        }\n        this.updateHiddenValue();\n    }\n    updateModelMode() {\n        let validMode = this.allowMultiSelection ? true : (this.showCheckBox ? true : false);\n        if (!validMode) {\n            return;\n        }\n        if (!this.wrapText) {\n            let overFlow = select('.' + OVERFLOW_VIEW, this.inputWrapper);\n            if (overFlow) {\n                overFlow.innerHTML = '';\n            }\n        }\n        this.updateMode();\n        this.setMultiSelect();\n        if (!this.wrapText && (this.value && this.value.length !== 0)) {\n            this.updateOverFlowView();\n            addClass([this.inputEle], CHIP_INPUT);\n            if (this.mode === 'Box') {\n                removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n            }\n            else {\n                addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n            }\n        }\n    }\n    updateOption() {\n        if (!this.hiddenElement.hasAttribute('multiple') && (this.allowMultiSelection || this.showCheckBox)) {\n            this.hiddenElement.setAttribute('multiple', '');\n        }\n        else if (this.hiddenElement.hasAttribute('multiple') && (!this.allowMultiSelection && !this.showCheckBox)) {\n            this.hiddenElement.removeAttribute('multiple');\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    if (this.popupObj) {\n                        this.popupObj.element.style.width = this.setWidth();\n                    }\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.inputEle);\n                    break;\n                case 'cssClass':\n                    this.setCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL(this.enableRtl);\n                    break;\n                case 'fields':\n                    this.setFields();\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.inputEle);\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'floatLabelType':\n                    Input.removeFloating(this.inputObj);\n                    Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);\n                    this.ensureClearIconPosition(newProp.floatLabelType);\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp.showClearButton);\n                    break;\n                case 'allowFiltering':\n                    this.updateAllowFiltering(newProp.allowFiltering);\n                    break;\n                case 'filterBarPlaceholder':\n                    this.updateFilterPlaceHolder();\n                    break;\n                case 'value':\n                    this.updateValue(newProp.value);\n                    break;\n                case 'text':\n                    this.updateText(newProp.text);\n                    break;\n                case 'allowMultiSelection':\n                    this.updateMultiSelection(newProp.allowMultiSelection);\n                    break;\n                case 'mode':\n                    this.updateModelMode();\n                    break;\n                case 'delimiterChar':\n                    if (this.mode === 'Box') {\n                        return;\n                    }\n                    if (this.showCheckBox || this.allowMultiSelection) {\n                        this.setMultiSelect();\n                    }\n                    break;\n                case 'selectAllText':\n                    if (this.showCheckBox && this.showSelectAll) {\n                        this.setLocale();\n                    }\n                    break;\n                case 'unSelectAllText':\n                    if (this.showCheckBox && this.showSelectAll) {\n                        this.setLocale(false);\n                    }\n                    break;\n                case 'showSelectAll':\n                    if (this.showCheckBox) {\n                        this.setSelectAllWrapper(newProp.showSelectAll);\n                        this.updatePopupHeight();\n                    }\n                    break;\n                case 'showCheckBox':\n                    this.updateCheckBoxState(newProp.showCheckBox);\n                    this.updatePopupHeight();\n                    this.updateOption();\n                    break;\n                case 'treeSettings':\n                    this.updateTreeSettings(newProp);\n                    break;\n                case 'sortOrder':\n                    this.treeObj.sortOrder = newProp.sortOrder;\n                    this.treeObj.dataBind();\n                    break;\n                case 'showDropDownIcon':\n                    this.updateDropDownIconState(newProp.showDropDownIcon);\n                    break;\n                case 'popupWidth':\n                    if (this.popupObj) {\n                        this.popupObj.element.style.width = this.setWidth();\n                    }\n                    break;\n                case 'popupHeight':\n                    if (this.popupObj) {\n                        this.updatePopupHeight();\n                    }\n                    break;\n                case 'zIndex':\n                    if (this.popupObj) {\n                        this.popupObj.zIndex = newProp.zIndex;\n                        this.popupObj.dataBind();\n                    }\n                    break;\n                case 'headerTemplate':\n                    this.updateTemplate();\n                    break;\n                case 'footerTemplate':\n                    this.updateTemplate();\n                    break;\n                case 'itemTemplate':\n                    this.treeObj.nodeTemplate = newProp.itemTemplate;\n                    this.treeObj.dataBind();\n                    break;\n                case 'noRecordsTemplate':\n                    this.updateRecordTemplate();\n                    break;\n                case 'actionFailureTemplate':\n                    this.updateRecordTemplate(true);\n                    break;\n                case 'htmlAttributes':\n                    this.setHTMLAttributes();\n                    break;\n                case 'wrapText':\n                    this.updateOverflowWrapper(this.wrapText);\n                    if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n                        this.updateView();\n                    }\n                    else {\n                        addClass([this.overFlowWrapper], HIDEICON);\n                        if (this.chipWrapper && this.mode === 'Box') {\n                            removeClass([this.chipWrapper], HIDEICON);\n                        }\n                        else {\n                            removeClass([this.inputWrapper], SHOW_CHIP);\n                            removeClass([this.inputEle], CHIP_INPUT);\n                        }\n                        this.ensurePlaceHolder();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Allows you to clear the selected values from the Dropdown Tree component.\n     * @method clear\n     * @return {void}.\n     */\n    clear() {\n        this.clearAll();\n        if (this.inputFocus) {\n            this.onFocusOut();\n        }\n        else {\n            if (this.changeOnBlur) {\n                this.triggerChangeEvent();\n            }\n            this.removeValue = false;\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.ddtresetBlazorTemplates(true, true, true, true);\n        this.unWireEvents();\n        this.setCssClass(null, this.cssClass);\n        this.resetValue();\n        this.treeObj.destroy();\n        this.destroyFilter();\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            detach(this.popupObj.element);\n        }\n        if (this.element.tagName !== this.getDirective()) {\n            this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);\n        }\n        detach(this.inputWrapper);\n        detach(this.popupDiv);\n        this.element.classList.remove('e-input');\n        super.destroy();\n    }\n    destroyFilter() {\n        if (this.filterObj) {\n            this.filterObj.destroy();\n            detach(this.filterObj.element);\n            detach(this.filterContainer);\n            this.filterObj = null;\n        }\n    }\n    /**\n     * Ensures visibility of the Dropdown Tree item by using item value or item element.\n     * If many Dropdown Tree items are present, and we are in need to find a particular item, then the `ensureVisible` property\n     * helps you to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.\n     * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n     */\n    ensureVisible(item) {\n        this.treeObj.ensureVisible(item);\n    }\n    /**\n     * To get the updated data of source of the Dropdown Tree.\n     * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n     * @returns { { [key: string]: Object }[] }.\n     */\n    getData(item) {\n        return this.treeObj.getTreeData(item);\n    }\n    /**\n     * Close the Dropdown tree pop-up.\n     * @returns void.\n     */\n    hidePopup() {\n        let eventArgs = { popup: this.popupObj };\n        this.inputWrapper.classList.remove(ICONANIMATION);\n        if (this.popupEle) {\n            this.popupEle.style.display = 'none';\n        }\n        attributes(this.inputWrapper, { 'aria-expanded': 'false' });\n        if (this.popupObj && this.isPopupOpen) {\n            this.popupObj.hide();\n            if (this.inputFocus) {\n                this.inputWrapper.focus();\n                if (this.allowFiltering) {\n                    addClass([this.inputWrapper], [INPUTFOCUS]);\n                }\n            }\n            this.trigger('close', eventArgs);\n        }\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected or deselected.\n     * parameter\n     * `true`   - Selects entire Dropdown Tree items.\n     * `false`  - Unselects entire Dropdown Tree items.\n     * @returns void\n     */\n    selectAll(state) {\n        this.selectAllItems(state);\n    }\n    /**\n     * Opens the popup that displays the Dropdown Tree items.\n     * @returns void.\n     */\n    showPopup() {\n        if (!this.enabled || this.readonly || this.isPopupOpen) {\n            return;\n        }\n        this.renderPopup();\n        this.focusIn();\n    }\n    /**\n     * Return the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'dropdowntree';\n    }\n};\n__decorate$2([\n    Property('The Request Failed')\n], DropDownTree.prototype, \"actionFailureTemplate\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"allowFiltering\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"allowMultiSelection\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"changeOnBlur\", void 0);\n__decorate$2([\n    Property('')\n], DropDownTree.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(',')\n], DropDownTree.prototype, \"delimiterChar\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"enabled\", void 0);\n__decorate$2([\n    Complex({}, Fields)\n], DropDownTree.prototype, \"fields\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$2([\n    Property('StartsWith')\n], DropDownTree.prototype, \"filterType\", void 0);\n__decorate$2([\n    Property('Never')\n], DropDownTree.prototype, \"floatLabelType\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"footerTemplate\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"ignoreAccent\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"ignoreCase\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"headerTemplate\", void 0);\n__decorate$2([\n    Property({})\n], DropDownTree.prototype, \"htmlAttributes\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"itemTemplate\", void 0);\n__decorate$2([\n    Property('Default')\n], DropDownTree.prototype, \"mode\", void 0);\n__decorate$2([\n    Property('No Records Found')\n], DropDownTree.prototype, \"noRecordsTemplate\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"placeholder\", void 0);\n__decorate$2([\n    Property('300px')\n], DropDownTree.prototype, \"popupHeight\", void 0);\n__decorate$2([\n    Property('100%')\n], DropDownTree.prototype, \"popupWidth\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"readonly\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"showSelectAll\", void 0);\n__decorate$2([\n    Property('Select All')\n], DropDownTree.prototype, \"selectAllText\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"showCheckBox\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"showClearButton\", void 0);\n__decorate$2([\n    Property(true)\n], DropDownTree.prototype, \"showDropDownIcon\", void 0);\n__decorate$2([\n    Property('None')\n], DropDownTree.prototype, \"sortOrder\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"text\", void 0);\n__decorate$2([\n    Complex({}, TreeSettings)\n], DropDownTree.prototype, \"treeSettings\", void 0);\n__decorate$2([\n    Property('Unselect All')\n], DropDownTree.prototype, \"unSelectAllText\", void 0);\n__decorate$2([\n    Property(null)\n], DropDownTree.prototype, \"value\", void 0);\n__decorate$2([\n    Property('100%')\n], DropDownTree.prototype, \"width\", void 0);\n__decorate$2([\n    Property(1000)\n], DropDownTree.prototype, \"zIndex\", void 0);\n__decorate$2([\n    Property(false)\n], DropDownTree.prototype, \"wrapText\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"actionFailure\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"close\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"blur\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"dataBound\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"destroyed\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"filtering\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"focus\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"keyPress\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"open\", void 0);\n__decorate$2([\n    Event()\n], DropDownTree.prototype, \"select\", void 0);\nDropDownTree = __decorate$2([\n    NotifyPropertyChanges\n], DropDownTree);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>\n/* tslint:disable */\n/* tslint:enable */\nconst SPINNER_CLASS = 'e-atc-spinner-icon';\ndropDownListClasses.root = 'e-combobox';\nlet inputObject$1 = {\n    container: null,\n    buttons: []\n};\n/**\n * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n *   let games:ComboBox = new ComboBox();\n *   games.appendTo(\"#list\");\n * ```\n */\nlet ComboBox = class ComboBox extends DropDownList {\n    /**\n     * *Constructor for creating the component\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    ;\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'combo-box';\n    }\n    ;\n    wireEvent() {\n        if (this.getModuleName() === 'combobox') {\n            EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);\n            EventHandler.add(this.inputWrapper.container, 'blur', this.onBlur, this);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n            EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);\n        }\n        EventHandler.add(this.inputElement, 'focus', this.targetFocus, this);\n        if (!this.readonly) {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n            EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n            EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n        }\n        this.bindCommonEvent();\n    }\n    preventBlur(e) {\n        if ((!this.allowFiltering && document.activeElement !== this.inputElement &&\n            !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice)) {\n            e.preventDefault();\n        }\n    }\n    onBlur(e) {\n        let inputValue = this.inputElement.value === '' ? null : this.inputElement.value;\n        if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {\n            this.customValue(e);\n        }\n        super.onBlur(e);\n    }\n    targetElement() {\n        return this.inputElement;\n    }\n    setOldText(text) {\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.customValue();\n        this.removeSelection();\n    }\n    setOldValue(value) {\n        if (this.allowCustom) {\n            this.valueMuteChange(this.value);\n        }\n        else {\n            this.valueMuteChange(null);\n        }\n        this.removeSelection();\n        this.setHiddenValue();\n    }\n    valueMuteChange(value) {\n        let inputValue = isNullOrUndefined(value) ? null : value.toString();\n        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.setProperties({ value: value, text: value, index: null }, true);\n        this.activeIndex = this.index;\n        let fields = this.fields;\n        let dataItem = {};\n        dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();\n        dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();\n        this.itemData = dataItem;\n        this.item = null;\n        if (this.previousValue !== this.value) {\n            this.detachChangeEvent(null);\n        }\n    }\n    updateValues() {\n        if (!isNullOrUndefined(this.value)) {\n            let li = this.getElementByValue(this.value);\n            if (li) {\n                this.setSelection(li, null);\n            }\n            else if (this.allowCustom) {\n                this.valueMuteChange(this.value);\n            }\n            else {\n                this.valueMuteChange(null);\n            }\n        }\n        else if (this.text && isNullOrUndefined(this.value)) {\n            let li = this.getElementByText(this.text);\n            if (li) {\n                this.setSelection(li, null);\n            }\n            else {\n                Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n                this.customValue();\n            }\n        }\n        else {\n            this.setSelection(this.liCollections[this.activeIndex], null);\n        }\n        this.setHiddenValue();\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n    updateIconState() {\n        if (this.showClearButton) {\n            if (this.inputElement.value !== '' && !this.readonly) {\n                removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n            else {\n                addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n            }\n        }\n    }\n    getAriaAttributes() {\n        let ariaAttributes = {\n            'aria-owns': this.element.id + '_options',\n            'role': 'combobox',\n            'aria-autocomplete': 'both',\n            'aria-labelledby': this.hiddenElement.id,\n            'aria-hasPopup': 'true',\n            'aria-expanded': 'false',\n            'aria-readonly': this.readonly.toString(),\n            'autocomplete': 'off',\n            'autocorrect': 'off',\n            'autocapitalize': 'off',\n            'spellcheck': 'false'\n        };\n        return ariaAttributes;\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        if (this.isFiltering()) {\n            super.searchLists(e);\n            if (this.ulElement && this.filterInput.value.trim() === '') {\n                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n            }\n        }\n        else {\n            if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {\n                this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n            }\n            this.incrementalSearch(e);\n        }\n    }\n    getNgDirective() {\n        return 'EJS-COMBOBOX';\n    }\n    setSearchBox() {\n        this.filterInput = this.inputElement;\n        return (this.isFiltering() ? this.inputWrapper : inputObject$1);\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        if (!this.isServerBlazor) {\n            super.onActionComplete(ulElement, list, e);\n        }\n        if (this.isSelectCustom) {\n            this.removeSelection();\n        }\n        if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {\n            this.inlineSearch();\n        }\n    }\n    getFocusElement() {\n        let dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();\n        let selected = this.list.querySelector('.' + dropDownListClasses.selected);\n        let isSelected = dataItem.text === this.inputElement.value && !isNullOrUndefined(selected);\n        if (isSelected) {\n            return selected;\n        }\n        if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) &&\n            !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {\n            let inputValue = this.inputElement.value;\n            let activeItem = Search(inputValue, this.liCollections, 'StartsWith', true);\n            let activeElement = activeItem.item;\n            if (!isNullOrUndefined(activeElement)) {\n                let count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;\n                let height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n                if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {\n                    this.removeFocus();\n                    let fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;\n                    this.list.scrollTop = count * height + fixedHead;\n                    addClass([activeElement], dropDownListClasses.focus);\n                }\n            }\n            else {\n                if (this.isSelectCustom && this.inputElement.value.trim() !== '') {\n                    this.removeFocus();\n                    this.list.scrollTop = 0;\n                }\n            }\n            return activeElement;\n        }\n        else {\n            return null;\n        }\n    }\n    setValue(e) {\n        if (e && e.type === 'keydown' && e.action === 'enter') {\n            this.removeFillSelection();\n        }\n        if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {\n            this.preventAutoFill = false;\n            this.inlineSearch(e);\n            return false;\n        }\n        else {\n            return super.setValue(e);\n        }\n    }\n    checkCustomValue() {\n        this.itemData = this.getDataByValue(this.value);\n        let dataItem = this.getItemData();\n        if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {\n            this.setProperties({ 'value': dataItem.value, 'text': dataItem.text }, true);\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     * @returns void.\n     * @deprecated\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            this.spinnerElement = (this.getModuleName() === 'autocomplete') ? (this.inputWrapper.buttons[0] ||\n                this.inputWrapper.clearButton ||\n                Input.appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement)) :\n                (this.inputWrapper.buttons[0] || this.inputWrapper.clearButton);\n            addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            createSpinner({\n                target: this.spinnerElement,\n                width: Browser.isDevice ? '16px' : '14px'\n            }, this.createElement);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     * @returns void.\n     * @deprecated\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n            if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n                detach(this.spinnerElement);\n            }\n            else {\n                this.spinnerElement.innerHTML = '';\n            }\n            this.spinnerElement = null;\n        }\n    }\n    setAutoFill(activeElement, isHover) {\n        if (!isHover) {\n            this.setHoverList(activeElement);\n        }\n        if (this.autofill && !this.preventAutoFill) {\n            let currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();\n            let currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n            if (this.getModuleName() === 'combobox') {\n                if (!this.isSelected && this.previousValue !== currentFillValue) {\n                    this.updateSelectedItem(activeElement, null);\n                    this.isSelected = true;\n                    this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n                }\n                else {\n                    this.updateSelectedItem(activeElement, null, true);\n                }\n            }\n            if (!this.isAndroidAutoFill(currentValue)) {\n                this.setAutoFillSelection(currentValue);\n            }\n        }\n    }\n    isAndroidAutoFill(value) {\n        if (Browser.isAndroid) {\n            let currentPoints = this.getSelectionPoints();\n            let prevEnd = this.prevSelectPoints.end;\n            let curEnd = currentPoints.end;\n            let prevStart = this.prevSelectPoints.start;\n            let curStart = currentPoints.start;\n            if (prevEnd !== 0 && ((prevEnd === value.length && prevStart === value.length) ||\n                (prevStart > curStart && prevEnd > curEnd) || (prevEnd === curEnd && prevStart === curStart))) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    clearAll(e, property) {\n        if (isNullOrUndefined(property) || (!isNullOrUndefined(property) && isNullOrUndefined(property.dataSource))) {\n            super.clearAll(e);\n            if (this.isServerBlazor && this.isFiltering() && this.isPopupOpen && e) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerRenderList', this.beforePopupOpen, true);\n            }\n        }\n    }\n    isSelectFocusItem(element) {\n        return !isNullOrUndefined(element);\n    }\n    inlineSearch(e) {\n        let isKeyNavigate = (e && (e.action === 'down' || e.action === 'up' ||\n            e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown'));\n        let activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();\n        if (!isNullOrUndefined(activeElement)) {\n            if (!isKeyNavigate) {\n                let value = this.getFormattedValue(activeElement.getAttribute('data-value'));\n                this.activeIndex = this.getIndexByValue(value);\n                this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;\n            }\n            this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;\n            this.setAutoFill(activeElement, isKeyNavigate);\n        }\n        else if (this.inputElement.value === '') {\n            this.activeIndex = null;\n            this.list.scrollTop = 0;\n            let focusItem = this.list.querySelector('.' + dropDownListClasses.li);\n            this.setHoverList(focusItem);\n        }\n        else {\n            this.activeIndex = null;\n            this.removeSelection();\n            if (this.liCollections && this.liCollections.length < 0) {\n                this.removeFocus();\n            }\n        }\n    }\n    incrementalSearch(e) {\n        this.showPopup();\n        if (!isNullOrUndefined(this.listData)) {\n            this.inlineSearch(e);\n            e.preventDefault();\n        }\n    }\n    ;\n    setAutoFillSelection(currentValue) {\n        let selection = this.getSelectionPoints();\n        let value = this.inputElement.value.substr(0, selection.start);\n        if (value && (value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase())) {\n            let inputValue = value + currentValue.substr(value.length, currentValue.length);\n            Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);\n        }\n        else {\n            Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);\n            this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n        }\n    }\n    ;\n    getValueByText(text) {\n        return super.getValueByText(text, true, this.ignoreAccent);\n    }\n    unWireEvent() {\n        if (this.getModuleName() === 'combobox') {\n            EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);\n            EventHandler.remove(this.inputWrapper.container, 'blur', this.onBlur);\n        }\n        if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n            EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);\n        }\n        EventHandler.remove(this.inputElement, 'focus', this.targetFocus);\n        if (!this.readonly) {\n            EventHandler.remove(this.inputElement, 'input', this.onInput);\n            EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n            EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n            EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n        }\n        this.unBindCommonEvent();\n    }\n    setSelection(li, e) {\n        super.setSelection(li, e);\n        if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {\n            this.removeFocus();\n        }\n    }\n    selectCurrentItem(e) {\n        let li;\n        if (this.isPopupOpen) {\n            if (this.isSelected) {\n                li = this.list.querySelector('.' + dropDownListClasses.selected);\n            }\n            else {\n                li = this.list.querySelector('.' + dropDownListClasses.focus);\n            }\n            if (li) {\n                this.setSelection(li, e);\n                this.isTyped = false;\n            }\n            if (this.isSelected) {\n                this.isSelectCustom = false;\n                this.onChangeEvent(e);\n            }\n        }\n        if (e.action === 'enter' && this.inputElement.value.trim() === '') {\n            this.clearAll(e);\n        }\n        else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {\n            this.customValue(e);\n        }\n        this.hidePopup();\n    }\n    setHoverList(li) {\n        this.removeSelection();\n        if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {\n            this.removeFocus();\n            li.classList.add(dropDownListClasses.focus);\n        }\n    }\n    ;\n    targetFocus(e) {\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = false;\n        }\n        this.onFocus(e);\n    }\n    dropDownClick(e) {\n        e.preventDefault();\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = true;\n        }\n        super.dropDownClick(e);\n    }\n    customValue(e) {\n        let value = this.getValueByText(this.inputElement.value);\n        if (!this.allowCustom && this.inputElement.value !== '') {\n            let previousValue = this.previousValue;\n            let currentValue = this.value;\n            this.setProperties({ value: value });\n            if (isNullOrUndefined(this.value)) {\n                Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n            }\n            if (this.autofill && previousValue === this.value && currentValue !== this.value) {\n                this.onChangeEvent(null);\n            }\n        }\n        else if (this.inputElement.value.trim() !== '') {\n            let previousValue = this.value;\n            if (isNullOrUndefined(value)) {\n                let value = this.inputElement.value === '' ? null : this.inputElement.value;\n                let eventArgs;\n                eventArgs = { text: value, item: {} };\n                if (!this.initial) {\n                    this.trigger('customValueSpecifier', eventArgs, (eventArgs) => {\n                        this.updateCustomValueCallback(value, eventArgs, previousValue, e);\n                    });\n                }\n                else {\n                    this.updateCustomValueCallback(value, eventArgs, previousValue);\n                }\n            }\n            else {\n                this.isSelectCustom = false;\n                this.setProperties({ value: value });\n                if (previousValue !== this.value) {\n                    this.onChangeEvent(e);\n                }\n            }\n        }\n        else if (this.allowCustom) {\n            this.isSelectCustom = true;\n        }\n    }\n    updateCustomValueCallback(value, eventArgs, previousValue, e) {\n        let fields = this.fields;\n        let item = eventArgs.item;\n        let dataItem = {};\n        if (item && getValue(fields.text, item) && getValue(fields.value, item)) {\n            dataItem = item;\n        }\n        else {\n            setValue(fields.text, value, dataItem);\n            setValue(fields.value, value, dataItem);\n        }\n        this.itemData = dataItem;\n        let changeData = {\n            text: getValue(fields.text, this.itemData),\n            value: getValue(fields.value, this.itemData),\n            index: null\n        };\n        this.setProperties(changeData, true);\n        this.setSelection(null, null);\n        this.isSelectCustom = true;\n        if (previousValue !== this.value) {\n            this.onChangeEvent(e);\n        }\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'combobox') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.inputElement);\n                    if (this.readonly) {\n                        EventHandler.remove(this.inputElement, 'input', this.onInput);\n                        EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n                        EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n                    }\n                    else {\n                        EventHandler.add(this.inputElement, 'input', this.onInput, this);\n                        EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n                        EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n                    }\n                    break;\n                case 'allowFiltering':\n                    this.setSearchBox();\n                    if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n                        super.renderList();\n                    }\n                    break;\n                case 'allowCustom':\n                    break;\n                default:\n                    let comboProps;\n                    comboProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(comboProps.newProperty, comboProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    /**\n     * To initialize the control rendering.\n     * @private\n     */\n    render() {\n        super.render();\n        this.setSearchBox();\n        if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n            super.renderList();\n        }\n        this.renderComplete();\n    }\n    ;\n    /**\n     * Return the module name of this component.\n     * @private\n     */\n    getModuleName() {\n        return 'combobox';\n    }\n    /**\n     * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     * @deprecated\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        super.filter(dataSource, query, fields);\n    }\n    /**\n     * Opens the popup that displays the list of items.\n     * @returns void.\n     * @deprecated\n     */\n    showPopup() {\n        super.showPopup();\n    }\n    /**\n     * Hides the popup if it is in open state.\n     * @returns void.\n     * @deprecated\n     */\n    hidePopup(e) {\n        let inputValue = this.inputElement.value === '' ? null : this.inputElement.value;\n        if (!isNullOrUndefined(this.listData)) {\n            let isEscape = this.isEscapeKey;\n            if (this.isEscapeKey) {\n                Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);\n                this.isEscapeKey = false;\n            }\n            if (this.autofill) {\n                this.removeFillSelection();\n            }\n            let dataItem = this.isSelectCustom ? { text: '' } : this.getItemData();\n            let selected = this.list.querySelector('.' + dropDownListClasses.selected);\n            if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {\n                if (this.isSelected) {\n                    this.onChangeEvent(e);\n                    this.isSelectCustom = false;\n                }\n                super.hidePopup(e);\n                return;\n            }\n            if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {\n                let searchItem = Search(this.inputElement.value, this.liCollections, 'Equal', true);\n                this.selectedLI = searchItem.item;\n                if (isNullOrUndefined(searchItem.index)) {\n                    searchItem.index = Search(this.inputElement.value, this.liCollections, 'StartsWith', true).index;\n                }\n                this.activeIndex = searchItem.index;\n                if (!isNullOrUndefined(this.selectedLI)) {\n                    this.updateSelectedItem(this.selectedLI, null, true);\n                }\n                else if (isEscape) {\n                    this.isSelectCustom = true;\n                    this.removeSelection();\n                }\n            }\n            if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {\n                this.customValue(e);\n            }\n        }\n        if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {\n            this.customValue();\n        }\n        super.hidePopup(e);\n    }\n    /**\n     * Sets the focus to the component for interaction.\n     * @returns void.\n     */\n    focusIn() {\n        if (!this.enabled) {\n            return;\n        }\n        if (Browser.isDevice && !this.allowFiltering) {\n            this.preventFocus = true;\n        }\n        super.focusIn();\n    }\n    /**\n     * Allows you to clear the selected values from the component.\n     * @returns void.\n     * @deprecated\n     */\n    clear() {\n        this.value = null;\n    }\n    /**\n     * Moves the focus from the component if the component is already focused.\n     * @returns void.\n     * @deprecated\n     */\n    focusOut(e) {\n        super.focusOut(e);\n    }\n    /**\n     * Gets all the list items bound on this component.\n     * @returns Element[].\n     * @deprecated\n     */\n    getItems() {\n        return super.getItems();\n    }\n    /**\n     * Gets the data Object that matches the given value.\n     * @param { string | number } value - Specifies the value of the list item.\n     * @returns Object.\n     * @blazorType object\n     * @deprecated\n     */\n    getDataByValue(value) {\n        return super.getDataByValue(value);\n    }\n    renderHightSearch() {\n        // update high light search \n    }\n};\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"autofill\", void 0);\n__decorate$3([\n    Property(true)\n], ComboBox.prototype, \"allowCustom\", void 0);\n__decorate$3([\n    Property({})\n], ComboBox.prototype, \"htmlAttributes\", void 0);\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"allowFiltering\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"query\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"index\", void 0);\n__decorate$3([\n    Property(true)\n], ComboBox.prototype, \"showClearButton\", void 0);\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"enableRtl\", void 0);\n__decorate$3([\n    Event()\n], ComboBox.prototype, \"customValueSpecifier\", void 0);\n__decorate$3([\n    Event()\n], ComboBox.prototype, \"filtering\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"valueTemplate\", void 0);\n__decorate$3([\n    Property('Never')\n], ComboBox.prototype, \"floatLabelType\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"headerTemplate\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"footerTemplate\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"placeholder\", void 0);\n__decorate$3([\n    Property('100%')\n], ComboBox.prototype, \"width\", void 0);\n__decorate$3([\n    Property('300px')\n], ComboBox.prototype, \"popupHeight\", void 0);\n__decorate$3([\n    Property('100%')\n], ComboBox.prototype, \"popupWidth\", void 0);\n__decorate$3([\n    Property(false)\n], ComboBox.prototype, \"readonly\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"text\", void 0);\n__decorate$3([\n    Property(null)\n], ComboBox.prototype, \"value\", void 0);\nComboBox = __decorate$3([\n    NotifyPropertyChanges\n], ComboBox);\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../combo-box/combo-box-model.d.ts'/>\n/* tslint:disable */\n/* tslint:enable */\ndropDownListClasses.root = 'e-autocomplete';\ndropDownListClasses.icon = 'e-input-group-icon e-ddl-icon e-search-icon';\n/**\n * The AutoComplete component provides the matched suggestion list when type into the input,\n * from which the user can select one.\n * ```html\n * <input id=\"list\" type=\"text\"/>\n * ```\n * ```typescript\n *   let atcObj:AutoComplete = new AutoComplete();\n *   atcObj.appendTo(\"#list\");\n * ```\n */\nlet AutoComplete = class AutoComplete extends ComboBox {\n    /**\n     * * Constructor for creating the widget\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFiltered = false;\n    }\n    ;\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'auto-complete';\n    }\n    ;\n    getNgDirective() {\n        return 'EJS-AUTOCOMPLETE';\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        let filterType = (this.queryString === '' && !isNullOrUndefined(this.value)) ? 'equal' : this.filterType;\n        let queryString = (this.queryString === '' && !isNullOrUndefined(this.value)) ? this.value : this.queryString;\n        if (this.isFiltered) {\n            return filterQuery;\n        }\n        if (this.queryString !== null && this.queryString !== '') {\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                let mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : '';\n                filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        if (!isNullOrUndefined(this.suggestionCount)) {\n            // Since defualt value of suggestioncount is 20, checked the condition\n            if (this.suggestionCount !== 20) {\n                for (let queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {\n                    if (filterQuery.queries[queryElements].fn === 'onTake') {\n                        filterQuery.queries.splice(queryElements, 1);\n                    }\n                }\n            }\n            filterQuery.take(this.suggestionCount);\n        }\n        return filterQuery;\n    }\n    searchLists(e) {\n        this.isTyped = true;\n        this.isDataFetched = this.isSelectCustom = false;\n        if (this.isServerBlazor) {\n            this.beforePopupOpen = (this.isFiltering() && !this.beforePopupOpen) ? !this.beforePopupOpen : this.beforePopupOpen;\n            this.queryString = this.filterInput.value;\n            if (this.queryString !== '' && (this.queryString.length >= this.minLength)) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('OnServerFilter', this.filterInput.value);\n            }\n            else {\n                this.hidePopup();\n            }\n        }\n        else {\n            if (isNullOrUndefined(this.list)) {\n                super.renderList(true);\n            }\n            this.queryString = this.filterInput.value;\n            if (e.keyCode === 40 || e.keyCode === 38) {\n                this.queryString = this.queryString === '' ? null : this.queryString;\n                this.beforePopupOpen = true;\n                this.resetList(this.dataSource, this.fields);\n                return;\n            }\n            this.isSelected = false;\n            this.activeIndex = null;\n            let eventArgs = {\n                preventDefaultAction: false,\n                text: this.filterInput.value,\n                updateData: (dataSource, query, fields) => {\n                    if (eventArgs.cancel) {\n                        return;\n                    }\n                    this.isFiltered = true;\n                    this.filterAction(dataSource, query, fields);\n                },\n                cancel: false\n            };\n            this.trigger('filtering', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel && !this.isFiltered && !eventArgs.preventDefaultAction) {\n                    this.filterAction(this.dataSource, null, this.fields);\n                }\n            });\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     * @deprecated\n     */\n    filter(dataSource, query, fields) {\n        this.isFiltered = true;\n        this.filterAction(dataSource, query, fields);\n    }\n    filterAction(dataSource, query, fields) {\n        this.beforePopupOpen = true;\n        if (this.queryString !== '' && (this.queryString.length >= this.minLength)) {\n            this.resetList(dataSource, fields, query);\n        }\n        else {\n            this.hidePopup();\n        }\n    }\n    clearAll(e, property) {\n        if (isNullOrUndefined(property) || (!isNullOrUndefined(property) && isNullOrUndefined(property.dataSource))) {\n            super.clearAll(e);\n        }\n        if (this.beforePopupOpen) {\n            this.hidePopup();\n        }\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        this.fixedHeaderElement = null;\n        super.onActionComplete(ulElement, list, e);\n        let item = this.list.querySelector('.' + dropDownListClasses.li);\n        if (!isNullOrUndefined(item)) {\n            removeClass([item], dropDownListClasses.focus);\n        }\n        this.postBackAction();\n    }\n    postBackAction() {\n        if (this.autofill && !isNullOrUndefined(this.liCollections[0])) {\n            let items = [this.liCollections[0]];\n            let searchItem = Search(this.inputElement.value, items, 'StartsWith', this.ignoreCase);\n            if (!isNullOrUndefined(searchItem.item)) {\n                super.setAutoFill(this.liCollections[0], true);\n            }\n        }\n    }\n    setSelection(li, e) {\n        if (!this.isValidLI(li)) {\n            return;\n        }\n        if (!isNullOrUndefined(e) && e.type === 'keydown' && e.action !== 'enter'\n            && e.action !== 'tab' && this.isValidLI(li)) {\n            let value = this.getFormattedValue(li.getAttribute('data-value'));\n            this.activeIndex = this.getIndexByValue(value);\n            if (this.isServerBlazor) {\n                this.removeHover();\n            }\n            this.setHoverList(li);\n            this.selectedLI = li;\n            this.setScrollPosition(e);\n            if (this.autofill && this.isPopupOpen) {\n                this.preventAutoFill = false;\n                super.setAutoFill(li);\n            }\n            attributes(this.inputElement, { 'aria-activedescendant': this.selectedLI ? this.selectedLI.id : null });\n        }\n        else {\n            super.setSelection(li, e);\n        }\n    }\n    listOption(dataSource, fieldsSettings) {\n        let fields = super.listOption(dataSource, fieldsSettings);\n        if (isNullOrUndefined(fields.itemCreated)) {\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    if (this.element.tagName === this.getNgDirective() && this.itemTemplate) {\n                        setTimeout(() => { highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType); }, 0);\n                    }\n                    else {\n                        highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                    }\n                }\n            };\n        }\n        else {\n            let itemCreated = fields.itemCreated;\n            fields.itemCreated = (e) => {\n                if (this.highlight) {\n                    highlightSearch(e.item, this.queryString, this.ignoreCase, this.filterType);\n                }\n                itemCreated.apply(this, [e]);\n            };\n        }\n        return fields;\n    }\n    ;\n    isFiltering() {\n        return true;\n    }\n    renderPopup() {\n        this.list.scrollTop = 0;\n        super.renderPopup();\n    }\n    isEditTextBox() {\n        return true && this.inputElement.value.trim() !== '';\n    }\n    isPopupButton() {\n        return this.showPopupButton;\n    }\n    isSelectFocusItem(element) {\n        return false;\n    }\n    /**\n     * Search the entered text and show it in the suggestion list if available.\n     * @returns void.\n     * @deprecated\n     */\n    showPopup() {\n        if (!this.enabled) {\n            return;\n        }\n        if (this.beforePopupOpen && !this.isServerBlazor) {\n            this.refreshPopup();\n            return;\n        }\n        this.beforePopupOpen = true;\n        this.preventAutoFill = true;\n        if (isNullOrUndefined(this.list) || this.isServerBlazor) {\n            this.renderList();\n        }\n        else {\n            this.resetList(this.dataSource, this.fields);\n        }\n    }\n    /**\n     * Hides the popup if it is in open state.\n     * @returns void.\n     */\n    hidePopup() {\n        this.DropDownBaseresetBlazorTemplates(true, false, false, false);\n        super.hidePopup();\n        this.activeIndex = -1;\n    }\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (this.getModuleName() === 'autocomplete') {\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'showPopupButton':\n                    if (this.showPopupButton) {\n                        if (!this.isServerBlazor) {\n                            let button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);\n                            this.inputWrapper.buttons[0] = button;\n                        }\n                        else if (this.inputWrapper && this.inputWrapper.container) {\n                            let button = this.inputWrapper.container.querySelector('.e-input-group-icon.e-ddl-icon');\n                            this.inputWrapper.buttons[0] = button;\n                        }\n                        if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {\n                            EventHandler.add(this.inputWrapper.buttons[0], 'click', this.dropDownClick, this);\n                        }\n                    }\n                    else if (!this.isServerBlazor) {\n                        detach(this.inputWrapper.buttons[0]);\n                        this.inputWrapper.buttons[0] = null;\n                    }\n                    break;\n                default:\n                    let atcProps;\n                    atcProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(atcProps.newProperty, atcProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    renderHightSearch() {\n        if (this.highlight) {\n            for (let i = 0; i < this.liCollections.length; i++) {\n                let isHighlight = this.ulElement.querySelector('.e-active');\n                if (!isHighlight) {\n                    revertHighlightSearch(this.liCollections[i]);\n                    highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType, this.isServerBlazor);\n                }\n            }\n        }\n    }\n    /**\n     * Return the module name of this component.\n     * @private\n     */\n    getModuleName() {\n        return 'autocomplete';\n    }\n    /**\n     * To initialize the control rendering\n     * @private\n     */\n    render() {\n        super.render();\n    }\n    ;\n};\n__decorate$4([\n    Complex({ value: null, iconCss: null, groupBy: null }, FieldSettings)\n], AutoComplete.prototype, \"fields\", void 0);\n__decorate$4([\n    Property(true)\n], AutoComplete.prototype, \"ignoreCase\", void 0);\n__decorate$4([\n    Property(false)\n], AutoComplete.prototype, \"showPopupButton\", void 0);\n__decorate$4([\n    Property(false)\n], AutoComplete.prototype, \"highlight\", void 0);\n__decorate$4([\n    Property(20)\n], AutoComplete.prototype, \"suggestionCount\", void 0);\n__decorate$4([\n    Property({})\n], AutoComplete.prototype, \"htmlAttributes\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"query\", void 0);\n__decorate$4([\n    Property(1)\n], AutoComplete.prototype, \"minLength\", void 0);\n__decorate$4([\n    Property('Contains')\n], AutoComplete.prototype, \"filterType\", void 0);\n__decorate$4([\n    Event()\n], AutoComplete.prototype, \"filtering\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"index\", void 0);\n__decorate$4([\n    Property('Never')\n], AutoComplete.prototype, \"floatLabelType\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"valueTemplate\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$4([\n    Property(false)\n], AutoComplete.prototype, \"allowFiltering\", void 0);\n__decorate$4([\n    Property(null)\n], AutoComplete.prototype, \"text\", void 0);\nAutoComplete = __decorate$4([\n    NotifyPropertyChanges\n], AutoComplete);\n\n/**\n * export all modules from current location\n */\n\n/**\n * FloatLable Moduel\n * Specifies whether to display the floating label above the input element.\n */\nconst FLOATLINE = 'e-float-line';\nconst FLOATTEXT = 'e-float-text';\nconst LABELTOP = 'e-label-top';\nconst LABELBOTTOM = 'e-label-bottom';\n/**\n * Function to create Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param element - the given html element.\n * @param inputElement - specify the input wrapper.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {\n    let floatLinelement;\n    let floatLabelElement;\n    floatLinelement = createElement('span', { className: FLOATLINE });\n    floatLabelElement = createElement('label', { className: FLOATTEXT });\n    if (!isNullOrUndefined(element.id) && element.id !== '') {\n        floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');\n        attributes(element, { 'aria-labelledby': floatLabelElement.id });\n    }\n    if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== '') {\n        floatLabelElement.innerText = SanitizeHtmlHelper.sanitize(inputElement.placeholder);\n        inputElement.removeAttribute('placeholder');\n    }\n    floatLabelElement.innerText = SanitizeHtmlHelper.sanitize(placeholder);\n    searchWrapper.appendChild(floatLinelement);\n    searchWrapper.appendChild(floatLabelElement);\n    overAllWrapper.classList.add('e-float-input');\n    updateFloatLabelState(value, floatLabelElement);\n    if (floatLabelType === 'Always') {\n        if (floatLabelElement.classList.contains(LABELBOTTOM)) {\n            removeClass([floatLabelElement], LABELBOTTOM);\n        }\n        addClass([floatLabelElement], LABELTOP);\n    }\n}\n/**\n * Function to update status of the Float Label element.\n * @param value - Value of the MultiSelect.\n * @param label - float label element.\n */\nfunction updateFloatLabelState(value, label) {\n    if (value && value.length > 0) {\n        addClass([label], LABELTOP);\n        removeClass([label], LABELBOTTOM);\n    }\n    else {\n        removeClass([label], LABELTOP);\n        addClass([label], LABELBOTTOM);\n    }\n}\n/**\n * Function to remove Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n * @param searchWrapper - search wrapper of multiselect.\n * @param inputElement - specify the input wrapper.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {\n    let placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);\n    let floatLine = componentWrapper.querySelector('.' + FLOATLINE);\n    let placeholderText;\n    if (!isNullOrUndefined(placeholderElement)) {\n        placeholderText = placeholderElement.innerText;\n        detach(searchWrapper.querySelector('.' + FLOATTEXT));\n        setPlaceHolder(value, inputElement, placeholderText);\n        if (!isNullOrUndefined(floatLine)) {\n            detach(searchWrapper.querySelector('.' + FLOATLINE));\n        }\n    }\n    else {\n        placeholderText = (placeholder !== null) ? placeholder : '';\n        setPlaceHolder(value, inputElement, placeholderText);\n    }\n    overAllWrapper.classList.remove('e-float-input');\n}\n/**\n * Function to set the placeholder to the element.\n * @param value - Value of the MultiSelect.\n * @param inputElement - specify the input wrapper.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction setPlaceHolder(value, inputElement, placeholder) {\n    if (value && value.length) {\n        inputElement.placeholder = '';\n    }\n    else {\n        inputElement.placeholder = placeholder;\n    }\n}\n/**\n * Function for focusing the Float Element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n */\nfunction floatLabelFocus(overAllWrapper, componentWrapper) {\n    overAllWrapper.classList.add('e-input-focus');\n    let label = componentWrapper.querySelector('.' + FLOATTEXT);\n    if (!isNullOrUndefined(label)) {\n        addClass([label], LABELTOP);\n        if (label.classList.contains(LABELBOTTOM)) {\n            removeClass([label], LABELBOTTOM);\n        }\n    }\n}\n/**\n * Function to focus the Float Label element.\n * @param overAllWrapper - overall wrapper of multiselect.\n * @param componentWrapper - wrapper element of multiselect.\n * @param value - Value of the MultiSelect.\n * @param floatLabelType - Specify the FloatLabel Type.\n * @param placeholder - Specify the PlaceHolder text.\n */\nfunction floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {\n    overAllWrapper.classList.remove('e-input-focus');\n    let label = componentWrapper.querySelector('.' + FLOATTEXT);\n    if (value && value.length <= 0 && floatLabelType === 'Auto' && !isNullOrUndefined(label)) {\n        if (label.classList.contains(LABELTOP)) {\n            removeClass([label], LABELTOP);\n        }\n        addClass([label], LABELBOTTOM);\n    }\n}\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n/* tslint:disable */\n/* tslint:enable */\nconst FOCUS = 'e-input-focus';\nconst DISABLED$1 = 'e-disabled';\nconst OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';\nconst ELEMENT_WRAPPER = 'e-multi-select-wrapper';\nconst ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';\nconst HIDE_LIST = 'e-hide-listitem';\nconst DELIMITER_VIEW = 'e-delim-view';\nconst CHIP_WRAPPER$1 = 'e-chips-collection';\nconst CHIP$1 = 'e-chips';\nconst CHIP_CONTENT$1 = 'e-chipcontent';\nconst CHIP_CLOSE$1 = 'e-chips-close';\nconst CHIP_SELECTED = 'e-chip-selected';\nconst SEARCHBOX_WRAPPER = 'e-searcher';\nconst DELIMITER_VIEW_WRAPPER = 'e-delimiter';\nconst ZERO_SIZE = 'e-zero-size';\nconst REMAIN_WRAPPER$1 = 'e-remain';\nconst CLOSEICON_CLASS$1 = 'e-chips-close e-close-hooker';\nconst DELIMITER_WRAPPER = 'e-delim-values';\nconst POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';\nconst INPUT_ELEMENT = 'e-dropdownbase';\nconst RTL_CLASS = 'e-rtl';\nconst CLOSE_ICON_HIDE = 'e-close-icon-hide';\nconst MOBILE_CHIP = 'e-mob-chip';\nconst FOOTER$1 = 'e-ddl-footer';\nconst HEADER$1 = 'e-ddl-header';\nconst DISABLE_ICON = 'e-ddl-disable-icon';\nconst SPINNER_CLASS$1 = 'e-ms-spinner-icon';\nconst HIDDEN_ELEMENT = 'e-multi-hidden';\nconst destroy = 'destroy';\nconst dropdownIcon = 'e-input-group-icon e-ddl-icon';\nconst iconAnimation = 'e-icon-anim';\nconst TOTAL_COUNT_WRAPPER$1 = 'e-delim-total';\nconst BOX_ELEMENT = 'e-multiselect-box';\nconst FILTERPARENT = 'e-filter-parent';\nconst CUSTOM_WIDTH = 'e-search-custom-width';\n/**\n * The Multiselect allows the user to pick a more than one value from list of predefined values.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var multiselectObj = new Multiselect();\n *   multiselectObj.appendTo(\"#list\");\n * </script>\n * ```\n */\nlet MultiSelect = class MultiSelect extends DropDownBase {\n    /**\n     * Constructor for creating the DropDownList widget.\n     */\n    constructor(option, element) {\n        super(option, element);\n        this.isValidKey = false;\n        this.selectAllEventData = [];\n        this.selectAllEventEle = [];\n        this.isDynamicDataChange = false;\n        this.scrollFocusStatus = false;\n        this.keyDownStatus = false;\n    }\n    ;\n    enableRTL(state) {\n        if (state) {\n            this.overAllWrapper.classList.add(RTL_CLASS);\n        }\n        else {\n            this.overAllWrapper.classList.remove(RTL_CLASS);\n        }\n        if (this.popupObj) {\n            this.popupObj.enableRtl = state;\n            this.popupObj.dataBind();\n        }\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.mode === 'CheckBox') {\n            this.isGroupChecking = this.enableGroupCheckBox;\n            if (this.enableGroupCheckBox) {\n                let prevOnChange = this.isProtectedOnChange;\n                this.isProtectedOnChange = true;\n                this.enableSelectionOrder = false;\n                this.isProtectedOnChange = prevOnChange;\n            }\n            this.allowCustomValue = false;\n            this.hideSelectedItem = false;\n            this.closePopupOnSelect = false;\n            modules.push({\n                member: 'CheckBoxSelection',\n                args: [this]\n            });\n        }\n        return modules;\n    }\n    updateHTMLAttribute() {\n        if (Object.keys(this.htmlAttributes).length) {\n            for (let htmlAttr of Object.keys(this.htmlAttributes)) {\n                switch (htmlAttr) {\n                    case 'class':\n                        let updatedClassValue = (this.htmlAttributes[htmlAttr].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValue !== '') {\n                            addClass([this.overAllWrapper], updatedClassValue.split(' '));\n                            addClass([this.popupWrapper], updatedClassValue.split(' '));\n                        }\n                        break;\n                    case 'disabled':\n                        this.enable(false);\n                        break;\n                    case 'placeholder':\n                        if (!this.placeholder) {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                            this.setProperties({ placeholder: this.inputElement.placeholder }, true);\n                            this.refreshPlaceHolder();\n                        }\n                        break;\n                    default:\n                        let defaultAttr = ['id'];\n                        let validateAttr = ['name', 'required', 'aria-required', 'form'];\n                        let containerAttr = ['title', 'role', 'style', 'class'];\n                        if (defaultAttr.indexOf(htmlAttr) > -1) {\n                            this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        else if (containerAttr.indexOf(htmlAttr) > -1) {\n                            this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        else {\n                            this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    updateReadonly(state) {\n        if (state || this.mode === 'CheckBox') {\n            this.inputElement.setAttribute('readonly', 'true');\n        }\n        else {\n            this.inputElement.removeAttribute('readonly');\n        }\n    }\n    updateClearButton(state) {\n        if (state) {\n            if (this.overAllClear.parentNode) {\n                this.overAllClear.style.display = '';\n            }\n            else {\n                this.componentWrapper.appendChild(this.overAllClear);\n            }\n            this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);\n        }\n        else {\n            this.overAllClear.style.display = 'none';\n            this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n        }\n    }\n    updateCssClass() {\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            let updatedCssClassValues = this.cssClass;\n            updatedCssClassValues = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n            if (updatedCssClassValues !== '') {\n                addClass([this.overAllWrapper], updatedCssClassValues.split(' '));\n                addClass([this.popupWrapper], updatedCssClassValues.split(' '));\n            }\n        }\n    }\n    updateOldPropCssClass(oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            oldClass = (oldClass.replace(/\\s+/g, ' ')).trim();\n            if (oldClass !== '') {\n                removeClass([this.overAllWrapper], oldClass.split(' '));\n                removeClass([this.popupWrapper], oldClass.split(' '));\n            }\n        }\n    }\n    onPopupShown() {\n        if (Browser.isDevice && (this.mode === 'CheckBox' && this.allowFiltering)) {\n            let proxy = this;\n            window.onpopstate = () => {\n                proxy.hidePopup();\n                proxy.inputElement.focus();\n            };\n            history.pushState({}, '');\n        }\n        let animModel = { name: 'FadeIn', duration: 100 };\n        let eventArgs = { popup: this.popupObj, cancel: false, animation: animModel };\n        this.trigger('open', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.focusAtFirstListItem();\n                document.body.appendChild(this.popupObj.element);\n                if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                    this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n                }\n                if (this.mode === 'CheckBox' || this.showDropDownIcon) {\n                    addClass([this.overAllWrapper], [iconAnimation]);\n                }\n                this.refreshPopup();\n                this.popupObj.show(eventArgs.animation, (this.zIndex === 1000) ? this.element : null);\n                attributes(this.inputElement, { 'aria-expanded': 'true' });\n                if (this.isFirstClick) {\n                    this.loadTemplate();\n                }\n            }\n        });\n    }\n    updateListItems(listItems, mainListItems) {\n        for (let i = 0; i < listItems.length; i++) {\n            this.findGroupStart(listItems[i]);\n            this.findGroupStart(mainListItems[i]);\n        }\n        this.deselectHeader();\n    }\n    loadTemplate() {\n        this.refreshListItems(null);\n        if (this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n        this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', e: this });\n    }\n    setScrollPosition() {\n        if (((!this.hideSelectedItem && this.mode !== 'CheckBox') || (this.mode === 'CheckBox' && !this.enableSelectionOrder)) &&\n            (!isNullOrUndefined(this.value) && (this.value.length > 0))) {\n            let valueEle = this.findListElement((this.hideSelectedItem ? this.ulElement : this.list), 'li', 'data-value', this.value[this.value.length - 1]);\n            if (!isNullOrUndefined(valueEle)) {\n                this.scrollBottom(valueEle);\n            }\n        }\n    }\n    focusAtFirstListItem() {\n        if (this.ulElement && this.ulElement.querySelector('li.'\n            + dropDownBaseClasses.li)) {\n            let element;\n            if (this.mode === 'CheckBox') {\n                this.removeFocus();\n                return;\n            }\n            else {\n                element = this.ulElement.querySelector('li.'\n                    + dropDownBaseClasses.li + ':not(.'\n                    + HIDE_LIST + ')');\n            }\n            if (element !== null) {\n                this.removeFocus();\n                this.addListFocus(element);\n            }\n        }\n    }\n    focusAtLastListItem(data) {\n        let activeElement;\n        if (data) {\n            activeElement = Search(data, this.liCollections, 'StartsWith', this.ignoreCase);\n        }\n        else {\n            if (this.value && this.value.length) {\n                Search(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);\n            }\n            else {\n                activeElement = null;\n            }\n        }\n        if (activeElement && activeElement.item !== null) {\n            this.addListFocus(activeElement.item);\n            this.scrollBottom(activeElement.item, activeElement.index);\n        }\n    }\n    getAriaAttributes() {\n        let ariaAttributes = {\n            'aria-disabled': 'false',\n            'aria-owns': this.element.id + '_options',\n            'role': 'listbox',\n            'aria-multiselectable': 'true',\n            'aria-activedescendant': 'null',\n            'aria-haspopup': 'true',\n            'aria-expanded': 'false'\n        };\n        return ariaAttributes;\n    }\n    updateListARIA() {\n        attributes(this.ulElement, { 'id': this.element.id + '_options', 'role': 'listbox', 'aria-hidden': 'false' });\n        let disableStatus = (this.inputElement.disabled) ? true : false;\n        attributes(this.inputElement, this.getAriaAttributes());\n        if (disableStatus) {\n            attributes(this.inputElement, { 'aria-disabled': 'true' });\n        }\n        this.ensureAriaDisabled((disableStatus) ? 'true' : 'false');\n    }\n    ensureAriaDisabled(status) {\n        if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {\n            let attr = this.htmlAttributes;\n            extend(attr, { 'aria-disabled': status }, attr);\n            this.setProperties({ htmlAttributes: attr }, true);\n        }\n    }\n    removelastSelection(e) {\n        let elements;\n        elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n        let value = elements[elements.length - 1].getAttribute('data-value');\n        if (!isNullOrUndefined(this.value)) {\n            this.tempValues = this.value.slice();\n        }\n        this.removeValue(value, e);\n        this.removeChipSelection();\n        this.updateDelimeter(this.delimiterChar, e);\n        this.makeTextBoxEmpty();\n        if (this.mainList && this.listData) {\n            this.refreshSelection();\n        }\n        this.checkPlaceholderSize();\n    }\n    onActionFailure(e) {\n        super.onActionFailure(e);\n        this.renderPopup();\n        this.onPopupShown();\n    }\n    targetElement() {\n        this.targetInputElement = this.inputElement;\n        if (this.mode === 'CheckBox' && this.allowFiltering) {\n            this.notify('targetElement', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        return this.targetInputElement.value;\n    }\n    getForQuery(valuecheck) {\n        let predicate;\n        let field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n        for (let i = 0; i < valuecheck.length; i++) {\n            if (i === 0) {\n                predicate = new Predicate(field, 'equal', valuecheck[i]);\n            }\n            else {\n                predicate = predicate.or(field, 'equal', valuecheck[i]);\n            }\n        }\n        return this.getQuery(this.query).where(predicate);\n    }\n    onActionComplete(ulElement, list, e, isUpdated) {\n        super.onActionComplete(ulElement, list, e);\n        this.updateSelectElementData(this.allowFiltering);\n        let proxy = this;\n        let valuecheck = [];\n        if (isBlazor() && this.isServerRendered && this.isDynamicDataChange && this.value !== null && this.value.length > 0) {\n            let items = [];\n            for (let k = 0; k < this.value.length; k++) {\n                let itemsData = this.getDataByValue(this.value[k]);\n                if (itemsData) {\n                    // tslint:disable-next-line\n                    items.push(itemsData[this.fields.value]); // remove the condition for hybrid\n                }\n            }\n            if (items.length === 0) {\n                this.setProperties({ 'value': null });\n            }\n        }\n        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n            for (let i = 0; i < this.value.length; i++) {\n                let checkEle = this.findListElement(((this.allowFiltering && !isNullOrUndefined(this.mainList)) ? this.mainList : ulElement), 'li', 'data-value', proxy.value[i]);\n                if (!checkEle) {\n                    valuecheck.push(proxy.value[i]);\n                }\n            }\n        }\n        if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value)) {\n            this.dataSource.executeQuery(this.getForQuery(valuecheck)).then((e) => {\n                proxy.addItem(e.result, list.length);\n                proxy.updateActionList(ulElement, list, e);\n            });\n        }\n        else {\n            this.updateActionList(ulElement, list, e);\n        }\n        if (isBlazor() && this.isServerRendered && this.allowFiltering && this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n        if (isBlazor() && this.isServerRendered && this.isDynamicDataChange && this.value && this.value.length > 0) {\n            this.updateVal(this.value, null, 'value');\n            this.addValidInputClass();\n            this.isDynamicDataChange = false;\n        }\n        if (this.dataSource instanceof DataManager && this.mode === 'CheckBox' && this.allowFiltering &&\n            !(isBlazor() && this.isServerRendered)) {\n            this.removeFocus();\n        }\n    }\n    updateActionList(ulElement, list, e, isUpdated) {\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n            this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        if (!this.mainList && !this.mainData) {\n            this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n            this.mainData = list;\n            this.mainListCollection = this.liCollections;\n        }\n        else if (!isNullOrUndefined(this.mainData) && this.mainData.length === 0) {\n            this.mainData = list;\n        }\n        if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering &&\n            this.inputElement.value && this.inputElement.value !== '') {\n            this.checkForCustomValue(this.tempQuery, this.fields);\n            return;\n        }\n        if (this.value && this.value.length && ((this.mode !== 'CheckBox' && this.inputElement.value !== '') ||\n            this.mode === 'CheckBox')) {\n            this.refreshSelection();\n        }\n        this.updateListARIA();\n        this.unwireListEvents();\n        this.wireListEvents();\n        if (!isNullOrUndefined(this.setInitialValue)) {\n            this.setInitialValue();\n        }\n        if (!isNullOrUndefined(this.selectAllAction)) {\n            this.selectAllAction();\n        }\n        if (this.setDynValue) {\n            if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                this.initialTextUpdate();\n            }\n            this.initialValueUpdate();\n            this.initialUpdate();\n            this.refreshPlaceHolder();\n            if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n                this.updateValueState(null, this.value, null);\n            }\n        }\n        this.renderPopup();\n        if (this.beforePopupOpen) {\n            this.beforePopupOpen = false;\n            this.onPopupShown();\n        }\n    }\n    refreshSelection() {\n        let value;\n        let element;\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (!isNullOrUndefined(this.value)) {\n            for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                value = this.value[index];\n                element = this.findListElement(this.list, 'li', 'data-value', value);\n                if (element) {\n                    addClass([element], className);\n                    if (this.hideSelectedItem && element.previousSibling\n                        && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)\n                        && (!element.nextElementSibling ||\n                            element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                        addClass([element.previousElementSibling], className);\n                    }\n                    if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n                        this.hideGroupItem(value);\n                    }\n                    if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {\n                        removeClass([element], dropDownBaseClasses.focus);\n                        let listEle = element.parentElement.querySelectorAll('.' +\n                            dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n                        if (listEle.length > 0) {\n                            addClass([listEle[0]], dropDownBaseClasses.focus);\n                        }\n                        else {\n                            this.ulElement = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;\n                            this.l10nUpdate();\n                            addClass([this.list], dropDownBaseClasses.noData);\n                        }\n                    }\n                    element.setAttribute('aria-selected', 'true');\n                    if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n                        let ariaValue = element.firstElementChild.getAttribute('aria-checked');\n                        if (isNullOrUndefined(ariaValue) || ariaValue === 'false') {\n                            let args = {\n                                module: 'CheckBoxSelection',\n                                enable: this.mode === 'CheckBox',\n                                li: element,\n                                e: null\n                            };\n                            this.notify('updatelist', args);\n                        }\n                    }\n                }\n            }\n        }\n        this.checkSelectAll();\n        this.checkMaxSelection();\n    }\n    hideGroupItem(value) {\n        let element;\n        let element1;\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);\n        let i = 0;\n        let j = 0;\n        let temp = true;\n        let temp1 = true;\n        do {\n            if (element && element.previousElementSibling\n                && (!element.previousElementSibling.classList.contains(HIDE_LIST) &&\n                    element.previousElementSibling.classList.contains(dropDownBaseClasses.li))) {\n                temp = false;\n            }\n            if (!temp || !element || (element.previousElementSibling\n                && element.previousElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                i = 10;\n            }\n            else {\n                element = element.previousElementSibling;\n            }\n            if (element1 && element1.nextElementSibling\n                && (!element1.nextElementSibling.classList.contains(HIDE_LIST) &&\n                    element1.nextElementSibling.classList.contains(dropDownBaseClasses.li))) {\n                temp1 = false;\n            }\n            if (!temp1 || !element1 || (element1.nextElementSibling\n                && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n                j = 10;\n            }\n            else {\n                element1 = element1.nextElementSibling;\n            }\n        } while (i < 10 || j < 10);\n        if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            addClass([element.previousElementSibling], className);\n        }\n        else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            removeClass([element.previousElementSibling], className);\n        }\n    }\n    checkSelectAll() {\n        let groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;\n        let listItem = this.list.querySelectorAll('li.e-list-item');\n        let searchCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.li).length;\n        let searchActiveCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.selected).length;\n        if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            searchActiveCount = searchActiveCount - groupItemLength;\n        }\n        if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength)\n            && (this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'check' });\n        }\n        else if ((searchCount !== searchActiveCount) && (this.mode === 'CheckBox' && this.showSelectAll)) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'uncheck' });\n        }\n        if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {\n            for (let i = 0; i < listItem.length; i++) {\n                this.findGroupStart(listItem[i]);\n            }\n            this.deselectHeader();\n        }\n    }\n    openClick(e) {\n        if (!this.openOnClick && this.mode !== 'CheckBox') {\n            if (this.targetElement() !== '') {\n                this.showPopup();\n            }\n            else {\n                this.hidePopup();\n            }\n        }\n        else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {\n            this.showPopup();\n        }\n    }\n    KeyUp(e) {\n        if (this.mode === 'CheckBox' && !this.openOnClick) {\n            let char = String.fromCharCode(e.keyCode);\n            let isWordCharacter = char.match(/\\w/);\n            if (!isNullOrUndefined(isWordCharacter)) {\n                this.isValidKey = true;\n            }\n        }\n        this.isValidKey = (this.isPopupOpen() && e.keyCode === 8) || this.isValidKey;\n        this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;\n        if (this.isValidKey) {\n            this.isValidKey = false;\n            this.expandTextbox();\n            this.showOverAllClear();\n            switch (e.keyCode) {\n                default:\n                    // For filtering works in mobile firefox\n                    this.search(e);\n            }\n        }\n    }\n    /**\n     * To filter the multiselect data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     */\n    filter(dataSource, query, fields) {\n        this.isFiltered = true;\n        this.remoteFilterAction = true;\n        this.dataUpdater(dataSource, query, fields);\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        if (this.filterAction) {\n            if (this.targetElement() !== null) {\n                let dataType = this.typeOfData(this.dataSource).typeof;\n                if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                    filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n                }\n                else {\n                    let fields = this.fields;\n                    filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n                }\n            }\n            return filterQuery;\n        }\n        else {\n            return query ? query : this.query ? this.query : new Query();\n        }\n    }\n    dataUpdater(dataSource, query, fields) {\n        this.isDataFetched = false;\n        if (this.targetElement().trim() === '') {\n            let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            if (this.backCommand) {\n                this.remoteCustomValue = false;\n                this.onActionComplete(list, this.mainData);\n                if (this.value && this.value.length) {\n                    this.refreshSelection();\n                }\n                if (this.keyCode !== 8) {\n                    this.focusAtFirstListItem();\n                }\n                this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', e: this });\n            }\n        }\n        else {\n            this.resetList(dataSource, fields, query);\n            if (this.allowCustomValue) {\n                if (!(dataSource instanceof DataManager)) {\n                    this.checkForCustomValue(query, fields);\n                }\n                else {\n                    this.remoteCustomValue = true;\n                    this.tempQuery = query;\n                }\n            }\n        }\n        this.refreshPopup();\n        if (this.mode === 'CheckBox') {\n            this.removeFocus();\n        }\n    }\n    checkForCustomValue(query, fields) {\n        let dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);\n        if (this.allowCustomValue && dataChecks) {\n            let value = this.inputElement.value;\n            let field = fields ? fields : this.fields;\n            let customData = (!isNullOrUndefined(this.mainData) && this.mainData.length > 0) ?\n                this.mainData[0] : this.mainData;\n            if (typeof (customData) !== 'string') {\n                let dataItem = {};\n                setValue(field.text, value, dataItem);\n                setValue(field.value, value, dataItem);\n                let tempData = JSON.parse(JSON.stringify(this.listData));\n                tempData.splice(0, 0, dataItem);\n                this.resetList(tempData, field, query);\n            }\n            else {\n                let tempData = [this.inputElement.value];\n                this.resetList(tempData, field);\n            }\n        }\n        if (this.value && this.value.length) {\n            this.refreshSelection();\n        }\n    }\n    getNgDirective() {\n        return 'EJS-MULTISELECT';\n    }\n    wrapperClick(e) {\n        this.setDynValue = false;\n        if (!this.enabled) {\n            return;\n        }\n        if (e.target === this.overAllClear) {\n            e.preventDefault();\n            return;\n        }\n        if (!this.inputFocus) {\n            this.inputElement.focus();\n        }\n        if (!this.readonly) {\n            if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE$1) !== -1) {\n                if (this.isPopupOpen()) {\n                    this.refreshPopup();\n                }\n                return;\n            }\n            if (!this.isPopupOpen() &&\n                (this.openOnClick || (this.showDropDownIcon && e.target && e.target.className === dropdownIcon))) {\n                this.showPopup();\n            }\n            else {\n                this.hidePopup();\n                if (this.mode === 'CheckBox') {\n                    this.showOverAllClear();\n                    this.inputFocus = true;\n                    if (!this.overAllWrapper.classList.contains(FOCUS)) {\n                        this.overAllWrapper.classList.add(FOCUS);\n                    }\n                }\n            }\n        }\n        if (!(this.targetElement() && this.targetElement() !== '')) {\n            e.preventDefault();\n        }\n    }\n    enable(state) {\n        if (state) {\n            this.overAllWrapper.classList.remove(DISABLED$1);\n            this.inputElement.removeAttribute('disabled');\n            attributes(this.inputElement, { 'aria-disabled': 'false' });\n            this.ensureAriaDisabled('false');\n        }\n        else {\n            this.overAllWrapper.classList.add(DISABLED$1);\n            this.inputElement.setAttribute('disabled', 'true');\n            attributes(this.inputElement, { 'aria-disabled': 'true' });\n            this.ensureAriaDisabled('true');\n        }\n        if (this.enabled !== state) {\n            this.enabled = state;\n        }\n        this.hidePopup();\n    }\n    onBlur(eve, isDocClickFromCheck) {\n        let target;\n        if (!isNullOrUndefined(eve)) {\n            target = eve.relatedTarget;\n        }\n        if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {\n            if (this.mode !== 'CheckBox') {\n                this.inputElement.focus();\n            }\n            else if ((this.floatLabelType === 'Auto' &&\n                ((this.overAllWrapper.classList.contains('e-outline')) || (this.overAllWrapper.classList.contains('e-filled'))))) {\n                addClass([this.overAllWrapper], 'e-valid-input');\n            }\n            return;\n        }\n        if (this.floatLabelType === 'Auto' && (this.overAllWrapper.classList.contains('e-outline')) && this.mode === 'CheckBox' &&\n            ((isNullOrUndefined(this.value)) || this.value.length === 0)) {\n            removeClass([this.overAllWrapper], 'e-valid-input');\n        }\n        if (this.mode === 'CheckBox' && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {\n            this.inputFocus = false;\n            this.overAllWrapper.classList.remove(FOCUS);\n            return;\n        }\n        if (this.scrollFocusStatus) {\n            if (!isNullOrUndefined(eve)) {\n                eve.preventDefault();\n            }\n            this.inputElement.focus();\n            this.scrollFocusStatus = false;\n            return;\n        }\n        this.inputFocus = false;\n        this.overAllWrapper.classList.remove(FOCUS);\n        this.refreshListItems(null);\n        if (this.mode !== 'Box' && this.mode !== 'CheckBox') {\n            this.updateDelimView();\n        }\n        if (this.changeOnBlur) {\n            this.updateValueState(eve, this.value, this.tempValues);\n            this.dispatchEvent(this.hiddenElement, 'change');\n        }\n        this.overAllClear.style.display = 'none';\n        if (this.isPopupOpen()) {\n            this.DropDownBaseresetBlazorTemplates(false, false, true, true, false, true, true);\n            this.hidePopup();\n        }\n        this.makeTextBoxEmpty();\n        this.trigger('blur');\n        this.focused = true;\n        if (Browser.isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n            this.removeChipFocus();\n        }\n        this.removeChipSelection();\n        this.refreshInputHight();\n        floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);\n        this.refreshPlaceHolder();\n        if ((this.allowFiltering || (this.enableSelectionOrder === true && this.mode === 'CheckBox'))\n            && !isNullOrUndefined(this.mainList)) {\n            this.ulElement = this.mainList;\n        }\n        this.checkPlaceholderSize();\n    }\n    checkPlaceholderSize() {\n        if (this.showDropDownIcon) {\n            let downIconWidth = this.dropIcon.offsetWidth +\n                parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n            this.setPlaceholderSize(downIconWidth);\n        }\n        else {\n            if (!isNullOrUndefined(this.dropIcon)) {\n                this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);\n            }\n        }\n    }\n    setPlaceholderSize(downIconWidth) {\n        if (isNullOrUndefined(this.value) || this.value.length === 0) {\n            if (this.dropIcon.offsetWidth !== 0) {\n                this.searchWrapper.style.width = ('calc(100% - ' + (downIconWidth + 10)) + 'px';\n            }\n            else {\n                addClass([this.searchWrapper], CUSTOM_WIDTH);\n            }\n        }\n        else if (!isNullOrUndefined(this.value)) {\n            this.searchWrapper.removeAttribute('style');\n            removeClass([this.searchWrapper], CUSTOM_WIDTH);\n        }\n    }\n    refreshInputHight() {\n        if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === '')) {\n            this.searchWrapper.classList.remove(ZERO_SIZE);\n        }\n        else {\n            this.searchWrapper.classList.add(ZERO_SIZE);\n        }\n    }\n    validateValues(newValue, oldValue) {\n        return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());\n    }\n    updateValueState(event, newVal, oldVal) {\n        let newValue = newVal ? newVal : [];\n        let oldValue = oldVal ? oldVal : [];\n        if (this.initStatus && this.validateValues(newValue, oldValue)) {\n            let eventArgs = {\n                e: event,\n                oldValue: oldVal,\n                value: newVal,\n                isInteracted: event ? true : false,\n                element: this.element\n            };\n            this.trigger('change', eventArgs);\n            this.updateTempValue();\n            if (!this.changeOnBlur) {\n                this.dispatchEvent(this.hiddenElement, 'change');\n            }\n        }\n    }\n    updateTempValue() {\n        if (!this.value) {\n            this.tempValues = this.value;\n        }\n        else {\n            this.tempValues = this.value.slice();\n        }\n    }\n    getPagingCount() {\n        let height = this.list.classList.contains(dropDownBaseClasses.noData) ? null :\n            getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n        return Math.round(this.list.offsetHeight / parseInt(height, 10));\n    }\n    pageUpSelection(steps) {\n        let collection = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        let previousItem;\n        previousItem = steps >= 0 ? collection[steps + 1] : collection[0];\n        this.addListFocus(previousItem);\n        this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n    }\n    ;\n    pageDownSelection(steps) {\n        let list = this.getItems();\n        let collection = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        let previousItem;\n        previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];\n        this.addListFocus(previousItem);\n        this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n    }\n    getItems() {\n        if (!this.list) {\n            super.render();\n        }\n        return this.ulElement && this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li).length > 0 ?\n            this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li\n                + ':not(.' + HIDE_LIST + ')') : [];\n    }\n    focusInHandler(e) {\n        if (this.enabled) {\n            this.showOverAllClear();\n            this.inputFocus = true;\n            if (this.value && this.value.length) {\n                if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n                    this.chipCollectionWrapper.style.display = '';\n                }\n                else {\n                    this.showDelimWrapper();\n                }\n                if (this.mode !== 'CheckBox') {\n                    this.viewWrapper.style.display = 'none';\n                }\n            }\n            if (this.mode !== 'CheckBox') {\n                this.searchWrapper.classList.remove(ZERO_SIZE);\n            }\n            this.checkPlaceholderSize();\n            if (this.focused) {\n                let args = { isInteracted: e ? true : false, event: e };\n                this.trigger('focus', args);\n                this.focused = false;\n            }\n            if (!this.overAllWrapper.classList.contains(FOCUS)) {\n                this.overAllWrapper.classList.add(FOCUS);\n            }\n            floatLabelFocus(this.overAllWrapper, this.componentWrapper);\n            if (this.isPopupOpen()) {\n                this.refreshPopup();\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    showDelimWrapper() {\n        if (this.mode === 'CheckBox') {\n            this.viewWrapper.style.display = '';\n        }\n        else {\n            this.delimiterWrapper.style.display = '';\n        }\n        this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);\n    }\n    hideDelimWrapper() {\n        this.delimiterWrapper.style.display = 'none';\n        this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);\n    }\n    expandTextbox() {\n        let size = 5;\n        if (this.placeholder) {\n            size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;\n        }\n        if (this.inputElement.value.length > size) {\n            this.inputElement.size = this.inputElement.value.length;\n        }\n        else {\n            this.inputElement.size = size;\n        }\n    }\n    isPopupOpen() {\n        return ((this.popupWrapper !== null) && (this.popupWrapper.parentElement !== null));\n    }\n    refreshPopup() {\n        if (this.popupObj && this.mobFilter) {\n            this.popupObj.setProperties({ width: this.calcPopupWidth() });\n            this.popupObj.refreshPosition(this.overAllWrapper);\n            this.popupObj.resolveCollision();\n        }\n    }\n    checkTextLength() {\n        return this.targetElement().length < 1;\n    }\n    popupKeyActions(e) {\n        switch (e.keyCode) {\n            case 38:\n                this.hidePopup();\n                if (this.mode === 'CheckBox') {\n                    this.inputElement.focus();\n                }\n                e.preventDefault();\n                break;\n            case 40:\n                if (!this.isPopupOpen()) {\n                    this.showPopup();\n                    e.preventDefault();\n                }\n                break;\n        }\n    }\n    updateAriaAttribute() {\n        let focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n        if (!isNullOrUndefined(focusedItem)) {\n            this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);\n        }\n    }\n    homeNavigation(isHome) {\n        this.removeFocus();\n        let scrollEle = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li\n            + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        if (scrollEle.length > 0) {\n            let element = scrollEle[(isHome) ? 0 : (scrollEle.length - 1)];\n            element.classList.add(dropDownBaseClasses.focus);\n            this.scrollBottom(element);\n        }\n    }\n    onKeyDown(e) {\n        if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {\n            return;\n        }\n        this.keyDownStatus = true;\n        if (e.keyCode > 111 && e.keyCode < 124) {\n            return;\n        }\n        if (e.altKey) {\n            this.popupKeyActions(e);\n            return;\n        }\n        else if (this.isPopupOpen()) {\n            let focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n            let activeIndex;\n            switch (e.keyCode) {\n                case 36:\n                case 35:\n                    this.homeNavigation((e.keyCode === 36) ? true : false);\n                    break;\n                case 33:\n                    e.preventDefault();\n                    if (focusedItem) {\n                        this.getIndexByValue(focusedItem.getAttribute('data-value'));\n                        this.pageUpSelection(activeIndex - this.getPagingCount());\n                        this.updateAriaAttribute();\n                    }\n                    return;\n                case 34:\n                    e.preventDefault();\n                    if (focusedItem) {\n                        this.getIndexByValue(focusedItem.getAttribute('data-value'));\n                        this.pageDownSelection(activeIndex + this.getPagingCount());\n                        this.updateAriaAttribute();\n                    }\n                    return;\n                case 38:\n                    this.arrowUp(e);\n                    break;\n                case 40:\n                    this.arrowDown(e);\n                    break;\n                case 27:\n                    e.preventDefault();\n                    this.hidePopup();\n                    if (this.mode === 'CheckBox') {\n                        this.inputElement.focus();\n                    }\n                    return;\n                case 13:\n                    e.preventDefault();\n                    if (this.mode !== 'CheckBox') {\n                        this.selectByKey(e);\n                    }\n                    this.checkPlaceholderSize();\n                    return;\n                case 32:\n                    this.spaceKeySelection(e);\n                    return;\n                case 9:\n                    e.preventDefault();\n                    this.hidePopup();\n                    this.inputElement.focus();\n                    this.overAllWrapper.classList.add(FOCUS);\n            }\n        }\n        else {\n            switch (e.keyCode) {\n                case 13:\n                case 9:\n                case 16:\n                case 17:\n                case 20:\n                    return;\n                case 40:\n                    if (this.openOnClick) {\n                        this.showPopup();\n                    }\n                    break;\n                case 27:\n                    e.preventDefault();\n                    this.escapeAction();\n                    return;\n            }\n        }\n        if (this.checkTextLength()) {\n            this.keyNavigation(e);\n        }\n        if (this.mode === 'CheckBox' && this.enableSelectionOrder) {\n            this.checkBackCommand(e);\n        }\n        this.expandTextbox();\n        this.refreshPopup();\n    }\n    arrowDown(e) {\n        e.preventDefault();\n        this.moveByList(1);\n        this.keyAction = true;\n        if (document.activeElement.classList.contains('e-input-filter')\n            || (this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list)) {\n            this.list.focus();\n            EventHandler.add(this.list, 'keydown', this.onKeyDown, this);\n        }\n        this.updateAriaAttribute();\n    }\n    arrowUp(e) {\n        e.preventDefault();\n        this.keyAction = true;\n        let list = this.list.querySelectorAll('li.'\n            + dropDownBaseClasses.li\n            + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            list = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group\n                + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n        }\n        let focuseElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n        let index = Array.prototype.slice.call(list).indexOf(focuseElem);\n        if (index <= 0 && (this.mode === 'CheckBox' && this.allowFiltering)) {\n            this.keyAction = false;\n            this.notify('inputFocus', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'focus' });\n        }\n        else {\n            this.list.focus();\n        }\n        this.moveByList(-1);\n        this.updateAriaAttribute();\n    }\n    spaceKeySelection(e) {\n        if (this.mode === 'CheckBox') {\n            if (!document.activeElement.classList.contains('e-input-filter')) {\n                e.preventDefault();\n                this.keyAction = true;\n                this.list.focus();\n            }\n            this.selectByKey(e);\n        }\n        this.checkPlaceholderSize();\n    }\n    checkBackCommand(e) {\n        if (e.keyCode === 8 && this.targetElement() === '') {\n            this.backCommand = false;\n        }\n        else {\n            this.backCommand = true;\n        }\n    }\n    keyNavigation(e) {\n        if ((this.mode !== 'Delimiter' && this.mode !== 'CheckBox') && this.value && this.value.length) {\n            switch (e.keyCode) {\n                case 37: //left arrow   \n                    e.preventDefault();\n                    this.moveBy(-1, e);\n                    break;\n                case 39: //right arrow  \n                    e.preventDefault();\n                    this.moveBy(1, e);\n                    break;\n                case 8:\n                    this.removelastSelection(e);\n                    break;\n                case 46: //del\n                    this.removeSelectedChip(e);\n                    break;\n            }\n        }\n        else if (e.keyCode === 8 && this.mode === 'Delimiter') {\n            if (this.value && this.value.length) {\n                e.preventDefault();\n                let temp = this.value[this.value.length - 1];\n                this.removeValue(temp, e);\n                this.updateDelimeter(this.delimiterChar, e);\n                this.focusAtLastListItem(temp);\n            }\n        }\n    }\n    selectByKey(e) {\n        this.removeChipSelection();\n        this.selectListByKey(e);\n        if (this.hideSelectedItem) {\n            this.focusAtFirstListItem();\n        }\n    }\n    escapeAction() {\n        let temp = this.tempValues ? this.tempValues.slice() : [];\n        if (this.value && this.validateValues(this.value, temp)) {\n            if (this.mode !== 'CheckBox') {\n                this.value = temp;\n                this.initialValueUpdate();\n            }\n            if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n                this.chipCollectionWrapper.style.display = '';\n            }\n            else {\n                this.showDelimWrapper();\n            }\n            this.refreshPlaceHolder();\n            if (this.value.length) {\n                this.showOverAllClear();\n            }\n            else {\n                this.hideOverAllClear();\n            }\n        }\n        this.makeTextBoxEmpty();\n    }\n    scrollBottom(selectedLI, activeIndex) {\n        let currentOffset = this.list.offsetHeight;\n        let nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n        let nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n        let boxRange = (selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop);\n        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ?\n            boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n        if (activeIndex === 0) {\n            this.list.scrollTop = 0;\n        }\n        else if (nextBottom > currentOffset) {\n            this.list.scrollTop = nextOffset;\n        }\n        else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n            this.list.scrollTop = nextOffset;\n        }\n    }\n    scrollTop(selectedLI, activeIndex) {\n        let nextOffset = selectedLI.offsetTop - this.list.scrollTop;\n        let nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n        nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ?\n            nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n        let boxRange = (selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop);\n        if (activeIndex === 0) {\n            this.list.scrollTop = 0;\n        }\n        else if (nextOffset < 0) {\n            this.list.scrollTop = this.list.scrollTop + nextOffset;\n        }\n        else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n            this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ?\n                this.fixedHeaderElement.offsetHeight : 0);\n        }\n    }\n    selectListByKey(e) {\n        let li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        let target;\n        if (li !== null) {\n            if (li.classList.contains('e-active')) {\n                limit = limit - 1;\n            }\n            if (this.isValidLI(li) && limit < this.maximumSelectionLength) {\n                this.updateListSelection(li, e);\n                this.addListFocus(li);\n                if (this.mode === 'CheckBox') {\n                    this.updateDelimView();\n                    this.updateDelimeter(this.delimiterChar, e);\n                    this.refreshInputHight();\n                    this.checkPlaceholderSize();\n                    if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                        target = li.firstElementChild.lastElementChild;\n                        this.findGroupStart(target);\n                        this.deselectHeader();\n                    }\n                }\n                else {\n                    this.updateDelimeter(this.delimiterChar, e);\n                }\n                this.makeTextBoxEmpty();\n                if (this.mode !== 'CheckBox') {\n                    this.refreshListItems(li.textContent);\n                }\n                if (!this.changeOnBlur) {\n                    this.updateValueState(e, this.value, this.tempValues);\n                }\n                this.refreshPopup();\n            }\n            else {\n                if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {\n                    target = li.firstElementChild.lastElementChild;\n                    target.classList.contains('e-check') ? this.selectAllItem(false, e, li) : this.selectAllItem(true, e, li);\n                }\n            }\n            this.refreshSelection();\n            if (this.closePopupOnSelect) {\n                this.hidePopup();\n            }\n        }\n        this.refreshPlaceHolder();\n    }\n    refreshListItems(data) {\n        if ((this.allowFiltering || (this.mode === 'CheckBox' && this.enableSelectionOrder === true)\n            || this.allowCustomValue) && this.mainList && this.listData) {\n            let list;\n            list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            this.onActionComplete(list, this.mainData);\n            this.focusAtLastListItem(data);\n            if (this.value && this.value.length) {\n                this.refreshSelection();\n            }\n        }\n    }\n    removeSelectedChip(e) {\n        let selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n        let temp;\n        if (selectedElem !== null) {\n            if (!isNullOrUndefined(this.value)) {\n                this.tempValues = this.value.slice();\n            }\n            temp = selectedElem.nextElementSibling;\n            if (temp !== null) {\n                this.removeChipSelection();\n                this.addChipSelection(temp, e);\n            }\n            this.removeValue(selectedElem.getAttribute('data-value'), e);\n            this.makeTextBoxEmpty();\n        }\n        if (this.closePopupOnSelect) {\n            this.hidePopup();\n        }\n        this.checkPlaceholderSize();\n    }\n    moveByTop(state) {\n        let elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n        let index;\n        if (elements.length > 1) {\n            this.removeFocus();\n            index = state ? 0 : (elements.length - 1);\n            this.addListFocus(elements[index]);\n            this.scrollBottom(elements[index], index);\n        }\n        this.updateAriaAttribute();\n    }\n    moveByList(position) {\n        if (this.list) {\n            let elements = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li\n                + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n            if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n                elements = this.list.querySelectorAll('li.'\n                    + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group\n                    + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n            }\n            let selectedElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n            let temp = -1;\n            if (elements.length) {\n                for (let index = 0; index < elements.length; index++) {\n                    if (elements[index] === selectedElem) {\n                        temp = index;\n                        break;\n                    }\n                }\n                if (position > 0) {\n                    if (temp < (elements.length - 1)) {\n                        this.removeFocus();\n                        this.addListFocus(elements[++temp]);\n                        this.updateCheck(elements[temp]);\n                        this.scrollBottom(elements[temp], temp);\n                    }\n                }\n                else {\n                    if (temp > 0) {\n                        this.removeFocus();\n                        this.addListFocus(elements[--temp]);\n                        this.updateCheck(elements[temp]);\n                        this.scrollTop(elements[temp], temp);\n                    }\n                }\n            }\n        }\n    }\n    updateCheck(element) {\n        if (this.mode === 'CheckBox' && this.enableGroupCheckBox &&\n            !isNullOrUndefined(this.fields.groupBy)) {\n            let checkElement = element.firstElementChild.lastElementChild;\n            if (checkElement.classList.contains('e-check')) {\n                element.classList.add('e-active');\n            }\n            else {\n                element.classList.remove('e-active');\n            }\n        }\n    }\n    moveBy(position, e) {\n        let elements;\n        let selectedElem;\n        let temp;\n        elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n        selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n        if (selectedElem === null) {\n            if (position < 0) {\n                this.addChipSelection(elements[elements.length - 1], e);\n            }\n        }\n        else {\n            if (position < 0) {\n                temp = selectedElem.previousElementSibling;\n                if (temp !== null) {\n                    this.removeChipSelection();\n                    this.addChipSelection(temp, e);\n                }\n            }\n            else {\n                temp = selectedElem.nextElementSibling;\n                this.removeChipSelection();\n                if (temp !== null) {\n                    this.addChipSelection(temp, e);\n                }\n            }\n        }\n    }\n    chipClick(e) {\n        if (this.enabled) {\n            let elem = closest(e.target, '.' + CHIP$1);\n            this.removeChipSelection();\n            this.addChipSelection(elem, e);\n        }\n    }\n    removeChipSelection() {\n        if (this.chipCollectionWrapper) {\n            this.removeChipFocus();\n        }\n    }\n    addChipSelection(element, e) {\n        addClass([element], CHIP_SELECTED);\n        this.trigger('chipSelection', e);\n    }\n    onChipRemove(e) {\n        if (e.which === 3 || e.button === 2) {\n            return;\n        }\n        if (this.enabled && !this.readonly) {\n            let element = e.target.parentElement;\n            let customVal = element.getAttribute('data-value');\n            let value = this.getFormattedValue(customVal);\n            if (this.allowCustomValue && ((customVal !== 'false' && value === false) ||\n                (!isNullOrUndefined(value) && value.toString() === 'NaN'))) {\n                value = customVal;\n            }\n            if (this.isPopupOpen() && this.mode !== 'CheckBox') {\n                this.hidePopup();\n            }\n            if (!this.inputFocus) {\n                this.inputElement.focus();\n            }\n            this.removeValue(value, e);\n            if (isNullOrUndefined(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {\n                let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n                this.onActionComplete(list, this.mainData);\n            }\n            this.updateDelimeter(this.delimiterChar, e);\n            if (this.placeholder && this.floatLabelType === 'Never') {\n                this.makeTextBoxEmpty();\n                this.checkPlaceholderSize();\n            }\n            else {\n                this.inputElement.value = '';\n            }\n            e.preventDefault();\n        }\n    }\n    makeTextBoxEmpty() {\n        this.inputElement.value = '';\n        this.refreshPlaceHolder();\n    }\n    refreshPlaceHolder() {\n        if (this.placeholder && this.floatLabelType === 'Never') {\n            if ((this.value && this.value.length) || (!isNullOrUndefined(this.text) && this.text !== '')) {\n                this.inputElement.placeholder = '';\n            }\n            else {\n                this.inputElement.placeholder = this.placeholder;\n            }\n        }\n        else {\n            this.setFloatLabelType();\n        }\n        this.expandTextbox();\n    }\n    removeValue(value, eve, length, isClearAll) {\n        let index = this.value.indexOf(this.getFormattedValue(value));\n        if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {\n            index = this.value.indexOf(value.toString());\n        }\n        let targetEle = eve && eve.target;\n        isClearAll = (isClearAll || targetEle && targetEle.classList.contains('e-close-hooker')) ? true : null;\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (index !== -1) {\n            let element = this.findListElement(this.list, 'li', 'data-value', value);\n            let val = this.getDataByValue(value);\n            let eventArgs = {\n                e: eve,\n                item: element,\n                itemData: val,\n                isInteracted: eve ? true : false,\n                cancel: false\n            };\n            this.trigger('removing', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    this.removeIndex++;\n                }\n                else {\n                    let removeVal = this.value.slice(0);\n                    removeVal.splice(index, 1);\n                    if (isBlazor() && this.isServerRendered) {\n                        let removedValues = [].concat([], removeVal);\n                        this.setProperties({ value: removedValues.length === 0 ? null : removedValues }, true);\n                    }\n                    else {\n                        this.setProperties({ value: [].concat([], removeVal) }, true);\n                    }\n                    if (element !== null) {\n                        let hideElement = this.findListElement(this.mainList, 'li', 'data-value', value);\n                        element.setAttribute('aria-selected', 'false');\n                        removeClass([element], className);\n                        if (hideElement) {\n                            hideElement.setAttribute('aria-selected', 'false');\n                            removeClass([element, hideElement], className);\n                        }\n                        this.notify('activeList', {\n                            module: 'CheckBoxSelection',\n                            enable: this.mode === 'CheckBox', li: element,\n                            e: this, index: index\n                        });\n                        this.notify('updatelist', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: eve });\n                        attributes(this.inputElement, { 'aria-activedescendant': element.id });\n                        if ((this.value && this.value.length !== this.mainData.length)\n                            && (this.mode === 'CheckBox' && this.showSelectAll)) {\n                            this.notify('checkSelectAll', { module: 'CheckBoxSelection',\n                                enable: this.mode === 'CheckBox',\n                                value: 'uncheck' });\n                        }\n                    }\n                    if (this.hideSelectedItem && this.fields.groupBy) {\n                        this.hideGroupItem(value);\n                    }\n                    this.updateMainList(true, value);\n                    this.removeChip(value);\n                    this.updateChipStatus();\n                    let limit = this.value && this.value.length ? this.value.length : 0;\n                    if (limit < this.maximumSelectionLength) {\n                        let collection = this.list.querySelectorAll('li.'\n                            + dropDownBaseClasses.li + ':not(.e-active)');\n                        removeClass(collection, 'e-disable');\n                    }\n                    this.trigger('removed', eventArgs);\n                    let targetEle = eve && eve.currentTarget;\n                    let isSelectAll = (targetEle && targetEle.classList.contains('e-selectall-parent')) ? true : null;\n                    if (!this.changeOnBlur && !isClearAll && (eve && length && !isSelectAll)) {\n                        this.updateValueState(eve, this.value, this.tempValues);\n                    }\n                    if (length) {\n                        this.selectAllEventData.push(val);\n                        this.selectAllEventEle.push(element);\n                    }\n                    if (length === 1) {\n                        if (!this.changeOnBlur) {\n                            this.updateValueState(eve, this.value, this.tempValues);\n                        }\n                        let args = {\n                            event: eve,\n                            items: this.selectAllEventEle,\n                            itemData: this.selectAllEventData,\n                            isInteracted: eve ? true : false,\n                            isChecked: false\n                        };\n                        this.trigger('selectedAll', args);\n                        this.selectAllEventData = [];\n                        this.selectAllEventEle = [];\n                    }\n                    if (isClearAll && (length === 1 || length === null)) {\n                        this.clearAllCallback(eve, isClearAll);\n                    }\n                    if (isBlazor() && this.isServerRendered && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                        this.updatedataValueItems(eve);\n                    }\n                }\n            });\n        }\n    }\n    updateMainList(state, value) {\n        if (this.allowFiltering || this.mode === 'CheckBox') {\n            let element2 = this.findListElement(this.mainList, 'li', 'data-value', value);\n            if (element2) {\n                if (state) {\n                    element2.setAttribute('aria-selected', 'false');\n                    removeClass([element2], this.hideSelectedItem ?\n                        HIDE_LIST :\n                        dropDownBaseClasses.selected);\n                    if (this.mode === 'CheckBox') {\n                        element2.firstElementChild.setAttribute('aria-checked', 'false');\n                        removeClass([element2.firstElementChild.lastElementChild], 'e-check');\n                    }\n                }\n                else {\n                    element2.setAttribute('aria-selected', 'true');\n                    addClass([element2], this.hideSelectedItem ?\n                        HIDE_LIST :\n                        dropDownBaseClasses.selected);\n                    if (this.mode === 'CheckBox') {\n                        element2.firstElementChild.setAttribute('aria-checked', 'true');\n                        addClass([element2.firstElementChild.lastElementChild], 'e-check');\n                    }\n                }\n            }\n        }\n    }\n    removeChip(value) {\n        if (this.chipCollectionWrapper) {\n            let element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);\n            if (element) {\n                remove(element);\n            }\n        }\n    }\n    setWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.overAllWrapper.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.overAllWrapper.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    updateChipStatus() {\n        if (this.value && this.value.length) {\n            if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n                (this.chipCollectionWrapper.style.display = '');\n            }\n            if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n                this.showDelimWrapper();\n            }\n            this.showOverAllClear();\n        }\n        else {\n            if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n                this.chipCollectionWrapper.style.display = 'none';\n            }\n            if (!isNullOrUndefined(this.delimiterWrapper)) {\n                (this.delimiterWrapper.style.display = 'none');\n            }\n            this.hideOverAllClear();\n        }\n    }\n    addValue(value, text, eve) {\n        if (!this.value) {\n            this.value = [];\n        }\n        if (this.value.indexOf(value) < 0) {\n            this.setProperties({ value: [].concat([], this.value, [value]) }, true);\n        }\n        let element = this.findListElement(this.list, 'li', 'data-value', value);\n        this.removeFocus();\n        if (element) {\n            this.addListFocus(element);\n            this.addListSelection(element);\n        }\n        if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n            this.addChip(text, value, eve);\n        }\n        if (this.hideSelectedItem && this.fields.groupBy) {\n            this.hideGroupItem(value);\n        }\n        this.updateChipStatus();\n        this.checkMaxSelection();\n    }\n    checkMaxSelection() {\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        if (limit === this.maximumSelectionLength) {\n            let collection = this.list.querySelectorAll('li.'\n                + dropDownBaseClasses.li + ':not(.e-active)');\n            addClass(collection, 'e-disable');\n        }\n    }\n    dispatchSelect(value, eve, element, isNotTrigger, length) {\n        if (this.initStatus && !isNotTrigger) {\n            let val = this.getDataByValue(value);\n            let eventArgs = {\n                e: eve,\n                item: element,\n                itemData: val,\n                isInteracted: eve ? true : false,\n                cancel: false\n            };\n            this.trigger('select', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (length) {\n                        this.selectAllEventData.push(val);\n                        this.selectAllEventEle.push(element);\n                    }\n                    if (length === 1) {\n                        let args = {\n                            event: eve,\n                            items: this.selectAllEventEle,\n                            itemData: this.selectAllEventData,\n                            isInteracted: eve ? true : false,\n                            isChecked: true\n                        };\n                        this.trigger('selectedAll', args);\n                        this.selectAllEventData = [];\n                    }\n                    this.updateListSelectEventCallback(value, element, eve);\n                }\n            });\n        }\n    }\n    addChip(text, value, e) {\n        if (this.chipCollectionWrapper) {\n            this.getChip(text, value, e);\n        }\n    }\n    removeChipFocus() {\n        let elements;\n        let closeElements;\n        elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n        closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE$1.split(' ')[0]);\n        removeClass(elements, CHIP_SELECTED);\n        if (Browser.isDevice) {\n            for (let index = 0; index < closeElements.length; index++) {\n                closeElements[index].style.display = 'none';\n            }\n        }\n    }\n    onMobileChipInteraction(e) {\n        let chipElem = closest(e.target, '.' + CHIP$1);\n        let chipClose = chipElem.querySelector('span.' + CHIP_CLOSE$1.split(' ')[0]);\n        if (this.enabled && !this.readonly) {\n            if (!chipElem.classList.contains(CHIP_SELECTED)) {\n                this.removeChipFocus();\n                chipClose.style.display = '';\n                chipElem.classList.add(CHIP_SELECTED);\n            }\n            this.refreshPopup();\n            e.preventDefault();\n        }\n    }\n    multiCompiler(multiselectTemplate) {\n        let checkTemplate = false;\n        if (multiselectTemplate) {\n            try {\n                checkTemplate = (document.querySelectorAll(multiselectTemplate).length) ? true : false;\n            }\n            catch (exception) {\n                checkTemplate = false;\n            }\n        }\n        return checkTemplate;\n    }\n    getChip(data, value, e) {\n        let itemData = { text: value, value: value };\n        let chip = this.createElement('span', {\n            className: CHIP$1,\n            attrs: { 'data-value': value, 'title': data }\n        });\n        let compiledString;\n        let chipContent = this.createElement('span', { className: CHIP_CONTENT$1 });\n        let chipClose = this.createElement('span', { className: CHIP_CLOSE$1 });\n        if (this.mainData) {\n            itemData = (isBlazor() && this.isServerRendered) ? JSON.parse(JSON.stringify(this.getDataByValue(value)))\n                : this.getDataByValue(value);\n        }\n        if (this.valueTemplate && !isNullOrUndefined(itemData)) {\n            let valuecheck = this.multiCompiler(this.valueTemplate);\n            if (valuecheck) {\n                compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n            }\n            else {\n                compiledString = compile(this.valueTemplate);\n            }\n            for (let item of compiledString(itemData, null, null, this.valueTemplateId, this.isStringTemplate)) {\n                chipContent.appendChild(item);\n            }\n            this.DropDownBaseupdateBlazorTemplates(false, false, false, false, true, false, false, false);\n        }\n        else if (this.enableHtmlSanitizer) {\n            chipContent.innerText = data;\n        }\n        else {\n            chipContent.innerHTML = data;\n        }\n        chip.appendChild(chipContent);\n        let eventArgs = {\n            isInteracted: e ? true : false,\n            itemData: itemData,\n            e: e,\n            setClass: (classes) => {\n                addClass([chip], classes);\n            },\n            cancel: false\n        };\n        this.trigger('tagging', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                if (eventArgs.setClass && typeof eventArgs.setClass === 'string' && (isBlazor() && this.isServerRendered)) {\n                    addClass([chip], eventArgs.setClass);\n                }\n                if (Browser.isDevice) {\n                    chip.classList.add(MOBILE_CHIP);\n                    append([chipClose], chip);\n                    chipClose.style.display = 'none';\n                    EventHandler.add(chip, 'click', this.onMobileChipInteraction, this);\n                }\n                else {\n                    EventHandler.add(chip, 'mousedown', this.chipClick, this);\n                    if (this.showClearButton) {\n                        chip.appendChild(chipClose);\n                    }\n                }\n                EventHandler.add(chipClose, 'mousedown', this.onChipRemove, this);\n                this.chipCollectionWrapper.appendChild(chip);\n                if (!this.changeOnBlur && e) {\n                    this.updateValueState(e, this.value, this.tempValues);\n                }\n            }\n        });\n    }\n    calcPopupWidth() {\n        let width = formatUnit(this.popupWidth);\n        if (width.indexOf('%') > -1) {\n            let inputWidth = (this.componentWrapper.offsetWidth) * parseFloat(width) / 100;\n            width = inputWidth.toString() + 'px';\n        }\n        return width;\n    }\n    mouseIn() {\n        if (this.enabled && !this.readonly) {\n            this.showOverAllClear();\n        }\n    }\n    mouseOut() {\n        if (!this.inputFocus) {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    listOption(dataSource, fields) {\n        let iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n        let fieldProperty = isNullOrUndefined(fields.properties) ? fields :\n            fields.properties;\n        this.listCurrentOptions = (fields.text !== null || fields.value !== null) ? {\n            fields: fieldProperty, showIcon: iconCss, ariaAttributes: { groupItemRole: 'presentation' }\n        } : { fields: { value: 'text' } };\n        extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);\n        if (this.mode === 'CheckBox') {\n            this.notify('listoption', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', dataSource, fieldProperty });\n        }\n        return this.listCurrentOptions;\n    }\n    renderPopup() {\n        if (!this.list) {\n            super.render();\n        }\n        if (!this.popupObj) {\n            let args = { cancel: false };\n            this.trigger('beforeOpen', args, (args) => {\n                if (!args.cancel) {\n                    document.body.appendChild(this.popupWrapper);\n                    let checkboxFilter = this.popupWrapper.querySelector('.' + FILTERPARENT);\n                    if (this.mode === 'CheckBox' && !this.allowFiltering && checkboxFilter && this.filterParent) {\n                        checkboxFilter.remove();\n                        this.filterParent = null;\n                    }\n                    let overAllHeight = parseInt(this.popupHeight, 10);\n                    this.popupWrapper.style.visibility = 'hidden';\n                    if (this.headerTemplate) {\n                        this.setHeaderTemplate();\n                        overAllHeight -= this.header.offsetHeight;\n                    }\n                    append([this.list], this.popupWrapper);\n                    if (this.footerTemplate) {\n                        this.setFooterTemplate();\n                        overAllHeight -= this.footer.offsetHeight;\n                    }\n                    if (this.mode === 'CheckBox' && this.showSelectAll) {\n                        this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                        overAllHeight -= this.selectAllHeight;\n                    }\n                    else if (this.mode === 'CheckBox' && !this.showSelectAll && (!this.headerTemplate || !this.footerTemplate)) {\n                        this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                        overAllHeight = parseInt(this.popupHeight, 10);\n                    }\n                    else if (this.mode === 'CheckBox' && !this.showSelectAll) {\n                        this.notify('selectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                        overAllHeight = parseInt(this.popupHeight, 10);\n                        if (this.headerTemplate && this.header) {\n                            overAllHeight -= this.header.offsetHeight;\n                        }\n                        if (this.footerTemplate && this.footer) {\n                            overAllHeight -= this.footer.offsetHeight;\n                        }\n                    }\n                    if (this.mode === 'CheckBox') {\n                        let args = {\n                            module: 'CheckBoxSelection',\n                            enable: this.mode === 'CheckBox',\n                            popupElement: this.popupWrapper\n                        };\n                        if (this.allowFiltering) {\n                            this.notify('searchBox', args);\n                            overAllHeight -= this.searchBoxHeight;\n                        }\n                        addClass([this.popupWrapper], 'e-checkbox');\n                    }\n                    if (this.popupHeight !== 'auto') {\n                        this.list.style.maxHeight = formatUnit(overAllHeight);\n                        this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);\n                    }\n                    else {\n                        this.list.style.maxHeight = formatUnit(this.popupHeight);\n                    }\n                    this.popupObj = new Popup(this.popupWrapper, {\n                        width: this.calcPopupWidth(), targetType: 'relative', position: { X: 'left', Y: 'bottom' },\n                        relateTo: this.overAllWrapper, collision: { X: 'flip', Y: 'flip' }, offsetY: 1,\n                        enableRtl: this.enableRtl, zIndex: this.zIndex,\n                        close: () => {\n                            if (this.popupObj.element.parentElement) {\n                                this.popupObj.unwireScrollEvents();\n                                detach(this.popupObj.element);\n                            }\n                        },\n                        open: () => {\n                            this.popupObj.resolveCollision();\n                            if (!this.isFirstClick) {\n                                let ulElement = this.list.querySelector('ul');\n                                if (ulElement) {\n                                    if (this.itemTemplate && (isBlazor() && this.isServerRendered)) {\n                                        setTimeout(() => { this.mainList = this.ulElement; }, 0);\n                                    }\n                                    else if (!(this.mode !== 'CheckBox' && (this.allowFiltering || this.allowCustomValue) &&\n                                        this.targetElement().trim() !== '')) {\n                                        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                                    }\n                                }\n                                this.isFirstClick = true;\n                            }\n                            this.popupObj.wireScrollEvents();\n                            if (!(this.mode !== 'CheckBox' && (this.allowFiltering || this.allowCustomValue) &&\n                                this.targetElement().trim() !== '')) {\n                                this.loadTemplate();\n                            }\n                            this.setScrollPosition();\n                            if (this.allowFiltering) {\n                                this.notify('inputFocus', {\n                                    module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'focus'\n                                });\n                            }\n                        }, targetExitViewport: () => {\n                            if (!Browser.isDevice) {\n                                this.hidePopup();\n                            }\n                        }\n                    });\n                    if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                        this.notify('deviceSearchBox', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n                    }\n                    this.popupObj.close();\n                    this.popupWrapper.style.visibility = '';\n                }\n            });\n        }\n    }\n    setHeaderTemplate() {\n        let compiledString;\n        if (this.header) {\n            this.header.remove();\n        }\n        this.header = this.createElement('div');\n        addClass([this.header], HEADER$1);\n        let headercheck = this.multiCompiler(this.headerTemplate);\n        if (headercheck) {\n            compiledString = compile(document.querySelector(this.headerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.headerTemplate);\n        }\n        let elements = compiledString({}, null, null, this.headerTemplateId, this.isStringTemplate);\n        for (let temp = 0; temp < elements.length; temp++) {\n            this.header.appendChild(elements[temp]);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, true, false);\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n            prepend([this.header], this.popupWrapper);\n        }\n        else {\n            append([this.header], this.popupWrapper);\n        }\n        EventHandler.add(this.header, 'mousedown', this.onListMouseDown, this);\n    }\n    setFooterTemplate() {\n        let compiledString;\n        if (this.footer) {\n            this.footer.remove();\n        }\n        this.footer = this.createElement('div');\n        addClass([this.footer], FOOTER$1);\n        let footercheck = this.multiCompiler(this.footerTemplate);\n        if (footercheck) {\n            compiledString = compile(document.querySelector(this.footerTemplate).innerHTML.trim());\n        }\n        else {\n            compiledString = compile(this.footerTemplate);\n        }\n        let elements = compiledString({}, null, null, this.footerTemplateId, this.isStringTemplate);\n        for (let temp = 0; temp < elements.length; temp++) {\n            this.footer.appendChild(elements[temp]);\n        }\n        this.DropDownBaseupdateBlazorTemplates(false, false, false, false, false, false, true);\n        append([this.footer], this.popupWrapper);\n        EventHandler.add(this.footer, 'mousedown', this.onListMouseDown, this);\n    }\n    ClearAll(e) {\n        if (this.enabled && !this.readonly) {\n            let temp;\n            if (this.value && this.value.length > 0) {\n                let liElement = this.list && this.list.querySelectorAll('li.e-list-item');\n                if (liElement && liElement.length > 0) {\n                    this.selectAllItems(false, e);\n                }\n                else {\n                    this.removeIndex = 0;\n                    for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {\n                        this.removeValue(temp, e, null, true);\n                        if (this.value === null && isBlazor() && this.isServerRendered) {\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.clearAllCallback(e);\n            }\n        }\n    }\n    clearAllCallback(e, isClearAll) {\n        let tempValues = this.value ? this.value.slice() : [];\n        if (this.mainList && this.listData && ((this.allowFiltering && this.mode !== 'CheckBox') || this.allowCustomValue)) {\n            let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            this.onActionComplete(list, this.mainData);\n        }\n        this.focusAtFirstListItem();\n        this.updateDelimeter(this.delimiterChar, e);\n        if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {\n            this.updateDelimView();\n        }\n        this.makeTextBoxEmpty();\n        this.checkPlaceholderSize();\n        if (this.isPopupOpen()) {\n            this.refreshPopup();\n        }\n        if (!this.inputFocus) {\n            if (this.changeOnBlur) {\n                this.updateValueState(e, this.value, tempValues);\n            }\n            if (this.mode !== 'CheckBox') {\n                this.inputElement.focus();\n            }\n        }\n        if (this.mode === 'CheckBox') {\n            this.refreshPlaceHolder();\n            this.refreshInputHight();\n            if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n                this.updateValueState(e, this.value, this.tempValues);\n            }\n        }\n        if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n            this.updateValueState(e, this.value, this.tempValues);\n        }\n        if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n        }\n        e.preventDefault();\n    }\n    windowResize() {\n        this.refreshPopup();\n        if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {\n            this.updateDelimView();\n        }\n    }\n    resetValueHandler(e) {\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement && e.target === formElement) {\n            let textVal = (this.element.tagName === this.getNgDirective()) ? null : this.element.getAttribute('data-initial-value');\n            this.text = textVal;\n        }\n    }\n    wireEvent() {\n        EventHandler.add(this.componentWrapper, 'mousedown', this.wrapperClick, this);\n        EventHandler.add(window, 'resize', this.windowResize, this);\n        EventHandler.add(this.inputElement, 'focus', this.focusInHandler, this);\n        EventHandler.add(this.inputElement, 'keydown', this.onKeyDown, this);\n        EventHandler.add(this.inputElement, 'keyup', this.KeyUp, this);\n        if (this.mode !== 'CheckBox') {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n        }\n        EventHandler.add(this.inputElement, 'blur', this.onBlur, this);\n        EventHandler.add(this.componentWrapper, 'mousemove', this.mouseIn, this);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n        }\n        EventHandler.add(this.componentWrapper, 'mouseout', this.mouseOut, this);\n        EventHandler.add(this.overAllClear, 'mouseup', this.ClearAll, this);\n        EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n    }\n    onInput(e) {\n        if (this.keyDownStatus) {\n            this.isValidKey = true;\n        }\n        else {\n            this.isValidKey = false;\n        }\n        this.keyDownStatus = false;\n        // For Filtering works in mobile firefox\n        if (Browser.isDevice && Browser.info.name === 'mozilla') {\n            this.search(e);\n        }\n    }\n    pasteHandler(event) {\n        setTimeout(() => {\n            this.search(event);\n        });\n    }\n    search(e) {\n        if (!this.isPopupOpen() && this.openOnClick) {\n            this.showPopup();\n        }\n        this.openClick(e);\n        if (this.checkTextLength() && !this.allowFiltering && (e.keyCode !== 8)) {\n            this.focusAtFirstListItem();\n        }\n        else {\n            let text = this.targetElement();\n            this.keyCode = e.keyCode;\n            if (this.allowFiltering) {\n                let eventArgs = {\n                    preventDefaultAction: false,\n                    text: this.targetElement(),\n                    updateData: (dataSource, query, fields) => {\n                        if (eventArgs.cancel) {\n                            return;\n                        }\n                        this.isFiltered = true;\n                        this.remoteFilterAction = true;\n                        this.dataUpdater(dataSource, query, fields);\n                    },\n                    event: e,\n                    cancel: false\n                };\n                this.trigger('filtering', eventArgs, (eventArgs) => {\n                    if (!eventArgs.cancel) {\n                        if (!this.isFiltered && !eventArgs.preventDefaultAction) {\n                            this.filterAction = true;\n                            this.dataUpdater(this.dataSource, null, this.fields);\n                        }\n                    }\n                });\n            }\n            else if (this.allowCustomValue) {\n                let query = new Query();\n                query = (text !== '') ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;\n                this.dataUpdater(this.mainData, query, this.fields);\n            }\n            else {\n                let liCollections;\n                liCollections = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-hide-listitem)');\n                let activeElement = Search(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);\n                if (activeElement && activeElement.item !== null) {\n                    this.addListFocus(activeElement.item);\n                    this.list.scrollTop =\n                        activeElement.item.offsetHeight * activeElement.index;\n                }\n                else if (this.targetElement() !== '') {\n                    this.removeFocus();\n                }\n                else {\n                    this.focusAtFirstListItem();\n                }\n            }\n        }\n    }\n    preRender() {\n        if (this.allowFiltering === null) {\n            this.allowFiltering = (this.mode === 'CheckBox') ? true : false;\n        }\n        this.initializeData();\n        this.updateDataAttribute(this.htmlAttributes);\n        super.preRender();\n    }\n    getLocaleName() {\n        return 'multi-select';\n    }\n    ;\n    initializeData() {\n        this.mainListCollection = [];\n        this.beforePopupOpen = false;\n        this.filterAction = false;\n        this.remoteFilterAction = false;\n        this.isFirstClick = false;\n        this.mobFilter = true;\n        this.isFiltered = false;\n        this.focused = true;\n        this.initial = true;\n        this.backCommand = true;\n    }\n    updateData(delimiterChar, e) {\n        let data = '';\n        let delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';\n        let text = [];\n        let temp;\n        let tempData = this.listData;\n        this.listData = this.mainData;\n        this.hiddenElement.innerHTML = '';\n        if (!isNullOrUndefined(this.value)) {\n            for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                if (this.listData) {\n                    temp = this.getTextByValue(this.value[index]);\n                }\n                else {\n                    temp = this.value[index];\n                }\n                data += temp + delimiterChar + ' ';\n                text.push(temp);\n                this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[index] + '\">' + index + '</option>';\n            }\n        }\n        this.setProperties({ text: text.toString() }, true);\n        if (delim) {\n            this.updateWrapperText(this.delimiterWrapper, data);\n            this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n            this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);\n        }\n        let targetEle = e && e.target;\n        let isClearAll = (targetEle && targetEle.classList.contains('e-close-hooker')) ? true : null;\n        if (!this.changeOnBlur && ((e && !isClearAll)) || this.isSelectAll) {\n            this.isSelectAll = false;\n            this.updateValueState(e, this.value, this.tempValues);\n        }\n        this.listData = tempData;\n        this.addValidInputClass();\n    }\n    initialTextUpdate() {\n        if (!isNullOrUndefined(this.text)) {\n            let textArr = this.text.split(this.delimiterChar);\n            let textVal = [];\n            for (let index = 0; textArr.length > index; index++) {\n                let val = this.getValueByText(textArr[index]);\n                if (!isNullOrUndefined(val)) {\n                    textVal.push(val);\n                }\n                else if (this.allowCustomValue) {\n                    textVal.push(textArr[index]);\n                }\n            }\n            if (textVal && textVal.length) {\n                this.setProperties({ value: textVal }, true);\n            }\n        }\n        else {\n            this.setProperties({ value: null }, true);\n        }\n    }\n    renderList(isEmptyData) {\n        if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate\n            || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {\n            isEmptyData = true;\n        }\n        super.render(isEmptyData);\n        this.unwireListEvents();\n        this.wireListEvents();\n    }\n    initialValueUpdate() {\n        if (this.list) {\n            let text;\n            let element;\n            let value;\n            if (this.chipCollectionWrapper) {\n                this.chipCollectionWrapper.innerHTML = '';\n            }\n            this.removeListSelection();\n            if (!isNullOrUndefined(this.value)) {\n                for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                    value = this.value[index];\n                    element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n                    text = this.getTextByValue(value);\n                    if ((element && (element.getAttribute('aria-selected') !== 'true')) ||\n                        (element && (element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem) &&\n                            (this.mode === 'Box' || this.mode === 'Default'))) {\n                        this.addChip(text, value);\n                        this.addListSelection(element);\n                    }\n                    else if (value && this.allowCustomValue) {\n                        let indexItem = this.listData.length;\n                        let newValue = {};\n                        setValue(this.fields.text, value, newValue);\n                        setValue(this.fields.value, value, newValue);\n                        let noDataEle = this.popupWrapper.querySelector('.' + dropDownBaseClasses.noData);\n                        this.addItem(newValue, indexItem);\n                        if (this.popupWrapper.contains(noDataEle)) {\n                            this.list.setAttribute('style', noDataEle.getAttribute('style'));\n                            this.popupWrapper.replaceChild(this.list, noDataEle);\n                            this.wireListEvents();\n                        }\n                        this.addChip(text, value);\n                        this.addListSelection(element);\n                    }\n                }\n            }\n            if (this.mode === 'CheckBox') {\n                this.updateDelimView();\n                if (this.changeOnBlur) {\n                    this.updateValueState(null, this.value, this.tempValues);\n                }\n                this.updateDelimeter(this.delimiterChar);\n                this.refreshInputHight();\n            }\n            else {\n                this.updateDelimeter(this.delimiterChar);\n            }\n            if (this.mode === 'CheckBox' && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {\n                this.notify('checkSelectAll', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'uncheck' });\n            }\n            if (this.mode === 'Box') {\n                this.chipCollectionWrapper.style.display = '';\n            }\n            else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n                this.showDelimWrapper();\n            }\n        }\n    }\n    updateActionCompleteData(li, item) {\n        if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {\n            this.mainList = this.ulElement;\n            addClass([li], HIDE_LIST);\n        }\n    }\n    updateAddItemList(list, itemCount) {\n        if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + dropDownBaseClasses.noData) && list) {\n            this.list = list;\n            this.mainList = this.ulElement = list.querySelector('ul');\n            remove(this.popupWrapper.querySelector('.e-content'));\n            this.popupObj = null;\n            this.renderPopup();\n        }\n    }\n    updateDataList() {\n        if (this.mainList && this.ulElement && this.mainList.childElementCount < this.ulElement.childElementCount) {\n            this.mainList = this.ulElement.cloneNode ? this.ulElement.cloneNode(true) : this.ulElement;\n        }\n    }\n    isValidLI(li) {\n        return (li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) &&\n            li.classList.contains(dropDownBaseClasses.li));\n    }\n    ;\n    updateListSelection(li, e, length) {\n        let customVal = li.getAttribute('data-value');\n        let value = this.getFormattedValue(customVal);\n        if (this.allowCustomValue && ((customVal !== 'false' && value === false) ||\n            (!isNullOrUndefined(value) && value.toString() === 'NaN'))) {\n            value = customVal;\n        }\n        let text = this.getTextByValue(value);\n        this.removeHover();\n        if (!this.value || this.value.indexOf(value) === -1) {\n            this.dispatchSelect(value, e, li, (li.getAttribute('aria-selected') === 'true'), length);\n        }\n        else {\n            this.removeValue(value, e, length);\n        }\n    }\n    updateListSelectEventCallback(value, li, e) {\n        let text = this.getTextByValue(value);\n        if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {\n            let temp = li.cloneNode(true);\n            let data = this.getDataByValue(value);\n            let eventArgs = {\n                newData: data,\n                cancel: false\n            };\n            this.trigger('customValueSelection', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    append([temp], this.mainList);\n                    this.mainData.push(data);\n                    this.remoteCustomValue = false;\n                    this.addValue(value, text, e);\n                }\n            });\n        }\n        else {\n            this.remoteCustomValue = false;\n            this.addValue(value, text, e);\n        }\n        if (isBlazor() && this.isServerRendered && this.value && this.list &&\n            this.value.length === this.list.querySelectorAll('li.e-list-item').length ||\n            this.value.length === this.maximumSelectionLength) {\n            this.updatedataValueItems(e);\n            this.checkPlaceholderSize();\n        }\n        if (isBlazor() && this.isServerRendered) {\n            this.checkPlaceholderSize();\n            this.makeTextBoxEmpty();\n        }\n    }\n    removeListSelection() {\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        let selectedItems = this.list.querySelectorAll('.' + className);\n        let temp = selectedItems.length;\n        if (selectedItems && selectedItems.length) {\n            removeClass(selectedItems, className);\n            while (temp > 0) {\n                selectedItems[temp - 1].setAttribute('aria-selected', 'false');\n                temp--;\n            }\n        }\n        if (!isNullOrUndefined(this.mainList)) {\n            let selectItems = this.mainList.querySelectorAll('.' + className);\n            let temp1 = selectItems.length;\n            if (selectItems && selectItems.length) {\n                removeClass(selectItems, className);\n                while (temp1 > 0) {\n                    selectItems[temp1 - 1].setAttribute('aria-selected', 'false');\n                    if (this.mode === 'CheckBox') {\n                        if (selectedItems && (selectedItems.length > (temp1 - 1))) {\n                            selectedItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');\n                            removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n                        }\n                        selectItems[temp1 - 1].firstElementChild.setAttribute('aria-checked', 'false');\n                        removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n                    }\n                    temp1--;\n                }\n            }\n        }\n    }\n    ;\n    removeHover() {\n        let hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n        if (hoveredItem && hoveredItem.length) {\n            removeClass(hoveredItem, dropDownBaseClasses.hover);\n        }\n    }\n    ;\n    removeFocus() {\n        if (this.list && this.mainList) {\n            let hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.focus);\n            let mainlist = this.mainList.querySelectorAll('.' + dropDownBaseClasses.focus);\n            if (hoveredItem && hoveredItem.length) {\n                removeClass(hoveredItem, dropDownBaseClasses.focus);\n                removeClass(mainlist, dropDownBaseClasses.focus);\n            }\n        }\n    }\n    ;\n    addListHover(li) {\n        if (this.enabled && this.isValidLI(li)) {\n            this.removeHover();\n            addClass([li], dropDownBaseClasses.hover);\n        }\n        else {\n            if ((li !== null && li.classList.contains('e-list-group-item')) && this.enableGroupCheckBox && this.mode === 'CheckBox'\n                && !isNullOrUndefined(this.fields.groupBy)) {\n                this.removeHover();\n                addClass([li], dropDownBaseClasses.hover);\n            }\n        }\n    }\n    ;\n    addListFocus(element) {\n        if (this.enabled && this.isValidLI(element)) {\n            this.removeFocus();\n            addClass([element], dropDownBaseClasses.focus);\n        }\n        else {\n            if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n                addClass([element], dropDownBaseClasses.focus);\n            }\n        }\n    }\n    addListSelection(element) {\n        let className = this.hideSelectedItem ?\n            HIDE_LIST :\n            dropDownBaseClasses.selected;\n        if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {\n            addClass([element], className);\n            this.updateMainList(false, element.getAttribute('data-value'));\n            element.setAttribute('aria-selected', 'true');\n            if (this.mode === 'CheckBox') {\n                let ariaCheck = element.firstElementChild.getAttribute('aria-checked');\n                if (ariaCheck === 'false' || isNullOrUndefined(ariaCheck)) {\n                    this.notify('updatelist', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: this });\n                }\n            }\n            this.notify('activeList', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', li: element, e: this });\n            if (this.chipCollectionWrapper !== null) {\n                this.removeChipSelection();\n            }\n            attributes(this.inputElement, { 'aria-activedescendant': element.id });\n        }\n    }\n    updateDelimeter(delimChar, e) {\n        this.updateData(delimChar, e);\n    }\n    onMouseClick(e) {\n        this.scrollFocusStatus = false;\n        let target = e.target;\n        let li = closest(target, '.' + dropDownBaseClasses.li);\n        let headerLi = closest(target, '.' + dropDownBaseClasses.group);\n        if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {\n            target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild\n                : e.target;\n            if (target.classList.contains('e-check')) {\n                this.selectAllItem(false, e);\n                target.classList.remove('e-check');\n                target.classList.remove('e-stop');\n                closest(target, '.' + 'e-list-group-item').classList.remove('e-active');\n                target.setAttribute('aria-selected', 'false');\n            }\n            else {\n                this.selectAllItem(true, e);\n                target.classList.remove('e-stop');\n                target.classList.add('e-check');\n                closest(target, '.' + 'e-list-group-item').classList.add('e-active');\n                target.setAttribute('aria-selected', 'true');\n            }\n            this.refreshSelection();\n            this.checkSelectAll();\n        }\n        else {\n            if (this.isValidLI(li)) {\n                let limit = this.value && this.value.length ? this.value.length : 0;\n                if (li.classList.contains('e-active')) {\n                    limit = limit - 1;\n                }\n                if (limit < this.maximumSelectionLength) {\n                    this.updateListSelection(li, e);\n                    this.checkPlaceholderSize();\n                    this.addListFocus(li);\n                    if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {\n                        if (this.mode !== 'CheckBox') {\n                            this.focusAtLastListItem(li.getAttribute('data-value'));\n                        }\n                        this.refreshSelection();\n                    }\n                    else {\n                        this.makeTextBoxEmpty();\n                    }\n                }\n                if (this.mode === 'CheckBox') {\n                    this.updateDelimView();\n                    this.updateDelimeter(this.delimiterChar, e);\n                    this.refreshInputHight();\n                }\n                else {\n                    this.updateDelimeter(this.delimiterChar, e);\n                }\n                this.checkSelectAll();\n                this.refreshPopup();\n                if (this.hideSelectedItem) {\n                    this.focusAtFirstListItem();\n                }\n                if (this.closePopupOnSelect) {\n                    this.hidePopup();\n                }\n                else {\n                    e.preventDefault();\n                }\n                this.makeTextBoxEmpty();\n                this.findGroupStart(target);\n            }\n            else {\n                e.preventDefault();\n            }\n            if (this.mode !== 'CheckBox') {\n                this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);\n            }\n            this.refreshPlaceHolder();\n            this.deselectHeader();\n        }\n    }\n    findGroupStart(target) {\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            let count = 0;\n            let liChecked = 0;\n            let liUnchecked = 0;\n            let groupValues;\n            if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {\n                while (!target.getElementsByClassName('e-frame').length) {\n                    target = target.parentElement;\n                }\n            }\n            if (target.classList.contains('e-frame')) {\n                target = target.parentElement.parentElement;\n            }\n            groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);\n            groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);\n            while (!target.classList.contains('e-list-group-item')) {\n                if (target.classList.contains('e-list-icon')) {\n                    target = target.parentElement;\n                }\n                target = target.previousElementSibling;\n                if (target == null) {\n                    break;\n                }\n            }\n            this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);\n        }\n    }\n    findGroupAttrtibutes(listElement, checked, unChecked, count, position) {\n        while (!listElement.classList.contains('e-list-group-item')) {\n            if (listElement.classList.contains('e-list-icon')) {\n                listElement = listElement.parentElement;\n            }\n            if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') &&\n                listElement.classList.contains('e-list-item')) {\n                checked++;\n            }\n            else if (listElement.classList.contains('e-list-item')) {\n                unChecked++;\n            }\n            count++;\n            listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;\n            if (listElement == null) {\n                break;\n            }\n        }\n        return [checked, unChecked, count];\n    }\n    updateCheckBox(groupHeader, checked, unChecked, count) {\n        if (groupHeader === null) {\n            return;\n        }\n        let checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];\n        if (count === checked) {\n            checkBoxElement.classList.remove('e-stop');\n            checkBoxElement.classList.add('e-check');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            groupHeader.setAttribute('aria-selected', 'true');\n        }\n        else if (count === unChecked) {\n            checkBoxElement.classList.remove('e-check');\n            checkBoxElement.classList.remove('e-stop');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');\n            groupHeader.setAttribute('aria-selected', 'false');\n        }\n        else if (this.maximumSelectionLength === checked - 1) {\n            checkBoxElement.classList.remove('e-stop');\n            groupHeader.setAttribute('aria-selected', 'true');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            checkBoxElement.classList.add('e-check');\n        }\n        else {\n            checkBoxElement.classList.remove('e-check');\n            checkBoxElement.classList.add('e-stop');\n            closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n            groupHeader.setAttribute('aria-selected', 'false');\n        }\n    }\n    deselectHeader() {\n        let limit = this.value && this.value.length ? this.value.length : 0;\n        let collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');\n        if (limit < this.maximumSelectionLength) {\n            removeClass(collection, 'e-disable');\n        }\n        if (limit === this.maximumSelectionLength) {\n            addClass(collection, 'e-disable');\n        }\n    }\n    onMouseOver(e) {\n        let currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n        if (currentLi === null && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)\n            && this.enableGroupCheckBox) {\n            currentLi = closest(e.target, '.' + dropDownBaseClasses.group);\n        }\n        this.addListHover(currentLi);\n    }\n    onMouseLeave(e) {\n        this.removeHover();\n    }\n    onListMouseDown(e) {\n        e.preventDefault();\n        this.scrollFocusStatus = true;\n    }\n    onDocumentClick(e) {\n        if (this.mode !== 'CheckBox') {\n            let target = e.target;\n            if (!(!isNullOrUndefined(this.popupObj) && closest(target, '#' + this.popupObj.element.id)) &&\n                !this.overAllWrapper.contains(e.target)) {\n                this.scrollFocusStatus = false;\n            }\n            else {\n                this.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.inputElement);\n            }\n        }\n    }\n    wireListEvents() {\n        EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n        EventHandler.add(this.list, 'mousedown', this.onListMouseDown, this);\n        EventHandler.add(this.list, 'mouseup', this.onMouseClick, this);\n        EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n    ;\n    unwireListEvents() {\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        if (this.list) {\n            EventHandler.remove(this.list, 'mousedown', this.onListMouseDown);\n            EventHandler.remove(this.list, 'mouseup', this.onMouseClick);\n            EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n            EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n        }\n    }\n    ;\n    hideOverAllClear() {\n        if (!this.value || !this.value.length || this.inputElement.value === '') {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    showOverAllClear() {\n        if (((this.value && this.value.length) || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {\n            this.overAllClear.style.display = '';\n        }\n        else {\n            this.overAllClear.style.display = 'none';\n        }\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.inputElement && this.enabled) {\n            this.inputElement.focus();\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.inputElement && this.enabled) {\n            this.inputElement.blur();\n        }\n    }\n    /**\n     * Shows the spinner loader.\n     * @returns void.\n     */\n    showSpinner() {\n        if (isNullOrUndefined(this.spinnerElement)) {\n            if (this.overAllClear.style.display !== 'none') {\n                this.spinnerElement = this.overAllClear;\n            }\n            else {\n                this.spinnerElement = this.createElement('span', { className: CLOSEICON_CLASS$1 + ' ' + SPINNER_CLASS$1 });\n                this.componentWrapper.appendChild(this.spinnerElement);\n            }\n            createSpinner({ target: this.spinnerElement, width: Browser.isDevice ? '16px' : '14px' }, this.createElement);\n            addClass([this.spinnerElement], DISABLE_ICON);\n            showSpinner(this.spinnerElement);\n        }\n    }\n    /**\n     * Hides the spinner loader.\n     * @returns void.\n     */\n    hideSpinner() {\n        if (!isNullOrUndefined(this.spinnerElement)) {\n            hideSpinner(this.spinnerElement);\n            removeClass([this.spinnerElement], DISABLE_ICON);\n            if (this.spinnerElement.classList.contains(SPINNER_CLASS$1)) {\n                detach(this.spinnerElement);\n            }\n            else {\n                this.spinnerElement.innerHTML = '';\n            }\n            this.spinnerElement = null;\n        }\n    }\n    updateWrapperText(wrapperType, wrapperData) {\n        if (this.valueTemplate || !this.enableHtmlSanitizer) {\n            wrapperType.innerHTML = wrapperData;\n        }\n        else {\n            wrapperType.innerText = SanitizeHtmlHelper.sanitize(wrapperData);\n        }\n    }\n    updateDelimView() {\n        if (this.delimiterWrapper) {\n            this.hideDelimWrapper();\n        }\n        if (this.chipCollectionWrapper) {\n            this.chipCollectionWrapper.style.display = 'none';\n        }\n        this.viewWrapper.style.display = '';\n        this.viewWrapper.style.width = '';\n        this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);\n        if (this.value && this.value.length) {\n            let data = '';\n            let temp;\n            let tempData;\n            let tempIndex = 1;\n            let wrapperleng;\n            let remaining;\n            let downIconWidth = 0;\n            let overAllContainer;\n            this.updateWrapperText(this.viewWrapper, data);\n            let l10nLocale = {\n                noRecordsTemplate: 'No records found',\n                actionFailureTemplate: 'Request failed',\n                overflowCountTemplate: '+${count} more..',\n                totalCountTemplate: '${count} selected'\n            };\n            let l10n = new L10n(this.getLocaleName(), {}, this.locale);\n            if (l10n.getConstant('actionFailureTemplate') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.locale);\n            }\n            let remainContent = l10n.getConstant('overflowCountTemplate');\n            let raminElement = this.createElement('span', {\n                className: REMAIN_WRAPPER$1\n            });\n            let compiledString = compile(remainContent);\n            let totalCompiledString = compile(l10n.getConstant('totalCountTemplate'));\n            raminElement.appendChild(compiledString({ 'count': this.value.length }, null, null, null, !this.isStringTemplate)[0]);\n            this.viewWrapper.appendChild(raminElement);\n            let remainSize = raminElement.offsetWidth;\n            remove(raminElement);\n            if (this.showDropDownIcon) {\n                downIconWidth = this.dropIcon.offsetWidth +\n                    parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n            }\n            if (!isNullOrUndefined(this.value)) {\n                for (let index = 0; !isNullOrUndefined(this.value[index]); index++) {\n                    data += (index === 0) ? '' : this.delimiterChar + ' ';\n                    temp = this.getOverflowVal(index);\n                    data += temp;\n                    temp = this.viewWrapper.innerHTML;\n                    this.updateWrapperText(this.viewWrapper, data);\n                    wrapperleng = this.viewWrapper.offsetWidth +\n                        parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n                    overAllContainer = this.componentWrapper.offsetWidth -\n                        parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) -\n                        parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n                    if ((wrapperleng + downIconWidth) > overAllContainer) {\n                        if (tempData !== undefined && tempData !== '') {\n                            temp = tempData;\n                            index = tempIndex + 1;\n                        }\n                        this.updateWrapperText(this.viewWrapper, temp);\n                        remaining = this.value.length - index;\n                        wrapperleng = this.viewWrapper.offsetWidth;\n                        while (((wrapperleng + remainSize + downIconWidth) > overAllContainer) && wrapperleng !== 0\n                            && this.viewWrapper.innerHTML !== '') {\n                            let textArr = this.viewWrapper.innerHTML.split(this.delimiterChar);\n                            textArr.pop();\n                            this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);\n                            if (this.viewWrapper.innerHTML === '') {\n                                remaining++;\n                            }\n                            wrapperleng = this.viewWrapper.offsetWidth;\n                        }\n                        break;\n                    }\n                    else if ((wrapperleng + remainSize + downIconWidth) <= overAllContainer) {\n                        tempData = data;\n                        tempIndex = index;\n                    }\n                    else if (index === 0) {\n                        tempData = '';\n                        tempIndex = -1;\n                    }\n                }\n            }\n            if (remaining > 0) {\n                let totalWidth = overAllContainer - downIconWidth;\n                this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth));\n                this.updateRemainWidth(this.viewWrapper, totalWidth);\n                this.updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString);\n            }\n        }\n        else {\n            this.viewWrapper.innerHTML = '';\n            this.viewWrapper.style.display = 'none';\n        }\n    }\n    updateRemainWidth(viewWrapper, totalWidth) {\n        if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER$1) && totalWidth < (viewWrapper.offsetWidth +\n            parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)\n            + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10))) {\n            viewWrapper.style.width = totalWidth + 'px';\n        }\n    }\n    updateRemainTemplate(raminElement, viewWrapper, remaining, compiledString, totalCompiledString, totalWidth) {\n        if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {\n            viewWrapper.removeChild(viewWrapper.firstChild);\n        }\n        raminElement.innerHTML = '';\n        raminElement.appendChild((viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) ?\n            compiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0] :\n            totalCompiledString({ 'count': remaining }, null, null, null, !this.isStringTemplate)[0]);\n        if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {\n            viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);\n        }\n        else {\n            viewWrapper.classList.add(TOTAL_COUNT_WRAPPER$1);\n            this.updateRemainWidth(viewWrapper, totalWidth);\n        }\n        return raminElement;\n    }\n    updateRemainingText(raminElement, downIconWidth, remaining, compiledString, totalCompiledString) {\n        let overAllContainer = this.componentWrapper.offsetWidth -\n            parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) -\n            parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n        let wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n        if (((wrapperleng + downIconWidth) >= overAllContainer) && wrapperleng !== 0 && this.viewWrapper.firstChild &&\n            this.viewWrapper.firstChild.nodeType === 3) {\n            while (((wrapperleng + downIconWidth) > overAllContainer) && wrapperleng !== 0 && this.viewWrapper.firstChild &&\n                this.viewWrapper.firstChild.nodeType === 3) {\n                let textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);\n                textArr.pop();\n                this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);\n                if (this.viewWrapper.firstChild.nodeValue === '') {\n                    this.viewWrapper.removeChild(this.viewWrapper.firstChild);\n                }\n                remaining++;\n                wrapperleng = this.viewWrapper.offsetWidth;\n            }\n            let totalWidth = overAllContainer - downIconWidth;\n            this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, compiledString, totalCompiledString, totalWidth);\n        }\n    }\n    getOverflowVal(index) {\n        let temp;\n        if (this.mainData && this.mainData.length) {\n            if (this.mode === 'CheckBox') {\n                let newTemp = this.listData;\n                this.listData = this.mainData;\n                temp = this.getTextByValue(this.value[index]);\n                this.listData = newTemp;\n            }\n            else {\n                temp = this.getTextByValue(this.value[index]);\n            }\n        }\n        else {\n            temp = this.value[index];\n        }\n        return temp;\n    }\n    unWireEvent() {\n        EventHandler.remove(this.componentWrapper, 'mousedown', this.wrapperClick);\n        EventHandler.remove(window, 'resize', this.windowResize);\n        EventHandler.remove(this.inputElement, 'focus', this.focusInHandler);\n        EventHandler.remove(this.inputElement, 'keydown', this.onKeyDown);\n        if (this.mode !== 'CheckBox') {\n            EventHandler.remove(this.inputElement, 'input', this.onInput);\n        }\n        EventHandler.remove(this.inputElement, 'keyup', this.KeyUp);\n        let formElement = closest(this.inputElement, 'form');\n        if (formElement) {\n            EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n        }\n        EventHandler.remove(this.inputElement, 'blur', this.onBlur);\n        EventHandler.remove(this.componentWrapper, 'mousemove', this.mouseIn);\n        EventHandler.remove(this.componentWrapper, 'mouseout', this.mouseOut);\n        EventHandler.remove(this.overAllClear, 'mousedown', this.ClearAll);\n        EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n    }\n    selectAllItem(state, event, list) {\n        let li;\n        li = this.list.querySelectorAll(state ?\n            'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n            'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n        if (this.value && this.value.length && this.isPopupOpen() && event && event.target\n            && closest(event.target, '.e-close-hooker') && this.allowFiltering) {\n            li = this.mainList.querySelectorAll(state ?\n                'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' :\n                'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n        }\n        if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n            let target = (event ? event.target : null);\n            target = (event && event.keyCode === 32) ? list : target;\n            target = (target && target.classList.contains('e-frame')) ? target.parentElement.parentElement : target;\n            if (target && target.classList.contains('e-list-group-item')) {\n                let listElement = target.nextElementSibling;\n                if (isNullOrUndefined(listElement)) {\n                    return;\n                }\n                while (listElement.classList.contains('e-list-item')) {\n                    if (state) {\n                        if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n                            let selectionLimit = this.value && this.value.length ? this.value.length : 0;\n                            if (listElement.classList.contains('e-active')) {\n                                selectionLimit -= 1;\n                            }\n                            if (selectionLimit < this.maximumSelectionLength) {\n                                this.updateListSelection(listElement, event);\n                            }\n                        }\n                    }\n                    else {\n                        if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n                            this.updateListSelection(listElement, event);\n                        }\n                    }\n                    listElement = listElement.nextElementSibling;\n                    if (listElement == null) {\n                        break;\n                    }\n                }\n                if (target.classList.contains('e-list-group-item')) {\n                    let focusedElement = this.list.getElementsByClassName('e-item-focus')[0];\n                    if (focusedElement) {\n                        focusedElement.classList.remove('e-item-focus');\n                    }\n                    state ? target.classList.add('e-active') : target.classList.remove('e-active');\n                    target.classList.add('e-item-focus');\n                }\n                this.textboxValueUpdate();\n                this.checkPlaceholderSize();\n                if (!this.changeOnBlur && event) {\n                    this.updateValueState(event, this.value, this.tempValues);\n                }\n            }\n            else {\n                this.updateValue(event, li, state);\n            }\n        }\n        else {\n            this.updateValue(event, li, state);\n        }\n    }\n    updateValue(event, li, state) {\n        let length = li.length;\n        if (li && li.length) {\n            let index = 0;\n            let count = 0;\n            if (this.enableGroupCheckBox) {\n                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;\n            }\n            else {\n                count = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;\n            }\n            while (index < length && index <= 50 && index < count) {\n                this.updateListSelection(li[index], event, length - index);\n                this.findGroupStart(li[index]);\n                index++;\n            }\n            if (length > 50) {\n                setTimeout(() => {\n                    while (index < length && index < count) {\n                        this.updateListSelection(li[index], event, length - index);\n                        this.findGroupStart(li[index]);\n                        index++;\n                    }\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        this.updatedataValueItems(event);\n                    }\n                }, 0);\n            }\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.updatedataValueItems(event);\n            this.checkPlaceholderSize();\n        }\n    }\n    updatedataValueItems(event) {\n        this.deselectHeader();\n        this.textboxValueUpdate(event);\n    }\n    textboxValueUpdate(event) {\n        if (this.mode !== 'Box' && !this.isPopupOpen()) {\n            this.updateDelimView();\n        }\n        else {\n            this.searchWrapper.classList.remove(ZERO_SIZE);\n        }\n        if (this.mode === 'CheckBox') {\n            this.updateDelimView();\n            this.updateDelimeter(this.delimiterChar, event);\n            this.refreshInputHight();\n        }\n        else {\n            this.updateDelimeter(this.delimiterChar, event);\n        }\n        this.refreshPlaceHolder();\n    }\n    setZIndex() {\n        if (this.popupObj) {\n            this.popupObj.setProperties({ 'zIndex': this.zIndex });\n        }\n    }\n    updateDataSource(prop) {\n        if (isNullOrUndefined(this.list)) {\n            this.renderPopup();\n        }\n        else {\n            this.resetList(this.dataSource);\n        }\n        if (this.value && this.value.length && !(isBlazor() && this.isServerRendered)) {\n            this.setProperties({ 'value': this.value });\n            this.refreshSelection();\n        }\n    }\n    onLoadSelect() {\n        this.setDynValue = true;\n        this.renderPopup();\n    }\n    selectAllItems(state, event) {\n        if (isNullOrUndefined(this.list)) {\n            this.selectAllAction = () => {\n                if (this.mode === 'CheckBox' && this.showSelectAll) {\n                    let args = {\n                        module: 'CheckBoxSelection',\n                        enable: this.mode === 'CheckBox',\n                        value: state ? 'check' : 'uncheck'\n                    };\n                    this.notify('checkSelectAll', args);\n                }\n                this.selectAllItem(state, event);\n                this.selectAllAction = null;\n            };\n            super.render();\n        }\n        else {\n            this.selectAllAction = null;\n            if (this.mode === 'CheckBox' && this.showSelectAll) {\n                let args = {\n                    value: state ? 'check' : 'uncheck',\n                    enable: this.mode === 'CheckBox',\n                    module: 'CheckBoxSelection'\n                };\n                this.notify('checkSelectAll', args);\n            }\n            this.selectAllItem(state, event);\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    ;\n    /**\n     * Dynamically change the value of properties.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))\n            || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n            this.mainList = null;\n            this.mainData = null;\n            this.isFirstClick = false;\n            this.isDynamicDataChange = true;\n        }\n        if (this.getModuleName() === 'multiselect') {\n            this.filterAction = false;\n            this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'query':\n                case 'dataSource':\n                    if (this.mode === 'CheckBox' && this.showSelectAll) {\n                        if (!isNullOrUndefined(this.popupObj)) {\n                            this.popupObj.destroy();\n                            this.popupObj = null;\n                        }\n                        this.renderPopup();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttribute();\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp.showClearButton);\n                    break;\n                case 'text':\n                    this.updateVal(this.value, this.value, 'text');\n                    break;\n                case 'value':\n                    this.updateVal(this.value, oldProp.value, 'value');\n                    this.addValidInputClass();\n                    break;\n                case 'width':\n                    this.setWidth(newProp.width);\n                    this.popupObj.setProperties({ width: this.calcPopupWidth() });\n                    break;\n                case 'placeholder':\n                    this.refreshPlaceHolder();\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.allowFiltering) {\n                        this.notify('filterBarPlaceholder', { filterBarPlaceholder: newProp.filterBarPlaceholder });\n                    }\n                    break;\n                case 'delimiterChar':\n                    if (this.mode !== 'Box') {\n                        this.updateDelimView();\n                    }\n                    this.updateData(newProp.delimiterChar);\n                    break;\n                case 'cssClass':\n                    this.updateOldPropCssClass(oldProp.cssClass);\n                    this.updateCssClass();\n                    break;\n                case 'enableRtl':\n                    this.enableRTL(newProp.enableRtl);\n                    super.onPropertyChanged(newProp, oldProp);\n                    break;\n                case 'readonly':\n                    this.updateReadonly(newProp.readonly);\n                    this.hidePopup();\n                    break;\n                case 'enabled':\n                    this.hidePopup();\n                    this.enable(newProp.enabled);\n                    break;\n                case 'showSelectAll':\n                    if (this.popupObj) {\n                        this.popupObj.destroy();\n                        this.popupObj = null;\n                    }\n                    this.renderPopup();\n                    break;\n                case 'showDropDownIcon':\n                    this.dropDownIcon();\n                    break;\n                case 'floatLabelType':\n                    this.setFloatLabelType();\n                    this.addValidInputClass();\n                    break;\n                case 'enableSelectionOrder':\n                    break;\n                case 'selectAllText':\n                    this.notify('selectAllText', false);\n                    break;\n                case 'popupHeight':\n                case 'headerTemplate':\n                case 'footerTemplate':\n                    this.reInitializePoup();\n                    break;\n                case 'allowFiltering':\n                    if (this.mode === 'CheckBox' && this.popupObj) {\n                        this.reInitializePoup();\n                    }\n                    this.updateSelectElementData(this.allowFiltering);\n                    break;\n                default:\n                    let msProps;\n                    msProps = this.getPropObject(prop, newProp, oldProp);\n                    super.onPropertyChanged(msProps.newProperty, msProps.oldProperty);\n                    break;\n            }\n        }\n    }\n    reInitializePoup() {\n        if (this.popupObj) {\n            this.popupObj.destroy();\n            this.popupObj = null;\n        }\n        this.renderPopup();\n    }\n    updateVal(newProp, oldProp, prop) {\n        if (!this.list) {\n            this.onLoadSelect();\n        }\n        else if (!this.inputFocus) {\n            if (prop === 'text') {\n                this.initialTextUpdate();\n                newProp = this.value;\n            }\n            if (isNullOrUndefined(this.value) || this.value.length === 0) {\n                this.tempValues = oldProp;\n            }\n            this.initialValueUpdate();\n            if (this.mode !== 'Box') {\n                this.updateDelimView();\n            }\n            this.refreshInputHight();\n            this.refreshPlaceHolder();\n            if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n                this.updateValueState(null, newProp, oldProp);\n            }\n            this.checkPlaceholderSize();\n        }\n        if (!this.changeOnBlur) {\n            this.updateValueState(null, newProp, oldProp);\n        }\n    }\n    /**\n     * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Hides the popup, if the popup in a open state.\n     * @returns void\n     */\n    hidePopup() {\n        let delay = 100;\n        if (this.isPopupOpen()) {\n            let animModel = {\n                name: 'FadeOut',\n                duration: 100,\n                delay: delay ? delay : 0\n            };\n            let eventArgs = { popup: this.popupObj, cancel: false, animation: animModel };\n            this.trigger('close', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    this.beforePopupOpen = false;\n                    this.overAllWrapper.classList.remove(iconAnimation);\n                    this.popupObj.hide(new Animation(eventArgs.animation));\n                    attributes(this.inputElement, { 'aria-expanded': 'false' });\n                    if (this.allowFiltering) {\n                        this.notify('inputFocus', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox', value: 'clear' });\n                    }\n                    this.popupObj.hide();\n                    removeClass([document.body, this.popupObj.element], 'e-popup-full-page');\n                    EventHandler.remove(this.list, 'keydown', this.onKeyDown);\n                }\n            });\n        }\n    }\n    /**\n     * Shows the popup, if the popup in a closed state.\n     * @returns void\n     */\n    showPopup() {\n        if (!this.enabled) {\n            return;\n        }\n        if ((isBlazor() && this.isServerRendered) && this.itemTemplate) {\n            this.DropDownBaseupdateBlazorTemplates(true, false, false, false, false, false, false, false);\n            if (this.mode !== 'CheckBox' && this.list) {\n                this.refreshSelection();\n            }\n        }\n        if (!this.ulElement) {\n            this.beforePopupOpen = true;\n            super.render();\n            if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n                this.notify('popupFullScreen', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n            }\n            return;\n        }\n        if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n            this.notify('popupFullScreen', { module: 'CheckBoxSelection', enable: this.mode === 'CheckBox' });\n        }\n        let mainLiLength = this.ulElement.querySelectorAll('li.' + 'e-list-item').length;\n        let liLength = this.ulElement.querySelectorAll('li.'\n            + dropDownBaseClasses.li + '.' + HIDE_LIST).length;\n        if (mainLiLength > 0 && (mainLiLength === liLength) && (liLength === this.mainData.length)) {\n            this.beforePopupOpen = false;\n            return;\n        }\n        this.onPopupShown();\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected/deselected.\n     * parameter\n     * `true`   - Selects entire list items.\n     * `false`  - Un Selects entire list items.\n     * @returns void\n     */\n    selectAll(state) {\n        this.isSelectAll = true;\n        this.selectAllItems(state);\n    }\n    getModuleName() {\n        return 'multiselect';\n    }\n    ;\n    /**\n     * Allows you to clear the selected values from the Multiselect component.\n     * @returns void\n     */\n    clear() {\n        this.selectAll(false);\n        this.setProperties({ value: null }, true);\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.setDynValue = this.initStatus = false;\n        this.isSelectAll = false;\n        this.searchWrapper = this.createElement('span', { className: SEARCHBOX_WRAPPER + ' ' + ((this.mode === 'Box') ? BOX_ELEMENT : '') });\n        this.viewWrapper = this.createElement('span', { className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER, styles: 'display:none;' });\n        this.overAllClear = this.createElement('span', {\n            className: CLOSEICON_CLASS$1, styles: 'display:none;'\n        });\n        this.componentWrapper = this.createElement('div', { className: ELEMENT_WRAPPER });\n        this.overAllWrapper = this.createElement('div', { className: OVER_ALL_WRAPPER });\n        if (this.mode === 'CheckBox') {\n            addClass([this.overAllWrapper], 'e-checkbox');\n        }\n        if (Browser.isDevice) {\n            this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);\n        }\n        this.setWidth(this.width);\n        this.overAllWrapper.appendChild(this.componentWrapper);\n        this.popupWrapper = this.createElement('div', { id: this.element.id + '_popup', className: POPUP_WRAPPER });\n        if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n            this.delimiterWrapper = this.createElement('span', { className: DELIMITER_WRAPPER, styles: 'display:none' });\n            this.componentWrapper.appendChild(this.delimiterWrapper);\n        }\n        else {\n            this.chipCollectionWrapper = this.createElement('span', {\n                className: CHIP_WRAPPER$1,\n                styles: 'display:none'\n            });\n            if (this.mode === 'Default') {\n                this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_default'));\n            }\n            else if (this.mode === 'Box') {\n                this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_box'));\n            }\n            this.componentWrapper.appendChild(this.chipCollectionWrapper);\n        }\n        if (this.mode !== 'Box') {\n            this.componentWrapper.appendChild(this.viewWrapper);\n        }\n        this.componentWrapper.appendChild(this.searchWrapper);\n        if (this.showClearButton && !Browser.isDevice) {\n            this.componentWrapper.appendChild(this.overAllClear);\n        }\n        else {\n            this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n        }\n        this.dropDownIcon();\n        this.inputElement = this.createElement('input', {\n            className: INPUT_ELEMENT,\n            attrs: {\n                spellcheck: 'false',\n                type: 'text',\n                autocomplete: 'off',\n                tabindex: '0'\n            }\n        });\n        if (this.mode === 'Default' || this.mode === 'Box') {\n            this.inputElement.setAttribute('aria-describedby', this.chipCollectionWrapper.id);\n        }\n        if (this.element.tagName !== this.getNgDirective()) {\n            this.element.style.display = 'none';\n        }\n        if (this.element.tagName === this.getNgDirective()) {\n            this.element.appendChild(this.overAllWrapper);\n            this.searchWrapper.appendChild(this.inputElement);\n        }\n        else {\n            this.element.parentElement.insertBefore(this.overAllWrapper, this.element);\n            this.searchWrapper.appendChild(this.inputElement);\n            this.searchWrapper.appendChild(this.element);\n            this.element.removeAttribute('tabindex');\n        }\n        if (this.floatLabelType !== 'Never') {\n            createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        }\n        else if (this.floatLabelType === 'Never') {\n            this.refreshPlaceHolder();\n        }\n        this.addValidInputClass();\n        this.element.style.opacity = '';\n        let id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n        this.element.id = id;\n        this.hiddenElement = this.createElement('select', {\n            attrs: { 'aria-hidden': 'true', 'class': HIDDEN_ELEMENT, 'tabindex': '-1', 'multiple': '' }\n        });\n        this.componentWrapper.appendChild(this.hiddenElement);\n        this.validationAttribute(this.element, this.hiddenElement);\n        if (this.mode !== 'CheckBox') {\n            this.hideOverAllClear();\n        }\n        this.wireEvent();\n        this.enable(this.enabled);\n        this.enableRTL(this.enableRtl);\n        this.checkInitialValue();\n        this.renderComplete();\n    }\n    checkInitialValue() {\n        let isData = this.dataSource instanceof Array ? (this.dataSource.length > 0)\n            : !isNullOrUndefined(this.dataSource);\n        if (!(this.value && this.value.length) &&\n            isNullOrUndefined(this.text) &&\n            !isData &&\n            this.element.tagName === 'SELECT' &&\n            this.element.options.length > 0) {\n            let optionsElement = this.element.options;\n            let valueCol = [];\n            let textCol = '';\n            for (let index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {\n                let opt = optionsElement[index];\n                if (!isNullOrUndefined(opt.getAttribute('selected'))) {\n                    (opt.getAttribute('value')) ? valueCol.push(opt.getAttribute('value')) : textCol += (opt.text + this.delimiterChar);\n                }\n            }\n            if (valueCol.length > 0) {\n                this.setProperties({ value: valueCol }, true);\n            }\n            else if (textCol !== '') {\n                this.setProperties({ text: textCol }, true);\n            }\n            if (valueCol.length > 0 || textCol !== '') {\n                this.refreshInputHight();\n                this.refreshPlaceHolder();\n            }\n        }\n        if ((this.value && this.value.length) || !isNullOrUndefined(this.text)) {\n            this.renderPopup();\n        }\n        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n            this.initialTextUpdate();\n        }\n        if (this.value && this.value.length) {\n            if (!(this.dataSource instanceof DataManager)) {\n                this.initialValueUpdate();\n                this.initialUpdate();\n            }\n            else {\n                this.setInitialValue = () => {\n                    this.initStatus = false;\n                    this.initialValueUpdate();\n                    this.initialUpdate();\n                    this.setInitialValue = null;\n                    this.initStatus = true;\n                };\n            }\n            this.updateTempValue();\n        }\n        else {\n            this.initialUpdate();\n        }\n        this.initStatus = true;\n        this.checkAutoFocus();\n        if (!isNullOrUndefined(this.text)) {\n            this.element.setAttribute('data-initial-value', this.text);\n        }\n    }\n    checkAutoFocus() {\n        if (this.element.hasAttribute('autofocus')) {\n            this.inputElement.focus();\n        }\n    }\n    setFloatLabelType() {\n        removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        if (this.floatLabelType !== 'Never') {\n            createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n        }\n    }\n    addValidInputClass() {\n        if ((!isNullOrUndefined(this.value) && this.value.length) || this.floatLabelType === 'Always') {\n            addClass([this.overAllWrapper], 'e-valid-input');\n        }\n        else {\n            removeClass([this.overAllWrapper], 'e-valid-input');\n        }\n    }\n    dropDownIcon() {\n        if (this.showDropDownIcon) {\n            this.dropIcon = this.createElement('span', { className: dropdownIcon });\n            this.componentWrapper.appendChild(this.dropIcon);\n            addClass([this.componentWrapper], ['e-down-icon']);\n        }\n        else {\n            if (!isNullOrUndefined(this.dropIcon)) {\n                this.dropIcon.parentElement.removeChild(this.dropIcon);\n                removeClass([this.componentWrapper], ['e-down-icon']);\n            }\n        }\n    }\n    initialUpdate() {\n        if (this.mode !== 'Box') {\n            this.updateDelimView();\n        }\n        this.updateCssClass();\n        this.updateHTMLAttribute();\n        this.updateReadonly(this.readonly);\n        this.refreshInputHight();\n        this.checkPlaceholderSize();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        if (this.popupObj) {\n            this.popupObj.hide();\n        }\n        this.notify(destroy, {});\n        this.unwireListEvents();\n        this.unWireEvent();\n        this.list = null;\n        this.popupObj = null;\n        this.mainList = null;\n        this.mainData = null;\n        this.filterParent = null;\n        this.ulElement = null;\n        super.destroy();\n        let temp = ['readonly', 'aria-disabled', 'aria-placeholder', 'placeholder'];\n        let length = temp.length;\n        while (length > 0) {\n            this.inputElement.removeAttribute(temp[length - 1]);\n            length--;\n        }\n        this.element.removeAttribute('data-initial-value');\n        this.element.style.display = 'block';\n        if (this.overAllWrapper.parentElement) {\n            if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {\n                remove(this.overAllWrapper);\n            }\n            else {\n                this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);\n                remove(this.overAllWrapper);\n            }\n        }\n    }\n    ;\n};\n__decorate$5([\n    Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)\n], MultiSelect.prototype, \"fields\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"enablePersistence\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"groupTemplate\", void 0);\n__decorate$5([\n    Property('No records found')\n], MultiSelect.prototype, \"noRecordsTemplate\", void 0);\n__decorate$5([\n    Property('Request failed')\n], MultiSelect.prototype, \"actionFailureTemplate\", void 0);\n__decorate$5([\n    Property('None')\n], MultiSelect.prototype, \"sortOrder\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"enabled\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$5([\n    Property([])\n], MultiSelect.prototype, \"dataSource\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"query\", void 0);\n__decorate$5([\n    Property('StartsWith')\n], MultiSelect.prototype, \"filterType\", void 0);\n__decorate$5([\n    Property(1000)\n], MultiSelect.prototype, \"zIndex\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"ignoreAccent\", void 0);\n__decorate$5([\n    Property()\n], MultiSelect.prototype, \"locale\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"enableGroupCheckBox\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"cssClass\", void 0);\n__decorate$5([\n    Property('100%')\n], MultiSelect.prototype, \"width\", void 0);\n__decorate$5([\n    Property('300px')\n], MultiSelect.prototype, \"popupHeight\", void 0);\n__decorate$5([\n    Property('100%')\n], MultiSelect.prototype, \"popupWidth\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"placeholder\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$5([\n    Property({})\n], MultiSelect.prototype, \"htmlAttributes\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"valueTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"headerTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"footerTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"itemTemplate\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"allowFiltering\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"changeOnBlur\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"allowCustomValue\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"showClearButton\", void 0);\n__decorate$5([\n    Property(1000)\n], MultiSelect.prototype, \"maximumSelectionLength\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"readonly\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"text\", void 0);\n__decorate$5([\n    Property(null)\n], MultiSelect.prototype, \"value\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"hideSelectedItem\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"closePopupOnSelect\", void 0);\n__decorate$5([\n    Property('Default')\n], MultiSelect.prototype, \"mode\", void 0);\n__decorate$5([\n    Property(',')\n], MultiSelect.prototype, \"delimiterChar\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"ignoreCase\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"showDropDownIcon\", void 0);\n__decorate$5([\n    Property('Never')\n], MultiSelect.prototype, \"floatLabelType\", void 0);\n__decorate$5([\n    Property(false)\n], MultiSelect.prototype, \"showSelectAll\", void 0);\n__decorate$5([\n    Property('Select All')\n], MultiSelect.prototype, \"selectAllText\", void 0);\n__decorate$5([\n    Property('Unselect All')\n], MultiSelect.prototype, \"unSelectAllText\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"enableSelectionOrder\", void 0);\n__decorate$5([\n    Property(true)\n], MultiSelect.prototype, \"openOnClick\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"change\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"removing\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"removed\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"selectedAll\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"beforeOpen\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"open\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"close\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"blur\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"focus\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"chipSelection\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"filtering\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"tagging\", void 0);\n__decorate$5([\n    Event()\n], MultiSelect.prototype, \"customValueSelection\", void 0);\nMultiSelect = __decorate$5([\n    NotifyPropertyChanges\n], MultiSelect);\n\nconst ICON = 'e-icons';\nconst CHECKBOXFRAME$1 = 'e-frame';\nconst CHECK$1 = 'e-check';\nconst CHECKBOXWRAP$1 = 'e-checkbox-wrapper';\nconst INDETERMINATE = 'e-stop';\nconst checkAllParent = 'e-selectall-parent';\nconst searchBackIcon = 'e-input-group-icon e-back-icon e-icons';\nconst filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';\nconst filterInput = 'e-input-filter';\nconst filterParent = 'e-filter-parent';\nconst mobileFilter = 'e-ddl-device-filter';\nconst clearIcon = 'e-clear-icon';\nconst popupFullScreen = 'e-popup-full-page';\nconst device = 'e-ddl-device';\nconst FOCUS$1 = 'e-input-focus';\n/**\n * The Multiselect enable CheckBoxSelection call this inject module.\n */\nclass CheckBoxSelection {\n    constructor(parent) {\n        this.activeLi = [];\n        this.activeEle = [];\n        this.parent = parent;\n        this.removeEventListener();\n        this.addEventListener();\n    }\n    getModuleName() {\n        return 'CheckBoxSelection';\n    }\n    addEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on('updatelist', this.listSelection, this);\n        this.parent.on('listoption', this.listOption, this);\n        this.parent.on('selectAll', this.setSelectAll, this);\n        this.parent.on('checkSelectAll', this.checkSelectAll, this);\n        this.parent.on('searchBox', this.setSearchBox, this);\n        this.parent.on('blur', this.onBlur, this);\n        this.parent.on('targetElement', this.targetElement, this);\n        this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);\n        this.parent.on('inputFocus', this.getFocus, this);\n        this.parent.on('reOrder', this.setReorder, this);\n        this.parent.on('activeList', this.getActiveList, this);\n        this.parent.on('selectAllText', this.setLocale, this);\n        this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);\n        EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n        this.parent.on('addItem', this.checboxCreate, this);\n        this.parent.on('popupFullScreen', this.setPopupFullScreen, this);\n    }\n    removeEventListener() {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updatelist', this.listSelection);\n        this.parent.off('listoption', this.listOption);\n        this.parent.off('selectAll', this.setSelectAll);\n        this.parent.off('checkSelectAll', this.checkSelectAll);\n        this.parent.off('searchBox', this.setSearchBox);\n        this.parent.off('blur', this.onBlur);\n        this.parent.off('targetElement', this.targetElement);\n        this.parent.off('deviceSearchBox', this.setDeviceSearchBox);\n        this.parent.off('inputFocus', this.getFocus);\n        this.parent.off('reOrder', this.setReorder);\n        this.parent.off('activeList', this.getActiveList);\n        this.parent.off('selectAllText', this.setLocale);\n        this.parent.off('filterBarPlaceholder', this.setPlaceholder);\n        this.parent.off('addItem', this.checboxCreate);\n        EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n        this.parent.off('popupFullScreen', this.setPopupFullScreen);\n    }\n    listOption(args) {\n        if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {\n            this.parent.listCurrentOptions.itemCreated = (e) => {\n                this.checboxCreate(e);\n            };\n        }\n        else {\n            let itemCreated = this.parent.listCurrentOptions.itemCreated;\n            this.parent.listCurrentOptions.itemCreated = (e) => {\n                this.checboxCreate(e);\n                itemCreated.apply(this, [e]);\n            };\n        }\n    }\n    ;\n    setPlaceholder(props) {\n        Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);\n    }\n    checboxCreate(e) {\n        let item;\n        if (!isNullOrUndefined(e.item)) {\n            item = e.item;\n        }\n        else {\n            item = e;\n        }\n        if (this.parent.enableGroupCheckBox || (item.className !== 'e-list-group-item '\n            && item.className !== 'e-list-group-item')) {\n            let checkboxEle = createCheckBox(this.parent.createElement, true);\n            let icon = select('div.' + ICON, item);\n            let id = item.getAttribute('data-uid');\n            item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n            select('.' + CHECKBOXFRAME$1, checkboxEle);\n            let frame = select('.' + CHECKBOXFRAME$1, checkboxEle);\n            if (this.parent.enableGroupCheckBox) {\n                this.parent.popupWrapper.classList.add('e-multiselect-group');\n            }\n            return item;\n        }\n        else {\n            return item;\n        }\n    }\n    setSelectAll() {\n        if (this.parent.showSelectAll) {\n            if (isNullOrUndefined(this.checkAllParent)) {\n                this.checkAllParent = this.parent.createElement('div', {\n                    className: checkAllParent\n                });\n                this.selectAllSpan = this.parent.createElement('span', {\n                    className: 'e-all-text'\n                });\n                this.selectAllSpan.textContent = '';\n                this.checkAllParent.appendChild(this.selectAllSpan);\n                this.setLocale();\n                this.checboxCreate(this.checkAllParent);\n                if (this.parent.headerTemplate) {\n                    if (!isNullOrUndefined(this.parent.filterParent)) {\n                        append([this.checkAllParent], this.parent.filterParent);\n                    }\n                    else {\n                        append([this.checkAllParent], this.parent.popupWrapper);\n                    }\n                }\n                if (!this.parent.headerTemplate) {\n                    if (!isNullOrUndefined(this.parent.filterParent)) {\n                        this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);\n                    }\n                    else {\n                        prepend([this.checkAllParent], this.parent.popupWrapper);\n                    }\n                }\n                EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);\n            }\n            if (this.parent.list.classList.contains('e-nodata') || (this.parent.listData && this.parent.listData.length <= 1)) {\n                this.checkAllParent.style.display = 'none';\n            }\n            else {\n                this.checkAllParent.style.display = 'block';\n            }\n            this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n        }\n        else if (!isNullOrUndefined(this.checkAllParent)) {\n            this.checkAllParent.parentElement.removeChild(this.checkAllParent);\n            this.checkAllParent = null;\n        }\n    }\n    destroy() {\n        this.removeEventListener();\n    }\n    listSelection(args) {\n        let target;\n        let isBlazorListbox = isBlazor() && (args.module && args.module === 'listbox');\n        if (!isNullOrUndefined(args.e)) {\n            let frameElm = args.li.querySelector('.e-checkbox-wrapper .e-frame');\n            target = !isNullOrUndefined(args.e.target) ?\n                (args.e.target.classList.contains('e-frame')\n                    && (!this.parent.showSelectAll\n                        || (this.checkAllParent && !this.checkAllParent.contains(args.e.target)))) ?\n                    args.e.target : (isBlazorListbox ? frameElm : args.li.querySelector('.e-checkbox-wrapper').childNodes[1])\n                : (isBlazorListbox ? frameElm : args.li.querySelector('.e-checkbox-wrapper').childNodes[1]);\n        }\n        else {\n            let checkboxWrapper = args.li.querySelector('.e-checkbox-wrapper');\n            target = checkboxWrapper ? (isBlazorListbox ?\n                checkboxWrapper.querySelector('.e-frame') : checkboxWrapper.childNodes[1]) : args.li.lastElementChild.childNodes[1];\n        }\n        if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {\n            target = args.li.firstElementChild.childNodes[1];\n        }\n        if (!isNullOrUndefined(target)) {\n            this.checkWrapper = closest(target, '.' + CHECKBOXWRAP$1);\n        }\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME$1, this.checkWrapper);\n            let selectAll$$1 = false;\n            this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), args.li, args.e, selectAll$$1);\n        }\n    }\n    validateCheckNode(checkWrap, isCheck, li, e, selectAll$$1) {\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll$$1);\n    }\n    clickHandler(e) {\n        let target;\n        if (e.currentTarget.classList.contains(this.checkAllParent.className)) {\n            target = e.currentTarget.firstElementChild.lastElementChild;\n        }\n        else {\n            target = e.currentTarget;\n        }\n        this.checkWrapper = closest(target, '.' + CHECKBOXWRAP$1);\n        let selectAll$$1 = true;\n        if (!isNullOrUndefined(this.checkWrapper)) {\n            let checkElement = select('.' + CHECKBOXFRAME$1, this.checkWrapper);\n            this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), null, e, selectAll$$1);\n        }\n        e.preventDefault();\n    }\n    changeState(wrapper, state, e, isPrevent, selectAll$$1) {\n        let ariaState;\n        let frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME$1)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK$1)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK$1);\n            ariaState = 'true';\n            if (selectAll$$1) {\n                this.parent.selectAllItems(true, e);\n                this.setLocale(true);\n            }\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK$1) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK$1, INDETERMINATE]);\n            ariaState = 'false';\n            if (selectAll$$1) {\n                this.parent.selectAllItems(false, e);\n                this.setLocale();\n            }\n        }\n        else if (state === 'indeterminate' && !(frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK$1]);\n            frameSpan.classList.add(INDETERMINATE);\n            ariaState = 'false';\n            if (selectAll$$1) {\n                this.parent.selectAllItems(false, e);\n                this.setLocale();\n            }\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNullOrUndefined(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n    }\n    setSearchBox(args) {\n        if (isNullOrUndefined(this.parent.filterParent)) {\n            this.parent.filterParent = this.parent.createElement('span', {\n                className: filterParent\n            });\n            this.filterInput = this.parent.createElement('input', {\n                attrs: { type: 'text' },\n                className: filterInput\n            });\n            this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);\n            let backIcon = false;\n            if (Browser.isDevice) {\n                backIcon = true;\n                this.parent.mobFilter = false;\n            }\n            this.filterInputObj = Input.createInput({\n                element: this.filterInput,\n                buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],\n                properties: { placeholder: this.parent.filterBarPlaceholder }\n            }, this.parent.createElement);\n            if (!isNullOrUndefined(this.parent.cssClass)) {\n                if (this.parent.cssClass.split(' ').indexOf('e-outline') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-outline');\n                }\n                else if (this.parent.cssClass.split(' ').indexOf('e-filled') !== -1) {\n                    addClass([this.filterInputObj.container], 'e-filled');\n                }\n            }\n            append([this.filterInputObj.container], this.parent.filterParent);\n            prepend([this.parent.filterParent], args.popupElement);\n            attributes(this.filterInput, {\n                'aria-disabled': 'false',\n                'aria-owns': this.parent.element.id + '_options',\n                'role': 'listbox',\n                'aria-activedescendant': null,\n                'autocomplete': 'off',\n                'autocorrect': 'off',\n                'autocapitalize': 'off',\n                'spellcheck': 'false'\n            });\n            this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n            if (!Browser.isDevice && this.clearIconElement) {\n                EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);\n                this.clearIconElement.style.visibility = 'hidden';\n            }\n            EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);\n            EventHandler.add(this.filterInput, 'keyup', this.parent.KeyUp, this.parent);\n            EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);\n            EventHandler.add(this.filterInput, 'blur', this.onBlur, this);\n            EventHandler.add(this.filterInput, 'paste', this.parent.pasteHandler, this.parent);\n            this.parent.searchBoxHeight = (this.filterInputObj.container.parentElement).getBoundingClientRect().height;\n            return this.filterInputObj;\n        }\n    }\n    ;\n    clickOnBackIcon(e) {\n        this.parent.hidePopup();\n        removeClass([document.body, this.parent.popupObj.element], popupFullScreen);\n        this.parent.inputElement.focus();\n    }\n    clearText(e) {\n        this.parent.targetInputElement.value = '';\n        this.parent.refreshPopup();\n        this.parent.refreshListItems(null);\n        this.clearIconElement.style.visibility = 'hidden';\n        this.filterInput.focus();\n        this.setReorder(e);\n        e.preventDefault();\n    }\n    setDeviceSearchBox() {\n        this.parent.popupObj.element.classList.add(device);\n        this.parent.popupObj.element.classList.add(mobileFilter);\n        this.parent.popupObj.position = { X: 0, Y: 0 };\n        this.parent.popupObj.dataBind();\n        this.setSearchBoxPosition();\n        this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');\n        this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);\n        this.clearIconElement.style.visibility = 'hidden';\n        EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n    }\n    setSearchBoxPosition() {\n        let searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n        let selectAllHeight = 0;\n        if (this.checkAllParent) {\n            selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n        }\n        this.parent.popupObj.element.style.maxHeight = '100%';\n        this.parent.popupObj.element.style.width = '100%';\n        this.parent.list.style.maxHeight = (window.innerHeight - searchBoxHeight - selectAllHeight) + 'px';\n        this.parent.list.style.height = (window.innerHeight - searchBoxHeight - selectAllHeight) + 'px';\n        let clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n        detach(this.filterInput);\n        clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n    }\n    setPopupFullScreen() {\n        attributes(this.parent.popupObj.element, { style: 'left:0px;right:0px;top:0px;bottom:0px;' });\n        addClass([document.body, this.parent.popupObj.element], popupFullScreen);\n        this.parent.popupObj.element.style.maxHeight = '100%';\n        this.parent.popupObj.element.style.width = '100%';\n    }\n    targetElement() {\n        if (!isNullOrUndefined(this.clearIconElement)) {\n            this.parent.targetInputElement = this.filterInput;\n            this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';\n        }\n        return this.parent.targetInputElement.value;\n    }\n    onBlur(e) {\n        if (!this.parent.element.classList.contains('e-listbox')) {\n            let target;\n            if (this.parent.keyAction) {\n                return;\n            }\n            if (Browser.isIE) {\n                target = !isNullOrUndefined(e) && e.target;\n            }\n            if (!Browser.isIE) {\n                target = !isNullOrUndefined(e) && e.relatedTarget;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target)\n                && !Browser.isIE && this.filterInput) {\n                this.filterInput.focus();\n                return;\n            }\n            if (this.parent.scrollFocusStatus && this.filterInput) {\n                e.preventDefault();\n                this.filterInput.focus();\n                this.parent.scrollFocusStatus = false;\n                return;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element)\n                && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n                this.parent.inputFocus = false;\n                this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);\n                this.parent.dispatchEvent(this.parent.hiddenElement, 'change');\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) &&\n                !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n                this.parent.inputFocus = false;\n                this.parent.overAllWrapper.classList.remove(FOCUS$1);\n                this.parent.trigger('blur');\n                this.parent.focused = true;\n            }\n            if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) &&\n                !this.parent.popupObj.element.classList.contains('e-popup-close') && !Browser.isDevice) {\n                this.parent.hidePopup();\n            }\n        }\n    }\n    onDocumentClick(e) {\n        if (this.parent.getLocaleName() !== 'listbox') {\n            let target = e.target;\n            if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '#' + this.parent.popupObj.element.id)) {\n                if (!(this.filterInput && this.filterInput.value !== '')) {\n                    e.preventDefault();\n                }\n            }\n            if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '#' + this.parent.popupObj.element.id)) &&\n                !this.parent.overAllWrapper.contains(e.target)) {\n                if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {\n                    this.parent.inputFocus = false;\n                    this.parent.scrollFocusStatus = false;\n                    this.parent.hidePopup();\n                    this.parent.onBlur(e, true);\n                    this.parent.focused = true;\n                }\n            }\n            else {\n                this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.filterInput);\n            }\n            if (!this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') &&\n                !this.parent.isPopupOpen()) {\n                if (Browser.isIE) {\n                    this.parent.onBlur();\n                }\n                else {\n                    this.parent.onBlur(e);\n                }\n            }\n            if (this.filterInput === target) {\n                this.filterInput.focus();\n            }\n        }\n    }\n    getFocus(e) {\n        this.parent.overAllWrapper.classList.remove(FOCUS$1);\n        if (this.parent.keyAction && e.value !== 'clear') {\n            this.parent.keyAction = false;\n            return;\n        }\n        if (e.value === 'focus') {\n            this.filterInput.focus();\n            this.parent.removeFocus();\n            EventHandler.remove(this.parent.list, 'keydown', this.parent.onKeyDown);\n        }\n        if (e.value === 'clear') {\n            this.filterInput.value = '';\n            this.clearIconElement.style.visibility = 'hidden';\n        }\n    }\n    checkSelectAll(e) {\n        if (e.value === 'check' && this.checkAllParent.getAttribute('aria-checked') !== 'true') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale(true);\n        }\n        if (e.value === 'uncheck') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale();\n        }\n        if (e.value === 'indeterminate') {\n            this.changeState(this.checkAllParent, e.value, null, null, false);\n            this.setLocale();\n        }\n    }\n    setLocale(unSelect) {\n        if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {\n            let template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;\n            let compiledString;\n            this.selectAllSpan.textContent = '';\n            compiledString = compile(template);\n            for (let item of compiledString({}, null, null, null, !this.parent.isStringTemplate)) {\n                this.selectAllSpan.textContent = item.textContent;\n            }\n        }\n        else {\n            let l10nLocale = { selectAllText: 'Select All', unSelectAllText: 'Unselect All' };\n            let l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);\n            if (l10n.getConstant('selectAllText') === '') {\n                l10n = new L10n('dropdowns', l10nLocale, this.parent.locale);\n            }\n            this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');\n        }\n    }\n    getActiveList(args) {\n        if (args.li.classList.contains('e-active')) {\n            this.activeLi.push(args.li.cloneNode(true));\n        }\n        else {\n            this.activeLi.splice(args.index, 1);\n        }\n    }\n    setReorder(args) {\n        if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {\n            let activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;\n            let remLi;\n            let ulEle = this.parent.createElement('ul', {\n                className: 'e-list-parent e-ul e-reorder'\n            });\n            let removeEle = this.parent.createElement('div');\n            if (activeLiCount > 0) {\n                append(this.parent.ulElement.querySelectorAll('li.e-active'), ulEle);\n                remLi = this.parent.ulElement.querySelectorAll('li.e-active');\n                addClass(remLi, 'e-reorder-hide');\n                prepend([ulEle], this.parent.list);\n            }\n            this.parent.focusAtFirstListItem();\n        }\n    }\n}\n\n/**\n * export all modules from current location\n */\n\nvar __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ListBox_1;\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\nconst ITEMTEMPLATE_PROPERTY$1 = 'ItemTemplate';\n/**\n * Defines the Selection settings of List Box.\n */\nclass SelectionSettings extends ChildProperty {\n}\n__decorate$6([\n    Property('Multiple')\n], SelectionSettings.prototype, \"mode\", void 0);\n__decorate$6([\n    Property(false)\n], SelectionSettings.prototype, \"showCheckbox\", void 0);\n__decorate$6([\n    Property(false)\n], SelectionSettings.prototype, \"showSelectAll\", void 0);\n__decorate$6([\n    Property('Left')\n], SelectionSettings.prototype, \"checkboxPosition\", void 0);\n/**\n * Defines the toolbar settings of List Box.\n */\nclass ToolbarSettings extends ChildProperty {\n}\n__decorate$6([\n    Property([])\n], ToolbarSettings.prototype, \"items\", void 0);\n__decorate$6([\n    Property('Right')\n], ToolbarSettings.prototype, \"position\", void 0);\n/**\n * The ListBox is a graphical user interface component used to display a list of items.\n * Users can select one or more items in the list using a checkbox or by keyboard selection.\n * It supports sorting, grouping, reordering and drag and drop of items.\n * ```html\n * <select id=\"listbox\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var listObj = new ListBox();\n *   listObj.appendTo(\"#listbox\");\n * </script>\n * ```\n */\nlet ListBox = ListBox_1 = class ListBox extends DropDownBase {\n    /**\n     * Constructor for creating the ListBox component.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isValidKey = false;\n        this.keyDownStatus = false;\n    }\n    /**\n     * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n     * @return {void}.\n     * @private\n     */\n    addItem(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    ;\n    /**\n     * Build and render the component\n     * @private\n     */\n    render() {\n        this.inputString = '';\n        this.initLoad = true;\n        this.isCustomFiltering = false;\n        this.initialSelectedOptions = this.value;\n        if (isBlazor() && this.isServerRendered) {\n            this.list = this.element.parentElement;\n            this.liCollections = this.list.querySelectorAll('.' + cssClass.li);\n            this.mainList = this.ulElement = this.list.querySelector('ul');\n            this.setSelection(this.value);\n            if (this.allowFiltering) {\n                this.setFiltering();\n            }\n            this.initToolbarAndStyles();\n            this.updateSelectionSettings();\n            this.wireEvents();\n            this.initDraggable();\n            this.initLoad = false;\n        }\n        else {\n            super.render();\n        }\n        this.renderComplete();\n    }\n    updateBlazorListData(data, isDataSource, select$$1) {\n        if (isDataSource) {\n            this.liCollections = this.list.querySelectorAll('.' + cssClass.li);\n            this.mainList = this.ulElement = this.list.querySelector('ul');\n            if (this.allowDragAndDrop && !this.ulElement.classList.contains('e-sortable')) {\n                this.initDraggable();\n            }\n            if (select$$1) {\n                this.selectItems(this.listData, false);\n            }\n        }\n        if (!isNullOrUndefined(data)) {\n            this.sortedData = this.jsonData = this.listData = data;\n        }\n    }\n    initWrapper() {\n        let hiddenSelect = this.createElement('select', { className: 'e-hidden-select', attrs: { 'multiple': '' } });\n        this.list.classList.add('e-listbox-wrapper');\n        if (this.itemTemplate) {\n            this.list.classList.add('e-list-template');\n        }\n        this.list.classList.add('e-wrapper');\n        if (this.element.tagName === 'EJS-LISTBOX') {\n            this.element.setAttribute('tabindex', '0');\n            if (this.initLoad) {\n                this.element.appendChild(this.list);\n            }\n        }\n        else {\n            if (this.initLoad) {\n                this.element.parentElement.insertBefore(this.list, this.element);\n            }\n            this.list.insertBefore(this.element, this.list.firstChild);\n            this.element.style.display = 'none';\n        }\n        this.list.insertBefore(hiddenSelect, this.list.firstChild);\n        if (this.list.getElementsByClassName('e-list-item')[0]) {\n            this.list.getElementsByClassName('e-list-item')[0].classList.remove(dropDownBaseClasses.focus);\n        }\n        removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);\n        this.validationAttribute(this.element, hiddenSelect);\n        this.list.setAttribute('role', 'listbox');\n        attributes(this.list, { 'role': 'listbox', 'aria-multiselectable': this.selectionSettings.mode === 'Multiple' ? 'true' : 'false' });\n        this.updateSelectionSettings();\n    }\n    updateSelectionSettings() {\n        if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {\n            let l10nSelect = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n            this.showSelectAll = true;\n            this.selectAllText = l10nSelect.getConstant('selectAllText');\n            this.unSelectAllText = l10nSelect.getConstant('unSelectAllText');\n            this.popupWrapper = this.list;\n            this.checkBoxSelectionModule.checkAllParent = null;\n            this.notify('selectAll', {});\n        }\n    }\n    initDraggable() {\n        if (this.ulElement) {\n            this.ulElement.id = this.element.id + '_parent';\n        }\n        if (this.allowDragAndDrop) {\n            new Sortable(this.ulElement, {\n                scope: this.scope,\n                itemClass: 'e-list-item',\n                dragStart: this.triggerDragStart.bind(this),\n                drag: this.triggerDrag.bind(this),\n                beforeDrop: this.beforeDragEnd.bind(this),\n                drop: this.dragEnd.bind(this),\n                placeHolder: () => { return this.createElement('span', { className: 'e-placeholder' }); },\n                helper: (e) => {\n                    let wrapper = this.list.cloneNode();\n                    let ele = e.sender.cloneNode(true);\n                    wrapper.appendChild(ele);\n                    let refEle = this.getItems()[0];\n                    wrapper.style.width = refEle.offsetWidth + 'px';\n                    wrapper.style.height = refEle.offsetHeight + 'px';\n                    if ((this.value && this.value.length) > 1 && this.isSelected(ele)) {\n                        ele.appendChild(this.createElement('span', {\n                            className: 'e-list-badge', innerHTML: this.value.length + ''\n                        }));\n                    }\n                    wrapper.style.zIndex = getZindexPartial(this.element) + '';\n                    return wrapper;\n                }\n            });\n        }\n    }\n    updateActionCompleteData(li, item) {\n        this.jsonData.push(item);\n    }\n    initToolbar() {\n        let scope;\n        let pos = this.toolbarSettings.position;\n        let prevScope = this.element.getAttribute('data-value');\n        if (this.toolbarSettings.items.length) {\n            let toolElem = this.createElement('div', { className: 'e-listbox-tool', attrs: { 'role': 'toolbar' } });\n            let wrapper = this.createElement('div', {\n                className: 'e-listboxtool-wrapper e-' + pos.toLowerCase()\n            });\n            this.list.parentElement.insertBefore(wrapper, this.list);\n            wrapper.appendChild(pos === 'Right' ? this.list : toolElem);\n            wrapper.appendChild(pos === 'Right' ? toolElem : this.list);\n            this.createButtons(toolElem);\n            if (!this.element.id) {\n                this.element.id = getUniqueID('e-' + this.getModuleName());\n            }\n            if (this.scope) {\n                document.querySelector(this.scope).setAttribute('data-value', this.element.id);\n            }\n            else {\n                this.updateToolBarState();\n            }\n        }\n        scope = this.element.getAttribute('data-value');\n        if (prevScope && scope && (prevScope !== scope)) {\n            this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());\n            this.tBListBox.updateToolBarState();\n        }\n        else if (scope) {\n            this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());\n            this.tBListBox.updateToolBarState();\n        }\n    }\n    createButtons(toolElem) {\n        let btn;\n        let ele;\n        let title;\n        let l10n = new L10n(this.getModuleName(), {\n            moveUp: 'Move Up', moveDown: 'Move Down', moveTo: 'Move To',\n            moveFrom: 'Move From', moveAllTo: 'Move All To', moveAllFrom: 'Move All From'\n        }, this.locale);\n        this.toolbarSettings.items.forEach((value) => {\n            title = l10n.getConstant(value);\n            ele = this.createElement('button', {\n                attrs: {\n                    'type': 'button',\n                    'data-value': value,\n                    'title': title,\n                    'aria-label': title\n                }\n            });\n            toolElem.appendChild(ele);\n            btn = new Button({ iconCss: 'e-icons e-' + value.toLowerCase() }, ele);\n            btn.createElement = this.createElement;\n        });\n    }\n    validationAttribute(input, hiddenSelect) {\n        super.validationAttribute(input, hiddenSelect);\n        hiddenSelect.required = input.required;\n        input.required = false;\n    }\n    setHeight() {\n        let ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        ele.style.height = formatUnit(this.height);\n        if (this.allowFiltering && this.height.toString().indexOf('%') < 0) {\n            addClass([this.list], 'e-filter-list');\n        }\n        else {\n            removeClass([this.list], 'e-filter-list');\n        }\n    }\n    setCssClass() {\n        let wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        if (this.cssClass) {\n            addClass([wrap], this.cssClass.split(' '));\n        }\n        if (this.enableRtl) {\n            addClass([wrap], 'e-rtl');\n        }\n    }\n    setEnable() {\n        let ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        if (this.enabled) {\n            removeClass([ele], cssClass.disabled);\n        }\n        else {\n            addClass([ele], cssClass.disabled);\n            if (isBlazor() && this.isServerRendered && this.toolbarSettings.items.length) {\n                removeClass([this.list], cssClass.disabled);\n            }\n        }\n    }\n    showSpinner() {\n        if (!this.spinner) {\n            this.spinner = this.createElement('div', { className: 'e-listbox-wrapper' });\n        }\n        this.spinner.style.height = formatUnit(this.height);\n        this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);\n        createSpinner({ target: this.spinner }, this.createElement);\n        showSpinner(this.spinner);\n    }\n    hideSpinner() {\n        if (this.spinner.querySelector('.e-spinner-pane')) {\n            hideSpinner(this.spinner);\n        }\n        if (this.spinner.parentElement) {\n            detach(this.spinner);\n        }\n    }\n    onInput() {\n        if (this.keyDownStatus) {\n            this.isValidKey = true;\n        }\n        else {\n            this.isValidKey = false;\n        }\n        this.keyDownStatus = false;\n        this.refreshClearIcon();\n    }\n    clearText() {\n        this.filterInput.value = '';\n        this.refreshClearIcon();\n        let event = document.createEvent('KeyboardEvent');\n        this.isValidKey = true;\n        this.KeyUp(event);\n    }\n    refreshClearIcon() {\n        if (this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon)) {\n            let clearElement = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n            clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n        }\n    }\n    onActionComplete(ulElement, list, e) {\n        let searchEle;\n        if (this.allowFiltering && this.list.getElementsByClassName('e-filter-parent')[0]) {\n            if (isBlazor() && this.isServerRendered) {\n                searchEle = this.list.getElementsByClassName('e-filter-parent')[0];\n            }\n            else {\n                searchEle = this.list.getElementsByClassName('e-filter-parent')[0].cloneNode(true);\n            }\n        }\n        super.onActionComplete(ulElement, list, e);\n        if (this.allowFiltering && !isNullOrUndefined(searchEle)) {\n            this.list.insertBefore(searchEle, this.list.firstElementChild);\n            if (!isBlazor() && !this.isServerRendered) {\n                this.filterParent = this.list.getElementsByClassName('e-filter-parent')[0];\n                this.filterWireEvents(searchEle);\n            }\n        }\n        this.initWrapper();\n        this.setSelection();\n        this.initDraggable();\n        this.mainList = this.ulElement;\n        if (this.initLoad) {\n            this.jsonData = [];\n            extend(this.jsonData, list, []);\n            this.initToolbarAndStyles();\n            this.wireEvents();\n            if (this.showCheckbox) {\n                this.setCheckboxPosition();\n            }\n            if (this.allowFiltering) {\n                this.setFiltering();\n            }\n        }\n        else {\n            if (this.allowFiltering) {\n                let filterElem = this.list.getElementsByClassName('e-input-filter')[0];\n                let txtLength = this.filterInput.value.length;\n                filterElem.selectionStart = txtLength;\n                filterElem.selectionEnd = txtLength;\n                filterElem.focus();\n            }\n        }\n        this.initLoad = false;\n    }\n    initToolbarAndStyles() {\n        this.initToolbar();\n        this.setCssClass();\n        this.setEnable();\n        this.setHeight();\n    }\n    triggerDragStart(args) {\n        let badge;\n        args = extend(this.getDragArgs(args), { dragSelected: true });\n        if (Browser.isIos) {\n            this.list.style.overflow = 'hidden';\n        }\n        this.trigger('dragStart', args, (dragEventArgs) => {\n            this.allowDragAll = dragEventArgs.dragSelected;\n            if (!this.allowDragAll) {\n                badge = this.ulElement.getElementsByClassName('e-list-badge')[0];\n                if (badge) {\n                    detach(badge);\n                }\n            }\n            if (isBlazor()) {\n                args.bindEvents(args.dragElement);\n            }\n        });\n    }\n    triggerDrag(args) {\n        this.trigger('drag', this.getDragArgs(args));\n        let listObj = this.getComponent(args.target);\n        if (listObj && listObj.listData.length === 0) {\n            let noRecElem = listObj.ulElement.getElementsByClassName('e-list-nrt')[0];\n            if (noRecElem) {\n                listObj.ulElement.removeChild(noRecElem);\n            }\n        }\n    }\n    beforeDragEnd(args) {\n        let dragValue = args.droppedElement.getAttribute('data-value');\n        if (this.value.indexOf(dragValue) > -1) {\n            args.items = this.getDataByValues(this.value);\n        }\n        else {\n            args.items = this.getDataByValues([dragValue]);\n        }\n        this.trigger('beforeDrop', args);\n    }\n    // tslint:disable-next-line:max-func-body-length\n    dragEnd(args) {\n        let listData;\n        let liColl;\n        let jsonData;\n        let droppedData;\n        let selectedOptions;\n        let sortedData;\n        let dropValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));\n        let listObj = this.getComponent(args.droppedElement);\n        let getArgs = this.getDragArgs({ target: args.droppedElement }, true);\n        let sourceArgs = { previousData: this.dataSource };\n        let destArgs = { previousData: listObj.dataSource };\n        let dragArgs = extend({}, getArgs, { target: args.target, source: { previousData: this.dataSource } });\n        if (listObj !== this) {\n            let sourceArgs1 = extend(sourceArgs, { currentData: this.listData });\n            dragArgs = extend(dragArgs, { source: sourceArgs1, destination: destArgs });\n        }\n        if (Browser.isIos) {\n            this.list.style.overflow = '';\n        }\n        if (listObj === this) {\n            let ul = this.ulElement;\n            listData = [].slice.call(this.listData);\n            liColl = [].slice.call(this.liCollections);\n            jsonData = [].slice.call(this.jsonData);\n            sortedData = [].slice.call(this.sortedData);\n            let toSortIdx = args.currentIndex;\n            let toIdx = args.currentIndex = this.getCurIdx(this, args.currentIndex);\n            let rIdx = listData.indexOf(this.getDataByValue(dropValue));\n            let jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));\n            let sIdx = sortedData.indexOf(this.getDataByValue(dropValue));\n            listData.splice(toIdx, 0, listData.splice(rIdx, 1)[0]);\n            sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);\n            jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n            if (!isBlazor()) {\n                liColl.splice(toIdx, 0, liColl.splice(rIdx, 1)[0]);\n            }\n            if (this.allowDragAll) {\n                selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];\n                selectedOptions.forEach((value) => {\n                    if (value !== dropValue) {\n                        let idx = listData.indexOf(this.getDataByValue(value));\n                        let jsonIdx = jsonData.indexOf(this.getDataByValue(value));\n                        let sIdx = sortedData.indexOf(this.getDataByValue(value));\n                        if (idx > toIdx) {\n                            toIdx++;\n                        }\n                        jsonData.splice(toIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n                        listData.splice(toIdx, 0, listData.splice(idx, 1)[0]);\n                        sortedData.splice(toSortIdx, 0, sortedData.splice(sIdx, 1)[0]);\n                        if (!isBlazor()) {\n                            liColl.splice(toIdx, 0, liColl.splice(idx, 1)[0]);\n                            ul.insertBefore(this.getItems()[this.getIndexByValue(value)], ul.getElementsByClassName('e-placeholder')[0]);\n                        }\n                    }\n                    else if (isBlazor()) {\n                        let lists = [].slice.call(this.ulElement.getElementsByClassName(cssClass.li));\n                        let refChild = this.ulElement.removeChild(lists[args.currentIndex]);\n                        lists.splice(args.currentIndex, 1);\n                        this.ulElement.insertBefore(refChild, lists[args.previousIndex]);\n                    }\n                });\n            }\n            this.listData = listData;\n            this.jsonData = jsonData;\n            this.sortedData = sortedData;\n            this.liCollections = liColl;\n            if (isBlazor()) {\n                let value = this.value;\n                // tslint:disable-next-line:no-any\n                this.interopAdaptor.invokeMethodAsync('UpdateListData', this.listData).then(() => {\n                    this.updateBlazorListData(null, true);\n                    this.selectItems(this.listData, false);\n                    this.selectItems(value);\n                });\n            }\n        }\n        else {\n            let li;\n            let fLiColl = [].slice.call(this.liCollections);\n            let currIdx = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);\n            let ul = listObj.ulElement;\n            listData = [].slice.call(listObj.listData);\n            liColl = [].slice.call(listObj.liCollections);\n            jsonData = [].slice.call(listObj.jsonData);\n            sortedData = [].slice.call(listObj.sortedData);\n            selectedOptions = (this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll)\n                ? this.value : [dropValue];\n            let fListData = [].slice.call(this.listData);\n            let fSortData = [].slice.call(this.sortedData);\n            selectedOptions.forEach((value, index) => {\n                droppedData = this.getDataByValue(value);\n                let srcIdx = this.listData.indexOf(droppedData);\n                let jsonSrcIdx = this.jsonData.indexOf(droppedData);\n                let sortIdx = this.sortedData.indexOf(droppedData);\n                fListData.splice(srcIdx, 1);\n                this.jsonData.splice(jsonSrcIdx, 1);\n                fSortData.splice(sortIdx, 1);\n                this.listData = fListData;\n                this.sortedData = fSortData;\n                let destIdx = value === dropValue ? args.currentIndex : currIdx;\n                listData.splice(destIdx, 0, droppedData);\n                jsonData.splice(destIdx, 0, droppedData);\n                sortedData.splice(destIdx, 0, droppedData);\n                if (!isBlazor()) {\n                    liColl.splice(destIdx, 0, fLiColl.splice(srcIdx, 1)[0]);\n                }\n                if (!value) {\n                    let liCollElem = this.getItems();\n                    for (let i = 0; i < liCollElem.length; i++) {\n                        if (liCollElem[i].getAttribute('data-value') === null && liCollElem[i].classList.contains('e-list-item')) {\n                            li = liCollElem[i];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    li = this.getItems()[this.getIndexByValue(value)];\n                }\n                if (!li) {\n                    li = args.helper;\n                }\n                this.removeSelected(this, value === dropValue ? [args.droppedElement] : [li]);\n                if (isBlazor()) {\n                    if (index === 0) {\n                        this.ulElement.insertBefore(ul.getElementsByClassName(cssClass.li)[args.currentIndex], this.ulElement.getElementsByClassName(cssClass.li)[args.previousIndex]);\n                    }\n                }\n                else {\n                    ul.insertBefore(li, ul.getElementsByClassName('e-placeholder')[0]);\n                }\n                currIdx++;\n            });\n            if (isBlazor()) {\n                // tslint:disable\n                this.interopAdaptor.invokeMethodAsync('UpdateListData', this.listData).then(() => {\n                    this.updateSelectedOptions();\n                    if (this.fields.groupBy) {\n                        this.setSelection();\n                    }\n                    this.updateBlazorListData(null, true, this.value == null || !this.value.length);\n                });\n                listObj.interopAdaptor.invokeMethodAsync('UpdateListData', listData).then(() => {\n                    if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox\n                        !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {\n                        listObj.setSelection();\n                    }\n                    listObj.updateBlazorListData(null, true, listObj.value == null || !listObj.value.length);\n                });\n                // tslint:enable\n            }\n            else {\n                if (this.fields.groupBy) {\n                    this.ulElement.innerHTML = this.renderItems(this.listData, this.fields).innerHTML;\n                    this.setSelection();\n                }\n                if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox\n                    !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy) {\n                    let sortabale = getComponent(ul, 'sortable');\n                    ul.innerHTML = listObj.renderItems(listData, listObj.fields).innerHTML;\n                    if (sortabale.placeHolderElement) {\n                        ul.appendChild(sortabale.placeHolderElement);\n                    }\n                    ul.appendChild(args.helper);\n                    listObj.setSelection();\n                }\n                this.liCollections = fLiColl;\n                listObj.liCollections = liColl;\n            }\n            listObj.jsonData = extend([], [], jsonData, false);\n            listObj.listData = extend([], [], listData, false);\n            listObj.sortedData = extend([], [], sortedData, false);\n            if (this.listData.length === 0) {\n                this.l10nUpdate();\n            }\n        }\n        if (this === listObj) {\n            let sourceArgs1 = extend(sourceArgs, { currentData: listData });\n            dragArgs = extend(dragArgs, { source: sourceArgs1 });\n        }\n        else {\n            let dragArgs1 = extend(destArgs, { currentData: listData });\n            dragArgs = extend(dragArgs, { destination: dragArgs1 });\n        }\n        this.trigger('drop', dragArgs);\n    }\n    removeSelected(listObj, elems) {\n        if (listObj.selectionSettings.showCheckbox) {\n            elems.forEach((ele) => { ele.getElementsByClassName('e-frame')[0].classList.remove('e-check'); });\n        }\n        else {\n            removeClass(elems, cssClass.selected);\n        }\n    }\n    getCurIdx(listObj, idx) {\n        if (listObj.fields.groupBy) {\n            idx -= [].slice.call(listObj.ulElement.children).slice(0, idx)\n                .filter((ele) => ele.classList.contains(cssClass.group)).length;\n        }\n        return idx;\n    }\n    getComponent(li) {\n        let listObj;\n        let ele = (this.element.tagName === 'EJS-LISTBOX' ? closest(li, '.e-listbox')\n            : closest(li, '.e-listbox-wrapper') && closest(li, '.e-listbox-wrapper').querySelector('.e-listbox'));\n        if (ele) {\n            listObj = getComponent(ele, this.getModuleName());\n        }\n        return listObj;\n    }\n    listOption(dataSource, fields) {\n        this.listCurrentOptions = super.listOption(dataSource, fields);\n        this.listCurrentOptions = extend({}, this.listCurrentOptions, { itemCreated: this.triggerBeforeItemRender.bind(this) }, true);\n        this.notify('listoption', { module: 'CheckBoxSelection' });\n        return this.listCurrentOptions;\n    }\n    triggerBeforeItemRender(e) {\n        e.item.setAttribute('tabindex', '-1');\n        this.trigger('beforeItemRender', { element: e.item, item: e.curData });\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.selectionSettings.showCheckbox) {\n            modules.push({\n                member: 'CheckBoxSelection',\n                args: [this]\n            });\n        }\n        return modules;\n    }\n    /**\n     * This method is used to enable or disable the items in the ListBox based on the items and enable argument.\n     * @param items Text items that needs to be enabled/disabled.\n     * @param enable Set `true`/`false` to enable/disable the list items.\n     * @param isValue - Set `true` if `items` parameter is a array of unique values.\n     * @returns void\n     */\n    enableItems(items, enable = true, isValue) {\n        let li;\n        items.forEach((item) => {\n            let text;\n            if (isBlazor() && typeof (item) === 'object') {\n                text = getValue(isValue ? this.fields.value : this.fields.text, item);\n                if (isNullOrUndefined(text)) {\n                    return;\n                }\n            }\n            else {\n                text = item;\n            }\n            li = this.findListElement(this.list, 'li', 'data-value', isValue ? text : this.getValueByText(text));\n            if (!li) {\n                return;\n            }\n            if (enable) {\n                removeClass([li], cssClass.disabled);\n                li.removeAttribute('aria-disabled');\n            }\n            else {\n                addClass([li], cssClass.disabled);\n                li.setAttribute('aria-disabled', 'true');\n            }\n        });\n    }\n    /**\n     * Based on the state parameter, specified list item will be selected/deselected.\n     * @param items Array of text value of the item.\n     * @param state Set `true`/`false` to select/un select the list items.\n     * @param isValue - Set `true` if `items` parameter is a array of unique values.\n     * @returns void\n     */\n    selectItems(items, state = true, isValue) {\n        this.setSelection(items, state, !isValue);\n        this.updateSelectedOptions();\n    }\n    /**\n     * Based on the state parameter, entire list item will be selected/deselected.\n     * @param state Set `true`/`false` to select/un select the entire list items.\n     * @returns void\n     */\n    selectAll(state = true) {\n        this.selectAllItems(state);\n    }\n    /**\n     * Adds a new item to the list. By default, new item appends to the list as the last item,\n     * but you can insert based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to place the newly added item in the list.\n     * @returns {void}.\n     */\n    addItems(items, itemIndex) {\n        super.addItem(items, itemIndex);\n    }\n    /**\n     * Removes a item from the list. By default, removed the last item in the list,\n     * but you can remove based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to remove the item from the list.\n     * @returns {void}.\n     */\n    removeItems(items, itemIndex) {\n        this.removeItem(items, itemIndex);\n    }\n    /**\n     * Removes a item from the list. By default, removed the last item in the list,\n     * but you can remove based on the index parameter.\n     * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n     * @param { number } itemIndex - Specifies the index to remove the item from the list.\n     * @returns {void}.\n     */\n    removeItem(items, itemIndex) {\n        let liCollections = [];\n        let liElement = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n        if (items) {\n            items = (items instanceof Array ? items : [items]);\n            let fields = this.fields;\n            let dataValue;\n            let objValue;\n            let dupData = [];\n            let itemIdx;\n            extend(dupData, [], this.listData);\n            let removeIdxes = [];\n            let removeLiIdxes = [];\n            for (let j = 0; j < items.length; j++) {\n                if (items[j] instanceof Object) {\n                    dataValue = getValue(fields.value, items[j]);\n                }\n                else {\n                    dataValue = items[j].toString();\n                }\n                for (let i = 0, len = dupData.length; i < len; i++) {\n                    if (dupData[i] instanceof Object) {\n                        objValue = getValue(fields.value, dupData[i]);\n                    }\n                    else {\n                        objValue = dupData[i].toString();\n                    }\n                    if (objValue === dataValue) {\n                        itemIdx = this.getIndexByValue(dataValue);\n                        liCollections.push(liElement[itemIdx]);\n                        removeIdxes.push(i);\n                        removeLiIdxes.push(itemIdx);\n                    }\n                }\n            }\n            for (let k = removeIdxes.length - 1; k > 0; k--) {\n                this.listData.splice(removeIdxes[k], 1);\n            }\n            for (let k = removeLiIdxes.length - 1; k > 0; k--) {\n                this.liCollections.splice(removeLiIdxes[k], 1);\n            }\n        }\n        else {\n            itemIndex = itemIndex ? itemIndex : 0;\n            liCollections.push(liElement[itemIndex]);\n            this.listData.splice(itemIndex, 1);\n            this.updateLiCollection(itemIndex);\n        }\n        for (let i = 0; i < liCollections.length; i++) {\n            this.ulElement.removeChild(liCollections[i]);\n        }\n        if (this.listData.length === 0) {\n            this.l10nUpdate();\n        }\n    }\n    /**\n     * Gets the array of data Object that matches the given array of values.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the array value of the list item.\n     * @returns object[].\n     */\n    getDataByValues(value) {\n        let data = [];\n        for (let i = 0; i < value.length; i++) {\n            data.push(this.getDataByValue(value[i]));\n        }\n        return data;\n    }\n    /**\n     * Moves the given value(s) / selected value(s) upwards.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveUp(value) {\n        let elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(true, false, elem);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) downwards.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n     * @returns {void}\n     */\n    moveDown(value) {\n        let elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        this.moveUpDown(false, false, elem);\n    }\n    /**\n     * Moves the given value(s) / selected value(s) to the given / default scoped ListBox.\n     * @param  { string[] | number[] | boolean[] } value - Specifies the value or array value of the list item.\n     * @returns {void}\n     */\n    moveTo(value, index, targetId) {\n        let elem = (value) ? this.getElemByValue(value) : this.getSelectedItems();\n        let tlistbox = (targetId) ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n        this.moveData(this, tlistbox, false, elem, index);\n    }\n    /**\n     * Moves all the values from one ListBox to the scoped ListBox.\n     * @param  { string } targetId - Specifies the scoped ListBox ID.\n     * @param  { string } index - Specifies the index to where the items moved.\n     * @returns {void}\n     */\n    moveAllTo(targetId, index) {\n        let tlistbox = (targetId) ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n        this.moveAllData(this, tlistbox, false, index);\n    }\n    /**\n     * Returns the updated dataSource in ListBox\n     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}\n     */\n    getDataList() {\n        return this.jsonData;\n    }\n    /**\n     * Returns the sorted Data in ListBox\n     * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]}\n     */\n    getSortedList() {\n        let sortData;\n        let tempData;\n        sortData = tempData = this.sortedData;\n        if (this.fields.groupBy) {\n            sortData = [];\n            for (let i = 0; i < tempData.length; i++) {\n                if (tempData[i].isHeader) {\n                    continue;\n                }\n                sortData.push(tempData[i]);\n            }\n        }\n        return sortData;\n    }\n    getElemByValue(value) {\n        let elem = [];\n        for (let i = 0; i < value.length; i++) {\n            elem.push(this.ulElement.querySelector('[data-value =\"' + value[i] + '\"]'));\n        }\n        return elem;\n    }\n    updateLiCollection(index) {\n        let tempLi = [].slice.call(this.liCollections);\n        tempLi.splice(index, 1);\n        this.liCollections = tempLi;\n    }\n    selectAllItems(state, event) {\n        [].slice.call(this.getItems()).forEach((li) => {\n            if (!li.classList.contains(cssClass.disabled)) {\n                if (this.selectionSettings.showCheckbox) {\n                    let ele = li.getElementsByClassName('e-check')[0];\n                    if ((!ele && state) || (ele && !state)) {\n                        this.notify('updatelist', { li: li, module: 'listbox' });\n                        if (this.maximumSelectionLength >= this.list.querySelectorAll('.e-list-item span.e-check').length) {\n                            this.checkMaxSelection();\n                        }\n                    }\n                }\n                else {\n                    if (state) {\n                        li.classList.add(cssClass.selected);\n                    }\n                    else {\n                        li.classList.remove(cssClass.selected);\n                    }\n                }\n            }\n        });\n        this.updateSelectedOptions();\n        if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n            let liEle = this.list.getElementsByTagName('li');\n            let index = 0;\n            if (state) {\n                for (index = 0; index < liEle.length; index++) {\n                    let dataValue1 = this.getFormattedValue(liEle[index].getAttribute('data-value'));\n                    if (!this.value.some((e) => e === dataValue1)) {\n                        this.value.push(this.getFormattedValue(liEle[index].getAttribute('data-value')));\n                    }\n                }\n            }\n            else {\n                for (index = 0; index < liEle.length; index++) {\n                    let dataValue2 = this.getFormattedValue(liEle[index].getAttribute('data-value'));\n                    this.value = this.value.filter((e) => e !== dataValue2);\n                }\n            }\n            if (document.querySelectorAll('ul').length < 2) {\n                this.updateMainList();\n            }\n        }\n        this.triggerChange(this.getSelectedItems(), event);\n    }\n    updateMainList() {\n        let mainList = this.mainList.querySelectorAll('.e-list-item');\n        let ulList = this.ulElement.querySelectorAll('.e-list-item');\n        let mainCount = mainList.length;\n        let ulEleCount = ulList.length;\n        if (this.selectionSettings.showCheckbox || (document.querySelectorAll('ul').length > 1 || mainCount !== ulEleCount)) {\n            let listindex = 0;\n            let valueindex = 0;\n            let count = 0;\n            for (listindex; listindex < mainCount;) {\n                if (this.value) {\n                    for (valueindex; valueindex < this.value.length; valueindex++) {\n                        if (mainList[listindex].getAttribute('data-value') === this.value[valueindex]) {\n                            count++;\n                        }\n                    }\n                }\n                if (!count && this.selectionSettings.showCheckbox) {\n                    mainList[listindex].getElementsByClassName('e-frame')[0].classList.remove('e-check');\n                }\n                if (document.querySelectorAll('ul').length > 1 && count && mainCount !== ulEleCount) {\n                    this.mainList.removeChild(this.mainList.getElementsByTagName('li')[listindex]);\n                    listindex = 0;\n                }\n                else {\n                    listindex++;\n                }\n                count = 0;\n                valueindex = 0;\n            }\n        }\n    }\n    wireEvents() {\n        let form = closest(this.element, 'form');\n        let wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n        EventHandler.add(this.list, 'click', this.clickHandler, this);\n        EventHandler.add(wrapper, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(wrapper, 'focusout', this.focusOutHandler, this);\n        this.wireToolbarEvent();\n        if (this.selectionSettings.showCheckbox) {\n            EventHandler.remove(document, 'mousedown', this.checkBoxSelectionModule.onDocumentClick);\n        }\n        if (this.fields.groupBy || this.element.querySelector('select>optgroup')) {\n            EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n        }\n        if (form) {\n            EventHandler.add(form, 'reset', this.formResetHandler, this);\n        }\n    }\n    wireToolbarEvent() {\n        if (this.toolbarSettings.items.length) {\n            EventHandler.add(this.getToolElem(), 'click', this.toolbarClickHandler, this);\n        }\n    }\n    unwireEvents() {\n        let form = closest(this.element, 'form');\n        let wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n        EventHandler.remove(this.list, 'click', this.clickHandler);\n        EventHandler.remove(wrapper, 'keydown', this.keyDownHandler);\n        EventHandler.remove(wrapper, 'focusout', this.focusOutHandler);\n        if (this.allowFiltering && this.clearFilterIconElem) {\n            EventHandler.remove(this.clearFilterIconElem, 'click', this.clearText);\n        }\n        if (this.toolbarSettings.items.length) {\n            EventHandler.remove(this.getToolElem(), 'click', this.toolbarClickHandler);\n        }\n        if (form) {\n            EventHandler.remove(form, 'reset', this.formResetHandler);\n        }\n    }\n    clickHandler(e) {\n        this.selectHandler(e);\n    }\n    ;\n    checkSelectAll() {\n        let searchCount = 0;\n        let liItems = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n        for (let i = 0; i < liItems.length; i++) {\n            if (!liItems[i].classList.contains('e-disabled')) {\n                searchCount++;\n            }\n        }\n        let len = this.getSelectedItems().length;\n        if (this.showSelectAll && searchCount) {\n            this.notify('checkSelectAll', { module: 'CheckBoxSelection',\n                value: (searchCount === len) ? 'check' : (len === 0) ? 'uncheck' : 'indeterminate' });\n        }\n    }\n    getQuery(query) {\n        let filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n        if (this.allowFiltering) {\n            let filterType = this.inputString === '' ? 'contains' : this.filterType;\n            let dataType = this.typeOfData(this.dataSource).typeof;\n            if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n                filterQuery.where('', filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n            }\n            else {\n                let fields = (this.fields.text) ? this.fields.text : '';\n                filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n            }\n        }\n        else {\n            filterQuery = query ? query : this.query ? this.query : new Query();\n        }\n        return filterQuery;\n    }\n    setFiltering() {\n        let filterInputObj;\n        if (isNullOrUndefined(this.filterParent)) {\n            if (isBlazor() && this.isServerRendered) {\n                this.filterParent = this.list.querySelector('.e-filter-parent');\n                this.filterInput = this.list.querySelector('.e-input-filter');\n            }\n            else {\n                this.filterParent = this.createElement('span', {\n                    className: listBoxClasses.filterParent\n                });\n                this.filterInput = this.createElement('input', {\n                    attrs: { type: 'text' },\n                    className: listBoxClasses.filterInput\n                });\n                this.element.parentNode.insertBefore(this.filterInput, this.element);\n                if (Browser.isDevice) {\n                    \n                }\n                filterInputObj = Input.createInput({\n                    element: this.filterInput,\n                    buttons: [listBoxClasses.filterBarClearIcon],\n                    properties: { placeholder: this.filterBarPlaceholder }\n                }, this.createElement);\n                append([filterInputObj.container], this.filterParent);\n                prepend([this.filterParent], this.list);\n                attributes(this.filterInput, {\n                    'aria-disabled': 'false',\n                    'aria-owns': this.element.id + '_options',\n                    'role': 'listbox',\n                    'aria-activedescendant': null,\n                    'autocomplete': 'off',\n                    'autocorrect': 'off',\n                    'autocapitalize': 'off',\n                    'spellcheck': 'false'\n                });\n            }\n            if (this.height.toString().indexOf('%') < 0) {\n                addClass([this.list], 'e-filter-list');\n            }\n            this.inputString = this.filterInput.value;\n            this.filterWireEvents();\n            return filterInputObj;\n        }\n    }\n    filterWireEvents(filterElem) {\n        if (filterElem) {\n            this.filterInput = filterElem.querySelector('.e-input-filter');\n        }\n        this.clearFilterIconElem = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n        if (this.clearFilterIconElem) {\n            EventHandler.add(this.clearFilterIconElem, 'click', this.clearText, this);\n            if (!filterElem) {\n                this.clearFilterIconElem.style.visibility = 'hidden';\n            }\n        }\n        EventHandler.add(this.filterInput, 'input', this.onInput, this);\n        EventHandler.add(this.filterInput, 'keyup', this.KeyUp, this);\n        EventHandler.add(this.filterInput, 'keydown', this.onKeyDown, this);\n    }\n    selectHandler(e, isKey) {\n        let isSelect = true;\n        let currSelIdx;\n        let li = closest(e.target, '.' + 'e-list-item');\n        let selectedLi = [li];\n        if (li) {\n            currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n            if (!this.selectionSettings.showCheckbox) {\n                if ((e.ctrlKey || Browser.isDevice) && this.isSelected(li)) {\n                    li.classList.remove(cssClass.selected);\n                    li.removeAttribute('aria-selected');\n                    isSelect = false;\n                }\n                else if (!(this.selectionSettings.mode === 'Multiple' && (e.ctrlKey || Browser.isDevice))) {\n                    this.getSelectedItems().forEach((ele) => {\n                        ele.removeAttribute('aria-selected');\n                    });\n                    removeClass(this.getSelectedItems(), cssClass.selected);\n                }\n            }\n            else {\n                isSelect = !li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n            }\n            if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== 'Single') {\n                selectedLi = [].slice.call(li.parentElement.children)\n                    .slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1)\n                    .filter((ele) => { return ele.classList.contains('e-list-item'); });\n            }\n            else {\n                this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n            }\n            if (isSelect) {\n                if (!this.selectionSettings.showCheckbox) {\n                    addClass(selectedLi, cssClass.selected);\n                }\n                selectedLi.forEach((ele) => {\n                    ele.setAttribute('aria-selected', 'true');\n                });\n                this.list.setAttribute('aria-activedescendant', li.id);\n            }\n            if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) &&\n                (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) &&\n                !(this.maximumSelectionLength < (this.value && this.value.length))) {\n                this.notify('updatelist', { li: li, e: e, module: 'listbox' });\n            }\n            if (this.allowFiltering && !isKey) {\n                let liDataValue = this.getFormattedValue(li.getAttribute('data-value'));\n                if (!isSelect) {\n                    this.value = this.value.filter((value1) => value1 !== liDataValue);\n                }\n                else {\n                    let values = [];\n                    extend(values, this.value);\n                    values.push(liDataValue);\n                    this.value = values;\n                }\n                if (document.querySelectorAll('ul').length < 2) {\n                    this.updateMainList();\n                }\n            }\n            this.updateSelectedOptions();\n            this.triggerChange(this.getSelectedItems(), e);\n            this.checkMaxSelection();\n        }\n    }\n    triggerChange(selectedLis, event) {\n        this.trigger('change', { elements: selectedLis, items: this.getDataByElements(selectedLis), value: this.value, event: event });\n    }\n    getDataByElems(elems) {\n        let data = [];\n        for (let i = 0, len = elems.length; i < len; i++) {\n            data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute('data-value'))));\n        }\n        return data;\n    }\n    getDataByElements(elems) {\n        let data = [];\n        let value;\n        let sIdx = 0;\n        if (!isNullOrUndefined(this.listData)) {\n            let type = this.typeOfData(this.listData).typeof;\n            if (type === 'string' || type === 'number' || type === 'boolean') {\n                for (let item of this.listData) {\n                    for (let i = sIdx, len = elems.length; i < len; i++) {\n                        value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n                        if (!isNullOrUndefined(item) && item === value) {\n                            sIdx = i;\n                            data.push(item);\n                            break;\n                        }\n                    }\n                    if (elems.length === data.length) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (let item of this.listData) {\n                    for (let i = sIdx, len = elems.length; i < len; i++) {\n                        value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n                        if (!isNullOrUndefined(item) && getValue((this.fields.value ? this.fields.value : 'value'), item) === value) {\n                            sIdx = i;\n                            data.push(item);\n                            break;\n                        }\n                    }\n                    if (elems.length === data.length) {\n                        break;\n                    }\n                }\n            }\n            return data;\n        }\n        return null;\n    }\n    checkMaxSelection() {\n        let limit = this.list.querySelectorAll('.e-list-item span.e-check').length;\n        if (this.selectionSettings.showCheckbox) {\n            let index = 0;\n            let liCollElem;\n            liCollElem = this.list.getElementsByClassName('e-list-item');\n            for (index; index < liCollElem.length; index++) {\n                if (!liCollElem[index].querySelector('.e-frame.e-check')) {\n                    if (limit === this.maximumSelectionLength) {\n                        liCollElem[index].classList.add('e-disable');\n                    }\n                    else if (liCollElem[index].classList.contains('e-disable')) {\n                        liCollElem[index].classList.remove('e-disable');\n                    }\n                }\n            }\n        }\n    }\n    toolbarClickHandler(e) {\n        let btn = closest(e.target, 'button');\n        if (btn) {\n            this.toolbarAction = btn.getAttribute('data-value');\n            if (btn.disabled) {\n                return;\n            }\n            switch (this.toolbarAction) {\n                case 'moveUp':\n                    this.moveUpDown(true);\n                    break;\n                case 'moveDown':\n                    this.moveUpDown();\n                    break;\n                case 'moveTo':\n                    this.moveItemTo();\n                    break;\n                case 'moveFrom':\n                    this.moveItemFrom();\n                    break;\n                case 'moveAllTo':\n                    this.moveAllItemTo();\n                    break;\n                case 'moveAllFrom':\n                    this.moveAllItemFrom();\n                    break;\n            }\n        }\n    }\n    moveUpDown(isUp, isKey, value) {\n        let elems = this.getSelectedItems();\n        let tempItems;\n        if (value) {\n            elems = value;\n        }\n        if (((isUp && this.isSelected(this.ulElement.firstElementChild))\n            || (!isUp && this.isSelected(this.ulElement.lastElementChild))) && !value) {\n            return;\n        }\n        tempItems = this.getDataByElems(elems);\n        let localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n        this.trigger('actionBegin', localDataArgs);\n        if (localDataArgs.cancel) {\n            return;\n        }\n        (isUp ? elems : elems.reverse()).forEach((ele) => {\n            let jsonToIdx = Array.prototype.indexOf.call(this.ulElement.querySelectorAll('.e-list-item'), ele);\n            let idx = Array.prototype.indexOf.call(this.ulElement.children, ele);\n            moveTo(this.ulElement, this.ulElement, [idx], isUp ? idx - 1 : idx + 2);\n            this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);\n        });\n        this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n        elems[0].focus();\n        if (!isKey && this.toolbarSettings.items.length) {\n            this.getToolElem().querySelector('[data-value=' + (isUp ? 'moveUp' : 'moveDown') + ']').focus();\n        }\n        this.updateToolBarState();\n    }\n    moveItemTo() {\n        this.moveData(this, this.getScopedListBox());\n    }\n    moveItemFrom() {\n        this.moveData(this.getScopedListBox(), this);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    moveData(fListBox, tListBox, isKey, value, index) {\n        let idx = [];\n        let dataIdx = [];\n        let jsonIdx = [];\n        let sortIdx = [];\n        let listData = [].slice.call(fListBox.listData);\n        let tListData = [].slice.call(tListBox.listData);\n        let sortData = [].slice.call(fListBox.sortedData);\n        let tSortData = [].slice.call(tListBox.sortedData);\n        let fliCollections = [].slice.call(fListBox.liCollections);\n        let dataLiIdx = [];\n        let tliCollections = [].slice.call(tListBox.liCollections);\n        let tempItems = [];\n        let data = [];\n        let elems = fListBox.getSelectedItems();\n        if (value) {\n            elems = value;\n        }\n        let isRefresh = tListBox.sortOrder !== 'None' ||\n            (tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox) || tListBox.fields.groupBy;\n        fListBox.value = [];\n        if (elems.length) {\n            this.removeSelected(fListBox, elems);\n            elems.forEach((ele, i) => {\n                idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele)); // update sortable elem\n                // To update lb view data\n                dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll('.e-list-item'), ele));\n                // To update lb listdata data\n                dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0]));\n                // To update lb sorted data\n                sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0]));\n                // To update lb original data\n                jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));\n            });\n            if (this.sortOrder !== 'None') {\n                sortIdx.forEach((i) => {\n                    tempItems.push(fListBox.sortedData[i]);\n                });\n            }\n            else {\n                jsonIdx.forEach((i) => {\n                    tempItems.push(fListBox.jsonData[i]);\n                });\n            }\n            let localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n            fListBox.trigger('actionBegin', localDataArgs);\n            if (localDataArgs.cancel) {\n                return;\n            }\n            if (!isBlazor()) {\n                let rLiCollection = [];\n                dataLiIdx.sort((n1, n2) => n1 - n2).reverse().forEach((i) => {\n                    rLiCollection.push(fliCollections.splice(i, 1)[0]);\n                });\n                fListBox.liCollections = fliCollections;\n                if (index) {\n                    let toColl = tliCollections.splice(0, index);\n                    tListBox.liCollections = toColl.concat(rLiCollection.reverse()).concat(tliCollections);\n                }\n                else {\n                    tListBox.liCollections = tliCollections.concat(rLiCollection.reverse());\n                }\n                if (tListBox.listData.length === 0) {\n                    let noRecElem = tListBox.ulElement.getElementsByClassName('e-list-nrt')[0];\n                    if (noRecElem) {\n                        tListBox.ulElement.removeChild(noRecElem);\n                    }\n                }\n            }\n            dataIdx.sort((n1, n2) => n2 - n1).forEach((i) => {\n                listData.splice(i, 1)[0];\n            });\n            sortIdx.sort((n1, n2) => n2 - n1).forEach((i) => {\n                sortData.splice(i, 1)[0];\n            });\n            jsonIdx.slice().reverse().forEach((i) => {\n                data.push(fListBox.jsonData.splice(i, 1)[0]);\n            });\n            if (!isBlazor()) {\n                if (isRefresh) {\n                    if (fListBox.fields.groupBy) {\n                        fListBox.ulElement.innerHTML = fListBox.renderItems(listData, fListBox.fields).innerHTML;\n                    }\n                    else {\n                        elems.forEach((ele) => { detach(ele); });\n                    }\n                }\n                else {\n                    moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);\n                    fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n                }\n                if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {\n                    tListBox.mainList = tListBox.ulElement;\n                }\n                fListBox.updateMainList();\n            }\n            let tJsonData = [].slice.call(tListBox.jsonData);\n            tSortData = [].slice.call(tListBox.sortedData);\n            if (!isBlazor()) {\n                this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);\n            }\n            if (isKey) {\n                this.list.focus();\n            }\n            fListBox.listData = listData;\n            fListBox.sortedData = sortData;\n            index = (index) ? index : tListData.length;\n            for (let i = tempItems.length - 1; i >= 0; i--) {\n                tListData.splice(index, 0, tempItems[i]);\n                tJsonData.splice(index, 0, tempItems[i]);\n                tSortData.splice(index, 0, tempItems[i]);\n            }\n            tListBox.listData = tListData;\n            tListBox.jsonData = tJsonData;\n            tListBox.sortedData = tSortData;\n            if (isBlazor()) {\n                // tslint:disable\n                fListBox.interopAdaptor.invokeMethodAsync('UpdateListData', fListBox.listData).then(() => {\n                    fListBox.updateBlazorListData(null, true);\n                    this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);\n                    fListBox.updateSelectedOptions();\n                });\n                tListBox.interopAdaptor.invokeMethodAsync('UpdateListData', tListBox.listData).then(() => {\n                    if (isRefresh) {\n                        tListBox.setSelection();\n                    }\n                    tListBox.updateBlazorListData(null, true);\n                    fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n                });\n                // tslint:enable\n            }\n            else {\n                if (isRefresh) {\n                    tListBox.ulElement.innerHTML = tListBox.renderItems(tListData, tListBox.fields).innerHTML;\n                    tListBox.setSelection();\n                }\n                fListBox.updateSelectedOptions();\n            }\n            if (fListBox.listData.length === 0) {\n                // tslint:disable-next-line\n                fListBox.l10nUpdate();\n            }\n        }\n        if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {\n            fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute('data-value'));\n        }\n    }\n    selectNextList(elems, dataLiIdx, dataIdx, inst) {\n        let childCnt = inst.ulElement.querySelectorAll('.e-list-item').length;\n        let ele;\n        let liIdx;\n        let validIdx = -1;\n        if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {\n            liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];\n            ele = inst.ulElement.querySelectorAll('.e-list-item')[liIdx];\n            validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);\n            if (validIdx > -1) {\n                (inst.ulElement.querySelectorAll('.e-list-item')[validIdx].classList.add(cssClass.selected));\n            }\n        }\n    }\n    moveAllItemTo() {\n        this.moveAllData(this, this.getScopedListBox());\n    }\n    moveAllItemFrom() {\n        this.moveAllData(this.getScopedListBox(), this);\n    }\n    moveAllData(fListBox, tListBox, isKey, index) {\n        let listData = [].slice.call(tListBox.listData);\n        let jsonData = [].slice.call(tListBox.jsonData);\n        let isRefresh = tListBox.sortOrder !== 'None' ||\n            (tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox) || tListBox.fields.groupBy;\n        this.removeSelected(fListBox, fListBox.getSelectedItems());\n        let tempItems = [].slice.call(fListBox.jsonData);\n        let localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };\n        fListBox.trigger('actionBegin', localDataArgs);\n        if (localDataArgs.cancel) {\n            return;\n        }\n        if (!isBlazor()) {\n            if (tListBox.listData.length === 0) {\n                let noRecElem = tListBox.ulElement.getElementsByClassName('e-list-nrt')[0];\n                if (noRecElem) {\n                    tListBox.ulElement.removeChild(noRecElem);\n                }\n            }\n            if (isRefresh) {\n                let noRecElem = fListBox.ulElement.getElementsByClassName('e-list-nrt')[0];\n                if (noRecElem) {\n                    fListBox.ulElement.removeChild(noRecElem);\n                }\n            }\n            else {\n                moveTo(fListBox.ulElement, tListBox.ulElement, Array.apply(null, { length: fListBox.ulElement.childElementCount }).map(Number.call, Number), index);\n                this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            }\n        }\n        if (isKey) {\n            this.list.focus();\n        }\n        index = (index) ? index : listData.length;\n        for (let i = 0; i < fListBox.listData.length; i++) {\n            listData.splice(index + i, 0, fListBox.listData[i]);\n        }\n        for (let i = 0; i < fListBox.jsonData.length; i++) {\n            jsonData.splice(index + i, 0, fListBox.jsonData[i]);\n        }\n        if (!isBlazor()) {\n            let fliCollections = [].slice.call(fListBox.liCollections);\n            let tliCollections = [].slice.call(tListBox.liCollections);\n            fListBox.liCollections = [];\n            if (index) {\n                let toColl = tliCollections.splice(0, index);\n                tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);\n            }\n            else {\n                tListBox.liCollections = tliCollections.concat(fliCollections);\n            }\n        }\n        fListBox.value = [];\n        listData = listData\n            .filter((data) => data.isHeader !== true);\n        tListBox.listData = listData;\n        tListBox.jsonData = jsonData;\n        fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];\n        if (isBlazor()) {\n            if (!isRefresh) {\n                tListBox.sortedData = listData;\n            }\n            // tslint:disable\n            fListBox.interopAdaptor.invokeMethodAsync('UpdateListData', fListBox.listData).then(() => {\n                fListBox.updateBlazorListData(null, true);\n                fListBox.updateSelectedOptions();\n            });\n            tListBox.interopAdaptor.invokeMethodAsync('UpdateListData', tListBox.listData).then(() => {\n                tListBox.updateBlazorListData(null, true);\n                fListBox.updateSelectedOptions();\n                fListBox.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            });\n            // tslint:enable\n        }\n        else {\n            if (isRefresh) {\n                tListBox.ulElement.innerHTML = tListBox.renderItems(listData, tListBox.fields).innerHTML;\n                this.trigger('actionComplete', { items: tempItems, eventName: this.toolbarAction });\n            }\n            else {\n                tListBox.sortedData = listData;\n            }\n            fListBox.updateSelectedOptions();\n        }\n        if (fListBox.listData.length === 0) {\n            // tslint:disable-next-line\n            fListBox.l10nUpdate();\n        }\n    }\n    changeData(fromIdx, toIdx, jsonToIdx, ele) {\n        let listData = [].slice.call(this.listData);\n        let jsonData = [].slice.call(this.jsonData);\n        let sortData = [].slice.call(this.sortedData);\n        let jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);\n        let sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);\n        let liColl = [].slice.call(this.liCollections);\n        listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);\n        jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n        sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);\n        liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);\n        this.listData = listData;\n        this.jsonData = jsonData;\n        this.liCollections = liColl;\n        this.sortedData = sortData;\n    }\n    getSelectedItems() {\n        let ele = [];\n        if (this.selectionSettings.showCheckbox) {\n            [].slice.call(this.ulElement.getElementsByClassName('e-check')).forEach((cbox) => {\n                ele.push(closest(cbox, '.' + 'e-list-item'));\n            });\n        }\n        else {\n            ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));\n        }\n        return ele;\n    }\n    getScopedListBox() {\n        let listObj;\n        if (this.scope) {\n            [].slice.call(document.querySelectorAll(this.scope)).forEach((ele) => {\n                if (getComponent(ele, this.getModuleName())) {\n                    listObj = getComponent(ele, this.getModuleName());\n                }\n            });\n        }\n        return listObj;\n    }\n    getDragArgs(args, isDragEnd) {\n        let elems = this.getSelectedItems();\n        if (elems.length) {\n            elems.pop();\n            if (isDragEnd) {\n                elems.push(args.target);\n            }\n        }\n        else {\n            elems = [args.target];\n        }\n        if (isBlazor()) {\n            return { elements: elems, items: this.getDataByElems(elems), bindEvents: args.bindEvents,\n                dragElement: args.dragElement };\n        }\n        else {\n            return { elements: elems, items: this.getDataByElems(elems) };\n        }\n    }\n    onKeyDown(e) {\n        this.keyDownHandler(e);\n        event.stopPropagation();\n    }\n    keyDownHandler(e) {\n        if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {\n            e.preventDefault();\n            if (e.keyCode === 32 && this.ulElement.children.length) {\n                this.selectHandler({\n                    target: this.ulElement.getElementsByClassName('e-focused')[0],\n                    ctrlKey: e.ctrlKey, shiftKey: e.shiftKey\n                });\n            }\n            else if (e.keyCode === 65 && e.ctrlKey) {\n                this.selectAll();\n            }\n            else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {\n                this.moveUpDown(e.keyCode === 38 ? true : false, true);\n            }\n            else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {\n                let listObj = this.tBListBox || this.getScopedListBox();\n                if (e.keyCode === 39) {\n                    e.shiftKey ? this.moveAllData(this, listObj, true) : this.moveData(this, listObj, true);\n                }\n                else {\n                    e.shiftKey ? this.moveAllData(listObj, this, true) : this.moveData(listObj, this, true);\n                }\n            }\n            else if (e.keyCode !== 37 && e.keyCode !== 39) {\n                this.upDownKeyHandler(e);\n            }\n        }\n        else if (this.allowFiltering) {\n            if (e.keyCode === 40 || e.keyCode === 38) {\n                this.upDownKeyHandler(e);\n            }\n        }\n    }\n    upDownKeyHandler(e) {\n        let ul = this.ulElement;\n        let defaultIdx = (e.keyCode === 40 || e.keyCode === 36) ? 0 : ul.childElementCount - 1;\n        let fliIdx = defaultIdx;\n        let fli = ul.getElementsByClassName('e-focused')[0] || ul.getElementsByClassName(cssClass.selected)[0];\n        if (fli) {\n            if (e.keyCode !== 35 && e.keyCode !== 36) {\n                fliIdx = Array.prototype.indexOf.call(ul.children, fli);\n                e.keyCode === 40 ? fliIdx++ : fliIdx--;\n                if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {\n                    return;\n                }\n            }\n            removeClass([fli], 'e-focused');\n        }\n        let cli = ul.children[fliIdx];\n        if (cli) {\n            fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);\n            if (fliIdx === -1) {\n                addClass([fli], 'e-focused');\n                return;\n            }\n            ul.children[fliIdx].focus();\n            ul.children[fliIdx].classList.add('e-focused');\n            if (!e.ctrlKey) {\n                this.selectHandler({ target: ul.children[fliIdx], ctrlKey: e.ctrlKey, shiftKey: e.shiftKey }, true);\n            }\n        }\n    }\n    KeyUp(e) {\n        let char = String.fromCharCode(e.keyCode);\n        let isWordCharacter = char.match(/\\w/);\n        if (!isNullOrUndefined(isWordCharacter)) {\n            this.isValidKey = true;\n        }\n        this.isValidKey = (e.keyCode === 8) || this.isValidKey;\n        if (this.isValidKey) {\n            this.isValidKey = false;\n            switch (e.keyCode) {\n                default:\n                    let text = this.targetElement();\n                    let keyCode = e.keyCode;\n                    if (this.allowFiltering) {\n                        let eventArgsData = {\n                            preventDefaultAction: false,\n                            text: this.targetElement(),\n                            updateData: (dataSource, query, fields) => {\n                                if (eventArgsData.cancel) {\n                                    return;\n                                }\n                                this.isFiltered = true;\n                                this.remoteFilterAction = true;\n                                this.dataUpdater(dataSource, query, fields);\n                            },\n                            event: e,\n                            cancel: false\n                        };\n                        this.trigger('filtering', eventArgsData, (args) => {\n                            this.isDataFetched = false;\n                            if (eventArgsData.cancel || (this.filterInput.value !== '' && this.isFiltered)) {\n                                return;\n                            }\n                            if (!eventArgsData.cancel && !this.isCustomFiltering && !eventArgsData.preventDefaultAction) {\n                                this.inputString = this.filterInput.value;\n                                this.filteringAction(this.jsonData, new Query(), this.fields);\n                            }\n                            if (!this.isFiltered && !this.isCustomFiltering && !eventArgsData.preventDefaultAction) {\n                                this.dataUpdater(this.jsonData, new Query(), this.fields);\n                            }\n                        });\n                    }\n            }\n        }\n    }\n    /**\n     * To filter the data from given data source by using query\n     * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n     * @param  {Query} query - Specify the query to filter the data.\n     * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n     * @return {void}.\n     */\n    filter(dataSource, query, fields) {\n        this.isCustomFiltering = true;\n        this.filteringAction(dataSource, query, fields);\n    }\n    filteringAction(dataSource, query, fields) {\n        this.resetList(dataSource, fields, query);\n    }\n    targetElement() {\n        this.targetInputElement = this.list.getElementsByClassName('e-input-filter')[0];\n        return this.targetInputElement.value;\n    }\n    dataUpdater(dataSource, query, fields) {\n        this.isDataFetched = false;\n        let backCommand = true;\n        if (this.targetElement().trim() === '') {\n            let list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n            if (backCommand) {\n                this.remoteCustomValue = false;\n                this.onActionComplete(list, this.jsonData);\n                this.notify('reOrder', { module: 'CheckBoxSelection', enable: this.selectionSettings.showCheckbox, e: this });\n            }\n        }\n        else {\n            this.resetList(dataSource, fields, query);\n        }\n    }\n    focusOutHandler() {\n        let ele = this.list.getElementsByClassName('e-focused')[0];\n        if (ele) {\n            ele.classList.remove('e-focused');\n        }\n        if (this.allowFiltering) {\n            this.refreshClearIcon();\n        }\n    }\n    getValidIndex(cli, index, keyCode) {\n        let cul = this.ulElement;\n        if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n            (keyCode === 40 || keyCode === 36) ? index++ : index--;\n        }\n        if (index < 0 || index === cul.childElementCount) {\n            return -1;\n        }\n        cli = cul.querySelectorAll('.e-list-item')[index];\n        if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n            index = this.getValidIndex(cli, index, keyCode);\n        }\n        return index;\n    }\n    updateSelectedOptions() {\n        let selectedOptions = [];\n        let values = [];\n        extend(values, this.value);\n        this.getSelectedItems().forEach((ele) => {\n            if (!ele.classList.contains('e-grabbed')) {\n                selectedOptions.push(this.getFormattedValue(ele.getAttribute('data-value')));\n            }\n        });\n        if (this.mainList.childElementCount === this.ulElement.childElementCount) {\n            if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n                for (let i = 0; i < selectedOptions.length; i++) {\n                    if (values.indexOf(selectedOptions[i]) > -1) {\n                        continue;\n                    }\n                    else {\n                        values.push(selectedOptions[i]);\n                    }\n                }\n                this.setProperties({ value: values }, true);\n            }\n            else {\n                this.setProperties({ value: selectedOptions }, true);\n            }\n        }\n        this.updateSelectTag();\n        this.updateToolBarState();\n        if (this.tBListBox) {\n            this.tBListBox.updateToolBarState();\n        }\n    }\n    clearSelection(values = this.value) {\n        if (this.selectionSettings.showCheckbox) {\n            let dvalue;\n            this.getSelectedItems().forEach((li) => {\n                dvalue = this.getFormattedValue(li.getAttribute('data-value'));\n                if (values.indexOf(dvalue) < 0) {\n                    li.getElementsByClassName('e-check')[0].classList.remove('e-check');\n                    li.getElementsByClassName('e-checkbox-wrapper')[0].removeAttribute('aria-checked');\n                    li.removeAttribute('aria-selected');\n                }\n            });\n        }\n    }\n    ;\n    setSelection(values = this.value, isSelect = true, isText = false) {\n        let li;\n        let liselect;\n        if (values) {\n            values.forEach((value) => {\n                let text;\n                if (isText) {\n                    if (isBlazor() && typeof (value) === 'object') {\n                        text = value[this.fields.text || 'text'];\n                        if (isNullOrUndefined(text)) {\n                            return;\n                        }\n                        text = this.getValueByText(text);\n                    }\n                    else {\n                        text = this.getValueByText(value);\n                    }\n                }\n                else {\n                    text = value;\n                }\n                li = this.list.querySelector('[data-value=\"' + text + '\"]');\n                if (li) {\n                    if (this.selectionSettings.showCheckbox) {\n                        liselect = li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n                    }\n                    else {\n                        liselect = li.classList.contains('e-selected');\n                    }\n                    if (!isSelect && liselect || isSelect && !liselect && li) {\n                        if (this.selectionSettings.showCheckbox) {\n                            this.notify('updatelist', { li: li, module: 'listbox' });\n                        }\n                        else {\n                            if (isSelect) {\n                                li.classList.add(cssClass.selected);\n                                li.setAttribute('aria-selected', 'true');\n                            }\n                            else {\n                                li.classList.remove(cssClass.selected);\n                                li.removeAttribute('aria-selected');\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        this.updateSelectTag();\n    }\n    updateSelectTag() {\n        let ele = this.getSelectTag();\n        let innerHTML = '';\n        ele.innerHTML = '';\n        if (this.value) {\n            for (let i = 0, len = this.value.length; i < len; i++) {\n                innerHTML += '<option selected value=\"' + this.value[i] + '\"></option>';\n            }\n            ele.innerHTML += innerHTML;\n        }\n        this.checkSelectAll();\n    }\n    checkDisabledState(inst) {\n        return (isBlazor() ? inst.ulElement.querySelectorAll('.' + cssClass.li).length : inst.ulElement.childElementCount) === 0;\n    }\n    updateToolBarState() {\n        if (this.toolbarSettings.items.length) {\n            let listObj = this.getScopedListBox();\n            let wrap = this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n            this.toolbarSettings.items.forEach((value) => {\n                let btn = wrap.querySelector('[data-value=\"' + value + '\"]');\n                switch (value) {\n                    case 'moveAllTo':\n                        btn.disabled = this.checkDisabledState(this);\n                        break;\n                    case 'moveAllFrom':\n                        btn.disabled = this.checkDisabledState(listObj);\n                        break;\n                    case 'moveFrom':\n                        btn.disabled = listObj.value && listObj.value.length ? false : true;\n                        break;\n                    case 'moveUp':\n                        btn.disabled = this.value && this.value.length\n                            && !this.isSelected(this.ulElement.children[0]) ? false : true;\n                        break;\n                    case 'moveDown':\n                        btn.disabled = this.value && this.value.length\n                            && !this.isSelected(this.ulElement.children[this.ulElement.childElementCount - 1]) ? false : true;\n                        break;\n                    default:\n                        btn.disabled = this.value && this.value.length ? false : true;\n                        break;\n                }\n            });\n        }\n    }\n    setCheckboxPosition() {\n        let listWrap = this.list;\n        if (!this.initLoad && this.selectionSettings.checkboxPosition === 'Left') {\n            listWrap.classList.remove('e-right');\n        }\n        if (this.selectionSettings.checkboxPosition === 'Right') {\n            listWrap.classList.add('e-right');\n        }\n    }\n    showCheckbox(showCheckbox) {\n        let index = 0;\n        let liColl = this.list.lastElementChild.querySelectorAll('li');\n        let liCollLen = this.list.lastElementChild.getElementsByClassName('e-list-item').length;\n        if (showCheckbox) {\n            if (!isBlazor()) {\n                this.ulElement = this.renderItems(this.listData, this.fields);\n                this.mainList = this.ulElement;\n                this.list.removeChild(this.list.getElementsByTagName('ul')[0]);\n                this.list.appendChild(this.ulElement);\n            }\n            if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName('e-selectall-parent')[0]) {\n                let l10nShow = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n                this.showSelectAll = true;\n                this.selectAllText = l10nShow.getConstant('selectAllText');\n                this.unSelectAllText = l10nShow.getConstant('unSelectAllText');\n                this.popupWrapper = this.list;\n                this.checkBoxSelectionModule.checkAllParent = null;\n                this.notify('selectAll', {});\n                this.checkSelectAll();\n            }\n        }\n        else {\n            if (this.list.getElementsByClassName('e-selectall-parent')[0]) {\n                this.list.removeChild(this.list.getElementsByClassName('e-selectall-parent')[0]);\n            }\n            if (!isBlazor()) {\n                for (index; index < liCollLen; index++) {\n                    if (liColl[index].classList.contains('e-list-item')) {\n                        liColl[index].removeChild(liColl[index].getElementsByClassName('e-checkbox-wrapper')[0]);\n                    }\n                    if (liColl[index].hasAttribute('aria-selected')) {\n                        liColl[index].removeAttribute('aria-selected');\n                    }\n                }\n                this.mainList = this.ulElement;\n            }\n        }\n        this.value = [];\n    }\n    isSelected(ele) {\n        if (!isNullOrUndefined(ele)) {\n            return ele.classList.contains(cssClass.selected) || ele.querySelector('.e-check') !== null;\n        }\n        else {\n            return false;\n        }\n    }\n    getSelectTag() {\n        return this.list.getElementsByClassName('e-hidden-select')[0];\n    }\n    getToolElem() {\n        return this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n    }\n    formResetHandler() {\n        this.value = this.initialSelectedOptions;\n    }\n    /**\n     * Return the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'listbox';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    getLocaleName() {\n        return 'listbox';\n    }\n    ;\n    destroy() {\n        if (this.itemTemplate) {\n            resetBlazorTemplate(`${this.element.id}${ITEMTEMPLATE_PROPERTY$1}`, ITEMTEMPLATE_PROPERTY$1);\n        }\n        this.unwireEvents();\n        if (this.element.tagName === 'EJS-LISTBOX') {\n            this.element.innerHTML = '';\n        }\n        else {\n            if (!isBlazor() || (isBlazor() && !this.isServerRendered)) {\n                this.element.style.display = 'inline-block';\n                if (this.toolbarSettings.items.length) {\n                    this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);\n                    detach(this.list.nextElementSibling);\n                }\n                this.list.parentElement.insertBefore(this.element, this.list);\n            }\n        }\n        if (!isBlazor() || (isBlazor() && !this.isServerRendered)) {\n            super.destroy();\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    onPropertyChanged(newProp, oldProp) {\n        let wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n        super.onPropertyChanged(newProp, oldProp);\n        this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrap], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrap], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrap.classList.add('e-rtl');\n                    }\n                    else {\n                        wrap.classList.remove('e-rtl');\n                    }\n                    break;\n                case 'value':\n                    removeClass(this.list.querySelectorAll('.' + cssClass.selected), cssClass.selected);\n                    this.clearSelection(this.value);\n                    this.setSelection();\n                    break;\n                case 'height':\n                    this.setHeight();\n                    break;\n                case 'enabled':\n                    this.setEnable();\n                    break;\n                case 'allowDragAndDrop':\n                    if (newProp.allowDragAndDrop) {\n                        this.initDraggable();\n                    }\n                    else {\n                        getComponent(this.ulElement, 'sortable').destroy();\n                    }\n                    break;\n                case 'allowFiltering':\n                    if (this.allowFiltering) {\n                        this.setFiltering();\n                    }\n                    else {\n                        this.list.removeChild(this.list.getElementsByClassName('e-filter-parent')[0]);\n                        this.filterParent = null;\n                        removeClass([this.list], 'e-filter-list');\n                    }\n                    break;\n                case 'filterBarPlaceholder':\n                    if (this.allowFiltering) {\n                        if (this.filterInput) {\n                            Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n                        }\n                    }\n                    break;\n                case 'scope':\n                    if (this.allowDragAndDrop) {\n                        getComponent(this.ulElement, 'sortable').scope = newProp.scope;\n                    }\n                    if (this.toolbarSettings.items.length) {\n                        if (oldProp.scope) {\n                            getComponent(document.querySelector(oldProp.scope), this.getModuleName())\n                                .tBListBox = null;\n                        }\n                        if (newProp.scope) {\n                            getComponent(document.querySelector(newProp.scope), this.getModuleName())\n                                .tBListBox = this;\n                        }\n                    }\n                    break;\n                case 'toolbarSettings':\n                    let ele;\n                    let pos = newProp.toolbarSettings.position;\n                    let toolElem = this.getToolElem();\n                    if (pos) {\n                        removeClass([wrap], ['e-right', 'e-left']);\n                        wrap.classList.add('e-' + pos.toLowerCase());\n                        if (pos === 'Left') {\n                            wrap.insertBefore(toolElem, this.list);\n                        }\n                        else {\n                            wrap.appendChild(toolElem);\n                        }\n                    }\n                    if (newProp.toolbarSettings.items) {\n                        if (oldProp.toolbarSettings.items.length) {\n                            ele = this.list.parentElement;\n                            ele.parentElement.insertBefore(this.list, ele);\n                            detach(ele);\n                        }\n                        this.initToolbarAndStyles();\n                        this.wireToolbarEvent();\n                    }\n                    break;\n                case 'selectionSettings':\n                    let showSelectAll = newProp.selectionSettings.showSelectAll;\n                    let showCheckbox = newProp.selectionSettings.showCheckbox;\n                    if (!isNullOrUndefined(showSelectAll)) {\n                        this.showSelectAll = showSelectAll;\n                        if (this.showSelectAll) {\n                            let l10nSel = new L10n(this.getModuleName(), { selectAllText: 'Select All', unSelectAllText: 'Unselect All' }, this.locale);\n                            this.checkBoxSelectionModule.checkAllParent = null;\n                            this.showSelectAll = true;\n                            this.selectAllText = l10nSel.getConstant('selectAllText');\n                            this.unSelectAllText = l10nSel.getConstant('selectAllText');\n                            this.popupWrapper = this.list;\n                        }\n                        this.notify('selectAll', {});\n                        this.checkSelectAll();\n                    }\n                    if (!isNullOrUndefined(showCheckbox)) {\n                        this.showCheckbox(showCheckbox);\n                    }\n                    if (this.selectionSettings.showCheckbox) {\n                        this.setCheckboxPosition();\n                    }\n                    break;\n                case 'dataSource':\n                    this.jsonData = [].slice.call(this.dataSource);\n                    break;\n            }\n        }\n    }\n};\n__decorate$6([\n    Property('')\n], ListBox.prototype, \"cssClass\", void 0);\n__decorate$6([\n    Property([])\n], ListBox.prototype, \"value\", void 0);\n__decorate$6([\n    Property('')\n], ListBox.prototype, \"height\", void 0);\n__decorate$6([\n    Property(false)\n], ListBox.prototype, \"allowDragAndDrop\", void 0);\n__decorate$6([\n    Property(1000)\n], ListBox.prototype, \"maximumSelectionLength\", void 0);\n__decorate$6([\n    Property(false)\n], ListBox.prototype, \"allowFiltering\", void 0);\n__decorate$6([\n    Property('')\n], ListBox.prototype, \"scope\", void 0);\n__decorate$6([\n    Property(true)\n], ListBox.prototype, \"ignoreCase\", void 0);\n__decorate$6([\n    Property(null)\n], ListBox.prototype, \"filterBarPlaceholder\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"beforeItemRender\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"filtering\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"select\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"change\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"beforeDrop\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"dragStart\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"drag\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"drop\", void 0);\n__decorate$6([\n    Event()\n], ListBox.prototype, \"dataBound\", void 0);\n__decorate$6([\n    Property(null)\n], ListBox.prototype, \"groupTemplate\", void 0);\n__decorate$6([\n    Property('No records found')\n], ListBox.prototype, \"noRecordsTemplate\", void 0);\n__decorate$6([\n    Property('Request failed')\n], ListBox.prototype, \"actionFailureTemplate\", void 0);\n__decorate$6([\n    Property(1000)\n], ListBox.prototype, \"zIndex\", void 0);\n__decorate$6([\n    Property(false)\n], ListBox.prototype, \"ignoreAccent\", void 0);\n__decorate$6([\n    Complex({}, ToolbarSettings)\n], ListBox.prototype, \"toolbarSettings\", void 0);\n__decorate$6([\n    Complex({}, SelectionSettings)\n], ListBox.prototype, \"selectionSettings\", void 0);\nListBox = ListBox_1 = __decorate$6([\n    NotifyPropertyChanges\n], ListBox);\nconst listBoxClasses = {\n    backIcon: 'e-input-group-icon e-back-icon e-icons',\n    filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n    filterInput: 'e-input-filter',\n    filterParent: 'e-filter-parent',\n    clearIcon: 'e-clear-icon',\n};\n\n/**\n * export all modules from current location\n */\n\n/**\n * export all modules from current location\n */\n\nexport { incrementalSearch, Search, highlightSearch, revertHighlightSearch, FieldSettings, dropDownBaseClasses, DropDownBase, dropDownListClasses, DropDownList, Fields, TreeSettings, DropDownTree, ComboBox, AutoComplete, MultiSelect, CheckBoxSelection, createFloatLabel, updateFloatLabelState, removeFloating, setPlaceHolder, floatLabelFocus, floatLabelBlur, SelectionSettings, ToolbarSettings, ListBox };\n//# sourceMappingURL=ej2-dropdowns.es2015.js.map\n","/*!\n* sweetalert2 v8.17.1\n* Released under the MIT License.\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Sweetalert2 = factory());\n}(this, (function () { 'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nvar consolePrefix = 'SweetAlert2:';\n/**\n * Filter the unique values into a new array\n * @param arr\n */\n\nvar uniqueArray = function uniqueArray(arr) {\n  var result = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n};\n/**\n * Returns the array ob object values (Object.values isn't supported in IE11)\n * @param obj\n */\n\nvar objectValues = function objectValues(obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n/**\n * Convert NodeList to Array\n * @param nodeList\n */\n\nvar toArray = function toArray(nodeList) {\n  return Array.prototype.slice.call(nodeList);\n};\n/**\n * Standardise console warnings\n * @param message\n */\n\nvar warn = function warn(message) {\n  console.warn(\"\".concat(consolePrefix, \" \").concat(message));\n};\n/**\n * Standardise console errors\n * @param message\n */\n\nvar error = function error(message) {\n  console.error(\"\".concat(consolePrefix, \" \").concat(message));\n};\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\n\nvar previousWarnOnceMessages = [];\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param message\n */\n\nvar warnOnce = function warnOnce(message) {\n  if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {\n    previousWarnOnceMessages.push(message);\n    warn(message);\n  }\n};\n/**\n * Show a one-time console warning about deprecated params/methods\n */\n\nvar warnAboutDepreation = function warnAboutDepreation(deprecatedParam, useInstead) {\n  warnOnce(\"\\\"\".concat(deprecatedParam, \"\\\" is deprecated and will be removed in the next major release. Please use \\\"\").concat(useInstead, \"\\\" instead.\"));\n};\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\n\nvar callIfFunction = function callIfFunction(arg) {\n  return typeof arg === 'function' ? arg() : arg;\n};\nvar isPromise = function isPromise(arg) {\n  return arg && Promise.resolve(arg) === arg;\n};\n\nvar DismissReason = Object.freeze({\n  cancel: 'cancel',\n  backdrop: 'backdrop',\n  close: 'close',\n  esc: 'esc',\n  timer: 'timer'\n});\n\nvar argsToParams = function argsToParams(args) {\n  var params = {};\n\n  switch (_typeof(args[0])) {\n    case 'object':\n      _extends(params, args[0]);\n\n      break;\n\n    default:\n      ['title', 'html', 'type'].forEach(function (name, index) {\n        switch (_typeof(args[index])) {\n          case 'string':\n            params[name] = args[index];\n            break;\n\n          case 'undefined':\n            break;\n\n          default:\n            error(\"Unexpected type of \".concat(name, \"! Expected \\\"string\\\", got \").concat(_typeof(args[index])));\n        }\n      });\n  }\n\n  return params;\n};\n\nvar swalPrefix = 'swal2-';\nvar prefix = function prefix(items) {\n  var result = {};\n\n  for (var i in items) {\n    result[items[i]] = swalPrefix + items[i];\n  }\n\n  return result;\n};\nvar swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'toast', 'toast-shown', 'toast-column', 'fade', 'show', 'hide', 'noanimation', 'close', 'title', 'header', 'content', 'actions', 'confirm', 'cancel', 'footer', 'icon', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl']);\nvar iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);\n\nvar states = {\n  previousBodyPadding: null\n};\nvar hasClass = function hasClass(elem, className) {\n  return elem.classList.contains(className);\n};\nvar applyCustomClass = function applyCustomClass(elem, customClass, className) {\n  // Clean up previous custom classes\n  toArray(elem.classList).forEach(function (className) {\n    if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1)) {\n      elem.classList.remove(className);\n    }\n  });\n\n  if (customClass && customClass[className]) {\n    addClass(elem, customClass[className]);\n  }\n};\nfunction getInput(content, inputType) {\n  if (!inputType) {\n    return null;\n  }\n\n  switch (inputType) {\n    case 'select':\n    case 'textarea':\n    case 'file':\n      return getChildByClass(content, swalClasses[inputType]);\n\n    case 'checkbox':\n      return content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n\n    case 'radio':\n      return content.querySelector(\".\".concat(swalClasses.radio, \" input:checked\")) || content.querySelector(\".\".concat(swalClasses.radio, \" input:first-child\"));\n\n    case 'range':\n      return content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n\n    default:\n      return getChildByClass(content, swalClasses.input);\n  }\n}\nvar focusInput = function focusInput(input) {\n  input.focus(); // place cursor at end of text in text input\n\n  if (input.type !== 'file') {\n    // http://stackoverflow.com/a/2345915\n    var val = input.value;\n    input.value = '';\n    input.value = val;\n  }\n};\nvar toggleClass = function toggleClass(target, classList, condition) {\n  if (!target || !classList) {\n    return;\n  }\n\n  if (typeof classList === 'string') {\n    classList = classList.split(/\\s+/).filter(Boolean);\n  }\n\n  classList.forEach(function (className) {\n    if (target.forEach) {\n      target.forEach(function (elem) {\n        condition ? elem.classList.add(className) : elem.classList.remove(className);\n      });\n    } else {\n      condition ? target.classList.add(className) : target.classList.remove(className);\n    }\n  });\n};\nvar addClass = function addClass(target, classList) {\n  toggleClass(target, classList, true);\n};\nvar removeClass = function removeClass(target, classList) {\n  toggleClass(target, classList, false);\n};\nvar getChildByClass = function getChildByClass(elem, className) {\n  for (var i = 0; i < elem.childNodes.length; i++) {\n    if (hasClass(elem.childNodes[i], className)) {\n      return elem.childNodes[i];\n    }\n  }\n};\nvar applyNumericalStyle = function applyNumericalStyle(elem, property, value) {\n  if (value || parseInt(value) === 0) {\n    elem.style[property] = typeof value === 'number' ? value + 'px' : value;\n  } else {\n    elem.style.removeProperty(property);\n  }\n};\nvar show = function show(elem) {\n  var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\n  elem.style.opacity = '';\n  elem.style.display = display;\n};\nvar hide = function hide(elem) {\n  elem.style.opacity = '';\n  elem.style.display = 'none';\n};\nvar toggle = function toggle(elem, condition, display) {\n  condition ? show(elem, display) : hide(elem);\n}; // borrowed from jquery $(elem).is(':visible') implementation\n\nvar isVisible = function isVisible(elem) {\n  return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n};\nvar isScrollable = function isScrollable(elem) {\n  return !!(elem.scrollHeight > elem.clientHeight);\n}; // borrowed from https://stackoverflow.com/a/46352119\n\nvar hasCssAnimation = function hasCssAnimation(elem) {\n  var style = window.getComputedStyle(elem);\n  var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\n  var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\n  return animDuration > 0 || transDuration > 0;\n};\nvar contains = function contains(haystack, needle) {\n  if (typeof haystack.contains === 'function') {\n    return haystack.contains(needle);\n  }\n};\n\nvar getContainer = function getContainer() {\n  return document.body.querySelector('.' + swalClasses.container);\n};\nvar elementBySelector = function elementBySelector(selectorString) {\n  var container = getContainer();\n  return container ? container.querySelector(selectorString) : null;\n};\n\nvar elementByClass = function elementByClass(className) {\n  return elementBySelector('.' + className);\n};\n\nvar getPopup = function getPopup() {\n  return elementByClass(swalClasses.popup);\n};\nvar getIcons = function getIcons() {\n  var popup = getPopup();\n  return toArray(popup.querySelectorAll('.' + swalClasses.icon));\n};\nvar getIcon = function getIcon() {\n  var visibleIcon = getIcons().filter(function (icon) {\n    return isVisible(icon);\n  });\n  return visibleIcon.length ? visibleIcon[0] : null;\n};\nvar getTitle = function getTitle() {\n  return elementByClass(swalClasses.title);\n};\nvar getContent = function getContent() {\n  return elementByClass(swalClasses.content);\n};\nvar getImage = function getImage() {\n  return elementByClass(swalClasses.image);\n};\nvar getProgressSteps = function getProgressSteps() {\n  return elementByClass(swalClasses['progress-steps']);\n};\nvar getValidationMessage = function getValidationMessage() {\n  return elementByClass(swalClasses['validation-message']);\n};\nvar getConfirmButton = function getConfirmButton() {\n  return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.confirm);\n};\nvar getCancelButton = function getCancelButton() {\n  return elementBySelector('.' + swalClasses.actions + ' .' + swalClasses.cancel);\n};\nvar getActions = function getActions() {\n  return elementByClass(swalClasses.actions);\n};\nvar getHeader = function getHeader() {\n  return elementByClass(swalClasses.header);\n};\nvar getFooter = function getFooter() {\n  return elementByClass(swalClasses.footer);\n};\nvar getCloseButton = function getCloseButton() {\n  return elementByClass(swalClasses.close);\n}; // https://github.com/jkup/focusable/blob/master/index.js\n\nvar focusable = \"\\n  a[href],\\n  area[href],\\n  input:not([disabled]),\\n  select:not([disabled]),\\n  textarea:not([disabled]),\\n  button:not([disabled]),\\n  iframe,\\n  object,\\n  embed,\\n  [tabindex=\\\"0\\\"],\\n  [contenteditable],\\n  audio[controls],\\n  video[controls],\\n  summary\\n\";\nvar getFocusableElements = function getFocusableElements() {\n  var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])')) // sort according to tabindex\n  .sort(function (a, b) {\n    a = parseInt(a.getAttribute('tabindex'));\n    b = parseInt(b.getAttribute('tabindex'));\n\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    }\n\n    return 0;\n  });\n  var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {\n    return el.getAttribute('tabindex') !== '-1';\n  });\n  return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {\n    return isVisible(el);\n  });\n};\nvar isModal = function isModal() {\n  return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);\n};\nvar isToast = function isToast() {\n  return document.body.classList.contains(swalClasses['toast-shown']);\n};\nvar isLoading = function isLoading() {\n  return getPopup().hasAttribute('data-loading');\n};\n\n// Detect Node env\nvar isNodeEnv = function isNodeEnv() {\n  return typeof window === 'undefined' || typeof document === 'undefined';\n};\n\nvar sweetHTML = \"\\n <div aria-labelledby=\\\"\".concat(swalClasses.title, \"\\\" aria-describedby=\\\"\").concat(swalClasses.content, \"\\\" class=\\\"\").concat(swalClasses.popup, \"\\\" tabindex=\\\"-1\\\">\\n   <div class=\\\"\").concat(swalClasses.header, \"\\\">\\n     <ul class=\\\"\").concat(swalClasses['progress-steps'], \"\\\"></ul>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.error, \"\\\">\\n       <span class=\\\"swal2-x-mark\\\"><span class=\\\"swal2-x-mark-line-left\\\"></span><span class=\\\"swal2-x-mark-line-right\\\"></span></span>\\n     </div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.question, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.warning, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.info, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.success, \"\\\">\\n       <div class=\\\"swal2-success-circular-line-left\\\"></div>\\n       <span class=\\\"swal2-success-line-tip\\\"></span> <span class=\\\"swal2-success-line-long\\\"></span>\\n       <div class=\\\"swal2-success-ring\\\"></div> <div class=\\\"swal2-success-fix\\\"></div>\\n       <div class=\\\"swal2-success-circular-line-right\\\"></div>\\n     </div>\\n     <img class=\\\"\").concat(swalClasses.image, \"\\\" />\\n     <h2 class=\\\"\").concat(swalClasses.title, \"\\\" id=\\\"\").concat(swalClasses.title, \"\\\"></h2>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.close, \"\\\"></button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.content, \"\\\">\\n     <div id=\\\"\").concat(swalClasses.content, \"\\\"></div>\\n     <input class=\\\"\").concat(swalClasses.input, \"\\\" />\\n     <input type=\\\"file\\\" class=\\\"\").concat(swalClasses.file, \"\\\" />\\n     <div class=\\\"\").concat(swalClasses.range, \"\\\">\\n       <input type=\\\"range\\\" />\\n       <output></output>\\n     </div>\\n     <select class=\\\"\").concat(swalClasses.select, \"\\\"></select>\\n     <div class=\\\"\").concat(swalClasses.radio, \"\\\"></div>\\n     <label for=\\\"\").concat(swalClasses.checkbox, \"\\\" class=\\\"\").concat(swalClasses.checkbox, \"\\\">\\n       <input type=\\\"checkbox\\\" />\\n       <span class=\\\"\").concat(swalClasses.label, \"\\\"></span>\\n     </label>\\n     <textarea class=\\\"\").concat(swalClasses.textarea, \"\\\"></textarea>\\n     <div class=\\\"\").concat(swalClasses['validation-message'], \"\\\" id=\\\"\").concat(swalClasses['validation-message'], \"\\\"></div>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.actions, \"\\\">\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.confirm, \"\\\">OK</button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.cancel, \"\\\">Cancel</button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.footer, \"\\\">\\n   </div>\\n </div>\\n\").replace(/(^|\\n)\\s*/g, '');\n\nvar resetOldContainer = function resetOldContainer() {\n  var oldContainer = getContainer();\n\n  if (!oldContainer) {\n    return;\n  }\n\n  oldContainer.parentNode.removeChild(oldContainer);\n  removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\n};\n\nvar oldInputVal; // IE11 workaround, see #1109 for details\n\nvar resetValidationMessage = function resetValidationMessage(e) {\n  if (Swal.isVisible() && oldInputVal !== e.target.value) {\n    Swal.resetValidationMessage();\n  }\n\n  oldInputVal = e.target.value;\n};\n\nvar addInputChangeListeners = function addInputChangeListeners() {\n  var content = getContent();\n  var input = getChildByClass(content, swalClasses.input);\n  var file = getChildByClass(content, swalClasses.file);\n  var range = content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n  var rangeOutput = content.querySelector(\".\".concat(swalClasses.range, \" output\"));\n  var select = getChildByClass(content, swalClasses.select);\n  var checkbox = content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n  var textarea = getChildByClass(content, swalClasses.textarea);\n  input.oninput = resetValidationMessage;\n  file.onchange = resetValidationMessage;\n  select.onchange = resetValidationMessage;\n  checkbox.onchange = resetValidationMessage;\n  textarea.oninput = resetValidationMessage;\n\n  range.oninput = function (e) {\n    resetValidationMessage(e);\n    rangeOutput.value = range.value;\n  };\n\n  range.onchange = function (e) {\n    resetValidationMessage(e);\n    range.nextSibling.value = range.value;\n  };\n};\n\nvar getTarget = function getTarget(target) {\n  return typeof target === 'string' ? document.querySelector(target) : target;\n};\n\nvar setupAccessibility = function setupAccessibility(params) {\n  var popup = getPopup();\n  popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n  popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n\n  if (!params.toast) {\n    popup.setAttribute('aria-modal', 'true');\n  }\n};\n\nvar setupRTL = function setupRTL(targetElement) {\n  if (window.getComputedStyle(targetElement).direction === 'rtl') {\n    addClass(getContainer(), swalClasses.rtl);\n  }\n};\n/*\n * Add modal + backdrop to DOM\n */\n\n\nvar init = function init(params) {\n  // Clean up the old popup container if it exists\n  resetOldContainer();\n  /* istanbul ignore if */\n\n  if (isNodeEnv()) {\n    error('SweetAlert2 requires document to initialize');\n    return;\n  }\n\n  var container = document.createElement('div');\n  container.className = swalClasses.container;\n  container.innerHTML = sweetHTML;\n  var targetElement = getTarget(params.target);\n  targetElement.appendChild(container);\n  setupAccessibility(params);\n  setupRTL(targetElement);\n  addInputChangeListeners();\n};\n\nvar parseHtmlToContainer = function parseHtmlToContainer(param, target) {\n  // DOM element\n  if (param instanceof HTMLElement) {\n    target.appendChild(param); // JQuery element(s)\n  } else if (_typeof(param) === 'object') {\n    handleJqueryElem(target, param); // Plain string\n  } else if (param) {\n    target.innerHTML = param;\n  }\n};\n\nvar handleJqueryElem = function handleJqueryElem(target, elem) {\n  target.innerHTML = '';\n\n  if (0 in elem) {\n    for (var i = 0; i in elem; i++) {\n      target.appendChild(elem[i].cloneNode(true));\n    }\n  } else {\n    target.appendChild(elem.cloneNode(true));\n  }\n};\n\nvar animationEndEvent = function () {\n  // Prevent run in Node env\n\n  /* istanbul ignore if */\n  if (isNodeEnv()) {\n    return false;\n  }\n\n  var testEl = document.createElement('div');\n  var transEndEventNames = {\n    WebkitAnimation: 'webkitAnimationEnd',\n    OAnimation: 'oAnimationEnd oanimationend',\n    animation: 'animationend'\n  };\n\n  for (var i in transEndEventNames) {\n    if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {\n      return transEndEventNames[i];\n    }\n  }\n\n  return false;\n}();\n\n// Measure width of scrollbar\n// https://github.com/twbs/bootstrap/blob/master/js/modal.js#L279-L286\nvar measureScrollbar = function measureScrollbar() {\n  var supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;\n\n  if (supportsTouch) {\n    return 0;\n  }\n\n  var scrollDiv = document.createElement('div');\n  scrollDiv.style.width = '50px';\n  scrollDiv.style.height = '50px';\n  scrollDiv.style.overflow = 'scroll';\n  document.body.appendChild(scrollDiv);\n  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  document.body.removeChild(scrollDiv);\n  return scrollbarWidth;\n};\n\nvar renderActions = function renderActions(instance, params) {\n  var actions = getActions();\n  var confirmButton = getConfirmButton();\n  var cancelButton = getCancelButton(); // Actions (buttons) wrapper\n\n  if (!params.showConfirmButton && !params.showCancelButton) {\n    hide(actions);\n  } // Custom class\n\n\n  applyCustomClass(actions, params.customClass, 'actions'); // Render confirm button\n\n  renderButton(confirmButton, 'confirm', params); // render Cancel Button\n\n  renderButton(cancelButton, 'cancel', params);\n\n  if (params.buttonsStyling) {\n    handleButtonsStyling(confirmButton, cancelButton, params);\n  } else {\n    removeClass([confirmButton, cancelButton], swalClasses.styled);\n    confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';\n    cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';\n  }\n\n  if (params.reverseButtons) {\n    confirmButton.parentNode.insertBefore(cancelButton, confirmButton);\n  }\n};\n\nfunction handleButtonsStyling(confirmButton, cancelButton, params) {\n  addClass([confirmButton, cancelButton], swalClasses.styled); // Buttons background colors\n\n  if (params.confirmButtonColor) {\n    confirmButton.style.backgroundColor = params.confirmButtonColor;\n  }\n\n  if (params.cancelButtonColor) {\n    cancelButton.style.backgroundColor = params.cancelButtonColor;\n  } // Loading state\n\n\n  var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');\n  confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;\n  confirmButton.style.borderRightColor = confirmButtonBackgroundColor;\n}\n\nfunction renderButton(button, buttonType, params) {\n  toggle(button, params['showC' + buttonType.substring(1) + 'Button'], 'inline-block');\n  button.innerHTML = params[buttonType + 'ButtonText']; // Set caption text\n\n  button.setAttribute('aria-label', params[buttonType + 'ButtonAriaLabel']); // ARIA label\n  // Add buttons custom classes\n\n  button.className = swalClasses[buttonType];\n  applyCustomClass(button, params.customClass, buttonType + 'Button');\n  addClass(button, params[buttonType + 'ButtonClass']);\n}\n\nfunction handleBackdropParam(container, backdrop) {\n  if (typeof backdrop === 'string') {\n    container.style.background = backdrop;\n  } else if (!backdrop) {\n    addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n  }\n}\n\nfunction handlePositionParam(container, position) {\n  if (position in swalClasses) {\n    addClass(container, swalClasses[position]);\n  } else {\n    warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n    addClass(container, swalClasses.center);\n  }\n}\n\nfunction handleGrowParam(container, grow) {\n  if (grow && typeof grow === 'string') {\n    var growClass = 'grow-' + grow;\n\n    if (growClass in swalClasses) {\n      addClass(container, swalClasses[growClass]);\n    }\n  }\n}\n\nvar renderContainer = function renderContainer(instance, params) {\n  var container = getContainer();\n\n  if (!container) {\n    return;\n  }\n\n  handleBackdropParam(container, params.backdrop);\n\n  if (!params.backdrop && params.allowOutsideClick) {\n    warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n  }\n\n  handlePositionParam(container, params.position);\n  handleGrowParam(container, params.grow); // Custom class\n\n  applyCustomClass(container, params.customClass, 'container');\n\n  if (params.customContainerClass) {\n    // @deprecated\n    addClass(container, params.customContainerClass);\n  }\n};\n\n/**\n * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n * This is the approach that Babel will probably take to implement private methods/fields\n *   https://github.com/tc39/proposal-private-methods\n *   https://github.com/babel/babel/pull/7555\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n *   then we can use that language feature.\n */\nvar privateProps = {\n  promise: new WeakMap(),\n  innerParams: new WeakMap(),\n  domCache: new WeakMap()\n};\n\nvar inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\nvar renderInput = function renderInput(instance, params) {\n  var content = getContent();\n  var innerParams = privateProps.innerParams.get(instance);\n  var rerender = !innerParams || params.input !== innerParams.input;\n  inputTypes.forEach(function (inputType) {\n    var inputClass = swalClasses[inputType];\n    var inputContainer = getChildByClass(content, inputClass); // set attributes\n\n    setAttributes(inputType, params.inputAttributes); // set class\n\n    setClass(inputContainer, inputClass, params);\n\n    if (rerender) {\n      hide(inputContainer);\n    }\n  });\n\n  if (params.input && rerender) {\n    showInput(params);\n  }\n};\n\nvar showInput = function showInput(params) {\n  if (!renderInputType[params.input]) {\n    return error(\"Unexpected type of input! Expected \\\"text\\\", \\\"email\\\", \\\"password\\\", \\\"number\\\", \\\"tel\\\", \\\"select\\\", \\\"radio\\\", \\\"checkbox\\\", \\\"textarea\\\", \\\"file\\\" or \\\"url\\\", got \\\"\".concat(params.input, \"\\\"\"));\n  }\n\n  var input = renderInputType[params.input](params);\n  show(input); // input autofocus\n\n  setTimeout(function () {\n    focusInput(input);\n  });\n};\n\nvar removeAttributes = function removeAttributes(input) {\n  for (var i = 0; i < input.attributes.length; i++) {\n    var attrName = input.attributes[i].name;\n\n    if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {\n      input.removeAttribute(attrName);\n    }\n  }\n};\n\nvar setAttributes = function setAttributes(inputType, inputAttributes) {\n  var input = getInput(getContent(), inputType);\n\n  if (!input) {\n    return;\n  }\n\n  removeAttributes(input);\n\n  for (var attr in inputAttributes) {\n    // Do not set a placeholder for <input type=\"range\">\n    // it'll crash Edge, #1298\n    if (inputType === 'range' && attr === 'placeholder') {\n      continue;\n    }\n\n    input.setAttribute(attr, inputAttributes[attr]);\n  }\n};\n\nvar setClass = function setClass(inputContainer, inputClass, params) {\n  inputContainer.className = inputClass;\n\n  if (params.inputClass) {\n    addClass(inputContainer, params.inputClass);\n  }\n\n  if (params.customClass) {\n    addClass(inputContainer, params.customClass.input);\n  }\n};\n\nvar setInputPlaceholder = function setInputPlaceholder(input, params) {\n  if (!input.placeholder || params.inputPlaceholder) {\n    input.placeholder = params.inputPlaceholder;\n  }\n};\n\nvar renderInputType = {};\n\nrenderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (params) {\n  var input = getChildByClass(getContent(), swalClasses.input);\n\n  if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {\n    input.value = params.inputValue;\n  } else if (!isPromise(params.inputValue)) {\n    warn(\"Unexpected type of inputValue! Expected \\\"string\\\", \\\"number\\\" or \\\"Promise\\\", got \\\"\".concat(_typeof(params.inputValue), \"\\\"\"));\n  }\n\n  setInputPlaceholder(input, params);\n  input.type = params.input;\n  return input;\n};\n\nrenderInputType.file = function (params) {\n  var input = getChildByClass(getContent(), swalClasses.file);\n  setInputPlaceholder(input, params);\n  input.type = params.input;\n  return input;\n};\n\nrenderInputType.range = function (params) {\n  var range = getChildByClass(getContent(), swalClasses.range);\n  var rangeInput = range.querySelector('input');\n  var rangeOutput = range.querySelector('output');\n  rangeInput.value = params.inputValue;\n  rangeInput.type = params.input;\n  rangeOutput.value = params.inputValue;\n  return range;\n};\n\nrenderInputType.select = function (params) {\n  var select = getChildByClass(getContent(), swalClasses.select);\n  select.innerHTML = '';\n\n  if (params.inputPlaceholder) {\n    var placeholder = document.createElement('option');\n    placeholder.innerHTML = params.inputPlaceholder;\n    placeholder.value = '';\n    placeholder.disabled = true;\n    placeholder.selected = true;\n    select.appendChild(placeholder);\n  }\n\n  return select;\n};\n\nrenderInputType.radio = function () {\n  var radio = getChildByClass(getContent(), swalClasses.radio);\n  radio.innerHTML = '';\n  return radio;\n};\n\nrenderInputType.checkbox = function (params) {\n  var checkbox = getChildByClass(getContent(), swalClasses.checkbox);\n  var checkboxInput = getInput(getContent(), 'checkbox');\n  checkboxInput.type = 'checkbox';\n  checkboxInput.value = 1;\n  checkboxInput.id = swalClasses.checkbox;\n  checkboxInput.checked = Boolean(params.inputValue);\n  var label = checkbox.querySelector('span');\n  label.innerHTML = params.inputPlaceholder;\n  return checkbox;\n};\n\nrenderInputType.textarea = function (params) {\n  var textarea = getChildByClass(getContent(), swalClasses.textarea);\n  textarea.value = params.inputValue;\n  setInputPlaceholder(textarea, params);\n\n  if ('MutationObserver' in window) {\n    // #1699\n    var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n    var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);\n\n    var outputsize = function outputsize() {\n      var contentWidth = textarea.offsetWidth + popupPadding;\n\n      if (contentWidth > initialPopupWidth) {\n        getPopup().style.width = contentWidth + 'px';\n      } else {\n        getPopup().style.width = null;\n      }\n    };\n\n    new MutationObserver(outputsize).observe(textarea, {\n      attributes: true,\n      attributeFilter: ['style']\n    });\n  }\n\n  return textarea;\n};\n\nvar renderContent = function renderContent(instance, params) {\n  var content = getContent().querySelector('#' + swalClasses.content); // Content as HTML\n\n  if (params.html) {\n    parseHtmlToContainer(params.html, content);\n    show(content, 'block'); // Content as plain text\n  } else if (params.text) {\n    content.textContent = params.text;\n    show(content, 'block'); // No content\n  } else {\n    hide(content);\n  }\n\n  renderInput(instance, params); // Custom class\n\n  applyCustomClass(getContent(), params.customClass, 'content');\n};\n\nvar renderFooter = function renderFooter(instance, params) {\n  var footer = getFooter();\n  toggle(footer, params.footer);\n\n  if (params.footer) {\n    parseHtmlToContainer(params.footer, footer);\n  } // Custom class\n\n\n  applyCustomClass(footer, params.customClass, 'footer');\n};\n\nvar renderCloseButton = function renderCloseButton(instance, params) {\n  var closeButton = getCloseButton();\n  closeButton.innerHTML = params.closeButtonHtml; // Custom class\n\n  applyCustomClass(closeButton, params.customClass, 'closeButton');\n  toggle(closeButton, params.showCloseButton);\n  closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);\n};\n\nvar renderIcon = function renderIcon(instance, params) {\n  var innerParams = privateProps.innerParams.get(instance); // if the icon with the given type already rendered,\n  // apply the custom class without re-rendering the icon\n\n  if (innerParams && params.type === innerParams.type && getIcon()) {\n    applyCustomClass(getIcon(), params.customClass, 'icon');\n    return;\n  }\n\n  hideAllIcons();\n\n  if (!params.type) {\n    return;\n  }\n\n  adjustSuccessIconBackgoundColor();\n\n  if (Object.keys(iconTypes).indexOf(params.type) !== -1) {\n    var icon = elementBySelector(\".\".concat(swalClasses.icon, \".\").concat(iconTypes[params.type]));\n    show(icon); // Custom class\n\n    applyCustomClass(icon, params.customClass, 'icon'); // Animate icon\n\n    toggleClass(icon, \"swal2-animate-\".concat(params.type, \"-icon\"), params.animation);\n  } else {\n    error(\"Unknown type! Expected \\\"success\\\", \\\"error\\\", \\\"warning\\\", \\\"info\\\" or \\\"question\\\", got \\\"\".concat(params.type, \"\\\"\"));\n  }\n};\n\nvar hideAllIcons = function hideAllIcons() {\n  var icons = getIcons();\n\n  for (var i = 0; i < icons.length; i++) {\n    hide(icons[i]);\n  }\n}; // Adjust success icon background color to match the popup background color\n\n\nvar adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {\n  var popup = getPopup();\n  var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n  var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n  for (var i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor;\n  }\n};\n\nvar renderImage = function renderImage(instance, params) {\n  var image = getImage();\n\n  if (!params.imageUrl) {\n    return hide(image);\n  }\n\n  show(image); // Src, alt\n\n  image.setAttribute('src', params.imageUrl);\n  image.setAttribute('alt', params.imageAlt); // Width, height\n\n  applyNumericalStyle(image, 'width', params.imageWidth);\n  applyNumericalStyle(image, 'height', params.imageHeight); // Class\n\n  image.className = swalClasses.image;\n  applyCustomClass(image, params.customClass, 'image');\n\n  if (params.imageClass) {\n    addClass(image, params.imageClass);\n  }\n};\n\nvar createStepElement = function createStepElement(step) {\n  var stepEl = document.createElement('li');\n  addClass(stepEl, swalClasses['progress-step']);\n  stepEl.innerHTML = step;\n  return stepEl;\n};\n\nvar createLineElement = function createLineElement(params) {\n  var lineEl = document.createElement('li');\n  addClass(lineEl, swalClasses['progress-step-line']);\n\n  if (params.progressStepsDistance) {\n    lineEl.style.width = params.progressStepsDistance;\n  }\n\n  return lineEl;\n};\n\nvar renderProgressSteps = function renderProgressSteps(instance, params) {\n  var progressStepsContainer = getProgressSteps();\n\n  if (!params.progressSteps || params.progressSteps.length === 0) {\n    return hide(progressStepsContainer);\n  }\n\n  show(progressStepsContainer);\n  progressStepsContainer.innerHTML = '';\n  var currentProgressStep = parseInt(params.currentProgressStep === null ? Swal.getQueueStep() : params.currentProgressStep);\n\n  if (currentProgressStep >= params.progressSteps.length) {\n    warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\n  }\n\n  params.progressSteps.forEach(function (step, index) {\n    var stepEl = createStepElement(step);\n    progressStepsContainer.appendChild(stepEl);\n\n    if (index === currentProgressStep) {\n      addClass(stepEl, swalClasses['active-progress-step']);\n    }\n\n    if (index !== params.progressSteps.length - 1) {\n      var lineEl = createLineElement(step);\n      progressStepsContainer.appendChild(lineEl);\n    }\n  });\n};\n\nvar renderTitle = function renderTitle(instance, params) {\n  var title = getTitle();\n  toggle(title, params.title || params.titleText);\n\n  if (params.title) {\n    parseHtmlToContainer(params.title, title);\n  }\n\n  if (params.titleText) {\n    title.innerText = params.titleText;\n  } // Custom class\n\n\n  applyCustomClass(title, params.customClass, 'title');\n};\n\nvar renderHeader = function renderHeader(instance, params) {\n  var header = getHeader(); // Custom class\n\n  applyCustomClass(header, params.customClass, 'header'); // Progress steps\n\n  renderProgressSteps(instance, params); // Icon\n\n  renderIcon(instance, params); // Image\n\n  renderImage(instance, params); // Title\n\n  renderTitle(instance, params); // Close button\n\n  renderCloseButton(instance, params);\n};\n\nvar renderPopup = function renderPopup(instance, params) {\n  var popup = getPopup(); // Width\n\n  applyNumericalStyle(popup, 'width', params.width); // Padding\n\n  applyNumericalStyle(popup, 'padding', params.padding); // Background\n\n  if (params.background) {\n    popup.style.background = params.background;\n  } // Default Class\n\n\n  popup.className = swalClasses.popup;\n\n  if (params.toast) {\n    addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n    addClass(popup, swalClasses.toast);\n  } else {\n    addClass(popup, swalClasses.modal);\n  } // Custom class\n\n\n  applyCustomClass(popup, params.customClass, 'popup');\n\n  if (typeof params.customClass === 'string') {\n    addClass(popup, params.customClass);\n  } // CSS animation\n\n\n  toggleClass(popup, swalClasses.noanimation, !params.animation);\n};\n\nvar render = function render(instance, params) {\n  renderPopup(instance, params);\n  renderContainer(instance, params);\n  renderHeader(instance, params);\n  renderContent(instance, params);\n  renderActions(instance, params);\n  renderFooter(instance, params);\n\n  if (typeof params.onRender === 'function') {\n    params.onRender(getPopup());\n  }\n};\n\n/*\n * Global function to determine if SweetAlert2 popup is shown\n */\n\nvar isVisible$1 = function isVisible$$1() {\n  return isVisible(getPopup());\n};\n/*\n * Global function to click 'Confirm' button\n */\n\nvar clickConfirm = function clickConfirm() {\n  return getConfirmButton() && getConfirmButton().click();\n};\n/*\n * Global function to click 'Cancel' button\n */\n\nvar clickCancel = function clickCancel() {\n  return getCancelButton() && getCancelButton().click();\n};\n\nfunction fire() {\n  var Swal = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _construct(Swal, args);\n}\n\n/**\n * Returns an extended version of `Swal` containing `params` as defaults.\n * Useful for reusing Swal configuration.\n *\n * For example:\n *\n * Before:\n * const textPromptOptions = { input: 'text', showCancelButton: true }\n * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n *\n * After:\n * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n * const {value: firstName} = await TextPrompt('What is your first name?')\n * const {value: lastName} = await TextPrompt('What is your last name?')\n *\n * @param mixinParams\n */\nfunction mixin(mixinParams) {\n  var MixinSwal =\n  /*#__PURE__*/\n  function (_this) {\n    _inherits(MixinSwal, _this);\n\n    function MixinSwal() {\n      _classCallCheck(this, MixinSwal);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(MixinSwal).apply(this, arguments));\n    }\n\n    _createClass(MixinSwal, [{\n      key: \"_main\",\n      value: function _main(params) {\n        return _get(_getPrototypeOf(MixinSwal.prototype), \"_main\", this).call(this, _extends({}, mixinParams, params));\n      }\n    }]);\n\n    return MixinSwal;\n  }(this);\n\n  return MixinSwal;\n}\n\n// private global state for the queue feature\nvar currentSteps = [];\n/*\n * Global function for chaining sweetAlert popups\n */\n\nvar queue = function queue(steps) {\n  var Swal = this;\n  currentSteps = steps;\n\n  var resetAndResolve = function resetAndResolve(resolve, value) {\n    currentSteps = [];\n    document.body.removeAttribute('data-swal2-queue-step');\n    resolve(value);\n  };\n\n  var queueResult = [];\n  return new Promise(function (resolve) {\n    (function step(i, callback) {\n      if (i < currentSteps.length) {\n        document.body.setAttribute('data-swal2-queue-step', i);\n        Swal.fire(currentSteps[i]).then(function (result) {\n          if (typeof result.value !== 'undefined') {\n            queueResult.push(result.value);\n            step(i + 1, callback);\n          } else {\n            resetAndResolve(resolve, {\n              dismiss: result.dismiss\n            });\n          }\n        });\n      } else {\n        resetAndResolve(resolve, {\n          value: queueResult\n        });\n      }\n    })(0);\n  });\n};\n/*\n * Global function for getting the index of current popup in queue\n */\n\nvar getQueueStep = function getQueueStep() {\n  return document.body.getAttribute('data-swal2-queue-step');\n};\n/*\n * Global function for inserting a popup to the queue\n */\n\nvar insertQueueStep = function insertQueueStep(step, index) {\n  if (index && index < currentSteps.length) {\n    return currentSteps.splice(index, 0, step);\n  }\n\n  return currentSteps.push(step);\n};\n/*\n * Global function for deleting a popup from the queue\n */\n\nvar deleteQueueStep = function deleteQueueStep(index) {\n  if (typeof currentSteps[index] !== 'undefined') {\n    currentSteps.splice(index, 1);\n  }\n};\n\n/**\n * Show spinner instead of Confirm button and disable Cancel button\n */\n\nvar showLoading = function showLoading() {\n  var popup = getPopup();\n\n  if (!popup) {\n    Swal.fire('');\n  }\n\n  popup = getPopup();\n  var actions = getActions();\n  var confirmButton = getConfirmButton();\n  var cancelButton = getCancelButton();\n  show(actions);\n  show(confirmButton);\n  addClass([popup, actions], swalClasses.loading);\n  confirmButton.disabled = true;\n  cancelButton.disabled = true;\n  popup.setAttribute('data-loading', true);\n  popup.setAttribute('aria-busy', true);\n  popup.focus();\n};\n\nvar RESTORE_FOCUS_TIMEOUT = 100;\n\nvar globalState = {};\nvar focusPreviousActiveElement = function focusPreviousActiveElement() {\n  if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {\n    globalState.previousActiveElement.focus();\n    globalState.previousActiveElement = null;\n  } else if (document.body) {\n    document.body.focus();\n  }\n}; // Restore previous active (focused) element\n\n\nvar restoreActiveElement = function restoreActiveElement() {\n  return new Promise(function (resolve) {\n    var x = window.scrollX;\n    var y = window.scrollY;\n    globalState.restoreFocusTimeout = setTimeout(function () {\n      focusPreviousActiveElement();\n      resolve();\n    }, RESTORE_FOCUS_TIMEOUT); // issues/900\n\n    if (typeof x !== 'undefined' && typeof y !== 'undefined') {\n      // IE doesn't have scrollX/scrollY support\n      window.scrollTo(x, y);\n    }\n  });\n};\n\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n */\n\nvar getTimerLeft = function getTimerLeft() {\n  return globalState.timeout && globalState.timeout.getTimerLeft();\n};\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar stopTimer = function stopTimer() {\n  return globalState.timeout && globalState.timeout.stop();\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar resumeTimer = function resumeTimer() {\n  return globalState.timeout && globalState.timeout.start();\n};\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar toggleTimer = function toggleTimer() {\n  var timer = globalState.timeout;\n  return timer && (timer.running ? timer.stop() : timer.start());\n};\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n */\n\nvar increaseTimer = function increaseTimer(n) {\n  return globalState.timeout && globalState.timeout.increase(n);\n};\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n */\n\nvar isTimerRunning = function isTimerRunning() {\n  return globalState.timeout && globalState.timeout.isRunning();\n};\n\nvar defaultParams = {\n  title: '',\n  titleText: '',\n  text: '',\n  html: '',\n  footer: '',\n  type: null,\n  toast: false,\n  customClass: '',\n  customContainerClass: '',\n  target: 'body',\n  backdrop: true,\n  animation: true,\n  heightAuto: true,\n  allowOutsideClick: true,\n  allowEscapeKey: true,\n  allowEnterKey: true,\n  stopKeydownPropagation: true,\n  keydownListenerCapture: false,\n  showConfirmButton: true,\n  showCancelButton: false,\n  preConfirm: null,\n  confirmButtonText: 'OK',\n  confirmButtonAriaLabel: '',\n  confirmButtonColor: null,\n  confirmButtonClass: '',\n  cancelButtonText: 'Cancel',\n  cancelButtonAriaLabel: '',\n  cancelButtonColor: null,\n  cancelButtonClass: '',\n  buttonsStyling: true,\n  reverseButtons: false,\n  focusConfirm: true,\n  focusCancel: false,\n  showCloseButton: false,\n  closeButtonHtml: '&times;',\n  closeButtonAriaLabel: 'Close this dialog',\n  showLoaderOnConfirm: false,\n  imageUrl: null,\n  imageWidth: null,\n  imageHeight: null,\n  imageAlt: '',\n  imageClass: '',\n  timer: null,\n  width: null,\n  padding: null,\n  background: null,\n  input: null,\n  inputPlaceholder: '',\n  inputValue: '',\n  inputOptions: {},\n  inputAutoTrim: true,\n  inputClass: '',\n  inputAttributes: {},\n  inputValidator: null,\n  validationMessage: null,\n  grow: false,\n  position: 'center',\n  progressSteps: [],\n  currentProgressStep: null,\n  progressStepsDistance: null,\n  onBeforeOpen: null,\n  onOpen: null,\n  onRender: null,\n  onClose: null,\n  onAfterClose: null,\n  scrollbarPadding: true\n};\nvar updatableParams = ['title', 'titleText', 'text', 'html', 'type', 'customClass', 'showConfirmButton', 'showCancelButton', 'confirmButtonText', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonClass', 'cancelButtonText', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonClass', 'buttonsStyling', 'reverseButtons', 'imageUrl', 'imageWidth', 'imageHeigth', 'imageAlt', 'imageClass', 'progressSteps', 'currentProgressStep'];\nvar deprecatedParams = {\n  customContainerClass: 'customClass',\n  confirmButtonClass: 'customClass',\n  cancelButtonClass: 'customClass',\n  imageClass: 'customClass',\n  inputClass: 'customClass'\n};\nvar toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];\n/**\n * Is valid parameter\n * @param {String} paramName\n */\n\nvar isValidParameter = function isValidParameter(paramName) {\n  return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n};\n/**\n * Is valid parameter for Swal.update() method\n * @param {String} paramName\n */\n\nvar isUpdatableParameter = function isUpdatableParameter(paramName) {\n  return updatableParams.indexOf(paramName) !== -1;\n};\n/**\n * Is deprecated parameter\n * @param {String} paramName\n */\n\nvar isDeprecatedParameter = function isDeprecatedParameter(paramName) {\n  return deprecatedParams[paramName];\n};\n\nvar checkIfParamIsValid = function checkIfParamIsValid(param) {\n  if (!isValidParameter(param)) {\n    warn(\"Unknown parameter \\\"\".concat(param, \"\\\"\"));\n  }\n};\n\nvar checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {\n  if (toastIncompatibleParams.indexOf(param) !== -1) {\n    warn(\"The parameter \\\"\".concat(param, \"\\\" is incompatible with toasts\"));\n  }\n};\n\nvar checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {\n  if (isDeprecatedParameter(param)) {\n    warnAboutDepreation(param, isDeprecatedParameter(param));\n  }\n};\n/**\n * Show relevant warnings for given params\n *\n * @param params\n */\n\n\nvar showWarningsForParams = function showWarningsForParams(params) {\n  for (var param in params) {\n    checkIfParamIsValid(param);\n\n    if (params.toast) {\n      checkIfToastParamIsValid(param);\n    }\n\n    checkIfParamIsDeprecated();\n  }\n};\n\n\n\nvar staticMethods = Object.freeze({\n\tisValidParameter: isValidParameter,\n\tisUpdatableParameter: isUpdatableParameter,\n\tisDeprecatedParameter: isDeprecatedParameter,\n\targsToParams: argsToParams,\n\tisVisible: isVisible$1,\n\tclickConfirm: clickConfirm,\n\tclickCancel: clickCancel,\n\tgetContainer: getContainer,\n\tgetPopup: getPopup,\n\tgetTitle: getTitle,\n\tgetContent: getContent,\n\tgetImage: getImage,\n\tgetIcon: getIcon,\n\tgetIcons: getIcons,\n\tgetCloseButton: getCloseButton,\n\tgetActions: getActions,\n\tgetConfirmButton: getConfirmButton,\n\tgetCancelButton: getCancelButton,\n\tgetHeader: getHeader,\n\tgetFooter: getFooter,\n\tgetFocusableElements: getFocusableElements,\n\tgetValidationMessage: getValidationMessage,\n\tisLoading: isLoading,\n\tfire: fire,\n\tmixin: mixin,\n\tqueue: queue,\n\tgetQueueStep: getQueueStep,\n\tinsertQueueStep: insertQueueStep,\n\tdeleteQueueStep: deleteQueueStep,\n\tshowLoading: showLoading,\n\tenableLoading: showLoading,\n\tgetTimerLeft: getTimerLeft,\n\tstopTimer: stopTimer,\n\tresumeTimer: resumeTimer,\n\ttoggleTimer: toggleTimer,\n\tincreaseTimer: increaseTimer,\n\tisTimerRunning: isTimerRunning\n});\n\n/**\n * Enables buttons and hide loader.\n */\n\nfunction hideLoading() {\n  var innerParams = privateProps.innerParams.get(this);\n  var domCache = privateProps.domCache.get(this);\n\n  if (!innerParams.showConfirmButton) {\n    hide(domCache.confirmButton);\n\n    if (!innerParams.showCancelButton) {\n      hide(domCache.actions);\n    }\n  }\n\n  removeClass([domCache.popup, domCache.actions], swalClasses.loading);\n  domCache.popup.removeAttribute('aria-busy');\n  domCache.popup.removeAttribute('data-loading');\n  domCache.confirmButton.disabled = false;\n  domCache.cancelButton.disabled = false;\n}\n\nfunction getInput$1(instance) {\n  var innerParams = privateProps.innerParams.get(instance || this);\n  var domCache = privateProps.domCache.get(instance || this);\n\n  if (!domCache) {\n    return null;\n  }\n\n  return getInput(domCache.content, innerParams.input);\n}\n\nvar fixScrollbar = function fixScrollbar() {\n  // for queues, do not do this more than once\n  if (states.previousBodyPadding !== null) {\n    return;\n  } // if the body has overflow\n\n\n  if (document.body.scrollHeight > window.innerHeight) {\n    // add padding so the content doesn't shift after removal of scrollbar\n    states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\n    document.body.style.paddingRight = states.previousBodyPadding + measureScrollbar() + 'px';\n  }\n};\nvar undoScrollbar = function undoScrollbar() {\n  if (states.previousBodyPadding !== null) {\n    document.body.style.paddingRight = states.previousBodyPadding + 'px';\n    states.previousBodyPadding = null;\n  }\n};\n\n/* istanbul ignore next */\n\nvar iOSfix = function iOSfix() {\n  var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n  if (iOS && !hasClass(document.body, swalClasses.iosfix)) {\n    var offset = document.body.scrollTop;\n    document.body.style.top = offset * -1 + 'px';\n    addClass(document.body, swalClasses.iosfix);\n    lockBodyScroll();\n  }\n};\n\nvar lockBodyScroll = function lockBodyScroll() {\n  // #1246\n  var container = getContainer();\n  var preventTouchMove;\n\n  container.ontouchstart = function (e) {\n    preventTouchMove = e.target === container || !isScrollable(container) && e.target.tagName !== 'INPUT' // #1603\n    ;\n  };\n\n  container.ontouchmove = function (e) {\n    if (preventTouchMove) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n};\n/* istanbul ignore next */\n\n\nvar undoIOSfix = function undoIOSfix() {\n  if (hasClass(document.body, swalClasses.iosfix)) {\n    var offset = parseInt(document.body.style.top, 10);\n    removeClass(document.body, swalClasses.iosfix);\n    document.body.style.top = '';\n    document.body.scrollTop = offset * -1;\n  }\n};\n\nvar isIE11 = function isIE11() {\n  return !!window.MSInputMethodContext && !!document.documentMode;\n}; // Fix IE11 centering sweetalert2/issues/933\n\n/* istanbul ignore next */\n\n\nvar fixVerticalPositionIE = function fixVerticalPositionIE() {\n  var container = getContainer();\n  var popup = getPopup();\n  container.style.removeProperty('align-items');\n\n  if (popup.offsetTop < 0) {\n    container.style.alignItems = 'flex-start';\n  }\n};\n/* istanbul ignore next */\n\n\nvar IEfix = function IEfix() {\n  if (typeof window !== 'undefined' && isIE11()) {\n    fixVerticalPositionIE();\n    window.addEventListener('resize', fixVerticalPositionIE);\n  }\n};\n/* istanbul ignore next */\n\nvar undoIEfix = function undoIEfix() {\n  if (typeof window !== 'undefined' && isIE11()) {\n    window.removeEventListener('resize', fixVerticalPositionIE);\n  }\n};\n\n// Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n// elements not within the active modal dialog will not be surfaced if a user opens a screen\n// reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\n\nvar setAriaHidden = function setAriaHidden() {\n  var bodyChildren = toArray(document.body.children);\n  bodyChildren.forEach(function (el) {\n    if (el === getContainer() || contains(el, getContainer())) {\n      return;\n    }\n\n    if (el.hasAttribute('aria-hidden')) {\n      el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));\n    }\n\n    el.setAttribute('aria-hidden', 'true');\n  });\n};\nvar unsetAriaHidden = function unsetAriaHidden() {\n  var bodyChildren = toArray(document.body.children);\n  bodyChildren.forEach(function (el) {\n    if (el.hasAttribute('data-previous-aria-hidden')) {\n      el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));\n      el.removeAttribute('data-previous-aria-hidden');\n    } else {\n      el.removeAttribute('aria-hidden');\n    }\n  });\n};\n\n/**\n * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n * This is the approach that Babel will probably take to implement private methods/fields\n *   https://github.com/tc39/proposal-private-methods\n *   https://github.com/babel/babel/pull/7555\n * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n *   then we can use that language feature.\n */\nvar privateMethods = {\n  swalPromiseResolve: new WeakMap()\n};\n\n/*\n * Instance method to close sweetAlert\n */\n\nfunction removePopupAndResetState(instance, container, isToast, onAfterClose) {\n  if (isToast) {\n    triggerOnAfterCloseAndDispose(instance, onAfterClose);\n  } else {\n    restoreActiveElement().then(function () {\n      return triggerOnAfterCloseAndDispose(instance, onAfterClose);\n    });\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = false;\n  }\n\n  if (container.parentNode) {\n    container.parentNode.removeChild(container);\n  }\n\n  if (isModal()) {\n    undoScrollbar();\n    undoIOSfix();\n    undoIEfix();\n    unsetAriaHidden();\n  }\n\n  removeBodyClasses();\n}\n\nfunction removeBodyClasses() {\n  removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);\n}\n\nfunction disposeSwal(instance) {\n  // Unset this.params so GC will dispose it (#1569)\n  delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)\n\n  unsetWeakMaps(privateProps);\n  unsetWeakMaps(privateMethods);\n}\n\nfunction close(resolveValue) {\n  var popup = getPopup();\n\n  if (!popup || hasClass(popup, swalClasses.hide)) {\n    return;\n  }\n\n  var innerParams = privateProps.innerParams.get(this);\n\n  if (!innerParams) {\n    return;\n  }\n\n  var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n  removeClass(popup, swalClasses.show);\n  addClass(popup, swalClasses.hide);\n  handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise\n\n  swalPromiseResolve(resolveValue || {});\n}\n\nvar handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {\n  var container = getContainer(); // If animation is supported, animate\n\n  var animationIsSupported = animationEndEvent && hasCssAnimation(popup);\n  var onClose = innerParams.onClose,\n      onAfterClose = innerParams.onAfterClose;\n\n  if (onClose !== null && typeof onClose === 'function') {\n    onClose(popup);\n  }\n\n  if (animationIsSupported) {\n    animatePopup(instance, popup, container, onAfterClose);\n  } else {\n    // Otherwise, remove immediately\n    removePopupAndResetState(instance, container, isToast(), onAfterClose);\n  }\n};\n\nvar animatePopup = function animatePopup(instance, popup, container, onAfterClose) {\n  globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), onAfterClose);\n  popup.addEventListener(animationEndEvent, function (e) {\n    if (e.target === popup) {\n      globalState.swalCloseEventFinishedCallback();\n      delete globalState.swalCloseEventFinishedCallback;\n    }\n  });\n};\n\nvar unsetWeakMaps = function unsetWeakMaps(obj) {\n  for (var i in obj) {\n    obj[i] = new WeakMap();\n  }\n};\n\nvar triggerOnAfterCloseAndDispose = function triggerOnAfterCloseAndDispose(instance, onAfterClose) {\n  setTimeout(function () {\n    if (onAfterClose !== null && typeof onAfterClose === 'function') {\n      onAfterClose();\n    }\n\n    if (!getPopup()) {\n      disposeSwal(instance);\n    }\n  });\n};\n\nfunction setButtonsDisabled(instance, buttons, disabled) {\n  var domCache = privateProps.domCache.get(instance);\n  buttons.forEach(function (button) {\n    domCache[button].disabled = disabled;\n  });\n}\n\nfunction setInputDisabled(input, disabled) {\n  if (!input) {\n    return false;\n  }\n\n  if (input.type === 'radio') {\n    var radiosContainer = input.parentNode.parentNode;\n    var radios = radiosContainer.querySelectorAll('input');\n\n    for (var i = 0; i < radios.length; i++) {\n      radios[i].disabled = disabled;\n    }\n  } else {\n    input.disabled = disabled;\n  }\n}\n\nfunction enableButtons() {\n  setButtonsDisabled(this, ['confirmButton', 'cancelButton'], false);\n}\nfunction disableButtons() {\n  setButtonsDisabled(this, ['confirmButton', 'cancelButton'], true);\n} // @deprecated\n\nfunction enableConfirmButton() {\n  warnAboutDepreation('Swal.enableConfirmButton()', \"Swal.getConfirmButton().removeAttribute('disabled')\");\n  setButtonsDisabled(this, ['confirmButton'], false);\n} // @deprecated\n\nfunction disableConfirmButton() {\n  warnAboutDepreation('Swal.disableConfirmButton()', \"Swal.getConfirmButton().setAttribute('disabled', '')\");\n  setButtonsDisabled(this, ['confirmButton'], true);\n}\nfunction enableInput() {\n  return setInputDisabled(this.getInput(), false);\n}\nfunction disableInput() {\n  return setInputDisabled(this.getInput(), true);\n}\n\nfunction showValidationMessage(error) {\n  var domCache = privateProps.domCache.get(this);\n  domCache.validationMessage.innerHTML = error;\n  var popupComputedStyle = window.getComputedStyle(domCache.popup);\n  domCache.validationMessage.style.marginLeft = \"-\".concat(popupComputedStyle.getPropertyValue('padding-left'));\n  domCache.validationMessage.style.marginRight = \"-\".concat(popupComputedStyle.getPropertyValue('padding-right'));\n  show(domCache.validationMessage);\n  var input = this.getInput();\n\n  if (input) {\n    input.setAttribute('aria-invalid', true);\n    input.setAttribute('aria-describedBy', swalClasses['validation-message']);\n    focusInput(input);\n    addClass(input, swalClasses.inputerror);\n  }\n} // Hide block with validation message\n\nfunction resetValidationMessage$1() {\n  var domCache = privateProps.domCache.get(this);\n\n  if (domCache.validationMessage) {\n    hide(domCache.validationMessage);\n  }\n\n  var input = this.getInput();\n\n  if (input) {\n    input.removeAttribute('aria-invalid');\n    input.removeAttribute('aria-describedBy');\n    removeClass(input, swalClasses.inputerror);\n  }\n}\n\nfunction getProgressSteps$1() {\n  warnAboutDepreation('Swal.getProgressSteps()', \"const swalInstance = Swal.fire({progressSteps: ['1', '2', '3']}); const progressSteps = swalInstance.params.progressSteps\");\n  var innerParams = privateProps.innerParams.get(this);\n  return innerParams.progressSteps;\n}\nfunction setProgressSteps(progressSteps) {\n  warnAboutDepreation('Swal.setProgressSteps()', 'Swal.update()');\n  var innerParams = privateProps.innerParams.get(this);\n\n  var updatedParams = _extends({}, innerParams, {\n    progressSteps: progressSteps\n  });\n\n  renderProgressSteps(this, updatedParams);\n  privateProps.innerParams.set(this, updatedParams);\n}\nfunction showProgressSteps() {\n  var domCache = privateProps.domCache.get(this);\n  show(domCache.progressSteps);\n}\nfunction hideProgressSteps() {\n  var domCache = privateProps.domCache.get(this);\n  hide(domCache.progressSteps);\n}\n\nvar Timer =\n/*#__PURE__*/\nfunction () {\n  function Timer(callback, delay) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.remaining = delay;\n    this.running = false;\n    this.start();\n  }\n\n  _createClass(Timer, [{\n    key: \"start\",\n    value: function start() {\n      if (!this.running) {\n        this.running = true;\n        this.started = new Date();\n        this.id = setTimeout(this.callback, this.remaining);\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.running) {\n        this.running = false;\n        clearTimeout(this.id);\n        this.remaining -= new Date() - this.started;\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"increase\",\n    value: function increase(n) {\n      var running = this.running;\n\n      if (running) {\n        this.stop();\n      }\n\n      this.remaining += n;\n\n      if (running) {\n        this.start();\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"getTimerLeft\",\n    value: function getTimerLeft() {\n      if (this.running) {\n        this.stop();\n        this.start();\n      }\n\n      return this.remaining;\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return this.running;\n    }\n  }]);\n\n  return Timer;\n}();\n\nvar defaultInputValidators = {\n  email: function email(string, validationMessage) {\n    return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\n  },\n  url: function url(string, validationMessage) {\n    // taken from https://stackoverflow.com/a/3809435 with a small change from #1306\n    return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\n  }\n};\n\nfunction setDefaultInputValidators(params) {\n  // Use default `inputValidator` for supported input types if not provided\n  if (!params.inputValidator) {\n    Object.keys(defaultInputValidators).forEach(function (key) {\n      if (params.input === key) {\n        params.inputValidator = defaultInputValidators[key];\n      }\n    });\n  }\n}\n\nfunction validateCustomTargetElement(params) {\n  // Determine if the custom target element is valid\n  if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n    warn('Target parameter is not valid, defaulting to \"body\"');\n    params.target = 'body';\n  }\n}\n/**\n * Set type, text and actions on popup\n *\n * @param params\n * @returns {boolean}\n */\n\n\nfunction setParameters(params) {\n  setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm\n\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\n    warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n  } // params.animation will be actually used in renderPopup.js\n  // but in case when params.animation is a function, we need to call that function\n  // before popup (re)initialization, so it'll be possible to check Swal.isVisible()\n  // inside the params.animation function\n\n\n  params.animation = callIfFunction(params.animation);\n  validateCustomTargetElement(params); // Replace newlines with <br> in title\n\n  if (typeof params.title === 'string') {\n    params.title = params.title.split('\\n').join('<br />');\n  }\n\n  init(params);\n}\n\nfunction swalOpenAnimationFinished(popup, container) {\n  popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);\n  container.style.overflowY = 'auto';\n}\n/**\n * Open popup, add necessary classes and styles, fix scrollbar\n *\n * @param {Array} params\n */\n\n\nvar openPopup = function openPopup(params) {\n  var container = getContainer();\n  var popup = getPopup();\n\n  if (typeof params.onBeforeOpen === 'function') {\n    params.onBeforeOpen(popup);\n  }\n\n  addClasses(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'\n\n  setScrollingVisibility(container, popup);\n\n  if (isModal()) {\n    fixScrollContainer(container, params.scrollbarPadding);\n  }\n\n  if (!isToast() && !globalState.previousActiveElement) {\n    globalState.previousActiveElement = document.activeElement;\n  }\n\n  if (typeof params.onOpen === 'function') {\n    setTimeout(function () {\n      return params.onOpen(popup);\n    });\n  }\n};\n\nvar setScrollingVisibility = function setScrollingVisibility(container, popup) {\n  if (animationEndEvent && hasCssAnimation(popup)) {\n    container.style.overflowY = 'hidden';\n    popup.addEventListener(animationEndEvent, swalOpenAnimationFinished.bind(null, popup, container));\n  } else {\n    container.style.overflowY = 'auto';\n  }\n};\n\nvar fixScrollContainer = function fixScrollContainer(container, scrollbarPadding) {\n  iOSfix();\n  IEfix();\n  setAriaHidden();\n\n  if (scrollbarPadding) {\n    fixScrollbar();\n  } // sweetalert2/issues/1247\n\n\n  setTimeout(function () {\n    container.scrollTop = 0;\n  });\n};\n\nvar addClasses = function addClasses(container, popup, params) {\n  if (params.animation) {\n    addClass(popup, swalClasses.show);\n    addClass(container, swalClasses.fade);\n  }\n\n  show(popup);\n  addClass([document.documentElement, document.body, container], swalClasses.shown);\n\n  if (params.heightAuto && params.backdrop && !params.toast) {\n    addClass([document.documentElement, document.body], swalClasses['height-auto']);\n  }\n};\n\nvar handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {\n  if (params.input === 'select' || params.input === 'radio') {\n    handleInputOptions(instance, params);\n  } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && isPromise(params.inputValue)) {\n    handleInputValue(instance, params);\n  }\n};\n\nvar handleInputOptions = function handleInputOptions(instance, params) {\n  var content = getContent();\n\n  var processInputOptions = function processInputOptions(inputOptions) {\n    return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);\n  };\n\n  if (isPromise(params.inputOptions)) {\n    showLoading();\n    params.inputOptions.then(function (inputOptions) {\n      instance.hideLoading();\n      processInputOptions(inputOptions);\n    });\n  } else if (_typeof(params.inputOptions) === 'object') {\n    processInputOptions(params.inputOptions);\n  } else {\n    error(\"Unexpected type of inputOptions! Expected object, Map or Promise, got \".concat(_typeof(params.inputOptions)));\n  }\n};\n\nvar handleInputValue = function handleInputValue(instance, params) {\n  var input = instance.getInput();\n  hide(input);\n  params.inputValue.then(function (inputValue) {\n    input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : inputValue + '';\n    show(input);\n    input.focus();\n    instance.hideLoading();\n  })[\"catch\"](function (err) {\n    error('Error in inputValue promise: ' + err);\n    input.value = '';\n    show(input);\n    input.focus();\n    instance.hideLoading();\n  });\n};\n\nvar populateInputOptions = {\n  select: function select(content, inputOptions, params) {\n    var select = getChildByClass(content, swalClasses.select);\n    inputOptions.forEach(function (inputOption) {\n      var optionValue = inputOption[0];\n      var optionLabel = inputOption[1];\n      var option = document.createElement('option');\n      option.value = optionValue;\n      option.innerHTML = optionLabel;\n\n      if (params.inputValue.toString() === optionValue.toString()) {\n        option.selected = true;\n      }\n\n      select.appendChild(option);\n    });\n    select.focus();\n  },\n  radio: function radio(content, inputOptions, params) {\n    var radio = getChildByClass(content, swalClasses.radio);\n    inputOptions.forEach(function (inputOption) {\n      var radioValue = inputOption[0];\n      var radioLabel = inputOption[1];\n      var radioInput = document.createElement('input');\n      var radioLabelElement = document.createElement('label');\n      radioInput.type = 'radio';\n      radioInput.name = swalClasses.radio;\n      radioInput.value = radioValue;\n\n      if (params.inputValue.toString() === radioValue.toString()) {\n        radioInput.checked = true;\n      }\n\n      var label = document.createElement('span');\n      label.innerHTML = radioLabel;\n      label.className = swalClasses.label;\n      radioLabelElement.appendChild(radioInput);\n      radioLabelElement.appendChild(label);\n      radio.appendChild(radioLabelElement);\n    });\n    var radios = radio.querySelectorAll('input');\n\n    if (radios.length) {\n      radios[0].focus();\n    }\n  }\n  /**\n   * Converts `inputOptions` into an array of `[value, label]`s\n   * @param inputOptions\n   */\n\n};\n\nvar formatInputOptions = function formatInputOptions(inputOptions) {\n  var result = [];\n\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach(function (value, key) {\n      result.push([key, value]);\n    });\n  } else {\n    Object.keys(inputOptions).forEach(function (key) {\n      result.push([key, inputOptions[key]]);\n    });\n  }\n\n  return result;\n};\n\nvar handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {\n  instance.disableButtons();\n\n  if (innerParams.input) {\n    handleConfirmWithInput(instance, innerParams);\n  } else {\n    confirm(instance, innerParams, true);\n  }\n};\nvar handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {\n  instance.disableButtons();\n  dismissWith(DismissReason.cancel);\n};\n\nvar handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {\n  var inputValue = getInputValue(instance, innerParams);\n\n  if (innerParams.inputValidator) {\n    instance.disableInput();\n    var validationPromise = Promise.resolve().then(function () {\n      return innerParams.inputValidator(inputValue, innerParams.validationMessage);\n    });\n    validationPromise.then(function (validationMessage) {\n      instance.enableButtons();\n      instance.enableInput();\n\n      if (validationMessage) {\n        instance.showValidationMessage(validationMessage);\n      } else {\n        confirm(instance, innerParams, inputValue);\n      }\n    });\n  } else if (!instance.getInput().checkValidity()) {\n    instance.enableButtons();\n    instance.showValidationMessage(innerParams.validationMessage);\n  } else {\n    confirm(instance, innerParams, inputValue);\n  }\n};\n\nvar succeedWith = function succeedWith(instance, value) {\n  instance.closePopup({\n    value: value\n  });\n};\n\nvar confirm = function confirm(instance, innerParams, value) {\n  if (innerParams.showLoaderOnConfirm) {\n    showLoading(); // TODO: make showLoading an *instance* method\n  }\n\n  if (innerParams.preConfirm) {\n    instance.resetValidationMessage();\n    var preConfirmPromise = Promise.resolve().then(function () {\n      return innerParams.preConfirm(value, innerParams.validationMessage);\n    });\n    preConfirmPromise.then(function (preConfirmValue) {\n      if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n        instance.hideLoading();\n      } else {\n        succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n      }\n    });\n  } else {\n    succeedWith(instance, value);\n  }\n};\n\nvar getInputValue = function getInputValue(instance, innerParams) {\n  var input = instance.getInput();\n\n  if (!input) {\n    return null;\n  }\n\n  switch (innerParams.input) {\n    case 'checkbox':\n      return getCheckboxValue(input);\n\n    case 'radio':\n      return getRadioValue(input);\n\n    case 'file':\n      return getFileValue(input);\n\n    default:\n      return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n  }\n};\n\nvar getCheckboxValue = function getCheckboxValue(input) {\n  return input.checked ? 1 : 0;\n};\n\nvar getRadioValue = function getRadioValue(input) {\n  return input.checked ? input.value : null;\n};\n\nvar getFileValue = function getFileValue(input) {\n  return input.files.length ? input.files[0] : null;\n};\n\nvar addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {\n  if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n    globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = false;\n  }\n\n  if (!innerParams.toast) {\n    globalState.keydownHandler = function (e) {\n      return keydownHandler(instance, e, innerParams, dismissWith);\n    };\n\n    globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n    globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n    globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n      capture: globalState.keydownListenerCapture\n    });\n    globalState.keydownHandlerAdded = true;\n  }\n}; // Focus handling\n\nvar setFocus = function setFocus(innerParams, index, increment) {\n  var focusableElements = getFocusableElements(innerParams.focusCancel); // search for visible elements and select the next possible match\n\n  for (var i = 0; i < focusableElements.length; i++) {\n    index = index + increment; // rollover to first item\n\n    if (index === focusableElements.length) {\n      index = 0; // go to last item\n    } else if (index === -1) {\n      index = focusableElements.length - 1;\n    }\n\n    return focusableElements[index].focus();\n  } // no visible focusable elements, focus the popup\n\n\n  getPopup().focus();\n};\nvar arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11\n];\nvar escKeys = ['Escape', 'Esc' // IE11\n];\n\nvar keydownHandler = function keydownHandler(instance, e, innerParams, dismissWith) {\n  if (innerParams.stopKeydownPropagation) {\n    e.stopPropagation();\n  } // ENTER\n\n\n  if (e.key === 'Enter') {\n    handleEnter(instance, e, innerParams); // TAB\n  } else if (e.key === 'Tab') {\n    handleTab(e, innerParams); // ARROWS - switch focus between buttons\n  } else if (arrowKeys.indexOf(e.key) !== -1) {\n    handleArrows(); // ESC\n  } else if (escKeys.indexOf(e.key) !== -1) {\n    handleEsc(e, innerParams, dismissWith);\n  }\n};\n\nvar handleEnter = function handleEnter(instance, e, innerParams) {\n  // #720 #721\n  if (e.isComposing) {\n    return;\n  }\n\n  if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n    if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {\n      return; // do not submit\n    }\n\n    clickConfirm();\n    e.preventDefault();\n  }\n};\n\nvar handleTab = function handleTab(e, innerParams) {\n  var targetElement = e.target;\n  var focusableElements = getFocusableElements(innerParams.focusCancel);\n  var btnIndex = -1;\n\n  for (var i = 0; i < focusableElements.length; i++) {\n    if (targetElement === focusableElements[i]) {\n      btnIndex = i;\n      break;\n    }\n  }\n\n  if (!e.shiftKey) {\n    // Cycle to the next button\n    setFocus(innerParams, btnIndex, 1);\n  } else {\n    // Cycle to the prev button\n    setFocus(innerParams, btnIndex, -1);\n  }\n\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nvar handleArrows = function handleArrows() {\n  var confirmButton = getConfirmButton();\n  var cancelButton = getCancelButton(); // focus Cancel button if Confirm button is currently focused\n\n  if (document.activeElement === confirmButton && isVisible(cancelButton)) {\n    cancelButton.focus(); // and vice versa\n  } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {\n    confirmButton.focus();\n  }\n};\n\nvar handleEsc = function handleEsc(e, innerParams, dismissWith) {\n  if (callIfFunction(innerParams.allowEscapeKey)) {\n    e.preventDefault();\n    dismissWith(DismissReason.esc);\n  }\n};\n\nvar handlePopupClick = function handlePopupClick(domCache, innerParams, dismissWith) {\n  if (innerParams.toast) {\n    handleToastClick(domCache, innerParams, dismissWith);\n  } else {\n    // Ignore click events that had mousedown on the popup but mouseup on the container\n    // This can happen when the user drags a slider\n    handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup\n\n    handleContainerMousedown(domCache);\n    handleModalClick(domCache, innerParams, dismissWith);\n  }\n};\n\nvar handleToastClick = function handleToastClick(domCache, innerParams, dismissWith) {\n  // Closing toast by internal click\n  domCache.popup.onclick = function () {\n    if (innerParams.showConfirmButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {\n      return;\n    }\n\n    dismissWith(DismissReason.close);\n  };\n};\n\nvar ignoreOutsideClick = false;\n\nvar handleModalMousedown = function handleModalMousedown(domCache) {\n  domCache.popup.onmousedown = function () {\n    domCache.container.onmouseup = function (e) {\n      domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't\n      // have any other direct children aside of the popup\n\n      if (e.target === domCache.container) {\n        ignoreOutsideClick = true;\n      }\n    };\n  };\n};\n\nvar handleContainerMousedown = function handleContainerMousedown(domCache) {\n  domCache.container.onmousedown = function () {\n    domCache.popup.onmouseup = function (e) {\n      domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup\n\n      if (e.target === domCache.popup || domCache.popup.contains(e.target)) {\n        ignoreOutsideClick = true;\n      }\n    };\n  };\n};\n\nvar handleModalClick = function handleModalClick(domCache, innerParams, dismissWith) {\n  domCache.container.onclick = function (e) {\n    if (ignoreOutsideClick) {\n      ignoreOutsideClick = false;\n      return;\n    }\n\n    if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n      dismissWith(DismissReason.backdrop);\n    }\n  };\n};\n\nfunction _main(userParams) {\n  showWarningsForParams(userParams); // Check if there is another Swal closing\n\n  if (getPopup() && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  } // Check if there is a swal disposal defer timer\n\n\n  if (globalState.deferDisposalTimer) {\n    clearTimeout(globalState.deferDisposalTimer);\n    delete globalState.deferDisposalTimer;\n  }\n\n  var innerParams = _extends({}, defaultParams, userParams);\n\n  setParameters(innerParams);\n  Object.freeze(innerParams); // clear the previous timer\n\n  if (globalState.timeout) {\n    globalState.timeout.stop();\n    delete globalState.timeout;\n  } // clear the restore focus timeout\n\n\n  clearTimeout(globalState.restoreFocusTimeout);\n  var domCache = populateDomCache(this);\n  render(this, innerParams);\n  privateProps.innerParams.set(this, innerParams);\n  return swalPromise(this, domCache, innerParams);\n}\n\nvar swalPromise = function swalPromise(instance, domCache, innerParams) {\n  return new Promise(function (resolve) {\n    // functions to handle all closings/dismissals\n    var dismissWith = function dismissWith(dismiss) {\n      instance.closePopup({\n        dismiss: dismiss\n      });\n    };\n\n    privateMethods.swalPromiseResolve.set(instance, resolve);\n    setupTimer(globalState, innerParams, dismissWith);\n\n    domCache.confirmButton.onclick = function () {\n      return handleConfirmButtonClick(instance, innerParams);\n    };\n\n    domCache.cancelButton.onclick = function () {\n      return handleCancelButtonClick(instance, dismissWith);\n    };\n\n    domCache.closeButton.onclick = function () {\n      return dismissWith(DismissReason.close);\n    };\n\n    handlePopupClick(domCache, innerParams, dismissWith);\n    addKeydownHandler(instance, globalState, innerParams, dismissWith);\n\n    if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n      addClass(document.body, swalClasses['toast-column']);\n    } else {\n      removeClass(document.body, swalClasses['toast-column']);\n    }\n\n    handleInputOptionsAndValue(instance, innerParams);\n    openPopup(innerParams);\n    initFocus(domCache, innerParams); // Scroll container to top on open (#1247)\n\n    domCache.container.scrollTop = 0;\n  });\n};\n\nvar populateDomCache = function populateDomCache(instance) {\n  var domCache = {\n    popup: getPopup(),\n    container: getContainer(),\n    content: getContent(),\n    actions: getActions(),\n    confirmButton: getConfirmButton(),\n    cancelButton: getCancelButton(),\n    closeButton: getCloseButton(),\n    validationMessage: getValidationMessage(),\n    progressSteps: getProgressSteps()\n  };\n  privateProps.domCache.set(instance, domCache);\n  return domCache;\n};\n\nvar setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {\n  if (innerParams.timer) {\n    globalState$$1.timeout = new Timer(function () {\n      dismissWith('timer');\n      delete globalState$$1.timeout;\n    }, innerParams.timer);\n  }\n};\n\nvar initFocus = function initFocus(domCache, innerParams) {\n  if (innerParams.toast) {\n    return;\n  }\n\n  if (!callIfFunction(innerParams.allowEnterKey)) {\n    return blurActiveElement();\n  }\n\n  if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {\n    return domCache.cancelButton.focus();\n  }\n\n  if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {\n    return domCache.confirmButton.focus();\n  }\n\n  setFocus(innerParams, -1, 1);\n};\n\nvar blurActiveElement = function blurActiveElement() {\n  if (document.activeElement && typeof document.activeElement.blur === 'function') {\n    document.activeElement.blur();\n  }\n};\n\n/**\n * Updates popup parameters.\n */\n\nfunction update(params) {\n  var validUpdatableParams = {}; // assign valid params from `params` to `defaults`\n\n  Object.keys(params).forEach(function (param) {\n    if (Swal.isUpdatableParameter(param)) {\n      validUpdatableParams[param] = params[param];\n    } else {\n      warn(\"Invalid parameter to update: \\\"\".concat(param, \"\\\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\"));\n    }\n  });\n  var innerParams = privateProps.innerParams.get(this);\n\n  var updatedParams = _extends({}, innerParams, validUpdatableParams);\n\n  render(this, updatedParams);\n  privateProps.innerParams.set(this, updatedParams);\n  Object.defineProperties(this, {\n    params: {\n      value: _extends({}, this.params, params),\n      writable: false,\n      enumerable: true\n    }\n  });\n}\n\n\n\nvar instanceMethods = Object.freeze({\n\thideLoading: hideLoading,\n\tdisableLoading: hideLoading,\n\tgetInput: getInput$1,\n\tclose: close,\n\tclosePopup: close,\n\tcloseModal: close,\n\tcloseToast: close,\n\tenableButtons: enableButtons,\n\tdisableButtons: disableButtons,\n\tenableConfirmButton: enableConfirmButton,\n\tdisableConfirmButton: disableConfirmButton,\n\tenableInput: enableInput,\n\tdisableInput: disableInput,\n\tshowValidationMessage: showValidationMessage,\n\tresetValidationMessage: resetValidationMessage$1,\n\tgetProgressSteps: getProgressSteps$1,\n\tsetProgressSteps: setProgressSteps,\n\tshowProgressSteps: showProgressSteps,\n\thideProgressSteps: hideProgressSteps,\n\t_main: _main,\n\tupdate: update\n});\n\nvar currentInstance; // SweetAlert constructor\n\nfunction SweetAlert() {\n  // Prevent run in Node env\n\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    return;\n  } // Check for the existence of Promise\n\n  /* istanbul ignore if */\n\n\n  if (typeof Promise === 'undefined') {\n    error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');\n  }\n\n  currentInstance = this;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var outerParams = Object.freeze(this.constructor.argsToParams(args));\n  Object.defineProperties(this, {\n    params: {\n      value: outerParams,\n      writable: false,\n      enumerable: true,\n      configurable: true\n    }\n  });\n\n  var promise = this._main(this.params);\n\n  privateProps.promise.set(this, promise);\n} // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n\n\nSweetAlert.prototype.then = function (onFulfilled) {\n  var promise = privateProps.promise.get(this);\n  return promise.then(onFulfilled);\n};\n\nSweetAlert.prototype[\"finally\"] = function (onFinally) {\n  var promise = privateProps.promise.get(this);\n  return promise[\"finally\"](onFinally);\n}; // Assign instance methods from src/instanceMethods/*.js to prototype\n\n\n_extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor\n\n\n_extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility\n\n\nObject.keys(instanceMethods).forEach(function (key) {\n  SweetAlert[key] = function () {\n    if (currentInstance) {\n      var _currentInstance;\n\n      return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);\n    }\n  };\n});\nSweetAlert.DismissReason = DismissReason;\nSweetAlert.version = '8.17.1';\n\nvar Swal = SweetAlert;\nSwal[\"default\"] = Swal;\n\nreturn Swal;\n\n})));\nif (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}\n\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\"@charset \\\"UTF-8\\\";@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.875em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-shown{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon::before{display:flex;align-items:center;font-size:2em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon::before{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 .0625em #fff,0 0 0 .125em rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-shown{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent}body.swal2-no-backdrop .swal2-shown>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-shown.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-top-left,body.swal2-no-backdrop .swal2-shown.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-shown.swal2-top-end,body.swal2-no-backdrop .swal2-shown.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-shown.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-shown.swal2-center-left,body.swal2-no-backdrop .swal2-shown.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-center-end,body.swal2-no-backdrop .swal2-shown.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-shown.swal2-bottom-left,body.swal2-no-backdrop .swal2-shown.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-shown.swal2-bottom-end,body.swal2-no-backdrop .swal2-shown.swal2-bottom-right{right:0;bottom:0}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;background-color:transparent;-webkit-overflow-scrolling:touch}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-container.swal2-fade{transition:background-color .1s}.swal2-container.swal2-shown{background-color:rgba(0,0,0,.4)}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-actions.swal2-loading .swal2-styled.swal2-confirm{box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-actions.swal2-loading .swal2-styled.swal2-cancel{margin-right:30px;margin-left:30px}.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after{content:\\\"\\\";display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 2px #fff,0 0 0 4px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;outline:initial;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-webkit-input-placeholder,.swal2-input::-webkit-input-placeholder,.swal2-textarea::-webkit-input-placeholder{color:#ccc}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:inherit}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:inherit;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;zoom:normal;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;zoom:normal;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon::before{display:flex;align-items:center;height:92%;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning::before{content:\\\"!\\\"}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info::before{content:\\\"i\\\"}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question::before{content:\\\"?\\\"}.swal2-icon.swal2-question.swal2-arabic-question-mark::before{content:\\\"؟\\\"}.swal2-icon.swal2-success{border-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.875em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-progress-steps{align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-show.swal2-noanimation{-webkit-animation:none;animation:none}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-hide.swal2-noanimation{-webkit-animation:none;animation:none}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-animate-success-icon .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-animate-success-icon .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-animate-success-icon .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-animate-error-icon{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-animate-error-icon .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}\");","<div class=\"sidebar\" data-color=\"white\" data-active-color=\"danger\">\n  <!--\n      Tip 1: You can change the color of the sidebar using: data-color=\"blue | green | orange | red | yellow | Darkblue\"\n  -->\n  <div class=\"logo\">\n    <a routerLink=\"/pages/dashboard/\" class=\"simple-text logo-mini\">\n      <div class=\"logo-image-small\">\n        <img [src]='sideBarCompanyLogo'>\n      </div>\n    </a>\n    <a routerLink=\"/pages/dashboard\" style=\"cursor: pointer\" class=\"simple-text logo-normal\">\n     {{ sideBarCompanyName }}\n    </a>\n  </div>\n  <div class=\"sidebar-wrapper\">\n    <ul class=\"nav\">\n      <li class=\"list-group\">\n        <a routerLink=\"/pages/dashboard/\">\n          <i class=\"fa fa-home\"></i>\n          <p>Dashboard</p>\n        </a>\n      </li>\n      <li class=\"list-group\" *ngIf=\"adminStatus\">\n        <a routerLink=\"/pages/roles/\" >\n          <i class=\"fas fa-user-tag\"></i>\n          <p>Roles</p>\n        </a>\n      </li>\n      <li class=\"list-group\" *ngIf=\"adminStatus\">\n        <a routerLink=\"/pages/sub-user/\">\n          <i class=\"fa fa-users\"></i>\n          <p>Users</p>\n        </a>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/branches/\">\n          <i class=\"fas fa-building\"></i>\n          <p>Branches</p>\n        </a>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/department/\">\n          <i class=\"fa fa-sitemap\"></i>\n          <p>Departments</p>\n        </a>\n      </li>\n      <li [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a data-toggle=\"collapse\" href=\"#pagesExamples\" class=\"collapsed\" aria-expanded=\"false\">\n          <i class=\"fa fa-forward\"></i>\n          <p>Employee Masters<b class=\"caret\"></b></p>\n        </a>\n        <div class=\"collapse\" id=\"pagesExamples\" >\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/leave-types/\">\n                <i class=\"fa fa-life-saver sub-menu-icon\"></i>\n                <p>Leave Types</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/job-profile/\">\n                <i class=\"fas fa-id-card sub-menu-icon\"></i>\n                <p>Job Profiles</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/job-category/\">\n                <i class=\"fa fa-tasks sub-menu-icon\"></i>\n                <p>Job Categories</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/skill-category/\">\n                <i class=\"fa fa-shekel sub-menu-icon\"></i>\n                <p>Skill Categories</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/document-types/\">\n                <i class=\"fa fa-file sub-menu-icon\"></i>\n                <p>Document Types</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/holiday/\">\n                <i class=\"fa fa-bed sub-menu-icon\"></i>\n                <p>Holidays</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/payment-heads/\">\n                <i class=\"fas fa-chart-area\"></i>\n                <p>Payment Heads</p>\n              </a>\n            </li>\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/graderule/\">\n                <i class=\"fab fa-pied-piper-hat\"></i>\n                <p>Grade Rule</p>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/employee-wizard/\">\n          <i class=\"fa fa-group\"></i>\n          <p>Employees</p>\n        </a>\n      </li>\n\n      <li [ngStyle]=\"{'display':employeeLength > 0 ? 'block' : 'none'}\">\n        <a data-toggle=\"collapse\" href=\"#leaveManagement\" class=\"collapsed\" aria-expanded=\"false\">\n          <i class=\"fa fa-forward\"></i>\n          <p>Leave Management<b class=\"caret\"></b></p>\n        </a>\n        <div class=\"collapse\" id=\"leaveManagement\" >\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/leave-management/\">\n                <i class=\"fa fa-life-saver sub-menu-icon\"></i>\n                <p>Manage Earned Leave</p>\n              </a>\n            </li>\n          </ul>\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/leave-management/list-leave\">\n                <i class=\"fas fa-door-open sub-menu-icon\"></i>\n                <p>Manage Leave Status</p>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </li>\n\n      <li [ngStyle]=\"{'display':employeeLength > 0 ? 'block' : 'none'}\">\n        <a data-toggle=\"collapse\" href=\"#payrollManagement\" class=\"collapsed\" aria-expanded=\"false\">\n          <i class=\"fa fa-forward\"></i>\n          <p>Payroll<b class=\"caret\"></b></p>\n        </a>\n        <div class=\"collapse\" id=\"payrollManagement\" >\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/payroll\">\n                <i class=\"fa fa-money sub-menu-icon\"></i>\n                <p>Salary Slips</p>\n              </a>\n            </li>\n          </ul>\n          <ul class=\"nav\">\n            <li class=\"list-group\">\n              <a routerLink=\"/pages/payroll/payroll-sheet\">\n                <i class=\"fa fa-file-excel-o sub-menu-icon\"></i>\n                <p>Salary Sheets</p>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </li>\n      <li class=\"list-group\" [ngStyle]=\"{'display':companyLength > 0 ? 'block' : 'none'}\">\n        <a routerLink=\"/pages/company/company-report\">\n          <i class=\"fa fa-file\"></i>\n          <p>Company Report</p>\n        </a>\n      </li>\n\n\n\n    </ul>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { environment } from '../../../environments/environment';\nimport { EmployeeService } from 'src/app/pages/employee-wizard/services/employee.service';\ndeclare const $: any;\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\ncompanyLength: any;\nsideBarCompanyName: any;\nsideBarCompanyLogo: any;\nemployeeLength: any;\nadminStatus: Boolean;\n\n\n  constructor(private api: ApiService,\n    private companyEmployeeListAPI: EmployeeService) { }\n\n  ngOnInit() {\n      $('.list-group').click(function() {\n          $(this).addClass('active').siblings().removeClass('active');\n      });\n\n       // Get Company List Length\n    this.api.getListData().subscribe((data)=> {\n      if(data.status === 'success'){\n        this.companyLength = data.company.length;\n        if(this.companyLength > 0){\n          for(var i = 0; i<this.companyLength; i++){\n            var sessionId = sessionStorage.getItem('companyId');\n            if(sessionId === undefined){\n              this.sideBarCompanyName = 'AryaVrat payroll';\n              this.sideBarCompanyLogo = `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`;\n              break;\n            }\n            if(data.company[i]._id == sessionId){\n              this.sideBarCompanyName = data.company[i].name;\n              if(data.company[i].logoUrl === `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`){\n                this,this.sideBarCompanyLogo = `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`;\n              } else{\n                this.sideBarCompanyLogo = `${environment.apiBaseUrl}/${data.company[i].logoUrl.substr(data.company[i].logoUrl.indexOf('public')+6)}`;\n              }\n            }\n          }\n        } else {\n          this.sideBarCompanyName = 'AryaVrat payroll';\n          this.sideBarCompanyLogo = `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`;\n        }\n      }\n    })\n\n    // Get Employees List For individual company\n    this.companyEmployeeListAPI.getEmployeeList('Active').subscribe((data)=>{\n      if(data.status === 'success'){\n        this.employeeLength = data.data.length;\n      }\n    })\n\n    // Get Admin Status\n    this.companyEmployeeListAPI.isAdmin().subscribe((data)=>{\n      if(data.status === 'success'){\n        this.adminStatus = data.data;\n      }\n    })\n    }\n\n  }\n\n\n","<nav class=\"navbar navbar-expand-lg navbar-absolute fixed-top navbar-transparent\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-wrapper\">\n      <div class=\"navbar-toggle\">\n        <button type=\"button\" class=\"navbar-toggler\" data-toggle=\"navbar-collapse\" >\n          <span class=\"navbar-toggler-bar bar1\"></span>\n          <span class=\"navbar-toggler-bar bar2\"></span>\n          <span class=\"navbar-toggler-bar bar3\"></span>\n        </button>\n      </div>\n      <a *ngIf=\"companyName !== 'No Company Added'\"class=\"navbar-brand\" routerLink=\"/pages/dashboard\"><strong>{{ companyName }} Payroll</strong></a>\n      <a *ngIf=\"companyName === 'No Company Added' \"class=\"navbar-brand\" routerLink=\"/pages/dashboard\"><strong>Aryavrat Payroll</strong></a>\n    </div>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"navbar-collapse\"\n      aria-controls=\"navigation-index\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" (click)=\"toggleNavbar()\">\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n      <span class=\"navbar-toggler-bar navbar-kebab\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse justify-content-end \" id=\"navigation\" [ngClass]=\"{'show':navbarOpen}\">\n        <form>\n            <div class=\"input-group no-border form-group\">\n              <select class=\"dropdown dropdown-toggle form-control\" id=\"headerCompanyDropDown\" Name=\"Company\" (change)=\"onSelect($event.target.value)\"\n              #selectOption>\n              <option class=\"dropdown-item\"  selected disabled>{{ companyName }}</option>\n              <option class=\"dropdown-item\"  *ngFor=\"let company of companyListData\" value=\"{{company._id}}\">{{ company.name }}</option>\n          </select>\n              </div>\n        </form>\n          &nbsp;\n      <form>\n        <!-- <div class=\"input-group no-border\">\n          <input type=\"text\" value=\"\" class=\"form-control\" placeholder=\"Search...\">\n          <div class=\"input-group-append\">\n            <div class=\"input-group-text\">\n              <i class=\"fa fa-search\"></i>\n            </div>\n          </div>\n        </div> -->\n      </form>\n      <div class=\"nav-item btn-rotate dropdown\">\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n             <img [src]='url' style=\"width: 40px; height: 40px;\" class=\"rounded-circle\" alt=\"Cinque Terre\">\n            <p>\n              <span class=\"d-lg-none d-md-block\">Account</span>\n            </p>\n          </a>\n          <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdownMenuLink\">\n            <a class=\"dropdown-item\" style=\"cursor:pointer\">{{userId}}</a>\n            <a class=\"dropdown-item\" style=\"cursor:pointer\" routerLink='/pages/update-profile' >Update Profile</a>\n            <a class=\"dropdown-item\"  (click)=\"logout()\" style=\"cursor: pointer\">Logout</a>\n          </div>\n      </div>\n    </div>\n  </div>\n</nav>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  companyListData: any[];\n  filterListData: any[];\n  navbarOpen = false;\n  companyName: String;\n  public userId;\n  url: any;\n\n  toggleNavbar() {\n    this.navbarOpen = !this.navbarOpen;\n  }\n\n  constructor(private apiService: ApiService, private route: Router, private ngZone: NgZone, ) { }\n\n  ngOnInit() {\n    this.userProfile();\n    this.getList();\n    this.getIndividualList();\n    let getmyVal: any = JSON.parse(localStorage.getItem(\"myVal\"));\n    let id = getmyVal.split('@');\n    this.userId = id[0];\n  }\n\n  //Method for show data in the list\n  getList() {\n    try {\n      this.apiService.getListData().subscribe(data => {\n        if (data.status === 'success' || data.status === 200) {\n          if (data.company.length === 0) {\n            this.ngZone.run(() => this.route.navigateByUrl('/pages/company/add-company'));\n          } else {\n            this.companyListData = data.company;\n          }\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for show dropdown selected value\n  getIndividualList() {\n    try {\n      if (sessionStorage.getItem('companyId') === \"undefined\") {\n        this.companyName = \"No Company Added\";\n      } else {\n        this.apiService.getIndividualData(sessionStorage.getItem('companyId')).subscribe((data) => {\n          if(data.status === 'success'){\n            this.companyName = data.data.name;\n            this.filterCompanyId();\n          } else {\n            console.log(data.message);\n          }\n        })\n      }\n\n    } catch (err) { }\n  }\n\n  //Method for set selected valuein session storage\n  onSelect(companyId: string) {\n    try {\n      sessionStorage.setItem('companyId', companyId);\n      localStorage.setItem('companyId',companyId);\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n //Method for filter company Name by companyId\n  filterCompanyId() {\n    let companyId = sessionStorage.getItem('companyId');\n    if(companyId != undefined){\n      this.filterListData = this.companyListData.filter(e => e._id !== companyId);\n      this.companyListData = this.filterListData;\n    }\n  }\n\n\n  logout(): void {\n    this.apiService.submitLogout();\n    this.route.navigateByUrl('/users');\n  }\n\n  // User Profile Details\n  userProfile(){\n    try {\n      this.apiService.getUserDetails().subscribe((data)=>{\n        if(data.status === 'success'){\n          this.url = data.data.avatar;\n          if(data.data.name.length > 0){\n            this.userId = data.data.name;\n          }\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ngOnDestroy() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<footer class=\"footer footer-black  \">\n        <div class=\"container-fluid\" >\n          <div class=\"row\">\n            <nav class=\"footer-nav\">\n              <ul>\n                <li>\n                  <!-- <a href=\"https://www.creative-tim.com\" target=\"_blank\">Creative Tim</a> -->\n                </li>\n                <li>\n                  <!-- <a href=\"http://blog.creative-tim.com/\" target=\"_blank\">Blog</a> -->\n                </li>\n                <li>\n                  <!-- <a href=\"https://www.creative-tim.com/license\" target=\"_blank\">Licenses</a> -->\n                </li>\n              </ul>\n            </nav>\n            <div class=\"credits ml-auto\">\n              <span class=\"copyright\">\n                ©\n                <script>\n                  document.write(new Date().getFullYear())\n                </script>made with <i class=\"fa fa-heart heart\"></i> by Aryavrat\n              </span>\n            </div>\n          </div>\n        </div>\n      </footer>\n","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from '../services/api.service';\nimport { UtilitiesService } from '../utilities/utilities.service';\n\n@Component({\n  selector: 'app-pages',\n  templateUrl: './pages.component.html',\n  styleUrls: ['./pages.component.scss']\n})\n\nexport class PagesComponent implements OnInit{\n\n  constructor(\n\n  ) { }\n\n  ngOnInit(){\n\n  }\n\n}\n","\n<div class=\"wrapper\">\n    <div class=\"sidebar-wrapper\">\n        <app-sidebar></app-sidebar>\n    </div>\n\n    <div class=\"main-panel\">\n        <app-header></app-header>\n        <div class=\"content\">\n            <router-outlet></router-outlet>\n        </div>\n        <app-footer></app-footer>\n    </div>\n</div>","<div class=\"card\">\n    <div class=\"card-header\">\n    </div>\n    <div class=\"card-body\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <div class=\"card\">\n\n                        <div class=\"card-body\" style=\"background-color:whitesmoke;\">\n                            <div class=\"card-title mb-4\">\n                                <div class=\"d-flex justify-content-start\">\n                                    <div class=\"image-container\">\n                                        <img [src]='url' id=\"imgProfile\" style=\"width: 150px; height: 150px\" class=\"rounded\" />\n                                        <div class=\"middle\">\n                                            <input type=\"file\" style=\"display: none;\" accept=\"image/*\" id=\"profilePicture\" #file (change)=\"onSelectFile($event)\"/>\n                                            <input type=\"button\" class=\"btn btn-secondary\" id=\"btnChangePicture\" value=\"Change\" (click)=\"file.click()\" />\n                                        </div>\n                                    </div>\n                                    <div class=\"userData ml-3\">\n                                        <h2 class=\"d-block\" style=\"font-size: 1.5rem; font-weight: bold; color: #51cbce; margin-top: 59px\">{{ cardProfileName }}</h2>\n                                        <!-- <h6 class=\"d-block\"><a href=\"javascript:void(0)\">1,500</a> Video Uploads</h6>\n                                        <h6 class=\"d-block\"><a href=\"javascript:void(0)\">300</a> Blog Posts</h6> -->\n                                    </div>\n                                    <div class=\"ml-auto\" *ngIf=\"discardChanges\">\n                                        <input type=\"button\" class=\"btn btn-danger\" id=\"btnDiscard\" value=\"Discard Changes\" (click)=\"discardFunctionality()\"/>\n                                    </div>\n                                </div>\n                            </div>\n                            <form class=\"form-horizontal\" [formGroup]=\"updateProfileForm\" role=\"form\" (ngSubmit)=\"updateProfileData()\" novalidate>\n                                <div class=\"row\">\n                                    <div class=\"col-12\">\n                                        <ul class=\"nav nav-tabs mb-4\" id=\"myTab\" role=\"tablist\">\n                                            <li class=\"nav-item\">\n                                                <a class=\"nav-link active\" id=\"basicInfo-tab\" data-toggle=\"tab\" href=\"#basicInfo\" role=\"tab\" aria-controls=\"basicInfo\" aria-selected=\"true\">Basic Info</a>\n                                            </li>\n                                            <!-- <li class=\"nav-item\">\n                                                <a class=\"nav-link\" id=\"connectedServices-tab\" data-toggle=\"tab\" href=\"#connectedServices\" role=\"tab\" aria-controls=\"connectedServices\" aria-selected=\"false\">Connected Services</a>\n                                            </li> -->\n                                        </ul>\n                                        <div class=\"tab-content ml-1\" id=\"myTabContent\">\n                                            <div class=\"tab-pane fade show active\" id=\"basicInfo\" role=\"tabpanel\" aria-labelledby=\"basicInfo-tab\">\n\n\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Full Name</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <input class=\"form-demo\" type=\"text\" id=\"profileName\" placeholder=\"Enter Full Name\" formControlName=\"name\" (input)='changeName()'/>\n                                                    </div>\n                                                </div>\n                                                <hr />\n\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Birth Date</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <input class=\"form-demo\" type=\"date\" placeholder=\"Select DOB\" formControlName=\"birthday\"/>\n                                                    </div>\n                                                </div>\n                                                <hr />\n\n\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Gender</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <select class=\"dropdown dropdown-toggle form-demo single\" Name=\"Company\" formControlName=\"gender\">\n                                                            <option class=\"dropdown-item\" *ngFor=\"let gender of genderList\" selected=\"{{ gender }}\"\n                                                                value=\"{{ gender }}\">\n                                                                {{ gender }}\n                                                            </option>\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                                <hr />\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">Phone No.</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <input class=\"form-demo\" type=\"text\"  placeholder=\"Enter Phone Number\" formControlName=\"phone\"/>\n                                                        <div *ngFor=\"let validation of validationMessage.phone\">\n                                                            <div style=\"color: red;margin-left: 14px;\"\n                                                              *ngIf=\"updateProfileForm.get('phone').hasError(validation.type) && (updateProfileForm.get('phone').dirty || updateProfileForm.get('phone').touched)\"\n                                                              style=\"color: red;margin-left: 14px;\">\n                                                              {{ validation.message }}\n                                                            </div>\n                                                          </div>\n                                                    </div>\n                                                </div>\n                                                <hr />\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3 col-md-2 col-5\">\n                                                        <label style=\"font-weight:bold;\">TimeZone:</label>\n                                                    </div>\n                                                    <div class=\"col-md-8 col-6\">\n                                                        <div class=\"stackblitz-container material\">\n                                                            <div class=\"control-section col-lg-8\">\n                                                            <div class=\"control-wrapper\">\n                                                            <input type=\"text\" id=\"checkbox\">\n                                                            </div>\n                                                            </div>\n                                                            <div class=\"col-lg-4 property-section\">\n                                                            <div id=\"property\" title=\"Properties\">\n                                                            <table id=\"property\" title=\"Properties\">\n                                                            </table>\n                                                            </div>\n                                                            </div>\n                                                            </div>\n                                                    </div>\n                                                </div>\n                                                <hr />\n\n                                            </div>\n                                            <div class=\"form-group\">\n                                                <div class=\"col-sm-offset-2 col-sm-10\">\n                                                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateProfileForm.invalid\">Update Profile</button>\n                                                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"/pages/dashboard/company-list\">Cancel</button>\n\n\n                                                </div>\n                                              </div>\n                                            <!-- <div class=\"tab-pane fade\" id=\"connectedServices\" role=\"tabpanel\" aria-labelledby=\"ConnectedServices-tab\">\n                                                Facebook, Google, Twitter Account that are connected to this account\n                                            </div> -->\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n\n\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n        </div>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { environment } from '../../../environments/environment';\nimport { enableRipple } from '@syncfusion/ej2-base';\nenableRipple(true);\n/**\n * MultiSelect Checkbox Samples\n */\nimport { MultiSelect, CheckBoxSelection } from '@syncfusion/ej2-dropdowns';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.scss']\n})\nexport class UpdateProfileComponent implements OnInit {\nurl = '../../../assets/image/profile-image.png';\ndiscardChanges = false;\ngenderList = ['Male','Female','Other','N/A'];\nupdateProfileForm: any;\ncardProfileName = '';\nexistingUrl= '../../../assets/image/profile-image.png';\ntimeZone: any;\nmultiObj: MultiSelect;\ndefaultTimeZone: any;\nuserAvatar: any;\n\n  constructor(public fb: FormBuilder, private APIService: ApiService, private util: UtilitiesService, private router: Router) { }\n\n  ngOnInit() {\n    this.existUpadteProfileForm();\n    this.loadUpadteProfileForm();\n    this.userProfileForm();\n    this.APIService.getTimeZone().subscribe((data)=>{\n      if(data.status === 'success'){\n        this.timeZone = data.data;\n        MultiSelect.Inject(CheckBoxSelection);\n        // initialize the MultiSelect component\n        this.multiObj = new MultiSelect({\n          // set the country data to dataSource property\n          dataSource: this.timeZone,\n          // map the appropriate columns to fields property\n          fields: { text: 'Name', value: 'Code' },\n          // set the type of mode for checkbox to visualized the checkbox added in li element.\n          mode: 'CheckBox',\n          // set the placeholder to MultiSelect input element\n          placeholder: 'Select TimeZone',\n          // set maximum selection length in Multiselect.\n          maximumSelectionLength: 1,\n          // set true for enable the dropdown icon.\n          showDropDownIcon: true,\n          // set the placeholder to MultiSelect filter input element\n          filterBarPlaceholder: 'Search TimeZone',\n          // set the MultiSelect popup height\n          popupHeight: '350px',\n\n        });\n        this.multiObj.appendTo('#checkbox');\n        this.multiObj.value = [this.util.timeZone];\n      }\n    })\n\n  }\n\n  // Load Default Form\n  loadUpadteProfileForm(){\n    try {\n      this.updateProfileForm = this.fb.group({\n        name: new FormControl(''),\n        gender: new FormControl(''),\n        phone: new FormControl('',Validators.compose([\n          Validators.minLength(10),\n          Validators.maxLength(15),\n          Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n        ])),\n        birthday: new FormControl('')\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Fill value With Exists value\n  existUpadteProfileForm(){\n    try {\n      // Get User Details\n      this.APIService.getUserDetails().subscribe((data)=>{\n        if(data.status === 'success'){\n          this.cardProfileName = data.data.name;\n          this.util.timeZone = data.data.timeZone;\n          if(data.data.avatar !== `${environment.apiBaseUrl}/assets/images/aryavrat-infotech-squarelogo-1533534321648.png`){\n            this.url = data.data.avatar;\n            this.existingUrl = data.data.avatar;\n          }\n          this.updateProfileForm = this.fb.group({\n            name: new FormControl(data.data.name),\n            gender: new FormControl(data.data.gender),\n            phone: new FormControl(data.data.phone,Validators.compose([\n              Validators.minLength(10),\n              Validators.maxLength(15),\n              Validators.pattern('^-?[0-9]\\\\d*(\\\\.\\\\d{1,2})?$')\n            ])),\n            birthday: new FormControl(data.data.birthday.substring(0,10))\n          })\n        }\n      })\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  validationMessage = {\n    'phone': [\n      { type: 'minlength', message: 'Number too short' },\n      { type: 'maxlength', message: 'Number is too large' },\n      { type: 'pattern', message: 'Company Number not valid' }],\n  }\n\n\n  onSelectFile(event) {\n\n    if (event.target.files && event.target.files[0]) {\n      this.discardChanges = true;\n      var reader = new FileReader();\n\n      reader.readAsDataURL(event.target.files[0]); // read file as data url\n\n      reader.onload = (event: any) => { // called once readAsDataURL is completed\n        this.url = event.target.result;\n      }\n      if (event.target.files.length > 0) {\n        const file = event.target.files[0];\n        this.userAvatar.get('avatar').setValue(file);\n      }\n    }\n  }\n\n  // Discard Image Value\n  discardFunctionality(){\n    try {\n     this.url = this.existingUrl;\n     this.discardChanges = false;\n     this.userAvatar.get('avatar').setValue(['']);\n     (document.getElementById('profilePicture')as HTMLInputElement).value = '';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Change Profile Name\n  changeName(){\n    try {\n      this.cardProfileName = (document.getElementById('profileName') as HTMLInputElement).value;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Submit form\n  updateProfileData(){\n    try {\n      let cleanUpdateProfileForm = this.util.cleanFormLevelOne(this.updateProfileForm);\n      this.APIService.updateUSerProfile(cleanUpdateProfileForm.value,this.multiObj.value[0]).subscribe((data)=>{\n        if(data.status === 'success'){\n          if((document.getElementById('profilePicture')as HTMLInputElement).value.length > 0){\n            this.APIService.uploadProfileImage(this.userAvatar,\"User\",undefined).subscribe((updateProfile)=>{\n              if(updateProfile.status === 'success'){\n\n                const swalWithBootstrapButtons = Swal.mixin({\n                  customClass: {\n                    confirmButton: 'btn btn-success',\n                    cancelButton: 'btn btn-danger'\n                  },\n                  buttonsStyling: false\n                })\n                swalWithBootstrapButtons.fire({\n                  title: 'Status',\n                  text: data.message,\n                  type: 'success',\n                  showCancelButton: false,\n                  confirmButtonText: 'Ok',\n                  reverseButtons: true,\n                  allowOutsideClick: false\n                }).then((result) => {\n                  if (result.value) {\n                    window.location.reload();\n                  }\n                })\n              }\n            })\n          } else {\n            const swalWithBootstrapButtons = Swal.mixin({\n              customClass: {\n                confirmButton: 'btn btn-success',\n                cancelButton: 'btn btn-danger'\n              },\n              buttonsStyling: false\n            })\n            swalWithBootstrapButtons.fire({\n              title: 'Status',\n              text: data.message,\n              type: 'success',\n              showCancelButton: false,\n              confirmButtonText: 'Ok',\n              reverseButtons: true,\n              allowOutsideClick: false\n            }).then((result) => {\n              if (result.value) {\n                window.location.reload();\n              }\n            })\n          }\n        } else if(data.status === 'error'){\n          console.log(data.message);\n        }\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // Profile Image Form\n  userProfileForm(){\n    try {\n      this.userAvatar = this.fb.group({\n        avatar: ['']\n      })\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PagesComponent } from './pages.component';\nimport { PaymentHeadsModule } from './Payment Heads/payment-heads.module';\nimport { UpdateProfileComponent } from './update-profile/update-profile.component';\nimport { AuthGuard } from '../authGuard/auth.guard';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PagesComponent,\n    canActivate:[AuthGuard],\n    children: [\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./dashboard/dashboard.module')\n        .then(m => m.DashboardModule)\n      },\n      {\n        path: 'sub-user',\n        loadChildren: () => import('./sub-user/sub-user.module')\n        .then(m => m.SubUserModule)\n      },\n      {\n        path: 'company',\n        loadChildren: () => import('./company/company.module')\n        .then(m => m.CompanyModule),\n      },\n      {\n        path: 'branches',\n        loadChildren: () => import('./branches/branches.module')\n        .then(m => m.BranchesModule)\n      },\n      {\n        path: 'leave-types',\n        loadChildren: () => import('./leave-types/leave-types.module')\n        .then(m => m.LeavetypesModule)\n      },\n      {\n        path:'employee-wizard',\n        loadChildren:() => import('./employee-wizard/employee-wizard.module')\n        .then(m => m.EmployeeWizardModule)\n      },\n      // {\n      //   path:'employee-wizard',\n      //   loadChildren:() => import('./employee-wizard/employee-wizard.module')\n      //   .then(m => m.EmployeeWizardModule)\n      // },\n      {\n        path:'job-profile',\n        loadChildren:() => import('./job-profile/job-profile.module')\n        .then(m => m.JobProfileModule)\n      },\n      {\n        path: 'job-category',\n        loadChildren: () => import('./job category/job-category.module')\n        .then(m => m.JobCategoryModule)\n      },\n      {\n        path: 'document-types',\n        loadChildren:() => import('./document-types/document-types.module')\n        .then(m=> m.DocumenttypesModule)\n      },\n      {\n        path: 'skill-category',\n        loadChildren:() => import('./skill-category/skill-category.module')\n        .then(m => m.SkillCategoryModule)\n      },\n      {\n        path: 'holiday',\n        loadChildren:() => import('./holiday/holiday.module')\n        .then(m => m.HolidayModule)\n      },\n      {\n        path: 'payment-heads',\n        loadChildren:()=> import('./Payment Heads/payment-heads.module')\n        .then(m=>PaymentHeadsModule)\n      },\n      {\n        path: 'report',\n        loadChildren:()=>import('./report/report.module')\n        .then(m=>m.ReportModule)\n      },\n      {\n        path: 'payroll',\n        loadChildren:()=>import('./payroll/payroll.module')\n        .then(m=>m.PayrollModule)\n      },\n      {\n        path: 'calendar',\n        loadChildren:()=>import('./calendar/calendar.module')\n        .then(m=>m.CalendarModule)\n      },\n      {\n        path: 'department',\n        loadChildren:()=>import('./department/department.module')\n        .then(m=>m.DepartmentModule)\n      },\n      {\n        path: 'graderule',\n        loadChildren: ()=>import('./graderule/graderule.module')\n        .then(m=>m.GraderuleModule)\n      },\n      {\n        path: 'leave-management',\n        loadChildren: ()=>import('./leave-management/leave-management.module')\n        .then(m=>m.LeaveManagementModule)\n      },\n      {\n        path: 'roles',\n        loadChildren: ()=>import('./roles/roles.module')\n        .then(m=>m.RolesModule)\n      },\n      {\n        path: 'update-profile',\n        component: UpdateProfileComponent\n      },\n      {\n        path: '',\n        redirectTo: 'company',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'branches',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'leave-types',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'employee-wizard',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'job-profile',\n        pathMatch: 'full',\n      },\n      {\n        path:'',\n        redirectTo: 'job-category',\n        pathMatch: 'full',\n      },\n      {\n        path: '',\n        redirectTo: 'document-types',\n        pathMatch:'full'\n      },\n      {\n        path: '',\n        redirectTo: 'skill-category',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'holiday',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'payment-heads',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'report',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'payroll',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'calendar',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'department',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'graderule',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        redirectTo: 'leave-management',\n        pathMatch: 'full'\n      },\n    ],\n  },\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n  ]\n})\nexport class PagesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PagesRoutingModule } from './pages-routing.module';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HeaderComponent } from '../themes/header/header.component';\nimport { SidebarComponent } from '../themes/sidebar/sidebar.component';\nimport { FooterComponent } from '../themes/footer/footer.component';\nimport { PagesComponent } from './pages.component';\nimport { LeaveManagementComponent } from './leave-management/leave-management.component';\nimport { UpdateProfileComponent } from './update-profile/update-profile.component';\nimport { NotifierModule } from 'angular-notifier';\n\n\n\n@NgModule({\n  declarations: [HeaderComponent,SidebarComponent,FooterComponent,PagesComponent, LeaveManagementComponent, UpdateProfileComponent],\n  imports: [\n    CommonModule,\n    PagesRoutingModule,\n    RouterModule,\n    ReactiveFormsModule,\n    FormsModule,\n    NotifierModule,\n  ]\n})\n\nexport class PagesModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-payment-heads',\n  templateUrl: './payment-heads.component.html',\n  styleUrls: ['./payment-heads.component.scss']\n})\n\nexport class PaymentHeadsComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n  \n  }\n\n}","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { Payment } from  '../../../auth/payment'; \nimport { UpdatePaymentHeadl } from '../../../auth/updatePaymentHeadl';\n \n@Injectable({\n  providedIn: 'root'\n})\n\nexport class paymentHeadApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\n/**get payment heads data  */\ngetPaymentHeadData():Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/list-payment-heads/${companyId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Individual Payment Heads Details\npaymentHeadDetails(paymentHeadId:string):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/payment-head-details/${paymentHeadId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n/** add payment heads */\naddPaymentHeads(data:Payment):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL =`${this.endpoint}/company/add-payment-head/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      \n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n/**update payment heads */\nupdatePaymentHeads(data:UpdatePaymentHeadl,paymentHeadId:String):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/update-payment-head/${companyId}/${paymentHeadId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n/**remove payment head */ \nremovePaymentHead(paymentHeadId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/company/delete-payment-head/${paymentHeadId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}\n\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Payment Heads</h2>\n        <button [disabled]=\"permissionInfo.search('Create PaymentHeads') === -1\"\n        class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/payment-heads/add-payment-heads\" style=\"float:right;\" (click)= \"addPaymentHeads()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Payment Heads</button>\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th> S.No </th>\n            <th> Title </th>\n            <th >Type</th>\n            <th >Action</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of paymentData; let i = index\">\n            <tr >\n            <td><b>{{ i+1 }}.</b></td>\n            <td> {{ list.title }} </td>\n            <td *ngIf=\"list.type === 'Addition'\"><i id=\"plus\" class=\"fas fa-plus-square\"></i></td>\n            <td *ngIf=\"list.type === 'Deduction'\"><i id=\"minus\" class=\"fas fa-minus-square\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit PaymentHeads') === -1\"\n                routerLink=\"/pages/payment-heads/update-payment-heads/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete PaymentHeads') === -1\"\n                class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { paymentHeadApiService } from '../payment-heads-service/payment-heads-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-payment-heads',\n    templateUrl: './list-payment-heads.component.html',\n    styleUrls: ['./list-payment-heads.component.scss']\n})\n\nexport class ListPaymentHeadsComponent implements OnInit {\n\n  paymentData: any[];\n  permissionInfo: any;\n\n  constructor(private api:paymentHeadApiService,public route:Router, private util:UtilitiesService){}\n\n  ngOnInit() {\n    this.listPaymentHeads();\n    this.permissionInfo = this.util.permissionRoleInfo;\n  }\n\n  listPaymentHeads(){\n    try{\n      this.api.getPaymentHeadData().subscribe(data =>{\n        if (data.status === 'success' || data.status === 200) {\n        this.paymentData = data.data;\n        const len = Object.keys(this.paymentData).length;\n        if(len == 0){\n          this.route.navigateByUrl(\"pages/payment-heads/add-payment-heads\");\n        }else{\n          this.paymentData = data.data;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  showConfirmationMessage(paymentHeadId:String){\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removePaymentHead(paymentHeadId).subscribe((data)=>{\n            if(data.status === \"success\" || data.status === 200){\n          swalWithBootstrapButtons.fire(\n            'Deleted!',\n            data.message,\n            'success'\n          )\n          this.listPaymentHeads();\n            }\n        })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your Payment Head Data is Safe',\n            'error'\n          )\n        }\n      })\n  }\n  addPaymentHeads(){\n    try{\n      this.util.paymentHeadStatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Payment Head Details</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"paymentHeadForm\" (ngSubmit)=\"paymentHeadData()\" novalidate>\n         <div class=\"row\">\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                     <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"\n                           formControlName=\"title\" >\n                        <div *ngFor=\"let validation of validationMessage.title\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"paymentHeadForm.get('title').hasError(validation.type) && (paymentHeadForm.get('title').dirty || paymentHeadForm.get('title').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                           </div>\n                        </div>\n                     </div>\n                  </div>\n            </div>\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                     <div class=\"col-sm-offset-2\">\n                     <select id=\"type\" class=\"dropdown dropdown-toggle form-control\" formControlName=\"type\" style=\"width:100%; height: 40px;\">\n                           <option ng-selected=\"true\" value=\"\" disabled>----------Select Payment Head Type----------</option>\n                        <option *ngFor=\"let type of paymentHeadTypes\" [value]=\"type\">{{type}}</option>\n                     </select>\n                     <div *ngFor=\"let validation of validationMessage.type\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"paymentHeadForm.get('type').hasError(validation.type) && (paymentHeadForm.get('type').dirty || paymentHeadForm.get('type').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                           </div>\n                        </div>\n                     </div>\n                  </div>\n            </div>\n         </div>\n\n         <!-- <label class=\"col-sm-6 control-label\"><b>ParentId:</b></label>\n         <input class=\"form-control\" type=\"text\" id=\"parentId\" placeholder=\"Enter parentId\"formControlName=\"parentId\"> -->\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"paymentHeadForm.invalid || permissionInfo.search('Create PaymentHeads') === -1\">Submit</button>\n               <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../list-payment-heads\">Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>","<div class=\"card card-u</div>ser\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Payment Heads</h2>\n   </div>\n   <div class=\"card-body\">\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{errMsg}}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{successMsg}}</strong>\n         </p>\n      </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"paymentHeadUpdateForm\" (ngSubmit)=\"updatePaymenthead()\" >\n         <div class=\"row\">\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                     <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"\n                           formControlName=\"title\">\n                           <div *ngFor=\"let validation of validationMessage.title\">\n                              <div style=\"color: red;margin-left: 14px;\"\n                                 *ngIf=\"paymentHeadUpdateForm.get('title').hasError(validation.type) && (paymentHeadUpdateForm.get('title').dirty || paymentHeadUpdateForm.get('title').touched)\"\n                                 style=\"color: red;margin-left: 14px;\">\n                                 {{ validation.message }}\n                              </div>\n                           </div>\n                     </div>\n                  </div>\n            </div>\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                        <select id=\"type\" class=\"dropdown dropdown-toggle form-control\" formControlName=\"type\" style=\"width:100%; height: 40px;\">\n                              <option *ngFor=\"let h of paymentHeadTypes\" [value]=\"h\">{{h}}</option>\n                        </select>\n                        <div *ngFor=\"let validation of validationMessage.type\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                              *ngIf=\"paymentHeadUpdateForm.get('type').hasError(validation.type) && (paymentHeadUpdateForm.get('type').dirty || paymentHeadUpdateForm.get('type').touched)\"\n                              style=\"color: red;margin-left: 14px;\">\n                              {{ validation.message }}\n                           </div>\n                        </div>\n                        </div>\n                     </div>\n            </div>\n         </div>\n\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"paymentHeadUpdateForm.invalid || permissionInfo.search('Edit PaymentHeads') === -1\">Update</button>\n                  <button type=\"submit\" class=\"btn btn-danger\" routerLink=\"../../list-payment-heads\">Cancel</button>\n               </div>\n            </div>\n         </form>\n   </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PaymentHeadsComponent } from './payment-heads.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListPaymentHeadsComponent } from './list-payment-heads/list-payment-heads.component';\nimport { AddPaymentHeadsComponent } from './add-payment-heads/add-payment-heads.component';\nimport { UpdatePaymentHeadsComponent } from './update-payment-heads/update-payment-heads.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : PaymentHeadsComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-payment-heads',\n        component: ListPaymentHeadsComponent,\n      },\n      {\n        path: 'add-payment-heads',\n        component: AddPaymentHeadsComponent\n      },\n      {\n        path: 'update-payment-heads/:jobCategoryId',\n        component: UpdatePaymentHeadsComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-payment-heads',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class PaymentHeadsRoutingModule { }","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { paymentHeadApiService } from '../payment-heads-service/payment-heads-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component({\n    selector: 'app-add-payment-heads',\n    templateUrl: './add-payment-heads.component.html'\n})\n\nexport class AddPaymentHeadsComponent implements OnInit {\n\n  paymentHeadForm: FormGroup;\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    errorMsg: boolean = false;\n    companyNameStore: any;\n    showCard: any;\n    companyNameId: any;\n    public companyName:any= [];\n    public companyId: any;\n    paymentHeadTypes = ['Addition','Deduction'];\n  permissionInfo: any;\n\n\n    constructor(public fb: FormBuilder,private api:paymentHeadApiService,private ngZone:NgZone,\n      private router:Router,private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n    ngOnInit() {\n      this.paymentHeadValidate();\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create PaymentHeads') === -1){\n        this.paymentHeadForm.disable();\n      }\n    }\n\n    paymentHeadData(){\n      try{\n        let cleanPaymentHeadForm = this.util.cleanFormLevelOne(this.paymentHeadForm);\n        this.api.addPaymentHeads(cleanPaymentHeadForm.value).subscribe(data=>{\n          if(data.status === 'success'){\n            this.successMessage = true ;\n            this.errorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(()=>this.router.navigateByUrl('/pages/payment-heads/list-payment-heads'));\n            },2000)\n          }else{\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=>{\n              this.handleErrors();\n            },3000)\n          }\n        })\n      } catch(err){\n        console.log(err);\n      }\n    }\n\n    paymentHeadValidate() {\n      try {\n        this.paymentHeadForm = this.fb.group({\n          title: new FormControl('',Validators.required),\n          type:new FormControl('', Validators.required),\n          // parentId: new FormControl(null)\n          })\n        }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    validationMessage = {\n      'title':[{\n        type: 'required', message: 'Payement Head Title is Required'\n      },],\n      'type':[\n        {type:'required', message: 'Payement Head Type is Required'}\n      ],\n    }\n\n    handleErrors(){\n      this.errorMsg = false;\n      this.successMessage = false;\n      this.errMsg = '';\n      this.successMsg = '';\n  }\n  isListAvaliable(){\n    try{\n      this.api.getPaymentHeadData().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.data.length > 0 && this.util.paymentHeadStatus !== 1){\n            this.router.navigateByUrl(\"/pages/payment-heads/list-payment-heads\");\n            this.util.paymentHeadStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n}","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { paymentHeadApiService } from '../payment-heads-service/payment-heads-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-payment-heads',\n  templateUrl: 'update-payment-heads.component.html'\n})\n\nexport class UpdatePaymentHeadsComponent implements OnInit {\n\n  paymentHeadUpdateForm: any;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  companyNameStore: [];\n  showCard: any;\n  companyNameId: any;\n  public companyName: [];\n  public companyId: any;\n  public leaveTypeId: any;\n  public jobCategoryId: any;\n  existingData: any;\n  paymentHeadTypes = ['Addition','Deduction'];\n  paymentHeadId;\n  permissionInfo: any;\n\n\n\nconstructor(private api:paymentHeadApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router,\n  private util: UtilitiesService){\n    this.paymentHeadId = this.route.snapshot.paramMap.get(\"jobCategoryId\");\n    this.util.moduleExists(this.paymentHeadId,'PaymentHead').subscribe((data)=>{\n      if(data.status === 'success'){\n        if(!data.data){\n          this.router.navigateByUrl('/pages/payment-heads/list-payment-heads');\n        }\n      }\n    })\n  }\n\nngOnInit() {\n  this.existingDataList();\n  this.updatePaymentHeadValidation();\n  this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit PaymentHeads') === -1){\n        this.paymentHeadUpdateForm.disable();\n      }\n}\n\nupdatePaymentHeadValidation() {\n  try {\n    this.paymentHeadUpdateForm = this.fb.group({\n        title: new FormControl('',Validators.required),\n        type: new FormControl('',Validators.required)\n      })\n    }\n  catch (err) {\n    console.log(err);\n  }\n}\n\nexistingDataList(){\n  this.api.paymentHeadDetails(this.paymentHeadId).subscribe(data=>{\n    this.existingData = data.data;\n      this.paymentHeadUpdateForm = this.fb.group({\n        title: new FormControl(this.existingData.title,Validators.required),\n        type: new FormControl(this.existingData.type,Validators.required),\n      })\n  })\n}\n\nupdatePaymenthead(){\n  try{\n    let cleanPaymentHeadUpdateForm = this.util.cleanFormLevelOne(this.paymentHeadUpdateForm);\n    this.api.updatePaymentHeads(cleanPaymentHeadUpdateForm.value,this.paymentHeadId).subscribe(data=>{\n      if(data.status === 'success'){\n        this.successMessage = true ;\n        this.errorMsg = false ;\n        this.successMsg = data.message;\n        setTimeout(() =>{\n          this.handleErrors();\n          this.ngZone.run(() => this.router.navigateByUrl('/pages/payment-heads/list-payment-heads'));\n        },2000);\n      }else{\n        this.errorMsg = true;\n        this.successMessage = false;\n        this.errMsg = data.message;\n        setTimeout(()=>{\n          this.handleErrors();\n        },3000)\n      }\n    })\n  } catch(err){\n    console.log(err);\n  }\n}\n\nvalidationMessage = {\n  'title':[{\n    type: 'required', message: 'Payement Head Title is Required'\n  },],\n  'type':[\n    {type:'required', message: 'Payement Head Type is Required'}\n  ],\n}\n\n\nhandleErrors(){\n  this.errorMsg = false;\n  this.successMessage = false;\n  this.errMsg = '';\n  this.successMsg = '';\n}\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaymentHeadsRoutingModule } from './payment-heads-routing.module';\nimport { PaymentHeadsComponent } from './payment-heads.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListPaymentHeadsComponent } from './list-payment-heads/list-payment-heads.component';\nimport { AddPaymentHeadsComponent } from './add-payment-heads/add-payment-heads.component';\nimport { UpdatePaymentHeadsComponent } from './update-payment-heads/update-payment-heads.component';\n\n@NgModule({\n  declarations: [\n    PaymentHeadsComponent,\n    ListPaymentHeadsComponent,\n    AddPaymentHeadsComponent,\n    UpdatePaymentHeadsComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    PaymentHeadsRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class PaymentHeadsModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Employee } from 'src/app/auth/employee';\nimport { Address } from 'src/app/auth/employee-address';\nimport { Educational } from 'src/app/auth/educational';\nimport { EmployeeBio } from 'src/app/auth/employeeBio';\nimport { BankDetails } from '../../../auth/BankDetails';\nimport { AddExprience } from '../../../auth/addExprience';\nimport { Auth } from 'src/app/auth/auth';\nimport { UpdateAddess } from '../../../auth/updateAddess';\nimport { AddFamily } from '../../../auth/addFamily';\nimport { UpdateEducation } from '../../../auth/educationUpdate';\nimport { UpdateExprience} from '../../../auth/updateExprience';\nimport { PayrollData } from '../../../auth/payrollData';\nimport { LanguageSkill } from '../../../auth/languageSkill';\nimport { updateLanguageSkill } from '../../../auth/updateLanguageSkills'\nimport { AddLeaveSettings } from 'src/app/auth/addLeaveSettings';\nimport { AssignTl } from 'src/app/auth/assignTl';\nimport { IdentityProofs } from '../../../auth/identityProofs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n  endpoint: String = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n  //Get Company List Data\n  getCompanyData(): Observable<any> {\n    try {\n      const parentUserId = localStorage.getItem(\"token\");\n      let apiUrl = `${this.endpoint}/company/company-list/${parentUserId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for get branch list Data\n  getBranchListData(companyParentId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/branch-list/${companyParentId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for get job profile data\n  getJobProfileListData(companyId:String):Observable<any>{\n    try{\n      let api = `${this.endpoint}/company/list-all-job-profiles/${companyId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  //Method for get department list\n  getDepartmentData(branchId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/branch/list-department/${branchId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for get the job profile data\n  getJobProfileData(companyId: String): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/list-all-job-profiles/${companyId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method to Add Employee form Data\n  submitData(data: Employee): Observable<any> {\n    try {\n      data.isActive = true;\n      const parentUserId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/user/add-employee/${parentUserId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n\n    }\n  }\n\n  // Method For Update Employee Profile with basic details\n  updateEmployeeBasicDetails(data:Employee, employeeId:String): Observable<any>{\n    try{\n      const parentUserId = localStorage.getItem('token');\n      let apiUrl = `${this.endpoint}/employee/update-employee-profile/${employeeId}/${parentUserId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch(err){\n      return err;\n    }\n  }\n\n\n  //Create method for manage errors when request and return response from the server\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      //Handle client side error\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      }\n      //Handle server side error\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for submit address\n  submitAddress(data:Address,employeeId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/employee/add-employee-address/${employeeId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  /**add employe bank details */\n  employBank(data:BankDetails,employeeId:String):Observable<any>{\n    try{\n      let apiUrl =`${this.endpoint}/employee/add-employee-bank-details/${employeeId}`;\n      return this.http.post(apiUrl,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  /** add work experience  */\n  experiAdd(data:AddExprience,employeeId:String):Observable<any>{\n  try{\n    let apiUrl =`${this.endpoint}/employee/add-employee-work-experiences/${employeeId}`;\n    return this.http.post(apiUrl,data).pipe(\n      catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n  }\n\n  /** add family members of employee */\n  addFamilyMember(data:AddFamily,employeeId:String):Observable<any>{\n    try{\n      let apiUrl = `${this.endpoint}/employee/add-employee-family/${employeeId}`;\n      return this.http.post(apiUrl,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n\n//Method for submit educational details\nsubmitEducationalData(data:Educational,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-employee-educational-details/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n}\n\n//Method for submit employee bio details\nsubmitBioData(data:EmployeeBio,employeeId:String):Observable<any>{\n    try{\n      let api = `${this.endpoint}/employee/add-employee-bio/${employeeId}`;\n      return this.http.post( api, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }\n  catch(err){\n    console.log(err.message);\n  }\n}\n\n// Update the Employee Bio Profile\nupdateBio(data:EmployeeBio,employeeId:String): Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/update-bio/${employeeId}`;\n      return this.http.post( api, data).pipe(\n        catchError(this.errorMgmt)\n      )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n//Method for get employee list\ngetEmployeeList(status):Observable<any>{\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let api =`${this.endpoint}/company/list-employees/${companyId}/${status}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for filter employee list\nfilterEmployeeList(employeeId):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for set Password of employee\nsetPassword(data:Auth,employeeId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/user/employee-set-password/${employeeId}`;\n    return this.http.post(api, data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** List employee address */\noldAddress(employeeId:String):Observable<any> {\n    try{\n      let apiURL = `${this.endpoint}/employee/list-addresses/${employeeId}`;\n      return this.http.get(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch(err){\n        console.log(err.message);\n    }\n}\n\n/** Update address employee*/\nupdateAddess(data:UpdateAddess,employeeId:String,addressId:String):Observable<any> {\n    try{\n      let api = `${this.endpoint}/employee/update-address/${employeeId}/${addressId}`;\n      return this.http.post(api,data).pipe(\n        catchError(this.errorMgmt)\n      )\n    }catch(err){\n      console.log(err.message);\n    }\n}\n\n/**Delete employee address */\ndeleteAddress(employeeId:String,addressId:String):Observable<any>{\n    try{\n      let apiURL = `${this.endpoint}/employee/delete-address/${employeeId}/${addressId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err){\n      console.log(err.message);\n    }\n}\n\n//Method for get employee family-details\ngetFamilyData(employeeId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/list-family-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for remove employee family details\nremoveFamilyDetails(employeeId:String,familyId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-family-detail/${employeeId}/${familyId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n//Method for update employee family details\nupdateFamilyDetails(data:AddFamily, employeeId:String,familyId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/update-family-details/${employeeId}/${familyId}`;\n    return this.http.post(api, data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** list of education details */\nremoveEducation(employeeId:String,educationId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-educational-detail/${employeeId}/${educationId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\neducationDetails(employeeId:String):Observable<any> {\n  try{\n    let api = `${this.endpoint}/employee/list-educational-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\nupdateEducation(data:UpdateEducation,employeeId:String,educationId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/update-educational-detail/${employeeId}/${educationId}`;\n    return this.http.post(api,data).pipe(\n      catchError(this.errorMgmt))\n    }catch(err){\n      console.log(err.message);\n    }\n}\n\n/**work Exprience start */\nremoveExprience(employeeId:String,workExperienceId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-work-experience/${employeeId}/${workExperienceId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\nworkExprience(employeeId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/list-work-experiences/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err.message);\n  }\n}\n\nupdateWokExprience(data:UpdateExprience,employeeId:String,workExperienceId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/update-work-experiences/${employeeId}/${workExperienceId}`;\n    return this.http.post(api,data).pipe(\n      catchError(this.errorMgmt))\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** Bank details */\nbankDetailsList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-bank-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch (err){\n    console.log(err.message);\n  }\n}\n\n/** submit payroll setting data  */\npayrollDataSubmit(data:PayrollData,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-payroll-setting/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Update Payroll Settings\nupdatePayrollSettings(data:PayrollData,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/update-payroll-setting/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\npayollDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-payroll-settings/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Grade Rule List\ngradeRuleList():Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/company/list-all-grade-rule/${companyId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err)\n  }\n}\n\n/** bio list api configation */\nbioDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-bio/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n/** language skill api configation  */\naddLanguageSkill(data:LanguageSkill,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-employee-language-skills/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\nupdateLanguageSkill(data:updateLanguageSkill,employeeId:String,languageId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/update-language-skill/${employeeId}/${languageId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\n\n\nLanguageSkill(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-language-skills/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\n\nemployeeList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-details/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Employee Leave Settings Details\n\nleaveEmployeeDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-leave-settings/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Add Leave Settings\n\naddLeaveSettings(data: AddLeaveSettings,employeeId:String):Observable<any>{\n  try{\n    let userId = localStorage.getItem('token');\n    let apiURL =`${this.endpoint}/employee/add-leave-settings/${employeeId}/${userId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Update Leave Settings\nupdateLeaveSettings(data:AddLeaveSettings, employeeId:String,leaveSettingId:String):Observable<any>{\n  try{\n    console.log(data);\n    let userId = localStorage.getItem('token');\n    let apiURL =`${this.endpoint}/employee/update-leave-settings/${leaveSettingId}/${employeeId}/${userId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Employee Id Proofs List Details\nemployeeIdProofsDataList(employeeId:String):Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/list-identity-proofs/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n// Add Employee Identity Proofs  Details\n\naddEmployeeIdProofs(data:IdentityProofs,employeeId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/employee/add-employee-identity-proofs/${employeeId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n// Update Id Proofs Settings\nupdateIdProofsSettings(data:IdentityProofs, employeeId:String,proofId:String):Observable<any>{\n  try{\n\n    let apiURL =`${this.endpoint}/employee/update-identity-proofs/${employeeId}/${proofId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n//Method for Delete employee Id Proofs details\nremoveIdProofsDetails(employeeId:String,proofId:String):Observable<any>{\n  try{\n    let api = `${this.endpoint}/employee/delete-identity-proof/${employeeId}/${proofId}`;\n    return this.http.delete(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err.message);\n  }\n}\n\n\n// Get company TL/Manager List\ngetTlList():Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/company/get-tl-list/${companyId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err)\n  }\n}\n\n// Assign Tl to Employee\nassignTl(data: AssignTl, userId): Observable<any>{\n  try{\n    let apiURL =`${this.endpoint}/user/assign-parentId/${userId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Employee TL List\nemployeeTlList(employeeId): Observable<any>{\n  try{\n    let api =`${this.endpoint}/employee/parent-child-ids/${employeeId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Unassign TL/Manager\nunassignTl(userId, parentUserId): Observable<any>{\n  try{\n    let api =`${this.endpoint}/user/unassign-parentId/${userId}/${parentUserId}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// update employee status\nupdateEmployeeStatus(employeeId,status): Observable<any>{\n  try{\n    let api =`${this.endpoint}/company/employee-status/${employeeId}/${status}`;\n    return this.http.get(api).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get Employee Documnet which is not yet uploaded\nuploadedDocuments(employeeId): Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/employee/uploaded-documnets/${employeeId}/${companyId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  } catch(err){\n    console.log(err);\n  }\n}\n\n// Upload Employee Documents\nuploadDocuments(data,documentTypeId,employeeId,type): Observable<any>{\n  try{\n      const formData = new FormData();\n      formData.append('document',data.get('document').value);\n      let userId = localStorage.getItem('token');\n      let companyId = sessionStorage.getItem('companyId')\n      let apiUrl = `${this.endpoint}/user/upload-documents/${userId}/${documentTypeId}/${employeeId}/${type}/${companyId}`;\n      return this.http.post<any>(apiUrl, formData).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get uploaded document by employee\nemployeeDocumentList(employeeId): Observable<any>{\n  try{\n    let api =`${this.endpoint}/user/list-documents/${employeeId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Delete Employee Document\ndeleteEmployeeDocument(documentTypeId,employeeId): Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/user/remove-documnets/${documentTypeId}/${employeeId}`;\n      return this.http.delete(apiURL).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Get employee count\nemployeeCount(): Observable<any>{\n  try{\n    let companyId = sessionStorage.getItem('companyId');\n    let api =`${this.endpoint}/company/employee-count/${companyId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n// Is Admin\nisAdmin():Observable<any>{\n  try {\n    let userId = localStorage.getItem('token');\n    let api =`${this.endpoint}/user/is-admin/${userId}`;\n      return this.http.get(api).pipe(\n        catchError(this.errorMgmt)\n      )\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n}"]}