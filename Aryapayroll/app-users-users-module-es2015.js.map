{"version":3,"sources":["./src/app/users/reset-password/reset-password.component.ts","./src/app/users/reset-password/reset-password.component.html","./src/app/users/login/login.component.ts","./src/app/users/login/login.component.html","./src/app/users/users-routing.module.ts","./src/app/users/register/register.component.ts","./src/app/users/register/register.component.html","./src/app/users/forgot-password/forgot-password.component.ts","./src/app/users/forgot-password/forgot-password.component.html","./src/app/users/users.component.ts","./src/app/users/users.component.html","./src/app/users/generate-password/generate-password.component.ts","./src/app/users/generate-password/generate-password.component.html","./src/app/users/users.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACuB;AAGf;;;;;;;ICI5D,wEACE;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACnC,4DAAI;;;IADM,0DAAgB;IAAhB,kFAAgB;;;IAK1B,wEACE;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACnC,4DAAI;;;IADM,0DAAgB;IAAhB,kFAAgB;;;IASpB,0EAGE;IAAA,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,iGACF;;;IALF,sEACE;IAAA,0HAGE;IAEJ,4DAAM;;;;IAJF,0DAA6J;IAA7J,+OAA6J;;;IAU/J,0EAGE;IAAA,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,iGACF;;;IALF,sEACE;IAAA,0HAGE;IAEJ,4DAAM;;;;IAJF,0DAAiM;IAAjM,mRAAiM;;ADzBxM,MAAM,sBAAsB;IASjC,YAAoB,KAAqB,EAAU,UAAsB,EAAS,EAAe,EAAU,MAAc,EAAU,MAAc;QAA7H,UAAK,GAAL,KAAK,CAAgB;QAAU,eAAU,GAAV,UAAU,CAAY;QAAS,OAAE,GAAF,EAAE,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QALjJ,iBAAY,GAAY,IAAI,CAAC;QAE7B,gBAAW,GAAW,KAAK,CAAC;QAuD5B,yCAAyC;QACzC,2BAAsB,GAAG;YACvB,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC7E,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,mDAAmD,EAAE;gBACnF,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,wGAAwG,EAAE;aACvI;YACD,sBAAsB,EAAE;gBACtB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,8BAA8B,EAAE;gBAC7D,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,wBAAwB,EAAE;aACvD;SACF;IAhEoJ,CAAC;IAEtJ,QAAQ;QACN,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;IAGD,mBAAmB;QACjB,IAAI;YACF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;gBACrC,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;oBAC/C,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;oBACxB,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,gEAAgE,CAAC,CAAC,iEAAiE;iBACvJ,CAAC,CAAC;gBACH,oBAAoB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;oBAC3D,yDAAU,CAAC,QAAQ;oBACnB,+EAAe,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;iBACnD,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;IAED,aAAa;QACX,IAAI;YACF,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC3G,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;wBACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;wBACzB,UAAU,CAAC,GAAG,EAAE;4BACd,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;wBACnE,CAAC,EAAE,IAAI,CAAC;qBACT;yBAAM,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;wBACzD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;wBAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;qBAChC;gBACH,CAAC,CAAC;aACH;SACF;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IAEH,CAAC;;4FA3DU,sBAAsB;sGAAtB,sBAAsB;QCXnC,oEACA;QAAA,wEAA+C;QAAA,oEAAG;QAAA,kEAAO;QAAA,4DAAI;QAAA,4DAAK;QAClE,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,wEAAuB;QAAA,yEAAc;QAAA,4DAAK;QAC5C,4DAAM;QACN,yEACE;QAAA,gHACE;QAEJ,4DAAM;QAEN,0EACE;QAAA,gHACE;QAEJ,4DAAM;QACN,uEACE;QAAA,2EACE;QADqC,mJAAY,mBAAe,IAAC;QACjE,2EACE;QAAA,6EAAsC;QAAA,qEAAG;QAAA,qEAAS;QAAA,4DAAI;QAAA,4DAAQ;QAC9D,wEACA;QAAA,qHACE;QAMJ,4DAAM;QACN,2EACE;QAAA,6EAAsC;QAAA,qEAAG;QAAA,6EAAiB;QAAA,4DAAI;QAAA,4DAAQ;QACtE,wEACA;QAAA,qHACE;QAMJ,4DAAM;QACN,2EACE;QAAA,2EACE;QAAA,8EAAoF;QAAA,kEAAM;QAAA,4DAAS;QACrG,4DAAM;QACR,4DAAM;QACR,4DAAO;QACT,4DAAM;QACR,4DAAM;QACR,4DAAM;;QA1C8B,2DAAqB;QAArB,mFAAqB;QAMpB,0DAAmB;QAAnB,iFAAmB;QAK3C,0DAA+B;QAA/B,4FAA+B;QAI7B,0DAA0D;QAA1D,wGAA0D;QAW1D,0DAAsE;QAAtE,oHAAsE;QAUnD,0DAAqC;QAArC,kGAAqC;;6FDjC1D,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACuB;;;;;;;;ICQ3E,wEACE;IAAA,yEAAQ;IAAA,uDAAwB;IAAA,4DAAS;IAC3C,4DAAI;;;IADM,0DAAwB;IAAxB,0FAAwB;;;IAKlC,wEACE;IAAA,yEAAQ;IAAA,uDAAoB;IAAA,4DAAS;IACvC,4DAAI;;;IADM,0DAAoB;IAApB,sFAAoB;;;IAUxB,0EAGE;IAAA,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,iGACF;;;IALF,sEACE;IAAA,kHAGE;IAEJ,4DAAM;;;;IAJF,0DAA4H;IAA5H,8MAA4H;;;IAgB9H,0EAGE;IAAA,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,iGACF;;;IALF,sEACE;IAAA,kHAGE;IAEJ,4DAAM;;;;IAJF,0DAAqI;IAArI,uNAAqI;;ADjC5I,MAAM,cAAc;IAezB,YAAoB,GAAe,EACzB,EAAe,EACd,MAAc,EACd,MAAc,EACd,aAAyB,EACzB,IAAsB;QALb,QAAG,GAAH,GAAG,CAAY;QACzB,OAAE,GAAF,EAAE,CAAa;QACd,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAQ;QACd,kBAAa,GAAb,aAAa,CAAY;QACzB,SAAI,GAAJ,IAAI,CAAkB;QAjBjC,SAAI,GAAY,KAAK,CAAC;QAGtB,cAAS,GAAY,KAAK,CAAC;QAE3B,eAAU,GAAY,KAAK,CAAC;QAC5B,cAAS,GAAY,KAAK,CAAC;QAkF3B,yCAAyC;QACzC,2BAAsB,GAAG;YACvB,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;aACnD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;aACtD;SACF;IA9EM,CAAC;IAVR,QAAQ;QACN,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAUD,8BAA8B;IAC9B,SAAS;QACP,IAAI;YACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;gBAC7B,KAAK,EAAC,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;gBAChD,QAAQ,EAAC,IAAI,0DAAW,CAAC,IAAI,EAAC,yDAAU,CAAC,QAAQ,CAAC;aACnD,CAAC;SACH;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC1B;IACH,CAAC;IAED,sDAAsD;IACtD,KAAK;QACH,IAAI;YACF,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;gBACxB,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC5D,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAG,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;wBACjD,YAAY,CAAC,OAAO,CAAC,OAAO,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;wBACpE,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC;wBACnC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;wBAClB,IAAI,CAAC,cAAc,EAAE,CAAC;wBACtB,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;4BACvD,IAAG,IAAI,CAAC,MAAM,KAAK,SAAS,EAAC;gCAC3B,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC;6BAC1C;wBACH,CAAC,CAAC;qBACL;yBAAM,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;wBACzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;wBACjB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC;wBACvC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;wBACvB,UAAU,CAAC,GAAG,EAAE;4BACd,IAAI,CAAC,YAAY,EAAE,CAAC;wBACtB,CAAC,EAAE,IAAI,CAAC,CAAC;qBACV;gBACH,CAAC,CAAC,CAAC;aACJ;SACF;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC1B;IACH,CAAC;IAED,cAAc;QACb,IAAG;YACF,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,EAAC,EAAE;gBACvC,IAAG,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAC;oBAClD,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;wBAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC,CAAC;wBAC9E,cAAc,CAAC,OAAO,CAAC,WAAW,EAAC,SAAS,CAAC,CAAC;qBAC/C;yBAAM;wBACL,cAAc,CAAC,OAAO,CAAC,WAAW,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;wBACxD,YAAY,CAAC,OAAO,CAAC,WAAW,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;wBACrD,UAAU,CAAC,GAAG,EAAE;4BACd,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC,CAAC;wBACpF,CAAC,EAAE,GAAG,CAAC;qBACR;iBACF;YACH,CAAC,CAAC;SACF;QACD,OAAM,GAAG,EAAC;YACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC1B;IACF,CAAC;IAYD,YAAY;QACV,IAAI;YACF,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAC7B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACnB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACpB;IACH,CAAC;;4EA9GU,cAAc;8FAAd,cAAc;QCX3B,oEACA;QAAA,wEAA+C;QAAA,oEAAG;QAAA,kEAAO;QAAA,4DAAI;QAAA,4DAAK;QAClE,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,wEAAuB;QAAA,gEAAK;QAAA,4DAAK;QACnC,4DAAM;QAEN,yEACE;QAAA,wGACE;QAEJ,4DAAM;QAEN,0EACE;QAAA,wGACE;QAEJ,4DAAM;QACN,2EACE;QADgE,2IAAY,WAAO,IAAC;QACpF,2EACE;QAAA,6EAAsC;QAAA,qEAAG;QAAA,kEAAM;QAAA,4DAAI;QAAA,4DAAQ;QAC3D,0EACE;QAAA,wEAEA;QAAA,6GACE;QAOJ,4DAAM;QACR,4DAAM;QACN,2EACE;QAAA,6EAAsC;QAAA,qEAAG;QAAA,qEAAS;QAAA,4DAAI;QAAA,4DAAQ;QAC9D,0EACE;QAAA,wEAGA;QACA,6GACE;QAMF,yEAC4B;QAAA,4EAAgB;QAAA,4DAAI;QAClD,4DAAM;QAER,4DAAM;QACN,2EACE;QAAA,2EACE;QAAA,8EAA6E;QAAA,iEAAK;QAAA,4DAAS;QAC7F,4DAAM;QACR,4DAAM;QAEN,2EACE;QAAA,2EACE;QAAA,2EAAS;QAAA,2FAA+B;QAAA,yEACV;QAAA,oEAAQ;QAAA,4DAAI;QAAA,4DAAU;QACtD,4DAAM;QACR,4DAAM;QACR,4DAAO;QACT,4DAAM;QACR,4DAAM;;QA3D8B,2DAAY;QAAZ,0EAAY;QAMX,0DAAiB;QAAjB,+EAAiB;QAIR,0DAAuB;QAAvB,oFAAuB;QAMtD,0DAAuD;QAAvD,qGAAuD;QAiBvD,0DAA0D;QAA1D,wGAA0D;QAcjB,0DAA8B;QAA9B,2FAA8B;;6FD7CzE,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACL;AACQ;AACJ;AACM;AACS;AAC0B;AACN;AACH;;;AAEnF,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAC,EAAE;QACP,SAAS,EAAG,+DAAc;QAC1B,QAAQ,EAAE;YACV;gBACE,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,qEAAc;aAC1B;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,8EAAiB;aAC7B;YACD;gBACE,IAAI,EAAE,0BAA0B;gBAChC,SAAS,EAAC,wGAAyB;aACpC;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,kGAAuB;aACnC;YACD;gBACE,IAAI,EAAC,uBAAuB;gBAC5B,SAAS,EAAE,+FAAsB;aAClC;YACD;gBACE,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,OAAO;gBACnB,SAAS,EAAC,MAAM;aACjB;SACA;KACF;CACF,CAAC;AASK,MAAM,kBAAkB;;iGAAlB,kBAAkB;8JAAlB,kBAAkB,kBALpB;YACP,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9B;mIAEU,kBAAkB,cAJ3B,4DAAY;6FAIH,kBAAkB;cAP9B,sDAAQ;eAAC;gBACR,YAAY,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,4DAAY;oBACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;iBAC9B;aACF;;;;;;;;;;;;;;AClDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAEuB;;;;;;;;ICe3E,wEACE;IAAA,yEAAQ;IAAA,uDAAoB;IAAA,4DAAS;IACvC,4DAAI;;;IADM,0DAAoB;IAApB,sFAAoB;;;IAK9B,wEACE;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACnC,4DAAI;;;IADM,0DAAgB;IAAhB,kFAAgB;;;IAYpB,0EAGE;IAAA,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,iGACF;;;IALF,sEACE;IAAA,qHAGE;IAEJ,4DAAM;;;;IAJF,0DAAqI;IAArI,uNAAqI;;AD1B5I,MAAM,iBAAiB;IAY5B,YAAoB,GAAe,EAAS,EAAe,EAAU,MAAc,EACxE,MAAc,EACd,OAA0B;QAFjB,QAAG,GAAH,GAAG,CAAY;QAAS,OAAE,GAAF,EAAE,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QACxE,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAmB;QAXrC,eAAU,GAAY,IAAI,CAAC;QAE3B,gBAAW,GAAW,IAAI,CAAC;QA6D3B,wCAAwC;QACxC,2BAAsB,GAAG;YACvB,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE;aACpD;SAEF;IA3DwC,CAAC;IAN1C,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAMD,8BAA8B;IAC9B,UAAU;QACR,IAAI;YACF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;gBAChC,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC;oBAC9C,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;iBACtE,CAAC,CAAC;aACJ,CAAC;SACH;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;IAED,sDAAsD;IACtD,QAAQ;QACN,IAAI;YACF,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,uCAAuC;YACvC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAChE,wCAAwC;gBACxC,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;oBAClD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;oBACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;oBACpB,UAAU,CAAC,GAAG,EAAE;wBACd,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,CAAC,EAAE,IAAI,CAAC,CAAC;iBACV;gBACD,0CAA0C;qBACrC,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;oBACzD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;oBACzB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC;oBACnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;oBACpB,UAAU,CAAC,GAAE,EAAE;wBACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjE,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,CAAC,EAAC,KAAK,CAAC;iBACT;YACH,CAAC,CAAC,CAAC;SACJ;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IAEH,CAAC;IAWD,YAAY;QACV,IAAI;YACF,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;SAC1B;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACpB;IACH,CAAC;;kFApFU,iBAAiB;iGAAjB,iBAAiB;QCX9B,iFAMA;QAAA,uEAAyC;QAAA,qEAAU;QAAA,4DAAI;QACvD,4DAAc;QACd,oEACA;QAAA,wEAA+C;QAAA,oEAAG;QAAA,kEAAO;QAAA,4DAAI;QAAA,4DAAK;QAClE,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,yEAAuB;QAAA,oEAAQ;QAAA,4DAAK;QACtC,4DAAM;QAEN,0EACE;QAAA,2GACE;QAEJ,4DAAM;QAEN,0EACE;QAAA,4GACE;QAEJ,4DAAM;QAGN,4EACE;QADmE,8IAAY,cAAU,IAAC;QAC1F,2EACE;QAAA,6EAAuD;QAAA,qEAAG;QAAA,8EAAkB;QAAA,4DAAI;QAAA,4DAAQ;QACxF,0EACE;QAAA,wEAEA;QAAA,gHACE;QAOJ,4DAAM;QACR,4DAAM;QACN,2EACE;QAAA,2EACE;QAAA,8EAC0B;QAAA,oEAAQ;QAAA,4DAAS;QAC7C,4DAAM;QACR,4DAAM;QAEN,2EACE;QAAA,2EACE;QAAA,2EAAS;QAAA,0FAA8B;QAAA,yEAA2C;QAAA,iEAAK;QAAA,4DAAI;QAAA,4DAAU;QACvG,4DAAM;QACR,4DAAM;QACR,4DAAO;QACT,4DAAM;QACR,4DAAM;;QA1C+B,2DAAoB;QAApB,kFAAoB;QAMrB,0DAAmB;QAAnB,iFAAmB;QAMT,0DAA0B;QAA1B,uFAA0B;QAMzD,0DAAuD;QAAvD,qGAAuD;QAYtC,0DAA0D;QAA1D,2HAA0D;;6FDpC7E,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAEuB;;;;;;;;ICcrE,wEACI;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACrC,4DAAI;;;IADQ,0DAAgB;IAAhB,kFAAgB;;;IAI5B,wEACI;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACrC,4DAAI;;;IADQ,0DAAgB;IAAhB,kFAAgB;;;IAWhB,0EAEI;IAAA,uDACJ;IAAA,4DAAM;;;IADF,0DACJ;IADI,iGACJ;;;IAJJ,sEACI;IAAA,2HAEI;IAER,4DAAM;;;;IAJG,0DAA2I;IAA3I,6NAA2I;;ADtBjK,MAAM,uBAAuB;IAQlC,YAAoB,GAAe,EAAS,EAAe,EACjD,MAAc,EACd,MAAc,EACd,OAA0B;QAHhB,QAAG,GAAH,GAAG,CAAY;QAAS,OAAE,GAAF,EAAE,CAAa;QACjD,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAQ;QACd,YAAO,GAAP,OAAO,CAAmB;QANpC,eAAU,GAAY,IAAI,CAAC;QAC3B,SAAI,GAAY,KAAK,CAAC;QA0DtB,yCAAyC;QACzC,2BAAsB,GAAG;YACvB,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE;aACpD;SAEF;IA5DuC,CAAC;IAEzC,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAGD,8BAA8B;IAC9B,WAAW;QACT,IAAI;YACF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;gBAClC,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC;oBAC9C,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;iBAEtE,CAAC,CAAC;aACJ,CAAC;SACH;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;IAED,cAAc;QACZ,IAAI;YACF,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC9E,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;oBAClD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;oBACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC/B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;oBAClB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;oBACpB,UAAU,CAAC,GAAG,EAAE;wBACd,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,CAAC,EAAE,IAAI,CAAC,CAAC;iBACV;qBACI,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;oBACxD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;oBACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;oBACpB,UAAU,CAAC,GAAG,EAAE;wBACd,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;wBACjE,IAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,CAAC,EAAE,IAAI,CAAC;iBACT;YACH,CAAC,CAAC;SACH;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IACH,CAAC;IAWD,YAAY;QACV,IAAI;YACF,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;SACtB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACpB;IACD,CAAC;;8FAlFQ,uBAAuB;uGAAvB,uBAAuB;QCXpC,iFAMA;QAAA,uEAAyC;QAAA,qEAAU;QAAA,4DAAI;QACvD,4DAAc;QACd,oEACA;QAAA,wEAA+C;QAAA,oEAAG;QAAA,kEAAO;QAAA,4DAAI;QAAA,4DAAK;QAClE,yEACI;QAAA,yEACI;QAAA,yEACI;QAAA,yEAAuB;QAAA,2EAAe;QAAA,4DAAK;QAC/C,4DAAM;QACN,0EACI;QAAA,iHACI;QAER,4DAAM;QACN,0EACI;QAAA,kHACI;QAER,4DAAM;QAEN,4EACI;QADmE,oJAAY,oBAAgB,IAAC;QAChG,2EACI;QAAA,6EAAuD;QAAA,qEAAG;QAAA,mEAAO;QAAA,4DAAI;QAAA,4DAAQ;QAC7E,0EACI;QAAA,wEAEA;QAAA,sHACI;QAKR,4DAAM;QACV,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,8EAC4B;QAAA,kEAAM;QAAA,4DAAS;QAC/C,4DAAM;QACV,4DAAM;QAEN,2EACI;QAAA,2EACI;QAAA,2EAAS;QAAA,0EAAc;QAAA,yEAA2C;QAAA,iEAAK;QAAA,4DAAI;QAC3E,4DAAU;QACd,4DAAM;QACV,4DAAM;QACV,4DAAO;QACX,4DAAM;QACV,4DAAM;;QAvCqC,2DAAY;QAAZ,0EAAY;QAKb,0DAAmB;QAAnB,iFAAmB;QAKX,0DAA4B;QAA5B,yFAA4B;QAMrD,0DAAuD;QAAvD,qGAAuD;QAUtC,0DAA8D;QAA9D,+HAA8D;;6FD/B3F,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,cAAc;IAEzB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;4EALU,cAAc;8FAAd,cAAc;QCP3B,2EAA+B;;6FDOlB,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAEuB;AAEc;;;;;;;ICIzF,wEACI;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACnC,4DAAI;;;IADM,0DAAgB;IAAhB,kFAAgB;;;IAI5B,wEACI;IAAA,yEAAQ;IAAA,uDAAgB;IAAA,4DAAS;IACnC,4DAAI;;;IADM,0DAAgB;IAAhB,kFAAgB;;;IAS1B,0EAGE;IAAA,uDACL;IAAA,4DAAM;;;IADD,0DACL;IADK,iGACL;;;IALC,sEACE;IAAA,6HAGE;IAEL,4DAAM;;;;IAJD,0DAAuJ;IAAvJ,yOAAuJ;;;IAUzJ,0EAGE;IAAA,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,iGACF;;;IALF,sEACE;IAAA,6HAGE;IAEJ,4DAAM;;;;IAJF,0DAA2L;IAA3L,6QAA2L;;ADxB9L,MAAM,yBAAyB;IASpC,YAAoB,KAAqB,EAAU,UAAsB,EAAS,EAAe,EAAU,MAAc,EAAU,MAAc;QAA7H,UAAK,GAAL,KAAK,CAAgB;QAAU,eAAU,GAAV,UAAU,CAAY;QAAS,OAAE,GAAF,EAAE,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAQ;QALjJ,iBAAY,GAAY,IAAI,CAAC;QAE7B,gBAAW,GAAY,KAAK,CAAC;QAqD7B,yCAAyC;QACzC,2BAAsB,GAAG;YACvB,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC7E,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,0CAA0C,EAAE;gBAC1E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,wGAAwG,EAAE;aACvI;YACD,sBAAsB,EAAE;gBACtB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,8BAA8B,EAAE;gBAC7D,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,oBAAoB,EAAE;aACnD;SACF;IA9DoJ,CAAC;IAEtJ,QAAQ;QACN,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/D,kFAAkB,CAAC,GAAG,CAAC,EAAE,mBAAmB,EAAE,EAAE,SAAS,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACnC,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,gEAAgE,CAAC;aACrF,CAAC,CAAC;YACH,oBAAoB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC3D,yDAAU,CAAC,QAAQ;gBACnB,+EAAe,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;aACnD,CAAC,CAAC;SACJ,CAAC,CAAC;IACL,CAAC;IAED,WAAW;QACT,IAAI;YACF,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;gBAC9B,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;oBACpG,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;wBACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;wBACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;wBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;wBACzB,UAAU,CAAC,GAAG,EAAE;4BACd,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC;wBACnE,CAAC,EAAE,IAAI,CAAC;qBACT;yBAAM,IAAI,IAAI,CAAC,MAAM,IAAI,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,GAAG,EAAE;wBACxD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;wBAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;wBAC/B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;qBAC1B;gBACH,CAAC,CAAC;aACH;SACF;QACD,OAAO,GAAG,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClB;IAEH,CAAC;;kGAvDU,yBAAyB;yGAAzB,yBAAyB;QCXtC,oEACA;QAAA,wEAA+C;QAAA,oEAAG;QAAA,kEAAO;QAAA,4DAAI;QAAA,4DAAK;QAClE,yEACE;QAAA,yEACE;QAAA,yEACE;QAAA,wEAAuB;QAAA,uEAAY;QAAA,4DAAK;QAC1C,4DAAM;QACN,yEACE;QAAA,mHACI;QAEN,4DAAM;QACN,0EACE;QAAA,mHACI;QAEN,4DAAM;QACV,uEACE;QAAA,2EACE;QADmC,sJAAY,iBAAa,IAAC;QAC7D,2EACE;QAAA,6EAAsC;QAAA,qEAAG;QAAA,qEAAS;QAAA,4DAAI;QAAA,4DAAQ;QAC9D,wEACA;QAAA,wHACE;QAMJ,4DAAM;QACN,2EACE;QAAA,6EAAsC;QAAA,qEAAG;QAAA,6EAAiB;QAAA,4DAAI;QAAA,4DAAQ;QACtE,wEACA;QAAA,wHACE;QAMJ,4DAAM;QACN,2EACI;QAAA,2EACE;QAAA,8EACoE;QAAA,2EAC1D;QAAA,4DAAS;QACrB,4DAAM;QACR,4DAAM;QACV,4DAAO;QACP,4DAAM;QACN,4DAAM;QACN,4DAAM;;QA3C4B,2DAAqB;QAArB,mFAAqB;QAKpB,0DAAmB;QAAnB,iFAAmB;QAK/C,0DAA6B;QAA7B,0FAA6B;QAI3B,0DAA0D;QAA1D,wGAA0D;QAW1D,0DAAsE;QAAtE,oHAAsE;QAWrE,0DAAgE;QAAhE,iIAAgE;;6FDjC/D,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,oCAAoC,CAAC;aAClD;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AACa;AACH;AACN;AACe;AACb;AACN;AAC6C;AACN;AACH;AACpC;;AAcxC,MAAM,WAAW;;0FAAX,WAAW;gJAAX,WAAW,kBATb;YACP,4DAAY;YACZ,wEAAkB;YAClB,kEAAmB;YACnB,4DAAY;YACZ,6DAAgB;SAEjB;mIAEU,WAAW,mBAVP,qEAAc,EAAE,+DAAc,EAAE,8EAAiB,EAAE,wGAAyB,EAAE,kGAAuB,EAAE,gGAAsB,aAE1I,4DAAY;QACZ,wEAAkB;QAClB,kEAAmB;QACnB,4DAAY;QACZ,6DAAgB;6FAIP,WAAW;cAXvB,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,qEAAc,EAAE,+DAAc,EAAE,8EAAiB,EAAE,wGAAyB,EAAE,kGAAuB,EAAE,gGAAsB,CAAC;gBAC7I,OAAO,EAAE;oBACP,4DAAY;oBACZ,wEAAkB;oBAClB,kEAAmB;oBACnB,4DAAY;oBACZ,6DAAgB;iBAEjB;aACF","file":"app-users-users-module-es2015.js","sourcesContent":["import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ApiService } from 'src/app/services/api.service';\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetPasswordForm: FormGroup;\n  snapshotParam: string;\n  passwordFlag: boolean = true;\n  errMessage: string;\n  successFlag:Boolean = false;\n  successMsg:string;\n\n  constructor(private route: ActivatedRoute, private apiService: ApiService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {    //Calling validation method\n    this.submitResetPassword();\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"token\");\n  }\n\n\n  submitResetPassword() { //create method for validation\n    try {\n      this.resetPasswordForm = this.fb.group({\n        password: new FormControl('', Validators.compose([\n          Validators.minLength(8),\n          Validators.maxLength(12),\n          Validators.required,\n          Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/) //this is for the letters both uppercase & lowercase and numbers.\n        ])),\n        passwordConfirmation: new FormControl('', Validators.compose([\n          Validators.required,\n          RxwebValidators.compare({ fieldName: 'password' })\n        ]))\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  resetPassword() {  //Create method for submit form value and calling API.\n    try {\n      if (this.resetPasswordForm.valid) {\n        this.apiService.submitResetPasswordData(this.resetPasswordForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = true;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            }, 1000)\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.passwordFlag = false;\n            this.errMessage = data.message;\n          }\n        })\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: `Password must be at least 8 characters long` },\n      { type: 'maxlength', message: `Password should not be greater than 12 characters` },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Passwords do not match' },\n    ],\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\">Reset Password</h2>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!passwordFlag\">\n        <strong>{{ errMessage }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n        <strong>{{ successMsg }}</strong>\n      </p>\n    </div>\n    <div>\n      <form  [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword()\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n          <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\" />\n          <div *ngFor=\"let validation of validationErrorMessage.password\">\n            <div\n              *ngIf=\"resetPasswordForm.get('password').hasError(validation.type) && (resetPasswordForm.get('password').dirty || resetPasswordForm.get('password').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-sm-8 control-label\"><b>Confirm Password:</b></label>\n          <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\" class=\"form-control\" />\n          <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n            <div\n              *ngIf=\"resetPasswordForm.get('passwordConfirmation').hasError(validation.type) && (resetPasswordForm.get('passwordConfirmation').dirty || resetPasswordForm.get('passwordConfirmation').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" [disabled]=\"!resetPasswordForm.valid\" class=\"btn btn-success\">Submit</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { Router } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  flag: boolean = false;\n  errorMessageServer: String;\n  successMessage: String;\n  loginFlag: boolean = false;\n  successMsg: String;\n  adminLogin: boolean = false;\n  userLogin: boolean = false;\n\n  ngOnInit() {    //Calling validation method\n    this.loginData();\n  }\n\n  constructor(private api: ApiService,\n     public fb: FormBuilder,\n     private ngZone: NgZone,\n     private router: Router,\n     private permissionAPI: ApiService,\n     private util: UtilitiesService\n     ) { }\n\n  //create method for validation\n  loginData() {\n    try {\n      this.loginForm = this.fb.group({\n        email:new FormControl(null, Validators.required),\n        password:new FormControl(null,Validators.required),\n      })\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Create method for submit form value and calling API.\n  login() {\n    try {\n      if (this.loginForm.valid) {\n        this.api.submitLogin(this.loginForm.value).subscribe((data) => {\n          if (data.status === \"success\"|| data.status === 200) {\n              localStorage.setItem('myVal',JSON.stringify(data.user.local.email));\n              localStorage.setItem(\"token\", data.user._id);\n              this.loginFlag = true;\n              this.successMessage = data.message;\n              this.flag = false;\n              this.getCompanyList();\n              this.permissionAPI.permissionDetails().subscribe((data)=>{\n                if(data.status === 'success'){\n                  this.util.permissionRoleInfo = data.data;\n                }\n              })\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.flag = true;\n            this.errorMessageServer = data.message;\n            this.loginFlag = false;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 4000);\n          }\n        });\n      }\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  getCompanyList(){\n   try{\n    this.api.getListData().subscribe((data)=>{\n      if(data.status === \"success\" || data.status === 200){\n        if (data.company.length === 0) {\n         this.ngZone.run(() => this.router.navigateByUrl('/pages/company/add-company'));\n          sessionStorage.setItem('companyId',undefined);\n        } else {\n          sessionStorage.setItem(\"companyId\",data.company[0]._id);\n          localStorage.setItem('companyId',data.company[0]._id)\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/pages/dashboard/company-list'));\n          }, 500)\n        }\n      }\n    })\n   }\n   catch(err){\n     console.log(err.message);\n   }\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n    ],\n  }\n\n  handleErrors(){\n    try {\n      this.loginFlag = false;\n      this.successMessage = '';\n      this.errorMessageServer = '';\n      this.flag = false;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h1 class=\"card-title\">Login</h1>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"flag\">\n        <strong>{{ errorMessageServer }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"loginFlag\">\n        <strong>{{ successMessage }}</strong>\n      </p>\n    </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" novalidate>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Email:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Email\"\n            formControlName=\"email\">\n          <div *ngFor=\"let validation of validationErrorMessage.email\">\n            <div style=\"color: red;margin-left: 14px;\"\n              *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"password\" id=\"inputPassword\" placeholder=\"Enter Your Password\"\n            formControlName=\"password\">\n\n          <!-- Check for password validation -->\n          <div *ngFor=\"let validation of validationErrorMessage.password\">\n            <div\n              *ngIf=\"loginForm.get('password').hasError(validation.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n          <a class=\"text-link\" id=\"forgot\" routerLink=\"../forgot-password\"\n            routerLinkActive=\"active\">Forgot-Password?</a>\n        </div>\n\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"loginForm.invalid\">Login</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <section>Already have an account? &nbsp;<a class=\"text-link\" routerLink=\"../register\"\n              routerLinkAcitve=\"active\">REGISTER</a></section>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { NgModule, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { UsersComponent } from './users.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { GeneratePasswordComponent } from './generate-password/generate-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes : Routes= [\n  {\n    path:'',\n    component : UsersComponent,\n    children: [\n    {\n      path: 'login',\n      component: LoginComponent,\n    },\n    {\n      path: 'register',\n      component: RegisterComponent,\n    },\n    {\n      path: 'generate-password/:token',\n      component:GeneratePasswordComponent,\n    },\n    {\n      path: 'forgot-password',\n      component: ForgotPasswordComponent,\n    },\n    {\n      path:'reset-password/:token',\n      component: ResetPasswordComponent,\n    },\n    {\n      path: '',\n      redirectTo: 'login',\n      pathMatch:'full',\n    }\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class UsersRoutingModule { }\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  signupFlag: boolean = true;\n  errMessage: string;\n  successFlag:boolean = true;\n  successMessage:string;\n\n  ngOnInit() { //Calling validation method\n    this.submitData();\n  }\n\n  constructor(private api: ApiService, public fb: FormBuilder, private ngZone: NgZone,\n     private router: Router,\n     private spinner: NgxSpinnerService) { }\n\n  //Create method for validation\n  submitData() {\n    try {\n      this.registerForm = this.fb.group({\n        email: new FormControl(null, Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n        ])),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Create method for submit input value and calling API\n  register() {\n    try {\n      this.spinner.show();\n      //console.log(this.registerForm.value);\n      this.api.submitSignup(this.registerForm.value).subscribe((data) => {\n        //Manage server status when giving error\n        if (data.status === \"error\" || data.status === 404) {\n          this.signupFlag = false;\n          this.errMessage = data.message;\n          this.successFlag = true;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.handleErrors();\n          }, 5000);\n        }\n        //Manage server status when giving success\n        else if (data.status === \"success\" || data.status === 200) {\n          this.successFlag = false;\n          this.successMessage = data.message;\n          this.signupFlag = true;\n          this.spinner.hide();\n          setTimeout(()=>{\n            this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            this.handleErrors();\n          },10000)\n        }\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //For print validation and error message\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n\n  }\n\n  handleErrors(){\n    try {\n      this.signupFlag = false;\n      this.errMessage = '';\n      this.successFlag = true;\n      this.successMessage = '';\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<ngx-spinner\nbdColor=\"rgba(51,51,51,0.8)\"\nsize=\"medium\"\ncolor=\"#fff\"\ntype=\"ball-scale-ripple-multiple\"\n>\n<p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h1 class=\"card-title\">Register</h1>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"!successFlag\">\n        <strong>{{ successMessage }}</strong>\n      </p>\n    </div>\n\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!signupFlag\">\n        <strong>{{ errMessage }}</strong>\n      </p>\n    </div>\n\n\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n      <div class=\"form-group\">\n        <label for=\"inputEmail\" class=\"col-sm-6 control-label\"><b>Enter Your Email: </b></label>\n        <div class=\"col-sm-offset-2\">\n          <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Email\"\n            formControlName=\"email\">\n          <div *ngFor=\"let validation of validationErrorMessage.email\">\n            <div\n              *ngIf=\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\"\n              style=\"color: red;margin-left: 14px;\">\n              {{ validation.message }}\n            </div>\n          </div>\n\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" [disabled]=\"registerForm.pristine || registerForm.invalid\"\n            class=\"btn btn-success\">Register</button>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <section>Already have an account?&nbsp;<a class=\"text-link\" routerLink=\"../login\">LOGIN</a></section>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ApiService } from 'src/app/services/api.service';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPassForm: FormGroup;\n  errMessage: string;\n  successMsg: string;\n  forgotFlag: boolean = true;\n  flag: boolean = false;\n\n  constructor(private api: ApiService, public fb: FormBuilder,\n    private ngZone: NgZone,\n    private router: Router,\n    private spinner: NgxSpinnerService) { }\n\n  ngOnInit() {\n    this.submitEmail();\n  }\n\n\n  //Create method for validation\n  submitEmail() {\n    try {\n      this.forgotPassForm = this.fb.group({\n        email: new FormControl(null, Validators.compose([\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'),\n\n        ])),\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  forgotPassword() {   //Create method for submit form value and calling API.\n    try {\n      this.spinner.show();\n      this.api.submitForgotPasswordData(this.forgotPassForm.value).subscribe((data) => {\n        if (data.status === \"error\" || data.status === 404) {\n          this.forgotFlag = false;\n          this.errMessage = data.message;\n          this.flag = false;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.handleErrors();\n          }, 5000);\n        }\n        else if (data.status == \"success\" || data.status === 200) {\n          this.flag = true;\n          this.successMsg = data.message;\n          this.forgotFlag = true;\n          this.spinner.hide();\n          setTimeout(() => {\n            this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            this.handleErrors();\n          }, 3000)\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n\n  }\n\n  handleErrors(){\n    try {\n      this.forgotFlag = false;\n      this.errMessage = '';\n      this.flag = false;\n      this.successMsg = '';\n    } catch (error) {\n      console.log(error);\n    }\n    }\n}\n\n","<ngx-spinner\nbdColor=\"rgba(51,51,51,0.8)\"\nsize=\"medium\"\ncolor=\"#fff\"\ntype=\"ball-scale-ripple-multiple\"\n>\n<p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n    <div class=\"card-body\">\n        <div class=\"card-header\">\n            <h2 class=\"card-title\">Forgot-Password</h2>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"flag\">\n                <strong>{{ successMsg }}</strong>\n            </p>\n        </div>\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"!forgotFlag\">\n                <strong>{{ errMessage }}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"forgotPassForm\" (ngSubmit)=\"forgotPassword()\">\n            <div class=\"form-group\">\n                <label for=\"inputEmail\" class=\"col-sm-6 control-label\"><b>Email: </b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"email\" id=\"inputEmail\" placeholder=\"Enter Your Registered Email\"\n                        formControlName=\"email\">\n                    <div *ngFor=\"let validation of validationErrorMessage.email\">\n                        <div *ngIf=\"forgotPassForm.get('email').hasError(validation.type) && (forgotPassForm.get('email').dirty || forgotPassForm.get('email').touched)\"\n                        style=\"color: red;margin-left: 14px;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" [disabled]=\"forgotPassForm.pristine || forgotPassForm.invalid\"\n                        class=\"btn btn-success\">Submit</button>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <section>Go Back?&nbsp;<a class=\"text-link\" routerLink=\"../login\">LOGIN</a>\n                    </section>\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/services/api.service';\nimport { RxwebValidators, ReactiveFormConfig, pattern } from '@rxweb/reactive-form-validators';\n\n@Component({\n  selector: 'app-generate-password',\n  templateUrl: './generate-password.component.html',\n  styleUrls: ['./generate-password.component.scss']\n})\nexport class GeneratePasswordComponent implements OnInit {\n\n  setPasswordForm: FormGroup;\n  snapshotParam: string;\n  passwordFlag: Boolean = true;\n  errMessage: String;\n  successFlag: Boolean = false;\n  successMsg: String;\n\n  constructor(private route: ActivatedRoute, private apiService: ApiService, public fb: FormBuilder, private ngZone: NgZone, private router: Router) { }\n\n  ngOnInit() {  //Calling validation method\n    this.submitPassword();\n    this.snapshotParam = this.route.snapshot.paramMap.get(\"token\");\n    ReactiveFormConfig.set({ \"validationMessage\": { \"compare\": \"Input does not match\" } });\n  }\n\n  submitPassword() {   //create method for validation\n    this.setPasswordForm = this.fb.group({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(8),\n        Validators.maxLength(12),\n        Validators.required,\n        Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/),\n      ])),\n      passwordConfirmation: new FormControl('', Validators.compose([\n        Validators.required,\n        RxwebValidators.compare({ fieldName: 'password' })\n      ]))\n    });\n  }\n\n  setPassword() {  //Create method for submit form value and calling API.\n    try {\n      if (this.setPasswordForm.valid) {\n        this.apiService.submitPasswordData(this.setPasswordForm.value, this.snapshotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successFlag = true;\n            this.successMsg = data.message;\n            this.passwordFlag = true;\n            setTimeout(() => {\n              this.ngZone.run(() => this.router.navigateByUrl('/users/login'));\n            }, 1000)\n          } else if (data.status == \"error\" || data.status === 404) {\n            this.passwordFlag = false;\n            this.errMessage = data.message;\n            this.successFlag = false;\n          }\n        })\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n\n  }\n\n\n\n  //For print Validation and error message.\n  validationErrorMessage = {\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      { type: 'maxlength', message: 'Password is too large(maximum length 12)' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one digit and one special characters' }\n    ],\n    'passwordConfirmation': [\n      { type: 'required', message: 'Confirm Password is required' },\n      { type: 'compare', message: 'Password not match' },\n    ],\n  }\n}\n","<img src=\"assets/image/logo.png\"  class=\"imgLogo\">\n<h3 style=\"text-align: center;color: #0098cd;\"><b>PAYROLL</b></h3>\n<div class=\"card card-user\">\n  <div class=\"card-body\">\n    <div class=\"card-header\">\n      <h2 class=\"card-title\">Set Password</h2>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-danger\" *ngIf=\"!passwordFlag\">\n          <strong>{{ errMessage }}</strong>\n        </p>\n    </div>\n    <div class=\"col-sm-offset-2\">\n      <p class=\"alert alert-success\" *ngIf=\"successFlag\">\n          <strong>{{ successMsg }}</strong>\n        </p>\n    </div>\n<div>\n  <form  [formGroup]=\"setPasswordForm\" (ngSubmit)=\"setPassword()\">\n    <div class=\"form-group\">\n      <label class=\"col-sm-6 control-label\"><b>Password:</b></label>\n      <input type=\"password\" formControlName=\"password\" placeholder=\"Enter Password\" class=\"form-control\"  />\n      <div *ngFor=\"let validation of validationErrorMessage.password\">\n        <div\n          *ngIf=\"setPasswordForm.get('password').hasError(validation.type) && (setPasswordForm.get('password').dirty || setPasswordForm.get('password').touched)\"\n          style=\"color: red;margin-left: 14px;\">\n          {{ validation.message }}\n     </div>\n     </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"col-sm-8 control-label\"><b>Confirm Password:</b></label>\n      <input type=\"password\" formControlName=\"passwordConfirmation\" placeholder=\"Confirm Password\" class=\"form-control\"  />\n      <div *ngFor=\"let validation of validationErrorMessage.passwordConfirmation\">\n        <div\n          *ngIf=\"setPasswordForm.get('passwordConfirmation').hasError(validation.type) && (setPasswordForm.get('passwordConfirmation').dirty || setPasswordForm.get('passwordConfirmation').touched)\"\n          style=\"color: red;margin-left: 14px;\">\n          {{ validation.message }}\n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-success\"\n            [disabled]=\"setPasswordForm.pristine || setPasswordForm.invalid\" >Submit\n            Password</button>\n        </div>\n      </div>\n  </form>\n  </div>\n  </div>\n  </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UsersRoutingModule } from './users-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { UsersComponent } from './users.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { GeneratePasswordComponent } from './generate-password/generate-password.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\n\n\n@NgModule({\n  declarations: [LoginComponent, UsersComponent, RegisterComponent, GeneratePasswordComponent, ForgotPasswordComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    UsersRoutingModule,\n    ReactiveFormsModule,\n    RouterModule,\n    NgxSpinnerModule,\n\n  ]\n})\nexport class UsersModule { }\n"],"sourceRoot":"webpack:///"}