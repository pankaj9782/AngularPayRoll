{"version":3,"sources":["webpack:///src/app/pages/department/department.component.ts","webpack:///src/app/pages/department/department.component.html","webpack:///src/app/pages/department/department-service/department-api.service.ts","webpack:///src/app/pages/department/list-department/list-department.component.html","webpack:///src/app/pages/department/list-department/list-department.component.ts","webpack:///src/app/pages/department/add-department/add-department.component.html","webpack:///src/app/pages/department/update-department/update-department.component.html","webpack:///src/app/pages/department/department-routing.module.ts","webpack:///src/app/pages/department/add-department/add-department.component.ts","webpack:///src/app/pages/department/update-department/update-department.component.ts","webpack:///src/app/pages/department/department.module.ts"],"names":["DepartmentComponent","DepartmentApiService","http","endpoint","environment","apiBaseUrl","headers","set","error","errorMessage","ErrorEvent","message","status","console","log","throwError","err","companyId","sessionStorage","getItem","this","get","pipe","catchError","errorMgmt","departmentId","data","branchId","post","delete","companyParentId","ListDepartmentComponent","api","route","util","departmentData","showCard","departmentList","permissionInfo","permissionRoleInfo","getDepartment","subscribe","length","navigateByUrl","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","allowOutsideClick","then","result","value","removeData","dismiss","DismissReason","cancel","departmentSatus","addDepartment","path","component","canActivate","children","AddDepartmentComponent","fb","router","ngZone","successMessage","errorMsg","validationMessage","isListAvaliable","departmentDataValidate","departmentName","search","DepartmentForm","disable","group","required","description","cleanDepartmentForm","cleanFormLevelOne","addDepatment","successMsg","setTimeout","handleErrors","run","errMsg","DepartmentList","departmentNameList","branch","id","submitDepatmentData","onClick","UpdateDepartmentComponent","snapshot","paramMap","moduleExists","userId","existingData","DepartmentUpdateForm","getDepartmentDetails","cleanUpdateDepartmentForm","valid","updateDepartment","redirectTo","pathMatch","DepartmentRoutingModule","forChild","DepartmentModule"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-department',\n  templateUrl: './department.component.html',\n  styleUrls: ['./department.component.scss']\n})\n\nexport class DepartmentComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n\n  }\n\n}","<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport {Department} from '../../../auth/DepartmentData';\nimport { UpdateDepatment } from '../../../auth/UpdateDepatment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class DepartmentApiService {\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n/**Create method for manage errors when request and return response from the server*/\nerrorMgmt(error: HttpErrorResponse) {\n  try {\n    let errorMessage = '';\n    /** Handle client side error */\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    }\n    /** Handle server side error */\n    else {\n      errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n  catch (err) {\n    console.log(err.message);\n  }\n}\n\ngetDepartment(): Observable<any> {\n  try {\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/departments/list-all/${companyId}`;\n     return this.http.get(apiURL).pipe(\n       catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n// Method ForIndividual List\ngetDepartmentDetails(departmentId: String): Observable<any> {\n  try {\n    \n    let apiURL = `${this.endpoint}/branch/department-details/${departmentId}`;\n     return this.http.get(apiURL).pipe(\n       catchError(this.errorMgmt)\n    )\n  }\n  catch (err) {\n    console.log(err);\n  }\n}\n\naddDepatment(data:Department,branchId:string): Observable<any> {\n  try{\n    const companyId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/branch/add-department/${branchId}/${companyId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err) {\n    console.log(err);\n  }\n}\n\n\nupdateDepartment(data:UpdateDepatment,branchId:string,departmentId:string,):Observable<any> {\n  try {\n    let apiURL = `${this.endpoint}/branch/update-department/${branchId}/${departmentId}`;\n    return this.http.post(apiURL,data).pipe(\n      catchError(this.errorMgmt)\n    )\n  }\n  catch(err) {\n    console.log(err);\n  }\n}\n\nremoveData(departmentId:String):Observable<any>{\n  try{\n    let apiURL = `${this.endpoint}/branch/delete-department/${departmentId}`;\n    return this.http.delete(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )   \n  }\n  catch(err){\n    console.log(err);\n  }\n}\n\nDepartmentList():Observable<any>{\n  try{\n    const companyParentId = sessionStorage.getItem(\"companyId\");\n    let apiURL = `${this.endpoint}/company/branch-list/${companyParentId}`;\n    return this.http.get(apiURL).pipe(\n      catchError(this.errorMgmt)\n    )\n  }catch(err){\n    console.log(err);\n  }\n}\n\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Departments List</h2>\n        <button [disabled]=\"permissionInfo.search('Create Department') === -1\"\n        class=\"btn btn-primary\" type=\"button\" (click)=\"addDepartment()\" routerLink=\"/pages/department/add-department\" style=\"float: right;\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Department</button>\n    </div>\n    <table class=\"table\" style=\"text-align: center;\">\n            <thead class=\" text-primary\">\n              <tr>\n                <th> S.No </th>\n                <th> Title </th>\n                <th>description</th>\n                <th> Action </th>\n              </tr>\n            </thead>\n            <tbody *ngFor=\"let list of departmentData; let i = index\">\n              <tr >\n                <td> <b>{{ i+1 }}.</b></td>\n                <td> {{ list.title }} </td>\n                <td> {{list.description}}</td>\n                <td>\n                    <a [class.disabled]=\"permissionInfo.search('Edit Department') === -1\"\n                    routerLink=\"/pages/department/update-department/{{list._id}}/{{list.userId}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                    <button [disabled]=\"permissionInfo.search('Delete Department') === -1\"\n                    class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i></button>\n                </td>\n              </tr>\n    </table>\n</div>\n\n\n\n","import { Component, OnInit,ViewChild,ElementRef } from '@angular/core';\nimport { DepartmentApiService } from '../department-service/department-api.service';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { state, style } from '@angular/animations';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component ({\n    selector: 'app-list-department',\n    templateUrl: './list-department.component.html',\n    styleUrls: ['./list-department.component.css']\n})\n\nexport class ListDepartmentComponent implements OnInit {\n\n    departmentData:any=[];\n    public isActive: any;\n    public isNot: any;\n    showCard:any = {};\n    userId;\n\n    branchId;\n  permissionInfo: any;\n\n  constructor(private api:DepartmentApiService,\n    public route:Router,\n    private util: UtilitiesService\n    ){}\n\n  ngOnInit(){\n   this.departmentList();\n   this.permissionInfo = this.util.permissionRoleInfo;\n   }\n\n  departmentList(){\n    try{\n      this.api.getDepartment().subscribe(data=>{\n        if (data.status === 'success' || data.status === 200) {\n          this.departmentData = data.data;\n          if(this.departmentData.length == 0){\n            this.route.navigateByUrl(\"/pages/department/add-department\");\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  showConfirmationMessage(departmentId:String){\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true,\n      allowOutsideClick: false,\n    }).then((result) => {\n      if (result.value) {\n        this.api.removeData(departmentId).subscribe((data)=>{\n          if(data.status === \"success\" || data.status === 200){\n        swalWithBootstrapButtons.fire(\n          'Deleted!',\n          'Your row has been deleted.',\n          'success'\n        )\n          } else if(data.status === 'error'){\n            swalWithBootstrapButtons.fire(\n              'ERROR!',\n              data.message,\n              'error'\n            )\n          }\n          this.departmentList();\n      })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Your list data safe',\n          'error'\n        )\n      }\n    })\n  }\n\n  addDepartment(){\n    try{\n      this.util.departmentSatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n}","<div class=\"card card-user\">\n      <div class=\"card-header\">\n         <h2 class=\"card-title text-center\">Department Details</h2>\n      </div>\n      <div class=\"card-body\">\n\n         <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n               <strong>{{ errMsg }}</strong>\n               </p>\n          </div>\n\n         <div class=\"col-sm-offset-2\">\n                  <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                  </p>\n            </div>\n\n\n         <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"DepartmentForm\" (ngSubmit)=\"submitDepatmentData()\" novalidate>\n            <div class=\"row\">\n               <div class=\"col-md\">\n                  <div class=\"form-group\">\n                     <label class=\"col-sm-6 control-label\"><b>Branch-Name :&nbsp;<span\n                           style=\"color: darkred\">*</span></b></label>\n                     <select class=\"dropdown dropdown-toggle form-control\" Name=\"branchId\" (change)=\"onClick($event.target.value)\" formControlName=\"branchId\">\n                        <option class='dropdown-item' ng-selected=\"true\" value=\"\" disabled selected>----------Select Branch----------</option>\n                        <option class=\"dropdown-item\" *ngFor=\"let department of departmentNameList\" value=\"{{department._id}}\">\n                           {{department.name}}\n                        </option>\n                     </select>\n                     <div *ngFor=\"let validation of validationMessage.branchId\">\n                           <div style=\"color: red;margin-left: 14px;\"\n                             *ngIf=\"DepartmentForm.get('branchId').hasError(validation.type) && (DepartmentForm.get('branchId').dirty || DepartmentForm.get('branchId').touched)\"\n                             >\n                             {{ validation.message }}\n                           </div>\n                         </div>\n                  </div>\n               </div>\n               <div class=\"col-md\">\n               <div class=\"form-group\">\n                   <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                  <div class=\"col-sm-offset-2\">\n                     <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"\n                        formControlName=\"title\">\n                        <div *ngFor=\"let validation of validationMessage.title\">\n                              <div style=\"color: red;margin-left: 14px;\"\n                                *ngIf=\"DepartmentForm.get('title').hasError(validation.type) && (DepartmentForm.get('title').dirty || DepartmentForm.get('title').touched)\"\n                                >\n                                {{ validation.message }}\n                              </div>\n                            </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"col-md\">\n               <div class=\"form-group\">\n                  <label class=\"col-sm-6 control-label\"><b>Enter Description :</b></label>\n                  <div class=\"col-sm-offset-2\">\n                  <input class=\"form-control\" type=\"text\" id=\"description\" placeholder=\"Enter Description\"\n                           formControlName=\"description\">\n                  </div>\n               </div>\n            </div>\n            </div>\n            <div class=\"form-group\">\n               <div class=\"col-sm-offset-2 col-sm-10\">\n                  <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"DepartmentForm.invalid\">Submit</button>\n                  <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../list-department\">Cancel</button>\n               </div>\n            </div>\n         </form>\n      </div>\n</div>","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Update Department</h2>\n   </div>\n   <div class=\"card-body\">\n         <div class=\"col-sm-offset-2\">\n               <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                 <strong>{{errMsg}}</strong>\n               </p>\n             </div>\n             <div class=\"col-sm-offset-2\">\n               <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                 <strong>{{successMsg}}</strong>\n               </p>\n             </div>\n      <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"DepartmentUpdateForm\" (ngSubmit)=\"updateDepartment()\" novalidate>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span> </b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\"formControlName=\"title\" >\n               <div *ngFor=\"let validation of validationMessage.title\">\n                     <div style=\"color: red;margin-left: 14px;\"\n                       *ngIf=\"DepartmentUpdateForm.get('title').hasError(validation.type) && (DepartmentUpdateForm.get('title').dirty || DepartmentUpdateForm.get('title').touched)\"\n                       >\n                       {{ validation.message }}\n                     </div>\n                   </div>\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <label class=\"col-sm-6 control-label\"><b>Description: </b></label>\n            <div class=\"col-sm-offset-2\">\n               <input class=\"form-control\" type=\"text\" id=\"description\" placeholder=\"Enter Description\"formControlName=\"description\" >\n            </div>\n         </div>\n         <div class=\"form-group\">\n            <div class=\"col-sm-offset-2 col-sm-10\">\n               <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"DepartmentUpdateForm.invalid || permissionInfo.search('Edit Department')=== -1\">Update</button>\n               <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../../list-department\" >Cancel</button>\n            </div>\n         </div>\n      </form>\n   </div>\n</div>\n\n<!-- /pages/department/list-department -->","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DepartmentComponent } from './department.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListDepartmentComponent } from './list-department/list-department.component';\nimport { AddDepartmentComponent } from './add-department/add-department.component';\nimport { UpdateDepartmentComponent } from './update-department/update-department.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : DepartmentComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-department',\n        component: ListDepartmentComponent,\n      },\n      {\n        path: 'add-department',\n        component: AddDepartmentComponent\n      },\n      {\n        path: 'update-department/:id/:userId',\n        component: UpdateDepartmentComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-department',\n        pathMatch:'full',\n      },\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class DepartmentRoutingModule { }","import { Component, OnInit,NgZone } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DepartmentApiService } from '../department-service/department-api.service';\nimport * as jsPDF from 'jspdf'\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component({\n    selector: 'app-add-department',\n    templateUrl: './add-department.component.html'\n})\n\nexport class AddDepartmentComponent implements OnInit {\n\n  branchId;\n  DepartmentForm: FormGroup;\n  departmentNameList: any[];\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\n  constructor( public fb: FormBuilder,private api:DepartmentApiService,\n      private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n      private util: UtilitiesService){\n        this.isListAvaliable();\n      }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.departmentDataValidate();\n    this.departmentName();\n    if(this.permissionInfo.search('Create Department') === -1){\n      this.DepartmentForm.disable();\n    }\n\n  }\n\n  departmentDataValidate() {\n    try {\n      this.DepartmentForm = this.fb.group({\n          title: new FormControl('',Validators.required),\n          description: new FormControl(''),\n          branchId:new FormControl('',Validators.required)\n        })\n      }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for show validdation message\n  validationMessage = {\n    'title': [\n      { type: 'required', message: 'Title is required' },\n    ],\n    'branchId':[\n      { type: 'required', message: 'Branch Name is required' },\n    ]\n  }\n\n\n  submitDepatmentData(){\n    try{\n      let cleanDepartmentForm = this.util.cleanFormLevelOne(this.DepartmentForm);\n      this.api.addDepatment(cleanDepartmentForm.value,this.branchId).subscribe(data =>{\n        if(data.status === \"success\"|| data.status === 200){\n          this.successMessage = true ;\n          this.errorMsg = false ;\n          this.successMsg = data.message;\n          setTimeout(()=>{\n          this.handleErrors();\n          this.ngZone.run(()=>this.router.navigateByUrl('/pages/department/list-department'));\n        }, 1500);\n        }else if(data.status == \"error\"){\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrors();\n          }, 3000);\n        }\n      })\n    }catch(err){\n      console.log(err);\n\n    }\n\n  }\n\n  departmentName(){\n    this.api.DepartmentList().subscribe(data => {\n      this.departmentNameList = data.branch;\n    })\n  }\n\n  onClick(id){\n    this.branchId = id;\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\nisListAvaliable(){\n  try{\n\n    this.api.getDepartment().subscribe((data) =>{\n      if(data.status === 'success'){\n        if(data.data.length > 0 && this.util.departmentSatus !== 1){\n          this.router.navigateByUrl(\"/pages/department/list-department\");\n          this.util.departmentSatus = 0;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DepartmentApiService } from '../department-service/department-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-department',\n  templateUrl: 'update-department.component.html'\n})\n\nexport class UpdateDepartmentComponent implements OnInit {\n\n  DepartmentUpdateForm: FormGroup;\n  userId;\n  departmentData: any;\n  branchId;\n  successMsg: String;\n  successMessage: boolean = false; \n  errMsg: String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\n\n  constructor( public fb: FormBuilder,private api:DepartmentApiService,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private util: UtilitiesService){\n      let departmentId = this.route.snapshot.paramMap.get(\"id\");\n      this.util.moduleExists(departmentId,'Department').subscribe((data) => {\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/department/list-department');\n          }\n        }\n      })\n    }\n\nngOnInit() {\n  // Deparment ID\n  this.permissionInfo = this.util.permissionRoleInfo;\n  this.userId = this.route.snapshot.paramMap.get(\"id\");\n  // Branch ID\n  this.branchId = this.route.snapshot.paramMap.get(\"userId\");\n  this.departmentDataValidate();\n  this.existingData();\n  if(this.permissionInfo.search('Edit Department') === -1){\n    this.DepartmentUpdateForm.disable();\n  }\n}\n\nexistingData(){\n  this.api.getDepartmentDetails(this.userId).subscribe(data=>{\n      if (data.status == 'success'){\n        this.departmentData = data.data;\n            this.DepartmentUpdateForm = this.fb.group({\n              title: new FormControl(this.departmentData.title,Validators.required),\n              description: new FormControl(this.departmentData.description)\n            })\n      }\n    });\n}\n\ndepartmentDataValidate() {\n  try {\n    this.DepartmentUpdateForm = this.fb.group({\n        title: new FormControl('', Validators.required),\n        description: new FormControl('')\n      })\n    }\n  catch (err) {\n    console.log(err);\n  }\n}\n\n//Method for show validdation message\nvalidationMessage = {\n  'title': [\n    { type: 'required', message: 'Title is required' },\n  ]\n}\n\nupdateDepartment(){\n  try{\n    let cleanUpdateDepartmentForm = this.util.cleanFormLevelOne(this.DepartmentUpdateForm);\n    if(this.DepartmentUpdateForm.valid) {\n      this.api.updateDepartment(cleanUpdateDepartmentForm.value,this.branchId,this.userId).subscribe(data=> {\n        if (data.status === \"success\" || data.status === 200) {\n          this.successMessage = true;\n          this.errorMsg = false;\n          this.successMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n            this.router.navigateByUrl(\"/pages/department/list-department\");\n          }, 2000);\n        }\n        else if (data.status === \"error\" || data.status === 404) {\n          this.errorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n          }, 3000);\n        }\n      })\n    }\n  }catch(err){\n    console.log(err);\n  }\n}\n\nhandleErrors(){\n  this.errorMsg = false;\n  this.successMessage = false;\n  this.errMsg = '';\n  this.successMsg = '';\n}\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DepartmentRoutingModule } from './department-routing.module';\nimport { DepartmentComponent } from './department.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListDepartmentComponent } from './list-department/list-department.component';\nimport { AddDepartmentComponent } from './add-department/add-department.component';\nimport { UpdateDepartmentComponent } from './update-department/update-department.component';\n\n\n\n@NgModule({\n  declarations: [\n    DepartmentComponent,\n    ListDepartmentComponent,\n    AddDepartmentComponent,\n    UpdateDepartmentComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    DepartmentRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\nexport class DepartmentModule { }\n"]}