{"version":3,"sources":["webpack:///src/app/pages/job-profile/job-profile.component.ts","webpack:///src/app/pages/job-profile/job-profile.component.html","webpack:///src/app/pages/job-profile/job-profile-services/job-profile.service.ts","webpack:///src/app/pages/job-profile/add-job-profile/add-job-profile.component.html","webpack:///src/app/pages/job-profile/add-job-profile/add-job-profile.component.ts","webpack:///src/app/pages/job-profile/job-profile-list/job-profile-list.component.html","webpack:///src/app/pages/job-profile/update-profile-data/update-profile-data.component.html","webpack:///src/app/pages/job-profile/job-profile-routing.module.ts","webpack:///src/app/pages/job-profile/job-profile-list/job-profile-list.component.ts","webpack:///src/app/pages/job-profile/update-profile-data/update-profile-data.component.ts","webpack:///src/app/pages/job-profile/job-profile.module.ts"],"names":["JobProfileComponent","JobProfileService","http","endpoint","environment","apiBaseUrl","headers","set","data","companyId","sessionStorage","getItem","this","post","pipe","catchError","errorMgmt","err","console","log","message","get","jobProfileId","delete","error","errorMessage","ErrorEvent","status","throwError","AddJobProfileComponent","fb","api","ngZone","router","util","payType","successMsg","String","successMessage","errMsg","errorMsg","validationMessage","type","isListAvaliable","jobProfileFormValidation","permissionInfo","permissionRoleInfo","search","jobProfileForm","disable","group","positionName","required","payBasis","isActive","cleanJobPofieForm","cleanFormLevelOne","valid","submitData","value","subscribe","setTimeout","handleErrors","run","navigateByUrl","getJobProfileData","length","jobProfileStatus","jobProfileFormData","route","path","component","canActivate","children","JobProfileListComponent","jobProfileList","showCard","len","Object","keys","i","_id","profileId","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","removeProfileData","dismiss","DismissReason","cancel","addJobProfile","UpdateProfileDataComponent","snapShotParam","profileData","Array","snapshot","paramMap","moduleExists","UpdateJobProfileFormValidation","updateJobProfileForm","jobProfileDetails","cleanJobProfileUpdateForm","updatedSubmitData","updateJobProfileFormData","redirectTo","pathMatch","JobProfileRoutingModule","forChild","JobProfileModule"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-job-profile',\n  templateUrl: './job-profile.component.html',\n  styleUrls: ['./job-profile.component.scss']\n})\nexport class JobProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpHeaders, HttpErrorResponse, HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { JobProfile } from 'src/app/auth/job-profile';\nimport { catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobProfileService {\n\n\n  /** Here we provide daynamic environment value from environment */\n  endpoint: string = environment.apiBaseUrl;\n  headers = new HttpHeaders().set('Contant-Type', 'application/x-www-form-urlencoded');//Set a Header Value.\n\n  constructor(private http: HttpClient) { }\n\n\n\n  //Method for submit job-profile data\n  submitData(data: JobProfile): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/add-job-profile/${companyId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //Method for get the job profile data\n  getJobProfileData(): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/list-all-job-profiles/${companyId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  jobProfileDetails(jobProfileId:string): Observable<any> {\n    try {\n      let apiUrl = `${this.endpoint}/company/job-profile-details/${jobProfileId}`;\n      return this.http.get(apiUrl).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n  //Method for remove job profile\n removeProfileData(jobProfileId:String):Observable<any>{\n   try{\n     let api = `${this.endpoint}/company/delete-job-profile/${jobProfileId}`;\n     return this.http.delete(api).pipe(\n       catchError(this.errorMgmt)\n     )\n   }catch(err){\n     console.log(err.message);\n   }\n }\n\n\n  //Create method for manage errors when request and return response from the server\n  errorMgmt(error: HttpErrorResponse) {\n    try {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.message;\n      }\n      else {\n        errorMessage = `Error code:${error.status}\\nMessage:${errorMessage}`;\n      }\n      console.log(errorMessage);\n      return throwError(errorMessage);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for submit updated form data\n  updatedSubmitData(data: JobProfile, jobProfileId: String): Observable<any> {\n    try {\n      const companyId = sessionStorage.getItem(\"companyId\");\n      let apiUrl = `${this.endpoint}/company/update-job-profile/${companyId}/${jobProfileId}`;\n      return this.http.post(apiUrl, data).pipe(\n        catchError(this.errorMgmt)\n      )\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n}\n","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Add Job-Profile</h2>\n        <!-- <a routerLink=\"../job-profile-list\" class=\"btn btn-primary btn-circle\" style=\"float: right;\"><i\n                class=\"fa  fa-arrow-right\"></i></a> -->\n    </div>\n    <div class=\"card-body\">\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{errMsg}}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{successMsg}}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"jobProfileForm\" (ngSubmit)=\"jobProfileFormData()\"\n            novalidate>\n            <div class=\"form-group\">\n\n                 <label class=\"col-sm-6 control-label\"><b>Profile Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\"\n                        formControlName=\"positionName\">\n                    <div *ngFor=\"let validation of validationMessage.positionName\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"jobProfileForm.get('positionName').hasError(validation.type) && (jobProfileForm.get('positionName').dirty || jobProfileForm.get('positionName').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n\n                 <label class=\"col-sm-6 control-label\"><b>Pay Basis:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Pay Basis\" formControlName=\"payBasis\">\n                    <option class=\"dropdown-item\" selected disabled>Choose Pay Basis</option>\n                    <option [ngValue]=\"payBasis\" *ngFor=\"let payBasis of payType\"> {{payBasis}}</option>\n                </select>\n                <div *ngFor=\"let validation of validationMessage.payBasis\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"jobProfileForm.get('payBasis').hasError(validation.type) && (jobProfileForm.get('payBasis').dirty || jobProfileForm.get('payBasis').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Status:</b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Status of Profile\"\n                    formControlName=\"isActive\">\n                    <option class=\"dropdown-item\" value=true>Active</option>\n                    <option class=\"dropdown-item\" value=false>In-Active</option>\n                </select>\n            </div>\n\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"jobProfileForm.invalid || permissionInfo.search('Create JobProfile') === -1\">Submit</button>\n                    <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../job-profile-list\">Cancel</button>\n\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { JobProfileService } from '../job-profile-services/job-profile.service';\nimport { Router } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\nimport { IfStmt } from '@angular/compiler';\n\n\n@Component({\n  selector: 'app-add-job-profile',\n  templateUrl: './add-job-profile.component.html',\n  styleUrls: ['./add-job-profile.component.scss']\n})\nexport class AddJobProfileComponent implements OnInit {\n\n  jobProfileForm: FormGroup;\n  public payType = ['Daily Wages','Monthly Salary'];\n  public successMsg:any = String;\n  public successMessage: boolean = false;\n  public errMsg:any = String;\n  public errorMsg: boolean = false;\n  permissionInfo: any;\n\n\n  constructor(public fb: FormBuilder,\n     private api: JobProfileService,\n     public ngZone: NgZone,\n     private router: Router,\n     private util: UtilitiesService\n     ) {this.isListAvaliable();}\n\n  ngOnInit() {\n    this.jobProfileFormValidation();\n    this.permissionInfo = this.util.permissionRoleInfo;\n    if(this.permissionInfo.search('Create JobProfile') === -1){\n      this.jobProfileForm.disable();\n    }\n  }\n\n\n  //Method  for form Validation\n  jobProfileFormValidation() {\n    this.jobProfileForm = this.fb.group({\n      positionName: new FormControl('', Validators.required),\n      payBasis: new FormControl('Daily Wages', Validators.required),\n      isActive: new FormControl('true'),\n    })\n  }\n\n  //Submit form Data\n  jobProfileFormData() {\n    try {\n      let cleanJobPofieForm = this.util.cleanFormLevelOne(this.jobProfileForm);\n      if (this.jobProfileForm.valid) {\n        this.api.submitData(cleanJobPofieForm.value).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            setTimeout(() => {\n              this.handleErrors();\n              this.ngZone.run(() => this.router.navigateByUrl('/pages/job-profile/job-profile-list'));\n            }, 2000);\n            this.errorMsg = false;\n            this.successMsg = data.message;\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n            }, 3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  //For Showing errors\n  validationMessage = {\n    'positionName': [\n      { type: 'required', message: 'Position Name is required' },\n    ],\n    'payBasis': [\n      { type: 'required', message: 'Pay Basis is required' },\n    ],\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\nisListAvaliable(){\n  try{\n    this.api.getJobProfileData().subscribe((data) =>{\n      if(data.status === 'success'){\n        if(data.data.length > 0 && this.util.jobProfileStatus !== 1){\n          this.router.navigateByUrl(\"/pages/job-profile/job-profile-list\");\n          this.util.jobProfileStatus = 0;\n        }\n      }\n    })\n  }catch(err){\n    console.log(err);\n  }\n}\n\n}\n","<div class=\"card\">\n    <div class=\"card-header\" style=\"text-align: center\">\n        <h2>Job Profiles List</h2>\n        <a [class.disabled]=\"permissionInfo.search('Create JobProfile') === -1\"\n        class=\"btn btn-primary\" routerLink=\"../add-job-profile\" style=\"float:right;\" (click)= \"addJobProfile()\"><i class=\"fa fa-plus\"></i>&nbsp;\n            Add Job-profile</a>\n    </div>\n    <!-- <div class=\"panel-body\">\n            <ul class=\"list-group\">\n                <li class=\"list-group-item\" *ngFor=\"let list of jobProfileList\">\n                    <strong><b (click)=\"showData(list._id)\"\n                            style=\"cursor: pointer\">{{list.positionName}}</b></strong>\n                    <div style=\"float: right;\">\n                        <i class=\"dropdown-toggle\" (click)=\"showData(list._id)\"></i>\n                    </div>\n                    <div class=\"card\" style=\"background-color:ghostwhite\" [hidden]=\"showCard[list._id]\">\n                        <table class=\"table\" style=\"margin: auto\">\n                            <tr>\n                                <th>Position Name:</th>\n                                <td>{{list?.positionName}}</td>\n                            </tr>\n                            <tr>\n                                <th>Pay Basis:</th>\n                                <td>{{list?.payBasis}}</td>\n                            </tr>\n                            <tr>\n                                <th>Is Active:</th>\n                                <td>{{list?.isActive}}</td>\n                            </tr>\n                        </table>\n                        <div>\n                            <a routerLink=\"../update-profile-data/{{list._id}}\" style=\"float: right;\"\n                                class=\"btn btn-primary\">\n                                <i class=\"fa fa-pencil-square-o\"></i></a>\n                            <button style=\"float: right;\" class=\"btn btn-danger\" type=\"button\"\n                                (click)=\"deleteJobProfile(list._id)\">\n                                <i class=\"fa fa-trash\"></i>\n                            </button>\n\n                        </div>\n                    </div>\n                </li>\n            </ul>\n        </div> -->\n    <table class=\"table\" style=\"text-align: center;\">\n        <thead class=\" text-primary\">\n            <tr>\n            <th>S.No</th>\n            <th>Profile Name</th>\n            <th>Pay Basis</th>\n            <th>Is Active</th>\n            <th>Action</th>\n            </tr>\n        </thead>\n        <tbody *ngFor=\"let list of jobProfileList; let i = index\">\n            <tr >\n                <td><b>{{i+1}}.</b></td>\n                <td>{{list.positionName}}</td>\n                <td>{{list.payBasis}}</td>\n                <td *ngIf=\"list.isActive\"><i class=\"fa fa-check\" style=\"color: green; font-size: 25px;\"></i></td>\n                <td *ngIf=\"!list.isActive\"><i class=\"fa fa-times\" style=\"color: red; font-size: 25px;\"></i></td>\n            <td>\n                <a [class.disabled]=\"permissionInfo.search('Edit JobProfile') === -1\"\n                routerLink=\"../update-profile-data/{{list._id}}\" class=\"btn btn-primary\">\n                    <i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n                <button [disabled]=\"permissionInfo.search('Delete JobProfile') === -1\"\n                class=\"btn btn-danger\" type=\"button\" (click)=\"deleteJobProfile(list._id)\">\n                    <i class=\"fa fa-trash\"></i></button>\n            </td>\n            </tr>\n    </table>\n</div>","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title\">Update Job-Profile</h2>\n    </div>\n\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n                <strong>{{errMsg}}</strong>\n            </p>\n        </div>\n\n        <div class=\"col-sm-offset-2\">\n            <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                <strong>{{successMsg}}</strong>\n            </p>\n        </div>\n\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateJobProfileForm\"\n            (ngSubmit)=\"updateJobProfileFormData()\" novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Profile Name:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"inputName\" placeholder=\"Enter Name\"\n                        formControlName=\"positionName\">\n                        <div *ngFor=\"let validation of validationMessage.positionName\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateJobProfileForm.get('positionName').hasError(validation.type) && (updateJobProfileForm.get('positionName').dirty || updateJobProfileForm.get('positionName').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Pay Basis:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Pay Basis\" formControlName=\"payBasis\">\n                    <option class=\"dropdown-item\" disabled>Choose Pay Basis</option>\n                    <option class=\"dropdown-item\" value=\"Monthly Salary\">Monthly Salary</option>\n                    <option class=\"dropdown-item\" value=\"Daily Wages\">Daily Wages</option>\n                </select>\n                <div *ngFor=\"let validation of validationMessage.payBasis\">\n                        <div style=\"color: red;margin-left: 14px;\"\n                            *ngIf=\"updateJobProfileForm.get('payBasis').hasError(validation.type) && (updateJobProfileForm.get('payBasis').dirty || updateJobProfileForm.get('payBasis').touched)\"\n                            style=\"color: red;margin-left: 14px;\">\n                            {{validation.message}}\n                        </div>\n                    </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Status:</b></label>\n                <select class=\"dropdown dropdown-toggle form-control\" Name=\"Status of Profile\"\n                    formControlName=\"isActive\">\n                    <option class=\"dropdown-item\" value=true>Active</option>\n                    <option class=\"dropdown-item\" value=false>In-Active</option>\n                </select>\n            </div>\n\n\n            <div class=\"form-group\">\n                <div class=\"col-sm-offset-2 col-sm-10\">\n                    <button [disabled]=\"updateJobProfileForm.invalid || permissionInfo.search('Edit JobProfile') === -1\"\n                     type=\"submit\" class=\"btn btn-success\">Update</button>\n                    <button type=\"button\" class=\"btn btn-danger\" routerLink=\"../../job-profile-list\">Cancel</button>\n\n                </div>\n            </div>\n        </form>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { JobProfileComponent } from './job-profile.component';\nimport { AddJobProfileComponent } from './add-job-profile/add-job-profile.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { JobProfileListComponent } from './job-profile-list/job-profile-list.component';\nimport { UpdateProfileDataComponent } from './update-profile-data/update-profile-data.component';\n\nconst route:Routes =[\n  {\n    path:'',\n    component:JobProfileComponent,\n    canActivate:[AuthGuard],\n    children:[\n      {\n        path:'add-job-profile',\n        component:AddJobProfileComponent,\n      },\n      {\n        path:'job-profile-list',\n        component:JobProfileListComponent,\n      },\n      {\n        path:'update-profile-data/:jobProfileId',\n        component:UpdateProfileDataComponent,\n      },\n      {\n        path:'',\n        redirectTo :'job-profile-list',\n        pathMatch:'full',\n      },\n    ],\n  }\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class JobProfileRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { JobProfileService } from '../job-profile-services/job-profile.service';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-job-profile-list',\n  templateUrl: './job-profile-list.component.html',\n  styleUrls: ['./job-profile-list.component.scss']\n})\nexport class JobProfileListComponent implements OnInit {\n\n  // jobProfileList: Object;\n  public jobProfileList:any =[];\n  public showCard:any = {};\n  permissionInfo: any;\n\n  constructor(private api: JobProfileService,\n     private router: Router,\n     private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.permissionInfo = this.util.permissionRoleInfo;\n    this.getJobProfileData();\n  }\n\n//Method for showing data in a list for binding in HTML\n  getJobProfileData() {\n    try {\n      this.api.getJobProfileData().subscribe(data => {\n        if (data.status === 'success' || data.status === 200) {\n          this.jobProfileList = data.data;\n          if (data.data.length == 0) {\n            this.router.navigateByUrl(\"/pages/job-profile/add-job-profile\");\n          }\n          else {\n            const len = Object.keys(this.jobProfileList).length;\n            for (var i = 0; i < len; i++) {\n              this.showCard[this.jobProfileList[i]._id] = true;\n            }\n          }\n        }\n      })\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n\n  //Method For collapsed List Data\n  showData(jobProfileId: String) {\n    try {\n      this.showCard[`${jobProfileId}`] = !this.showCard[`${jobProfileId}`];\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  //Method for remove job profile list\n   deleteJobProfile(profileId: String) {\n    try {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-danger'\n        },\n        buttonsStyling: false\n      })\n      swalWithBootstrapButtons.fire({\n        title: 'Are you sure?',\n        text: \"You want to delete it\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'No',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.value) {\n          this.api.removeProfileData(profileId).subscribe(data => {\n            if (data.status === \"success\" || data.status === 200) {\n              swalWithBootstrapButtons.fire(\n                'Deleted!',\n                data.message,\n                'success'\n              )\n              this.getJobProfileData();\n            }\n          })\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire(\n            'Cancelled',\n            'Your list data safe',\n            'error'\n          )\n        }\n      })\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n  addJobProfile(){\n    try{\n      this.util.jobProfileStatus = 1;\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n\n}\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { JobProfileService } from '../job-profile-services/job-profile.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-profile-data',\n  templateUrl: './update-profile-data.component.html',\n  styleUrls: ['./update-profile-data.component.scss']\n})\nexport class UpdateProfileDataComponent implements OnInit {\n\n  updateJobProfileForm: FormGroup;\n  public jobProfileList: any;\n  public snapShotParam: any = String;\n  public profileData= new Array();\n  public successMsg: any = String;\n  public successMessage: boolean = false;\n  public errMsg: any = String;\n  public errorMsg: boolean = false;\n  permissionInfo: any;\n\n  constructor(public fb: FormBuilder, private api: JobProfileService, public ngZone: NgZone, private router: Router,\n     private route: ActivatedRoute,\n     private util: UtilitiesService) {\n      this.snapShotParam = this.route.snapshot.paramMap.get(\"jobProfileId\");\n      this.util.moduleExists(this.snapShotParam,'JobProfile').subscribe((data)=>{\n        if(data.status === 'success'){\n          if(!data.data){\n            this.router.navigateByUrl('/pages/job-profile/job-profile-list');\n          }\n        }\n      })\n     }\n\n  ngOnInit() {\n    this.jobProfileFormValidation();\n    this.UpdateJobProfileFormValidation();\n    this.permissionInfo = this.util.permissionRoleInfo;\n    if(this.permissionInfo.search('Edit JobProfile') === -1){\n      this.updateJobProfileForm.disable();\n    }\n  }\n\n//Method for validation\njobProfileFormValidation() {\n  try{\n        this.updateJobProfileForm = this.fb.group({\n          positionName: new FormControl('',Validators.required),\n          payBasis: new FormControl('',Validators.required),\n          isActive: new FormControl('false'),\n        })\n\n  }catch(err){\n    console.log(err.message)\n  }\n}\n  //Method for validation\n  UpdateJobProfileFormValidation() {\n    try{\n      this.api.jobProfileDetails(this.snapShotParam).subscribe((data) => {\n        if (data.status === 'success' || data.status === 200) {\n           this.jobProfileList = data.data;\n          this.updateJobProfileForm = this.fb.group({\n            positionName: new FormControl(this.jobProfileList.positionName,Validators.required),\n            payBasis: new FormControl(this.jobProfileList.payBasis,Validators.required),\n            isActive: new FormControl(this.jobProfileList.isActive),\n          })\n        }\n      })\n\n    }catch(err){\n      console.log(err.message)\n    }\n  }\n\n  //For Showing errors\n  validationMessage = {\n    'positionName': [\n      { type: 'required', message: 'Position Name is required' },\n    ],\n    'payBasis': [\n      { type: 'required', message: 'Pay Basis is required' },\n    ],\n  }\n\n\n  //Method for submit updated form data\n  updateJobProfileFormData() {\n    try {\n      let cleanJobProfileUpdateForm = this.util.cleanFormLevelOne(this.updateJobProfileForm)\n      if (this.updateJobProfileForm.valid) {\n        this.api.updatedSubmitData(cleanJobProfileUpdateForm.value, this.snapShotParam).subscribe((data) => {\n          if (data.status === \"success\" || data.status === 200) {\n            this.successMessage = true;\n            this.errorMsg = false;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.ngZone.run(() => {\n                this.handleErrors();\n                this.router.navigateByUrl(\"/pages/job-profile/job-profile-list\");\n              })\n            }, 2000);\n          } else if (data.status === \"error\" || data.status === 404) {\n            this.errorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(() => {\n              this.ngZone.run(() => {\n                this.handleErrors();\n              })\n            }, 3000);\n          }\n        })\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JobProfileRoutingModule } from './job-profile-routing.module';\nimport { JobProfileComponent } from './job-profile.component';\nimport { AddJobProfileComponent } from './add-job-profile/add-job-profile.component';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { JobProfileListComponent } from './job-profile-list/job-profile-list.component';\nimport { UpdateProfileDataComponent } from './update-profile-data/update-profile-data.component';\nimport { JobProfileService } from './job-profile-services/job-profile.service';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [JobProfileComponent, AddJobProfileComponent, JobProfileListComponent, UpdateProfileDataComponent],\n  imports: [\n    CommonModule,\n    JobProfileRoutingModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n  ],\n  providers: [JobProfileService, AuthGuard],\n})\n\nexport class JobProfileModule { }\n"]}