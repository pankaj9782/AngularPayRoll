{"version":3,"sources":["webpack:///src/app/pages/graderule/graderule.component.ts","webpack:///src/app/pages/graderule/graderule.component.html","webpack:///src/app/pages/graderule/list-graderule/list-graderule.component.ts","webpack:///src/app/pages/graderule/list-graderule/list-graderule.component.html","webpack:///src/app/pages/graderule/graderule-routing.module.ts","webpack:///src/app/pages/graderule/managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component.ts","webpack:///src/app/pages/graderule/managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component.html","webpack:///src/app/pages/graderule/update-graderule/update-graderule.component.ts","webpack:///src/app/pages/graderule/update-graderule/update-graderule.component.html","webpack:///src/app/pages/graderule/managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component.ts","webpack:///src/app/pages/graderule/managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component.html","webpack:///src/app/pages/graderule/graderule.module.ts","webpack:///src/app/pages/graderule/add-graderule/add-graderule.component.ts","webpack:///src/app/pages/graderule/add-graderule/add-graderule.component.html","webpack:///src/app/pages/graderule/managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component.ts","webpack:///src/app/pages/graderule/managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component.html"],"names":["GraderuleComponent","selector","templateUrl","styleUrls","ListGraderuleComponent","api","fb","route","util","listGradRule","permissionInfo","permissionRoleInfo","getGradeRuleList","subscribe","data","status","listGradRuleData","len","Object","keys","length","navigateByUrl","err","console","log","gradeRuleid","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","type","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","value","removeData","message","dismiss","DismissReason","cancel","gradeRuleStatus","addGradeRule","path","component","canActivate","children","redirectTo","pathMatch","GraderuleRoutingModule","forChild","declarations","imports","AddManagePaymentHeadsComponent","ngZone","router","fixedPaymentHeadsList","Fixed","Percent","gradeType","successMessage","serverErrorMsg","percentOfValue","validationMessage","document","getElementById","removeAttribute","gradeRuleId","snapshot","paramMap","get","addMemberValidation","fixedPaymentHeads","paymentHeadList","setAttribute","search","managePaymentForm","disable","name","dynamicValidation","fixed","required","maxLength","pattern","percent","target","options","selectedIndex","errorMsg","percentErrorMsg","setValidators","updateValueAndValidity","switchTypeValidation","group","paymentHead","paymentHeadId","compose","filterPaymentHeads","paymentHeadDataList","addGradules","successMsg","setTimeout","handleErrors","errMsg","inputValue","toString","error","managePaymentData","check","UpdateGraderuleComponent","moduleExists","existingData","graderuleUpdateForm","cleanUpdateGradeRuleForm","cleanFormLevelOne","updateGadeRule","run","graderuleUpdateData","ListManagePaymentHeadsComponent","showCard","leaveListData","Array","companyShowData","listGradeRule","gradeRuleTitle","dataValue","paymentHeads","paymentHeadsId","removeGradeData","GraderuleModule","AddGraderuleComponent","isListAvaliable","graderuleForm","getPaymentHeadData","getGradeRule","undefined","graderuleData","demo","UpdateManagePaymentHeadsComponent","percentOfFunction","percentValue","existing","fixedPaymentHeadList","updateManagePaymentForm","existingGradeRule","forEach","items","_id","existingPaymentHeadId","existingPaymentHeadName","paymentHeadName","updatePaymentHeads"],"mappings":"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","file":"graderule-graderule-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-graderule',\n  templateUrl: './graderule.component.html',\n  styleUrls: ['./graderule.component.scss']\n})\n\nexport class GraderuleComponent implements OnInit {\n\n  constructor() {}\n  ngOnInit() {\n\n  }\n\n}","<router-outlet></router-outlet>","import { GraderuleApiService } from '../graderule-service/graderule-api.service';\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component({\n  selector: 'app-list-graderule',\n  templateUrl: './list-graderule.component.html',\n  styleUrls: ['./list-graderule.component.css']\n})\n\nexport class ListGraderuleComponent implements OnInit {\n\n  listGradRuleData: any [];\n  permissionInfo: any;\n\n  constructor(private api: GraderuleApiService, private fb: FormBuilder,public route:Router, private util:UtilitiesService) { }\n\n  ngOnInit() {\n   this.listGradRule();\n   this.permissionInfo = this.util.permissionRoleInfo;\n  }\n\n  listGradRule(){\n   try{\n     this.api.getGradeRuleList().subscribe(data=>{\n       if (data.status === 'success' || data.status === 200){\n        this.listGradRuleData = data.data;\n        const len = Object.keys(this.listGradRuleData).length;\n        if(len == 0){\n          this.route.navigateByUrl(\"pages/graderule/add-graderule\");\n        }else{\n          this.listGradRuleData = data.data;\n        }\n      }\n     })\n   }catch(err){\n     console.log(err)\n   }\n  }\n\n  showConfirmationMessage(gradeRuleid:string){\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n    swalWithBootstrapButtons.fire({\n      title: 'Are you sure?',\n      text: \"You want to delete it\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No',\n      reverseButtons: true\n    }).then((result) => {\n      if (result.value) {\n        this.api.removeData(gradeRuleid).subscribe((data)=>{\n          if(data.status === 'success'){\n            swalWithBootstrapButtons.fire(\n              'Deleted!',\n              data.message,\n              'success'\n            )\n          } else if (data.status === 'error'){\n            swalWithBootstrapButtons.fire(\n              'ERROR!',\n              data.message,\n              'error'\n            )\n          }\n          this.listGradRule();\n      })\n      } else if (\n        result.dismiss === Swal.DismissReason.cancel\n      ) {\n        swalWithBootstrapButtons.fire(\n          'Cancelled',\n          'Your list data safe',\n          'error'\n        )\n      }\n    })\n}\naddGradeRule(){\n  try{\n    this.util.gradeRuleStatus = 1;\n  }catch(err){\n    console.log(err)\n  }\n}\n\n\n\n\n}\n","<div class=\"card\">\n   <div class=\"card-header\" style=\"text-align: center\">\n         <h2>Grade Rule</h2>\n         <button [disabled]=\"permissionInfo.search('Create GradeRule') === -1\"\n          class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/graderule/add-graderule\" style=\"float:right;\" (click)= \"addGradeRule()\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Grade Rule</button\n            >\n   </div>\n   <table class=\"table\" style=\"text-align: center;\">\n      <thead class=\" text-primary\">\n          <tr>\n          <th> S.No </th>\n          <th> Title </th>\n          </tr>\n      </thead>\n      <tbody *ngFor=\"let list of listGradRuleData; let i = index\">\n          <tr >\n          <td><b>{{i+1}}.</b></td>\n          <td> {{list.title}} </td>\n          <td>\n              <a [class.disabled]=\"permissionInfo.search('Edit GradeRule') === -1\"\n              routerLink=\"/pages/graderule/update-graderule/{{list._id}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n              <button  [disabled]=\"permissionInfo.search('Delete GradeRule') === -1\"\n              class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i>\n              </button>&nbsp;\n              <button [disabled]=\"permissionInfo.search('Create PaymentHeads') === -1\"\n              class=\"btn btn-info\" type=\"button\" routerLink=\"../list-managePaymentHeads/{{list._id}}\">Manage Payment Heads</button>\n          </td>\n          </tr>\n  </table>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { GraderuleComponent } from './graderule.component';\nimport { AuthGuard } from 'src/app/authGuard/auth.guard';\nimport { ListGraderuleComponent } from './list-graderule/list-graderule.component';\nimport { AddGraderuleComponent } from './add-graderule/add-graderule.component';\nimport { UpdateGraderuleComponent } from './update-graderule/update-graderule.component';\nimport { ListManagePaymentHeadsComponent } from './managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component';\nimport { AddManagePaymentHeadsComponent } from './managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component';\nimport {UpdateManagePaymentHeadsComponent } from './managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component';\n\nconst route : Routes = [\n  {\n    path :'',\n    component : GraderuleComponent,\n    canActivate:[AuthGuard],\n    children :[\n      {\n        path: 'list-graderule',\n        component: ListGraderuleComponent,\n      },\n      {\n        path: 'list-managePaymentHeads/:gradeRuleId',\n        component:  ListManagePaymentHeadsComponent\n      },\n      {\n        path: 'add-managePaymentHeads/:gradeRuleId',\n        component: AddManagePaymentHeadsComponent\n      },\n      {\n        path: 'update-managePaymentHeads/:paymentHeadId/:gradeRuleId',\n        component: UpdateManagePaymentHeadsComponent\n      },\n      {\n        path: 'add-graderule',\n        component: AddGraderuleComponent\n      },\n      {\n        path: 'update-graderule/:gradeRuleId',\n        component: UpdateGraderuleComponent\n      },\n      {\n        path:'',\n        redirectTo :'list-graderule',\n        pathMatch:'full',\n      },\n\n    ],\n  }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(route),\n  ]\n})\nexport class GraderuleRoutingModule { }","import { Component, OnInit,NgZone, OnDestroy } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router,ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n    selector: 'app-add-managePaymentHeads',\n    templateUrl: './add-managePaymentHeads.component.html'\n})\n\nexport class AddManagePaymentHeadsComponent implements OnInit,OnDestroy {\n  permissionInfo: any;\n  fixedPaymentHeadsList = [];\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n    paymentHeadDataList: any;\n    managePaymentForm: any;\n    Fixed: Boolean =false;\n    Percent: Boolean = false;\n    inputValue:any;\n    errorMsg: String;\n    percentErrorMsg: String;\n    gradeRuleId:any;\n    gradeType = ['Fixed','Percent'];\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    serverErrorMsg: boolean = false;\n    percentOfValue = 'basicSalary';\n\n    constructor(private api:GraderuleApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router,\n      private util: UtilitiesService){}\n\n    // constructor(private api:GraderuleApiService,private fb:FormBuilder,public route:Router,){}\n\n    ngOnInit() {\n      this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n      this.addMemberValidation();\n      this.fixedPaymentHeads();\n      this.paymentHeadList();\n      (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n      this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Create PaymentHeads') === -1){\n        this.managePaymentForm.disable();\n      }\n    }\n\n    check(name){\n\n      let dynamicValidation = {\n        fixed: [\n          Validators.required,\n          Validators.maxLength(8),\n          Validators.pattern('^[0-9]*$')\n        ],\n        percent: [\n          Validators.required,\n          Validators.maxLength(8),\n          Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)\n        ]\n      }\n\n      try{\n        let gradeType = name.target.options[name.target.options.selectedIndex].text;\n        if(gradeType == 'Fixed')\n        {\n            this.Fixed = true;\n            this.Percent = false;\n            this.errorMsg = '';\n            this.percentErrorMsg = '';\n\n        this.managePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['fixed']);\n        this.managePaymentForm.get('paymentHead.value').updateValueAndValidity();\n\n        } else if (gradeType == 'Percent') {\n            this.Percent = true;\n            this.Fixed = false;\n            if(this.managePaymentForm.get('paymentHead.value').value){\n                this.switchTypeValidation(this.managePaymentForm.get('paymentHead.value').value);\n            }\n\n            this.managePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['percent']);\n            this.managePaymentForm.get('paymentHead.value').updateValueAndValidity();\n        }\n      }catch(err){\n        console.log(err);\n      }\n    }\n\n    addMemberValidation() {\n      try{\n        this.managePaymentForm = this.fb.group({\n          paymentHead: new FormGroup({\n            paymentHeadId: new FormControl('',Validators.required),\n            type: new FormControl('',Validators.required),\n            value: new FormControl('',Validators.compose([Validators.required,\n              Validators.pattern('^[0-9]*$'),])),\n          })\n        })\n      }catch(err){\n        console.log(err)\n      }\n    }\n\n    paymentHeadList(){\n      this.api.filterPaymentHeads(this.gradeRuleId).subscribe(data=>{\n        this.paymentHeadDataList = data.data;\n      })\n    }\n\n    managePaymentData(){\n      try{\n        this.api.addGradules(this.managePaymentForm.value,this.gradeRuleId,this.percentOfValue).subscribe(data=>{\n          if(data.status === 'success') {\n            this.successMessage = true ;\n            this.serverErrorMsg = false ;\n            this.successMsg = data.message;\n            setTimeout(() => {\n              this.handleErrors();\n              this.router.navigateByUrl(`pages/graderule/list-managePaymentHeads/${this.gradeRuleId}`);\n            },2000)\n          } else {\n            this.serverErrorMsg = true;\n            this.successMessage = false;\n            this.errMsg = data.message;\n            setTimeout(()=>{\n              this.handleErrors();\n            },3000)\n          }\n        })\n      }catch(err){\n        console.log(err);\n      }\n\n    }\n\n    validationMessage = {\n      'value': [\n        { type: 'required', message: 'Amount is Required' },\n        { type: 'maxlength', message: 'Amount is too Large' },\n        { type: 'pattern', message: 'Amount not valid' },\n      ],\n      'paymentHeadId':[\n          { type: 'required', message: 'Payment Head is Required' },\n      ],\n      'type': [\n        { type: 'required', message: 'Type  is Required' },\n      ],\n  }\n\n  handleErrors(){\n    this.serverErrorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n    demo(){\n      if((document.getElementById('typeValue') as HTMLInputElement).value != 'Fixed') {\n          this.inputValue = (document.getElementById('percentValue') as HTMLInputElement).value;\n      if(this.inputValue >0 && this.inputValue <= 100 ){\n          this.percentErrorMsg = '';\n          this.errorMsg = '';\n      } else if(this.inputValue.length == 0){\n          this.percentErrorMsg = 'Percent is Required';\n          this.errorMsg = '';\n      } else {\n          this.percentErrorMsg = '';\n          this.errorMsg = 'Enter value is not valid';\n      }\n  }\n      }\n\n    // Check For Validation When User Switch The Type\n  switchTypeValidation(inputValue:Number){\n    if(inputValue >0 && inputValue <= 100 ){\n        this.percentErrorMsg = '';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length == 0){\n        this.percentErrorMsg = 'Percent is Required';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length > 6) {\n        this.percentErrorMsg = 'Percent Value is too Large';\n        this.errorMsg = '';\n    } else {\n        this.percentErrorMsg = '';\n        this.errorMsg = 'Enter value is not valid';\n    }\n}\n\n// Fixed Payment Heads\nfixedPaymentHeads(){\n  try {\n      this.api.fixedPaymentHeads(this.gradeRuleId).subscribe((data) => {\n          if(data.status === 'success'){\n             this.fixedPaymentHeadsList = data.data;\n          }\n      })\n  } catch (error) {\n      console.log(error);\n  }\n}\n\npercentOf(value){\n  this.percentOfValue = value;\n}\n\n}","<div class=\"card card-user\">\n   <div class=\"card-header\">\n      <h2 class=\"card-title text-center\">Manage Payment Heads Details</h2>\n   </div>\n   <div class=\"card-body\">\n       <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"serverErrorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                </p>\n            </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"managePaymentForm\" (ngSubmit)=\"managePaymentData()\"\n    novalidate>\n        <div [formGroup]=\"managePaymentForm.get('paymentHead')\">\n            <label class=\"col-sm-6 control-label\"><b>Payment Head:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n            <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" formControlName=\"paymentHeadId\">\n                <option ng-selected=\"true\" value=\"\" disabled>----------Select Payment Head Name----------</option>\n                <option *ngFor=\"let list of paymentHeadDataList\" [ngValue]=\"list._id\" selected>{{ list.title }}</option>\n            </select>\n            <div *ngFor=\"let validation of validationMessage.paymentHeadId\">\n                <div style=\"color: red;margin-left: 1%;\"\n                    *ngIf=\"managePaymentForm.get('paymentHead.paymentHeadId').hasError(validation.type) && (managePaymentForm.get('paymentHead.paymentHeadId').dirty || managePaymentForm.get('paymentHead.paymentHeadId').touched)\"\n                    style=\"color: red;margin-left: 1%;\">\n                    {{ validation.message }}\n                </div>\n            </div>\n        <br>\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <label class=\"col-sm-8 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"typeValue\" (change)=\"check($event)\" formControlName=\"type\">\n                            <option ng-selected=\"true\" value=\"\" disabled>----------Select Grade Type----------</option>\n                            <option class=\"dropdown-item\"  *ngFor='let type of gradeType' >{{ type }}</option>\n                    </select>\n                  <div *ngFor=\"let validation of validationMessage.type\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"managePaymentForm.get('paymentHead.type').hasError(validation.type) && (managePaymentForm.get('paymentHead.type').dirty || managePaymentForm.get('paymentHead.type').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"col-md-4\" *ngIf=\"Fixed\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Amount:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"text\" id=\"value\" placeholder=\"Enter Amount\" formControlName=\"value\" required >\n                        </div>\n                    </div>\n                    <div *ngFor=\"let validation of validationMessage.value\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"managePaymentForm.get('paymentHead.value').hasError(validation.type) && (managePaymentForm.get('paymentHead.value').dirty || managePaymentForm.get('paymentHead.value').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Percent:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"number\" id=\"percentValue\" (input)=\"demo()\" placeholder=\"Enter Percent\" formControlName=\"value\" required>\n                        </div>\n                    </div>\n                    <div><p style=\"color:red;\">{{percentErrorMsg}}</p></div>\n                    <div><p style=\"color:red;\"> {{ errorMsg }}</p></div>\n\n                </div>\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Percent Of:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" (change)=\"percentOf($event.target.value)\">\n                            <option ng-selected=\"true\" value=\"\" disabled>----Select Percent Of----</option>\n                            <option *ngFor=\"let fixedHeads of fixedPaymentHeadsList\" [value]=\"fixedHeads.value\" selected>{{ fixedHeads.name }}</option>\n                        </select>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n        <button type=\"submit\" class=\"btn btn-success\"[disabled]='managePaymentForm.invalid || errorMsg || percentErrorMsg || permissionInfo.search(\"Create PaymentHeads\") === -1'>Submit</button>\n        <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-managePaymentHeads/{{gradeRuleId}}\">Cancel</button>\n    </form>\n</div>\n</div>\n\n","import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-graderule',\n  templateUrl: 'update-graderule.component.html'\n})\n\nexport class UpdateGraderuleComponent implements OnInit {\n\n  graderuleUpdateForm: any;\n  gradeRuleId:any;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  errorMsg: boolean = false;\n  permissionInfo: any;\n\nconstructor(private api:GraderuleApiService, private fb:FormBuilder,private route:ActivatedRoute,private ngZone: NgZone,private router:Router,\n  private util: UtilitiesService){\n    this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n    this.util.moduleExists(this.gradeRuleId,'GradeRule').subscribe((data)=>{\n      if(data.status === 'success'){\n        if(!data.data){\n          this.router.navigateByUrl('/pages/graderule/list-graderule');\n        }\n      }\n    })\n  }\n\n  ngOnInit() {\n    this.addMemberValidation();\n    this.existingData();\n    this.permissionInfo = this.util.permissionRoleInfo;\n        if(this.permissionInfo.search('Edit GradeRule') === -1){\n          this.graderuleUpdateForm.disable();\n        }\n  }\n\n  validationMessage = {\n    'title': [\n      { type: 'required', message: 'Title is required' },\n    ],\n  }\n\n  addMemberValidation() {\n    this.graderuleUpdateForm = this.fb.group({\n      title: new FormControl('',Validators.required),\n    })\n  }\n\n  existingData(){\n    this.api.existingData(this.gradeRuleId).subscribe(data=>{\n        this.graderuleUpdateForm = this.fb.group({\n          title: new FormControl(data.data.title,Validators.required)\n        })\n    })\n  }\n\n  graderuleUpdateData(){\n    try{\n      let cleanUpdateGradeRuleForm = this.util.cleanFormLevelOne(this.graderuleUpdateForm);\n      this.api.updateGadeRule(cleanUpdateGradeRuleForm.value,this.gradeRuleId).subscribe(data=>{\n        if(data.status === 'success') {\n          this.successMessage = true ;\n          this.errorMsg = false ;\n          this.successMsg = data.message;\n          setTimeout(() => {\n            this.handleErrors();\n            this.ngZone.run(()=>this.router.navigateByUrl('/pages/graderule/list-graderule'));\n          },2000)\n        } else {\n          this.successMessage = false ;\n          this.errorMsg = true ;\n          this.errMsg = data.message;\n          setTimeout(()=>{\n            this.handleErrors();\n          },3000)\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n  handleErrors(){\n    this.errorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\n\n}","<div class=\"card card-user\">\n    <div class=\"card-header\">\n        <h2 class=\"card-title text-center\">Update Grade Rule Details</h2>\n    </div>\n    <div class=\"card-body\">\n        <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-danger\" *ngIf=\"errorMsg\">\n            <strong>{{ errMsg }}</strong>\n         </p>\n      </div>\n      <div class=\"col-sm-offset-2\">\n         <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n            <strong>{{ successMsg }}</strong>\n         </p>\n      </div>\n        <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"graderuleUpdateForm\" (ngSubmit)=\"graderuleUpdateData()\"\n        novalidate>\n            <div class=\"form-group\">\n                <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                <div class=\"col-sm-offset-2\">\n                    <input class=\"form-control\" type=\"text\" placeholder=\"Enter Title\" formControlName=\"title\"\n                    >\n                    <div *ngFor=\"let validation of validationMessage.title\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"graderuleUpdateForm.get('title').hasError(validation.type) && (graderuleUpdateForm.get('title').dirty || graderuleUpdateForm.get('title').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"graderuleUpdateForm.invalid || this.permissionInfo.search('Edit GradeRule') === -1\">Update</button>\n            <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-graderule\">Cancel</button>\n        </form>\n    </div>\n</div>","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../../graderule-service/graderule-api.service';\nimport Swal from 'sweetalert2';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n\n@Component ({\n    selector: 'app-list-managePaymentHeads',\n    templateUrl: './list-managePaymentHeads.component.html',\n    styleUrls: ['./list-managePaymentHeads.component.scss']\n})\n\nexport class ListManagePaymentHeadsComponent implements OnInit, OnDestroy{\n  permissionInfo: any;\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n    showCard = {};\n    leaveListData = new Array();\n    companyShowData = [];\n    gradeRuleId;\n    dataValue:any [];\n    paymentHeadId;\n    companyName: String;\n    gradeRuleTitle: any;\n\n    constructor(private api:GraderuleApiService,\n      private fb:FormBuilder,\n      private route:ActivatedRoute,\n      private ngZone: NgZone,\n      private router:Router,\n      private util: UtilitiesService\n      ){}\n\n    ngOnInit(){\n        this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n        this.listGradeRule();\n        (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n        this.permissionInfo = this.util.permissionRoleInfo;\n    }\n\n    listGradeRule(){\n        this.api.existingData(this.gradeRuleId).subscribe(data=>{\n            this.gradeRuleTitle = data.data.title\n            this.dataValue = data.data.paymentHeads;\n        })\n    }\n\n    showConfirmationMessage(paymentHeadsId:string){\n        const swalWithBootstrapButtons = Swal.mixin({\n          customClass: {\n            confirmButton: 'btn btn-success',\n            cancelButton: 'btn btn-danger'\n          },\n          buttonsStyling: false\n        })\n        swalWithBootstrapButtons.fire({\n          title: 'Are you sure?',\n          text: \"You want to delete it\",\n          type: 'warning',\n          showCancelButton: true,\n          confirmButtonText: 'Yes',\n          cancelButtonText: 'No',\n          reverseButtons: true\n        }).then((result) => {\n          if (result.value) {\n            this.api.removeGradeData(paymentHeadsId,this.gradeRuleId).subscribe((data)=>{\n            swalWithBootstrapButtons.fire(\n              'Deleted!',\n              data.message,\n              'success'\n            )\n            this.listGradeRule();\n          })\n          } else if (\n            result.dismiss === Swal.DismissReason.cancel\n          ) {\n            swalWithBootstrapButtons.fire(\n              'Cancelled',\n              'Your list data safe',\n              'error'\n            )\n          }\n        })\n    }\n\n}","<div class=\"card\">\n    <div class=\"card-header\">\n        <h2 style=\"text-align: center\">Payment Heads List</h2>\n\n        <button [disabled]=\"permissionInfo.search('Create PaymentHeads') === -1\"\n        class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/graderule/add-managePaymentHeads/{{gradeRuleId}}\"\n            style=\"float: right;\"><i class=\"fa fa-plus-square\"></i>&nbsp; Add Payment Heads</button>\n\n            <button class=\"btn btn-primary\" type=\"button\" routerLink=\"/pages/graderule/list-graderule\"\n            style=\"float: right;\"><i class=\"fa fa-arrow-left\"></i></button>\n\n            <h4>{{ gradeRuleTitle }}</h4>\n    </div>\n\n    <table class=\"table\" style=\"text-align: center;\">\n      <thead class=\" text-primary\">\n          <tr>\n          <th>S.No</th>\n          <th>Title</th>\n          <th>Amount/Rate</th>\n          <th>Category</th>\n          <th>Action</th>\n          </tr>\n      </thead>\n      <tbody *ngFor=\"let list of dataValue; let i = index\">\n          <tr >\n          <td><b>{{i+1}}.</b></td>\n          <td> {{list.paymentHeadName}} </td>\n          <td>{{list.value}}</td>\n          <td >{{list.type}}</td>\n          <td>\n              <a [class.disabled]=\"permissionInfo.search('Edit PaymentHeads') === -1\"\n              routerLink=\"/pages/graderule/update-managePaymentHeads/{{list._id}}/{{gradeRuleId}}\" class=\"btn btn-primary\"><i class=\"fa fa-pencil-square-o\"></i></a>&nbsp;\n\n              <button [disabled]=\"permissionInfo.search('Delete PaymentHeads') === -1\"\n              class=\"btn btn-danger\" type=\"button\"(click)=\"showConfirmationMessage(list._id)\"><i class=\"fa fa-trash\"></i>\n              </button>&nbsp;\n          </td>\n          </tr>\n          </tbody>\n    </table>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GraderuleRoutingModule } from './graderule-routing.module';\nimport { GraderuleComponent } from './graderule.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { ListGraderuleComponent } from './list-graderule/list-graderule.component';\nimport { AddGraderuleComponent } from './add-graderule/add-graderule.component';\nimport { UpdateGraderuleComponent } from './update-graderule/update-graderule.component';\nimport { ListManagePaymentHeadsComponent } from './managePaymentHeads/list-managePaymentHeads/list-managePaymentHeads.component';\nimport { AddManagePaymentHeadsComponent } from './managePaymentHeads/add-managePaymentHeads/add-managePaymentHeads.component';\nimport {UpdateManagePaymentHeadsComponent } from './managePaymentHeads/update-managePaymentHeads/update-managePaymentHeads.component';\n\n\n@NgModule({\n  declarations: [\n    GraderuleComponent,\n    ListGraderuleComponent,\n    AddGraderuleComponent,\n    UpdateGraderuleComponent,\n    ListManagePaymentHeadsComponent,\n    AddManagePaymentHeadsComponent,UpdateManagePaymentHeadsComponent\n  ],\n  \n  imports: [\n    CommonModule,\n    GraderuleRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule    \n  ]\n})\n\nexport class GraderuleModule { }\n","import { Component, NgZone,OnInit } from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { GraderuleApiService } from '../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\ndeclare const $: any;\n\n@Component({\n    selector: 'app-add-graderule',\n    templateUrl: './add-graderule.component.html'\n})\n\nexport class AddGraderuleComponent implements OnInit {\n\n    paymentHeadDataList: any;\n    graderuleForm: any;\n    Fixed: Boolean = false;\n    Percent: Boolean = false;\n    inputValue;\n    errorMsg: String;\n    percentErrorMsg = 'Percent is Required';\n    gradeType = ['Fixed','Percent']\n    successMsg: String;\n    successMessage: boolean = false;\n    errMsg: String;\n    serverErrorMsg: boolean = false;\n    fixedPaymentHeadsList = [];\n    percentOfValue = 'basicSalary';\n\n\n\n    validationMessage = {\n        'title': [\n          { type: 'required', message: 'Title is required' },\n        ],\n        'value': [\n          { type: 'required', message: 'Amount is required' },\n          { type: 'maxlength', message: 'Amount is too Large' },\n          { type: 'pattern', message: 'Amount not valid' },\n        ],\n        'paymentHeadId':[\n            { type: 'required', message: 'Payment Head is required' },\n        ],\n        'type': [\n          { type: 'required', message: 'Type  is required' },\n        ],\n    }\n    permissionInfo: any;\n\n    constructor(private api:GraderuleApiService,private fb:FormBuilder,public router:Router,\n        private util: UtilitiesService){\n            this.isListAvaliable();\n        }\n\n    ngOnInit() {\n        this.paymentHeadList();\n        this.addMemberValidation();\n        this.fixedPaymentHeads();\n        this.permissionInfo = this.util.permissionRoleInfo;\n        if(this.permissionInfo.search('Create GradeRule') === -1){\n          this.graderuleForm.disable();\n        }\n    }\n\n    check(name){\n        let dynamicValidation = {\n            fixed: [\n              Validators.required,\n              Validators.maxLength(8),\n              Validators.pattern('^[0-9]*$')\n            ],\n            percent: [\n              Validators.required,\n              Validators.maxLength(8),\n              Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)\n            ]\n          }\n\n        let gradeType = name.target.options[name.target.options.selectedIndex].text;\n        if(gradeType == 'Fixed')\n        {\n            this.Fixed = true;\n            this.Percent = false;\n            this.errorMsg = '';\n            this.percentErrorMsg = '';\n\n            this.graderuleForm.get('paymentHead.value').setValidators(dynamicValidation['fixed']);\n            this.graderuleForm.get('paymentHead.value').updateValueAndValidity();\n\n        } else if (gradeType == 'Percent') {\n            this.Percent = true;\n            this.Fixed = false;\n            if(this.graderuleForm.get('paymentHead.value').value){\n                this.switchTypeValidation(this.graderuleForm.get('paymentHead.value').value);\n            }\n\n            this.graderuleForm.get('paymentHead.value').setValidators(dynamicValidation['percent']);\n            this.graderuleForm.get('paymentHead.value').updateValueAndValidity();\n        }\n    }\n\n    addMemberValidation() {\n        this.graderuleForm = this.fb.group({\n            title: new FormControl('',Validators.required),\n            paymentHead: new FormGroup({\n                paymentHeadId: new FormControl('',Validators.required),\n                type: new FormControl('',Validators.required),\n                value: new FormControl('',Validators.compose([\n                    Validators.required,\n                    Validators.maxLength(8),\n                    Validators.pattern('^[0-9]*$'),])),\n            })\n        })\n    }\n\n    paymentHeadList(){\n        this.api.getPaymentHeadData().subscribe(data=>{\n            this.paymentHeadDataList = data.data;\n        })\n    }\n\n    graderuleData(){\n        try{\n            this.api.getGradeRule(this.graderuleForm.value, this.percentOfValue).subscribe(data=>{\n                if(data.status === 'success'){\n                    this.successMessage = true ;\n                    this.serverErrorMsg = false ;\n                    this.successMsg = data.message;\n                    setTimeout(() => {\n                        this.handleErrors();\n                        this.router.navigateByUrl(\"pages/graderule/list-graderule\");\n                    },2000)\n                } else {\n                    this.serverErrorMsg = true;\n                    this.successMessage = false;\n                    this.errMsg = data.message;\n                    setTimeout(()=>{\n                        this.handleErrors();\n                    },3000)\n                }\n            })\n        } catch(err){\n            console.log(err);\n        }\n\n    }\n\n    demo(){\n        if((document.getElementById('typeValue') as HTMLInputElement).value != 'Fixed') {\n            this.inputValue = (document.getElementById('percentValue') as HTMLInputElement).value;\n        if(this.inputValue >0 && this.inputValue <= 100 ){\n            this.percentErrorMsg = '';\n            this.errorMsg = '';\n        } else if(this.inputValue.length == 0){\n            this.percentErrorMsg = 'Percent is Required';\n            this.errorMsg = '';\n        } else if(this.inputValue.length >6){\n            this.percentErrorMsg = 'Percent Value is too Large';\n            this.errorMsg = '';\n        } else {\n            this.percentErrorMsg = '';\n            this.errorMsg = 'Enter value is not valid';\n        }\n    }\n        }\n\n// Check For Validation When User Switch The Type\n  switchTypeValidation(inputValue:Number){\n    if(inputValue >0 && inputValue <= 100 ){\n        this.percentErrorMsg = '';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length == 0){\n        this.percentErrorMsg = 'Percent is Required';\n        this.errorMsg = '';\n    } else if((inputValue).toString().length > 6) {\n        this.percentErrorMsg = 'Percent Value is too Large';\n        this.errorMsg = '';\n    } else {\n        this.percentErrorMsg = '';\n        this.errorMsg = 'Enter value is not valid';\n    }\n}\n\nhandleErrors(){\n    this.serverErrorMsg = false;\n    this.successMessage = false;\n    this.errMsg = '';\n    this.successMsg = '';\n}\nisListAvaliable(){\n    try{\n      this.api.getGradeRuleList().subscribe((data) =>{\n        if(data.status === 'success'){\n          if(data.data.length > 0 && this.util.gradeRuleStatus !== 1){\n            this.router.navigateByUrl(\"/pages/graderule/list-graderule\");\n            this.util.gradeRuleStatus = 0;\n          }\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  // Fixed Payment Heads\n  fixedPaymentHeads(){\n      try {\n          this.api.fixedPaymentHeads(undefined).subscribe((data) => {\n              if(data.status === 'success'){\n                 this.fixedPaymentHeadsList = data.data;\n              }\n          })\n      } catch (error) {\n          console.log(error);\n      }\n  }\n\n}\n\n\n","<div class=\"card card-user\">\n        <div class=\"card-header\">\n            <h2 class=\"card-title text-center\">Grade Rule Details</h2>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-danger\" *ngIf=\"serverErrorMsg\">\n                    <strong>{{ errMsg }}</strong>\n                </p>\n            </div>\n            <div class=\"col-sm-offset-2\">\n                <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                    <strong>{{ successMsg }}</strong>\n                </p>\n            </div>\n            <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"graderuleForm\" (ngSubmit)=\"graderuleData()\"\n            novalidate>\n                <div class=\"cols\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-6 control-label\"><b>Title:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <div class=\"col-sm-offset-2\">\n                        <input class=\"form-control\" type=\"text\" id=\"title\" placeholder=\"Enter Title\" formControlName=\"title\"\n                        required>\n                        <div *ngFor=\"let validation of validationMessage.title\">\n                            <div style=\"color: red;margin-left: 1%;\"\n                                *ngIf=\"graderuleForm.get('title').hasError(validation.type) && (graderuleForm.get('title').dirty || graderuleForm.get('title').touched)\"\n                                style=\"color: red;margin-left: 1%;\">\n                                {{ validation.message }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                <div [formGroup]=\"graderuleForm.get('paymentHead')\">\n                    <label class=\"col-sm-6 control-label\"><b>Payment Head:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" (change)=\"check($event.target)\" formControlName=\"paymentHeadId\">\n                        <option ng-selected=\"true\" value=\"\" disabled>----------Select Payment Head Name----------</option>\n                        <option *ngFor=\"let list of paymentHeadDataList\" [ngValue]=\"list._id\" selected>{{ list.title }}</option>\n                    </select>\n                    <div *ngFor=\"let validation of validationMessage.paymentHeadId\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"graderuleForm.get('paymentHead.paymentHeadId').hasError(validation.type) && (graderuleForm.get('paymentHead.paymentHeadId').dirty || graderuleForm.get('paymentHead.paymentHeadId').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                <br>\n                    <div class=\"row\">\n                        <div class=\"col-md-4\">\n                            <label class=\"col-sm-4 control-label\"><b>Type:&nbsp;</b></label>\n                            <select class=\"dropdown dropdown-toggle form-control\" id=\"typeValue\" (change)=\"check($event)\" formControlName=\"type\">\n                                <option ng-selected=\"true\" value=\"\" disabled>----------Select Grade Type----------</option>\n                                <option class=\"dropdown-item\"  *ngFor='let type of gradeType' >{{ type }}</option>\n\n                            </select>\n                            <div *ngFor=\"let validation of validationMessage.type\">\n                                <div style=\"color: red;margin-left: 1%;\"\n                                    *ngIf=\"graderuleForm.get('paymentHead.type').hasError(validation.type) && (graderuleForm.get('paymentHead.type').dirty || graderuleForm.get('paymentHead.type').touched)\"\n                                    style=\"color: red;margin-left: 1%;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"col-md-4\" *ngIf=\"Fixed\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Enter Amount:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"text\" id=\"value\" placeholder=\"Enter Amount\" formControlName=\"value\" required >\n                                </div>\n                            </div>\n                            <div *ngFor=\"let validation of validationMessage.value\">\n                                <div style=\"color: red;margin-left: 1%;\"\n                                    *ngIf=\"graderuleForm.get('paymentHead.value').hasError(validation.type) && (graderuleForm.get('paymentHead.value').dirty || graderuleForm.get('paymentHead.value').touched)\"\n                                    style=\"color: red;margin-left: 1%;\">\n                                    {{ validation.message }}\n                                </div>\n                            </div>\n                        </div>\n\n\n                        <div class=\"col-md-4\" *ngIf=\"Percent\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Enter Percent:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                <div class=\"col-sm-offset-2\">\n                                    <input class=\"form-control\" type=\"number\" id=\"percentValue\" (input)=\"demo()\" placeholder=\"Enter Percent\" formControlName=\"value\" required>\n                                </div>\n                            </div>\n                            <div><p style=\"color:red;\">{{percentErrorMsg}}</p></div>\n                            <div><p style=\"color:red;\"> {{ errorMsg }}</p></div>\n                        </div>\n\n                        <div class=\"col-md-4\" *ngIf=\"Percent\">\n                            <div class=\"form-group\">\n                                <label class=\"col-sm-6 control-label\"><b>Percent Of:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                                <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\">\n                                    <option ng-selected=\"true\" value=\"\" disabled>----Select Percent Of----</option>\n                                    <option *ngFor=\"let fixedHeads of fixedPaymentHeadsList\" [ngValue]=\"fixedHeads.value\" selected>{{ fixedHeads.name }}</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <button type=\"submit\" class=\"btn btn-success\"  [disabled]=\"graderuleForm.invalid || errorMsg || percentErrorMsg || permissionInfo.search('Create GradeRule') === -1\" (click)=\"demo()\">Submit</button>\n                <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-graderule\">Cancel</button>\n            </form>\n        </div>\n    </div>","import { Component, OnInit, NgZone, OnDestroy} from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { GraderuleApiService } from '../../graderule-service/graderule-api.service';\nimport { UtilitiesService } from 'src/app/utilities/utilities.service';\n\n@Component({\n  selector: 'app-update-managePaymentHeads',\n  templateUrl: 'update-managePaymentHeads.component.html'\n})\n\nexport class UpdateManagePaymentHeadsComponent implements OnInit,OnDestroy {\n  permissionInfo: any;\n  fixedPaymentHeadsList: any;\n  percentOfValue: any;\n  routePercentOfValue: any;\n  ngOnDestroy(): void {\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).removeAttribute('disabled');\n  }\n\n  gradeRuleId;\n  updateManagePaymentForm: any;\n  paymentHeadDataList: any;\n  paymentHeadId;\n  existingGradeRule: any;\n  existingPaymentHeadId: any;\n  existingPaymentHeadName: any;\n  gradeType = ['Fixed','Percent'];\n  Fixed: Boolean = false;\n  Percent: Boolean = false;\n  percentErrorMsg: String;\n  errorMsg: String;\n  inputValue;\n  successMsg: String;\n  successMessage: boolean = false;\n  errMsg: String;\n  serverErrorMsg: boolean = false;\n\n\n\n  constructor(\n    public fb: FormBuilder,private api:GraderuleApiService,\n    private router: Router, private ngZone: NgZone, private route: ActivatedRoute,\n    private util: UtilitiesService) { }\n\n  ngOnInit() {\n    this.paymentHeadId = this.route.snapshot.paramMap.get(\"paymentHeadId\");\n    this.gradeRuleId = this.route.snapshot.paramMap.get(\"gradeRuleId\");\n    this.paymentHeadList();\n    this.addMemberValidation();\n    this.existing();\n    this.fixedPaymentHeadList();\n    (document.getElementById('headerCompanyDropDown')as HTMLInputElement).setAttribute('disabled','disabled');\n    this.permissionInfo = this.util.permissionRoleInfo;\n      if(this.permissionInfo.search('Edit PaymentHeads') === -1){\n        this.updateManagePaymentForm.disable();\n      }\n  }\n\n  existing(){\n    try{\n      this.api.existingData(this.gradeRuleId).subscribe(data=>{\n        if(data.status === 'success'){\n          this.existingGradeRule = data.data.paymentHeads;\n          this.existingGradeRule.forEach((items) => {\n            if(items._id == this.paymentHeadId){\n              if(items.type === 'Percent'){\n                this.Percent = true;\n                this.Fixed = false;\n                this.percentOfValue = items.percentOfValue;\n                this.percentOfFunction(items.percentOfValue);\n                this.errorMsg = '';\n                this.percentErrorMsg = '';\n                this.updateManagePaymentForm = this.fb.group({\n                  paymentHead: new FormGroup({\n                    paymentHeadId: new FormControl(items.paymentHeadId),\n                    type: new FormControl(items.type),\n                    value: new FormControl(items.value, Validators.compose([Validators.required,\n                      Validators.maxLength(8),\n                      Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/),])),\n                  })\n                })\n              } else {\n                this.Percent = false;\n                this.Fixed = true;\n                this.updateManagePaymentForm = this.fb.group({\n                  paymentHead: new FormGroup({\n                    paymentHeadId: new FormControl(items.paymentHeadId),\n                    type: new FormControl(items.type),\n                    value: new FormControl(items.value, Validators.compose([Validators.required,\n                      Validators.maxLength(8),\n                      Validators.pattern('^[0-9]*$'),])),\n                  })\n                })\n              }\n              this.existingPaymentHeadId = items._id;\n              this.existingPaymentHeadName = items.paymentHeadName\n            } else {\n              return;\n            }\n          })\n        }\n      })\n    }catch(err){\n      console.log(err);\n    }\n  }\n\n  paymentHeadList(){\n    this.api.getPaymentHeadData().subscribe(data=>{\n      this.paymentHeadDataList = data.data;\n    })\n  }\n\n  // Update Payment Heads\n  updatePaymentHeads(){\n    try{\n\n      this.api.updatePaymentHeads(this.updateManagePaymentForm.value,this.paymentHeadId,this.gradeRuleId,this.percentOfValue,this.Percent).subscribe(data => {\n        if(data.status === 'success'){\n          this.successMessage = true ;\n          this.serverErrorMsg = false ;\n          this.successMsg = data.message;\n          setTimeout(() => {\n              this.router.navigateByUrl(\"pages/graderule/list-graderule\");\n          },1000)\n        } else {\n          this.serverErrorMsg = true;\n          this.successMessage = false;\n          this.errMsg = data.message;\n        }\n      })\n    } catch(err){\n      console.log(err);\n    }\n  }\n\n  addMemberValidation() {\n    try{\n      this.updateManagePaymentForm = this.fb.group({\n        paymentHead: new FormGroup({\n          paymentHeadId: new FormControl('',Validators.required),\n          type: new FormControl('',Validators.required),\n          value: new FormControl('',Validators.compose([Validators.required,\n            Validators.maxLength(8),\n            Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/),])),\n        })\n      })\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n  check(name){\n    let dynamicValidation = {\n      fixed: [\n        Validators.required,\n        Validators.maxLength(8),\n        Validators.pattern('^[0-9]*$')\n      ],\n      percent: [\n        Validators.required,\n        Validators.maxLength(8),\n        Validators.pattern(/^\\d{0,2}(?:\\.\\d{0,2})?$/)\n      ]\n    }\n    let gradeType = name.target.options[name.target.options.selectedIndex].text;\n    if(gradeType == 'Fixed')\n    {\n        this.Fixed = true;\n        this.Percent = false;\n        this.errorMsg = '';\n        this.percentErrorMsg = '';\n\n        this.updateManagePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['fixed']);\n        this.updateManagePaymentForm.get('paymentHead.value').updateValueAndValidity();\n\n    } else if (gradeType == 'Percent') {\n        this.Percent = true;\n        this.Fixed = false;\n        if(this.updateManagePaymentForm.get('paymentHead.value').value){\n            this.switchTypeValidation(this.updateManagePaymentForm.get('paymentHead.value').value);\n        }\n        this.updateManagePaymentForm.get('paymentHead.value').setValidators(dynamicValidation['percent']);\n        this.updateManagePaymentForm.get('paymentHead.value').updateValueAndValidity();\n    }\n}\n\ndemo(){\n  if((document.getElementById('typeValue') as HTMLInputElement).value != 'Fixed') {\n      this.inputValue = (document.getElementById('percentValue') as HTMLInputElement).value;\n  if(this.inputValue >0 && this.inputValue <= 100 ){\n      this.percentErrorMsg = '';\n      this.errorMsg = '';\n  } else if(this.inputValue.length == 0){\n      this.percentErrorMsg = 'Percent is Required';\n      this.errorMsg = '';\n  } else if(this.inputValue.length >6){\n      this.percentErrorMsg = 'Percent Value is too Large';\n      this.errorMsg = '';\n  } else {\n      this.percentErrorMsg = '';\n      this.errorMsg = 'Enter value is not valid';\n  }\n}\n  }\n\n// Check For Validation When User Switch The Type\nswitchTypeValidation(inputValue:Number){\n  if(inputValue >0 && inputValue <= 100 ){\n      this.percentErrorMsg = '';\n      this.errorMsg = '';\n  } else if((inputValue).toString().length == 0){\n      this.percentErrorMsg = 'Percent is Required';\n      this.errorMsg = '';\n  } else if((inputValue).toString().length > 6) {\n      this.percentErrorMsg = 'Percent Value is too Large';\n      this.errorMsg = '';\n  } else {\n      this.percentErrorMsg = '';\n      this.errorMsg = 'Enter value is not valid';\n  }\n}\n\nvalidationMessage = {\n  'value': [\n    { type: 'required', message: 'Amount is Required' },\n    { type: 'maxlength', message: 'Amount is too Large' },\n    { type: 'pattern', message: 'Amount not valid' },\n  ],\n  'paymentHeadId':[\n      { type: 'required', message: 'Payment Head is Required' },\n  ],\n  'type': [\n    { type: 'required', message: 'Type  is Required' },\n  ],\n}\n\nfixedPaymentHeadList(){\n  this.api.fixedPaymentHeads(this.gradeRuleId).subscribe((data) => {\n    if(data.status === 'success'){\n       this.fixedPaymentHeadsList = data.data;\n    }\n})\n}\n\npercentOf(value){\n  this.percentOfValue = value;\n}\n\npercentOfFunction = function percentOfFunction(percentValue) {\n  setTimeout(() => {\n    (document.getElementById('percentOfValue') as HTMLInputElement).value = percentValue;\n  },200);\n}\n\n\n}","<div class=\"card card-user\">\n      <div class=\"card-header\">\n         <h2 class=\"card-title text-center\">Update Payment Heads</h2>\n      </div>\n      <div class=\"card-body\">\n            <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-danger\" *ngIf=\"serverErrorMsg\">\n                        <strong>{{ errMsg }}</strong>\n                    </p>\n                </div>\n                <div class=\"col-sm-offset-2\">\n                    <p class=\"alert alert-success\" *ngIf=\"successMessage\">\n                        <strong>{{ successMsg }}</strong>\n                    </p>\n                </div>\n    <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"updateManagePaymentForm\" (ngSubmit)=\"updatePaymentHeads()\"\n       novalidate>\n           <div [formGroup]=\"updateManagePaymentForm.get('paymentHead')\">\n               <label class=\"col-sm-6 control-label\"><b>Payment Head:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n               <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" formControlName=\"paymentHeadId\">\n                   <option *ngFor=\"let list of paymentHeadDataList\" [ngValue]=\"list._id\" selected>{{ list.title }}</option>\n               </select>\n               <div *ngFor=\"let validation of validationMessage.paymentHeadId\">\n                   <div style=\"color: red;margin-left: 1%;\"\n                       *ngIf=\"updateManagePaymentForm.get('paymentHead.paymentHeadId').hasError(validation.type) && (updateManagePaymentForm.get('paymentHead.paymentHeadId').dirty || updateManagePaymentForm.get('paymentHead.paymentHeadId').touched)\"\n                       style=\"color: red;margin-left: 1%;\">\n                       {{ validation.message }}\n                   </div>\n               </div>\n           <br>\n           <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <label class=\"col-sm-8 control-label\"><b>Type:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                    <select class=\"dropdown dropdown-toggle form-control\" id=\"typeValue\" (change)=\"check($event)\" formControlName=\"type\">\n                        <!-- <option ng-selected=\"true\" value=\"\" disabled>----------Select Grade Type----------</option> -->\n                        <option class=\"dropdown-item\"  *ngFor='let type of gradeType' >{{ type }}</option>\n\n                    </select>\n                    <div *ngFor=\"let validation of validationMessage.type\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"updateManagePaymentForm.get('paymentHead.type').hasError(validation.type) && (updateManagePaymentForm.get('paymentHead.type').dirty || updateManagePaymentForm.get('paymentHead.type').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"col-md-4\" *ngIf=\"Fixed\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Amount:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"text\" id=\"value\" placeholder=\"Enter Amount\" formControlName=\"value\" >\n                        </div>\n                    </div>\n                    <div *ngFor=\"let validation of validationMessage.value\">\n                        <div style=\"color: red;margin-left: 1%;\"\n                            *ngIf=\"updateManagePaymentForm.get('paymentHead.value').hasError(validation.type) && (updateManagePaymentForm.get('paymentHead.value').dirty || updateManagePaymentForm.get('paymentHead.value').touched)\"\n                            style=\"color: red;margin-left: 1%;\">\n                            {{ validation.message }}\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Enter Percent:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <div class=\"col-sm-offset-2\">\n                            <input class=\"form-control\" type=\"number\" id=\"percentValue\" (input)=\"demo()\" placeholder=\"Enter Percent\" formControlName=\"value\" required>\n                        </div>\n                    </div>\n                    <div><p style=\"color:red;\">{{percentErrorMsg}}</p></div>\n                    <div><p style=\"color:red;\"> {{ errorMsg }}</p></div>\n\n                </div>\n                <div class=\"col-md-4\" *ngIf=\"Percent\">\n                    <div class=\"form-group\">\n                        <label class=\"col-sm-6 control-label\"><b>Percent Of:&nbsp;<span style=\"color: darkred\">*</span></b></label>\n                        <select class=\"dropdown dropdown-toggle form-control\" name=\"Payment Heades\" (change)=\"percentOf($event.target.value)\" id=\"percentOfValue\">\n                            <option ng-selected=\"true\" value=\"\" disabled>----Select Percent Of----</option>\n                            <option *ngFor=\"let fixedHeads of fixedPaymentHeadsList\" [value]=\"fixedHeads.value\" selected>{{ fixedHeads.name }}</option>\n                        </select>\n                    </div>\n\n                </div>\n            </div>\n           </div>\n           <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"updateManagePaymentForm.invalid || errorMsg || percentErrorMsg || permissionInfo.search('Edit PaymentHeads') === -1\">Update</button>\n           <button class=\"btn btn-danger\" routerLink=\"/pages/graderule/list-managePaymentHeads/{{gradeRuleId}}\">Cancel</button>\n   </form>\n   </div>\n   </div>\n\n"]}